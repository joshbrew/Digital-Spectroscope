(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/browserfs/dist/browserfs.js
  var require_browserfs = __commonJS({
    "node_modules/browserfs/dist/browserfs.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports === "object")
          exports["BrowserFS"] = factory();
        else
          root["BrowserFS"] = factory();
      })(exports, function() {
        return (
          /******/
          function(modules) {
            var installedModules = {};
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId])
                return installedModules[moduleId].exports;
              var module2 = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                /******/
              };
              modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
              module2.loaded = true;
              return module2.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.p = "";
            return __webpack_require__(0);
          }([
            /* 0 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(Buffer3, global, module3, process) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                var buffer = __webpack_require__(2);
                var path = __webpack_require__(9);
                var ErrorCode;
                (function(ErrorCode2) {
                  ErrorCode2[ErrorCode2["EPERM"] = 1] = "EPERM";
                  ErrorCode2[ErrorCode2["ENOENT"] = 2] = "ENOENT";
                  ErrorCode2[ErrorCode2["EIO"] = 5] = "EIO";
                  ErrorCode2[ErrorCode2["EBADF"] = 9] = "EBADF";
                  ErrorCode2[ErrorCode2["EACCES"] = 13] = "EACCES";
                  ErrorCode2[ErrorCode2["EBUSY"] = 16] = "EBUSY";
                  ErrorCode2[ErrorCode2["EEXIST"] = 17] = "EEXIST";
                  ErrorCode2[ErrorCode2["ENOTDIR"] = 20] = "ENOTDIR";
                  ErrorCode2[ErrorCode2["EISDIR"] = 21] = "EISDIR";
                  ErrorCode2[ErrorCode2["EINVAL"] = 22] = "EINVAL";
                  ErrorCode2[ErrorCode2["EFBIG"] = 27] = "EFBIG";
                  ErrorCode2[ErrorCode2["ENOSPC"] = 28] = "ENOSPC";
                  ErrorCode2[ErrorCode2["EROFS"] = 30] = "EROFS";
                  ErrorCode2[ErrorCode2["ENOTEMPTY"] = 39] = "ENOTEMPTY";
                  ErrorCode2[ErrorCode2["ENOTSUP"] = 95] = "ENOTSUP";
                })(ErrorCode || (ErrorCode = {}));
                var ErrorStrings = {};
                ErrorStrings[ErrorCode.EPERM] = "Operation not permitted.";
                ErrorStrings[ErrorCode.ENOENT] = "No such file or directory.";
                ErrorStrings[ErrorCode.EIO] = "Input/output error.";
                ErrorStrings[ErrorCode.EBADF] = "Bad file descriptor.";
                ErrorStrings[ErrorCode.EACCES] = "Permission denied.";
                ErrorStrings[ErrorCode.EBUSY] = "Resource busy or locked.";
                ErrorStrings[ErrorCode.EEXIST] = "File exists.";
                ErrorStrings[ErrorCode.ENOTDIR] = "File is not a directory.";
                ErrorStrings[ErrorCode.EISDIR] = "File is a directory.";
                ErrorStrings[ErrorCode.EINVAL] = "Invalid argument.";
                ErrorStrings[ErrorCode.EFBIG] = "File is too big.";
                ErrorStrings[ErrorCode.ENOSPC] = "No space left on disk.";
                ErrorStrings[ErrorCode.EROFS] = "Cannot modify a read-only file system.";
                ErrorStrings[ErrorCode.ENOTEMPTY] = "Directory is not empty.";
                ErrorStrings[ErrorCode.ENOTSUP] = "Operation is not supported.";
                var ApiError = function(Error2) {
                  function ApiError2(type, message, path$$1) {
                    if (message === void 0)
                      message = ErrorStrings[type];
                    Error2.call(this, message);
                    this.syscall = "";
                    this.errno = type;
                    this.code = ErrorCode[type];
                    this.path = path$$1;
                    this.stack = new Error2().stack;
                    this.message = "Error: " + this.code + ": " + message + (this.path ? ", '" + this.path + "'" : "");
                  }
                  if (Error2)
                    ApiError2.__proto__ = Error2;
                  ApiError2.prototype = Object.create(Error2 && Error2.prototype);
                  ApiError2.prototype.constructor = ApiError2;
                  ApiError2.fromJSON = function fromJSON(json) {
                    var err2 = new ApiError2(0);
                    err2.errno = json.errno;
                    err2.code = json.code;
                    err2.path = json.path;
                    err2.stack = json.stack;
                    err2.message = json.message;
                    return err2;
                  };
                  ApiError2.fromBuffer = function fromBuffer(buffer$$1, i3) {
                    if (i3 === void 0)
                      i3 = 0;
                    return ApiError2.fromJSON(JSON.parse(buffer$$1.toString("utf8", i3 + 4, i3 + 4 + buffer$$1.readUInt32LE(i3))));
                  };
                  ApiError2.FileError = function FileError(code, p) {
                    return new ApiError2(code, ErrorStrings[code], p);
                  };
                  ApiError2.ENOENT = function ENOENT(path$$1) {
                    return this.FileError(ErrorCode.ENOENT, path$$1);
                  };
                  ApiError2.EEXIST = function EEXIST(path$$1) {
                    return this.FileError(ErrorCode.EEXIST, path$$1);
                  };
                  ApiError2.EISDIR = function EISDIR(path$$1) {
                    return this.FileError(ErrorCode.EISDIR, path$$1);
                  };
                  ApiError2.ENOTDIR = function ENOTDIR(path$$1) {
                    return this.FileError(ErrorCode.ENOTDIR, path$$1);
                  };
                  ApiError2.EPERM = function EPERM(path$$1) {
                    return this.FileError(ErrorCode.EPERM, path$$1);
                  };
                  ApiError2.ENOTEMPTY = function ENOTEMPTY(path$$1) {
                    return this.FileError(ErrorCode.ENOTEMPTY, path$$1);
                  };
                  ApiError2.prototype.toString = function toString() {
                    return this.message;
                  };
                  ApiError2.prototype.toJSON = function toJSON() {
                    return {
                      errno: this.errno,
                      code: this.code,
                      path: this.path,
                      stack: this.stack,
                      message: this.message
                    };
                  };
                  ApiError2.prototype.writeToBuffer = function writeToBuffer(buffer$$1, i3) {
                    if (buffer$$1 === void 0)
                      buffer$$1 = Buffer3.alloc(this.bufferSize());
                    if (i3 === void 0)
                      i3 = 0;
                    var bytesWritten = buffer$$1.write(JSON.stringify(this.toJSON()), i3 + 4);
                    buffer$$1.writeUInt32LE(bytesWritten, i3);
                    return buffer$$1;
                  };
                  ApiError2.prototype.bufferSize = function bufferSize() {
                    return 4 + Buffer3.byteLength(JSON.stringify(this.toJSON()));
                  };
                  return ApiError2;
                }(Error);
                var api_error = Object.freeze({
                  get ErrorCode() {
                    return ErrorCode;
                  },
                  ErrorStrings,
                  ApiError
                });
                var ActionType;
                (function(ActionType2) {
                  ActionType2[ActionType2["NOP"] = 0] = "NOP";
                  ActionType2[ActionType2["THROW_EXCEPTION"] = 1] = "THROW_EXCEPTION";
                  ActionType2[ActionType2["TRUNCATE_FILE"] = 2] = "TRUNCATE_FILE";
                  ActionType2[ActionType2["CREATE_FILE"] = 3] = "CREATE_FILE";
                })(ActionType || (ActionType = {}));
                var FileFlag = function FileFlag2(flagStr) {
                  this.flagStr = flagStr;
                  if (FileFlag2.validFlagStrs.indexOf(flagStr) < 0) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid flag: " + flagStr);
                  }
                };
                FileFlag.getFileFlag = function getFileFlag(flagStr) {
                  if (FileFlag.flagCache.hasOwnProperty(flagStr)) {
                    return FileFlag.flagCache[flagStr];
                  }
                  return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);
                };
                FileFlag.prototype.getFlagString = function getFlagString() {
                  return this.flagStr;
                };
                FileFlag.prototype.isReadable = function isReadable() {
                  return this.flagStr.indexOf("r") !== -1 || this.flagStr.indexOf("+") !== -1;
                };
                FileFlag.prototype.isWriteable = function isWriteable() {
                  return this.flagStr.indexOf("w") !== -1 || this.flagStr.indexOf("a") !== -1 || this.flagStr.indexOf("+") !== -1;
                };
                FileFlag.prototype.isTruncating = function isTruncating() {
                  return this.flagStr.indexOf("w") !== -1;
                };
                FileFlag.prototype.isAppendable = function isAppendable() {
                  return this.flagStr.indexOf("a") !== -1;
                };
                FileFlag.prototype.isSynchronous = function isSynchronous() {
                  return this.flagStr.indexOf("s") !== -1;
                };
                FileFlag.prototype.isExclusive = function isExclusive() {
                  return this.flagStr.indexOf("x") !== -1;
                };
                FileFlag.prototype.pathExistsAction = function pathExistsAction() {
                  if (this.isExclusive()) {
                    return ActionType.THROW_EXCEPTION;
                  } else if (this.isTruncating()) {
                    return ActionType.TRUNCATE_FILE;
                  } else {
                    return ActionType.NOP;
                  }
                };
                FileFlag.prototype.pathNotExistsAction = function pathNotExistsAction() {
                  if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== "r+") {
                    return ActionType.CREATE_FILE;
                  } else {
                    return ActionType.THROW_EXCEPTION;
                  }
                };
                FileFlag.flagCache = {};
                FileFlag.validFlagStrs = ["r", "r+", "rs", "rs+", "w", "wx", "w+", "wx+", "a", "ax", "a+", "ax+"];
                var FileType;
                (function(FileType2) {
                  FileType2[FileType2["FILE"] = 32768] = "FILE";
                  FileType2[FileType2["DIRECTORY"] = 16384] = "DIRECTORY";
                  FileType2[FileType2["SYMLINK"] = 40960] = "SYMLINK";
                })(FileType || (FileType = {}));
                var Stats = function Stats2(itemType, size, mode, atime, mtime, ctime) {
                  if (atime === void 0)
                    atime = /* @__PURE__ */ new Date();
                  if (mtime === void 0)
                    mtime = /* @__PURE__ */ new Date();
                  if (ctime === void 0)
                    ctime = /* @__PURE__ */ new Date();
                  this.size = size;
                  this.atime = atime;
                  this.mtime = mtime;
                  this.ctime = ctime;
                  this.dev = 0;
                  this.ino = 0;
                  this.rdev = 0;
                  this.nlink = 1;
                  this.blksize = 4096;
                  this.uid = 0;
                  this.gid = 0;
                  this.birthtime = /* @__PURE__ */ new Date(0);
                  this.fileData = null;
                  if (!mode) {
                    switch (itemType) {
                      case FileType.FILE:
                        this.mode = 420;
                        break;
                      case FileType.DIRECTORY:
                      default:
                        this.mode = 511;
                    }
                  } else {
                    this.mode = mode;
                  }
                  this.blocks = Math.ceil(size / 512);
                  if (this.mode < 4096) {
                    this.mode |= itemType;
                  }
                };
                Stats.fromBuffer = function fromBuffer(buffer$$1) {
                  var size = buffer$$1.readUInt32LE(0), mode = buffer$$1.readUInt32LE(4), atime = buffer$$1.readDoubleLE(8), mtime = buffer$$1.readDoubleLE(16), ctime = buffer$$1.readDoubleLE(24);
                  return new Stats(mode & 61440, size, mode & 4095, new Date(atime), new Date(mtime), new Date(ctime));
                };
                Stats.prototype.toBuffer = function toBuffer() {
                  var buffer$$1 = Buffer3.alloc(32);
                  buffer$$1.writeUInt32LE(this.size, 0);
                  buffer$$1.writeUInt32LE(this.mode, 4);
                  buffer$$1.writeDoubleLE(this.atime.getTime(), 8);
                  buffer$$1.writeDoubleLE(this.mtime.getTime(), 16);
                  buffer$$1.writeDoubleLE(this.ctime.getTime(), 24);
                  return buffer$$1;
                };
                Stats.prototype.clone = function clone() {
                  return new Stats(this.mode & 61440, this.size, this.mode & 4095, this.atime, this.mtime, this.ctime);
                };
                Stats.prototype.isFile = function isFile() {
                  return (this.mode & 61440) === FileType.FILE;
                };
                Stats.prototype.isDirectory = function isDirectory() {
                  return (this.mode & 61440) === FileType.DIRECTORY;
                };
                Stats.prototype.isSymbolicLink = function isSymbolicLink() {
                  return (this.mode & 61440) === FileType.SYMLINK;
                };
                Stats.prototype.chmod = function chmod(mode) {
                  this.mode = this.mode & 61440 | mode;
                };
                Stats.prototype.isSocket = function isSocket() {
                  return false;
                };
                Stats.prototype.isBlockDevice = function isBlockDevice() {
                  return false;
                };
                Stats.prototype.isCharacterDevice = function isCharacterDevice() {
                  return false;
                };
                Stats.prototype.isFIFO = function isFIFO() {
                  return false;
                };
                var wrapCb = function(cb, numArgs) {
                  return cb;
                };
                function assertRoot(fs4) {
                  if (fs4) {
                    return fs4;
                  }
                  throw new ApiError(ErrorCode.EIO, "Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)");
                }
                function normalizeMode(mode, def) {
                  switch (typeof mode) {
                    case "number":
                      return mode;
                    case "string":
                      var trueMode = parseInt(mode, 8);
                      if (!isNaN(trueMode)) {
                        return trueMode;
                      }
                      return def;
                    default:
                      return def;
                  }
                }
                function normalizeTime(time) {
                  if (time instanceof Date) {
                    return time;
                  } else if (typeof time === "number") {
                    return new Date(time * 1e3);
                  } else {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid time.");
                  }
                }
                function normalizePath(p) {
                  if (p.indexOf("\0") >= 0) {
                    throw new ApiError(ErrorCode.EINVAL, "Path must be a string without null bytes.");
                  } else if (p === "") {
                    throw new ApiError(ErrorCode.EINVAL, "Path must not be empty.");
                  }
                  return path.resolve(p);
                }
                function normalizeOptions(options2, defEnc, defFlag, defMode) {
                  switch (typeof options2) {
                    case "object":
                      return {
                        encoding: typeof options2["encoding"] !== "undefined" ? options2["encoding"] : defEnc,
                        flag: typeof options2["flag"] !== "undefined" ? options2["flag"] : defFlag,
                        mode: normalizeMode(options2["mode"], defMode)
                      };
                    case "string":
                      return {
                        encoding: options2,
                        flag: defFlag,
                        mode: defMode
                      };
                    default:
                      return {
                        encoding: defEnc,
                        flag: defFlag,
                        mode: defMode
                      };
                  }
                }
                function nopCb() {
                }
                var FS = function FS2() {
                  this.F_OK = 0;
                  this.R_OK = 4;
                  this.W_OK = 2;
                  this.X_OK = 1;
                  this.root = null;
                  this.fdMap = {};
                  this.nextFd = 100;
                };
                FS.prototype.initialize = function initialize3(rootFS) {
                  if (!rootFS.constructor.isAvailable()) {
                    throw new ApiError(ErrorCode.EINVAL, "Tried to instantiate BrowserFS with an unavailable file system.");
                  }
                  return this.root = rootFS;
                };
                FS.prototype._toUnixTimestamp = function _toUnixTimestamp(time) {
                  if (typeof time === "number") {
                    return time;
                  } else if (time instanceof Date) {
                    return time.getTime() / 1e3;
                  }
                  throw new Error("Cannot parse time: " + time);
                };
                FS.prototype.getRootFS = function getRootFS() {
                  if (this.root) {
                    return this.root;
                  } else {
                    return null;
                  }
                };
                FS.prototype.rename = function rename(oldPath, newPath, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.renameSync = function renameSync(oldPath, newPath) {
                  assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));
                };
                FS.prototype.exists = function exists(path$$1, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    return assertRoot(this.root).exists(normalizePath(path$$1), newCb);
                  } catch (e) {
                    return newCb(false);
                  }
                };
                FS.prototype.existsSync = function existsSync(path$$1) {
                  try {
                    return assertRoot(this.root).existsSync(normalizePath(path$$1));
                  } catch (e) {
                    return false;
                  }
                };
                FS.prototype.stat = function stat(path$$1, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    return assertRoot(this.root).stat(normalizePath(path$$1), false, newCb);
                  } catch (e) {
                    return newCb(e);
                  }
                };
                FS.prototype.statSync = function statSync(path$$1) {
                  return assertRoot(this.root).statSync(normalizePath(path$$1), false);
                };
                FS.prototype.lstat = function lstat(path$$1, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    return assertRoot(this.root).stat(normalizePath(path$$1), true, newCb);
                  } catch (e) {
                    return newCb(e);
                  }
                };
                FS.prototype.lstatSync = function lstatSync(path$$1) {
                  return assertRoot(this.root).statSync(normalizePath(path$$1), true);
                };
                FS.prototype.truncate = function truncate(path$$1, arg2, cb) {
                  if (arg2 === void 0)
                    arg2 = 0;
                  if (cb === void 0)
                    cb = nopCb;
                  var len = 0;
                  if (typeof arg2 === "function") {
                    cb = arg2;
                  } else if (typeof arg2 === "number") {
                    len = arg2;
                  }
                  var newCb = wrapCb(cb, 1);
                  try {
                    if (len < 0) {
                      throw new ApiError(ErrorCode.EINVAL);
                    }
                    return assertRoot(this.root).truncate(normalizePath(path$$1), len, newCb);
                  } catch (e) {
                    return newCb(e);
                  }
                };
                FS.prototype.truncateSync = function truncateSync(path$$1, len) {
                  if (len === void 0)
                    len = 0;
                  if (len < 0) {
                    throw new ApiError(ErrorCode.EINVAL);
                  }
                  return assertRoot(this.root).truncateSync(normalizePath(path$$1), len);
                };
                FS.prototype.unlink = function unlink(path$$1, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    return assertRoot(this.root).unlink(normalizePath(path$$1), newCb);
                  } catch (e) {
                    return newCb(e);
                  }
                };
                FS.prototype.unlinkSync = function unlinkSync(path$$1) {
                  return assertRoot(this.root).unlinkSync(normalizePath(path$$1));
                };
                FS.prototype.open = function open(path$$1, flag, arg2, cb) {
                  var this$1 = this;
                  if (cb === void 0)
                    cb = nopCb;
                  var mode = normalizeMode(arg2, 420);
                  cb = typeof arg2 === "function" ? arg2 : cb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    assertRoot(this.root).open(normalizePath(path$$1), FileFlag.getFileFlag(flag), mode, function(e, file) {
                      if (file) {
                        newCb(e, this$1.getFdForFile(file));
                      } else {
                        newCb(e);
                      }
                    });
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.openSync = function openSync(path$$1, flag, mode) {
                  if (mode === void 0)
                    mode = 420;
                  return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1), FileFlag.getFileFlag(flag), normalizeMode(mode, 420)));
                };
                FS.prototype.readFile = function readFile(filename, arg2, cb) {
                  if (arg2 === void 0)
                    arg2 = {};
                  if (cb === void 0)
                    cb = nopCb;
                  var options2 = normalizeOptions(arg2, null, "r", null);
                  cb = typeof arg2 === "function" ? arg2 : cb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    var flag = FileFlag.getFileFlag(options2["flag"]);
                    if (!flag.isReadable()) {
                      return newCb(new ApiError(ErrorCode.EINVAL, "Flag passed to readFile must allow for reading."));
                    }
                    return assertRoot(this.root).readFile(normalizePath(filename), options2.encoding, flag, newCb);
                  } catch (e) {
                    return newCb(e);
                  }
                };
                FS.prototype.readFileSync = function readFileSync(filename, arg2) {
                  if (arg2 === void 0)
                    arg2 = {};
                  var options2 = normalizeOptions(arg2, null, "r", null);
                  var flag = FileFlag.getFileFlag(options2.flag);
                  if (!flag.isReadable()) {
                    throw new ApiError(ErrorCode.EINVAL, "Flag passed to readFile must allow for reading.");
                  }
                  return assertRoot(this.root).readFileSync(normalizePath(filename), options2.encoding, flag);
                };
                FS.prototype.writeFile = function writeFile2(filename, data, arg3, cb) {
                  if (arg3 === void 0)
                    arg3 = {};
                  if (cb === void 0)
                    cb = nopCb;
                  var options2 = normalizeOptions(arg3, "utf8", "w", 420);
                  cb = typeof arg3 === "function" ? arg3 : cb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    var flag = FileFlag.getFileFlag(options2.flag);
                    if (!flag.isWriteable()) {
                      return newCb(new ApiError(ErrorCode.EINVAL, "Flag passed to writeFile must allow for writing."));
                    }
                    return assertRoot(this.root).writeFile(normalizePath(filename), data, options2.encoding, flag, options2.mode, newCb);
                  } catch (e) {
                    return newCb(e);
                  }
                };
                FS.prototype.writeFileSync = function writeFileSync(filename, data, arg3) {
                  var options2 = normalizeOptions(arg3, "utf8", "w", 420);
                  var flag = FileFlag.getFileFlag(options2.flag);
                  if (!flag.isWriteable()) {
                    throw new ApiError(ErrorCode.EINVAL, "Flag passed to writeFile must allow for writing.");
                  }
                  return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options2.encoding, flag, options2.mode);
                };
                FS.prototype.appendFile = function appendFile2(filename, data, arg3, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var options2 = normalizeOptions(arg3, "utf8", "a", 420);
                  cb = typeof arg3 === "function" ? arg3 : cb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    var flag = FileFlag.getFileFlag(options2.flag);
                    if (!flag.isAppendable()) {
                      return newCb(new ApiError(ErrorCode.EINVAL, "Flag passed to appendFile must allow for appending."));
                    }
                    assertRoot(this.root).appendFile(normalizePath(filename), data, options2.encoding, flag, options2.mode, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.appendFileSync = function appendFileSync(filename, data, arg3) {
                  var options2 = normalizeOptions(arg3, "utf8", "a", 420);
                  var flag = FileFlag.getFileFlag(options2.flag);
                  if (!flag.isAppendable()) {
                    throw new ApiError(ErrorCode.EINVAL, "Flag passed to appendFile must allow for appending.");
                  }
                  return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options2.encoding, flag, options2.mode);
                };
                FS.prototype.fstat = function fstat(fd, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    var file = this.fd2file(fd);
                    file.stat(newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.fstatSync = function fstatSync(fd) {
                  return this.fd2file(fd).statSync();
                };
                FS.prototype.close = function close(fd, cb) {
                  var this$1 = this;
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    this.fd2file(fd).close(function(e) {
                      if (!e) {
                        this$1.closeFd(fd);
                      }
                      newCb(e);
                    });
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.closeSync = function closeSync(fd) {
                  this.fd2file(fd).closeSync();
                  this.closeFd(fd);
                };
                FS.prototype.ftruncate = function ftruncate(fd, arg2, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var length = typeof arg2 === "number" ? arg2 : 0;
                  cb = typeof arg2 === "function" ? arg2 : cb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    var file = this.fd2file(fd);
                    if (length < 0) {
                      throw new ApiError(ErrorCode.EINVAL);
                    }
                    file.truncate(length, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.ftruncateSync = function ftruncateSync(fd, len) {
                  if (len === void 0)
                    len = 0;
                  var file = this.fd2file(fd);
                  if (len < 0) {
                    throw new ApiError(ErrorCode.EINVAL);
                  }
                  file.truncateSync(len);
                };
                FS.prototype.fsync = function fsync(fd, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    this.fd2file(fd).sync(newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.fsyncSync = function fsyncSync(fd) {
                  this.fd2file(fd).syncSync();
                };
                FS.prototype.fdatasync = function fdatasync(fd, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    this.fd2file(fd).datasync(newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.fdatasyncSync = function fdatasyncSync(fd) {
                  this.fd2file(fd).datasyncSync();
                };
                FS.prototype.write = function write(fd, arg2, arg3, arg4, arg5, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var buffer$$1, offset, length, position = null;
                  if (typeof arg2 === "string") {
                    var encoding = "utf8";
                    switch (typeof arg3) {
                      case "function":
                        cb = arg3;
                        break;
                      case "number":
                        position = arg3;
                        encoding = typeof arg4 === "string" ? arg4 : "utf8";
                        cb = typeof arg5 === "function" ? arg5 : cb;
                        break;
                      default:
                        cb = typeof arg4 === "function" ? arg4 : typeof arg5 === "function" ? arg5 : cb;
                        return cb(new ApiError(ErrorCode.EINVAL, "Invalid arguments."));
                    }
                    buffer$$1 = Buffer3.from(arg2, encoding);
                    offset = 0;
                    length = buffer$$1.length;
                  } else {
                    buffer$$1 = arg2;
                    offset = arg3;
                    length = arg4;
                    position = typeof arg5 === "number" ? arg5 : null;
                    cb = typeof arg5 === "function" ? arg5 : cb;
                  }
                  var newCb = wrapCb(cb, 3);
                  try {
                    var file = this.fd2file(fd);
                    if (position === void 0 || position === null) {
                      position = file.getPos();
                    }
                    file.write(buffer$$1, offset, length, position, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.writeSync = function writeSync(fd, arg2, arg3, arg4, arg5) {
                  var buffer$$1, offset = 0, length, position;
                  if (typeof arg2 === "string") {
                    position = typeof arg3 === "number" ? arg3 : null;
                    var encoding = typeof arg4 === "string" ? arg4 : "utf8";
                    offset = 0;
                    buffer$$1 = Buffer3.from(arg2, encoding);
                    length = buffer$$1.length;
                  } else {
                    buffer$$1 = arg2;
                    offset = arg3;
                    length = arg4;
                    position = typeof arg5 === "number" ? arg5 : null;
                  }
                  var file = this.fd2file(fd);
                  if (position === void 0 || position === null) {
                    position = file.getPos();
                  }
                  return file.writeSync(buffer$$1, offset, length, position);
                };
                FS.prototype.read = function read(fd, arg2, arg3, arg4, arg5, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var position, offset, length, buffer$$1, newCb;
                  if (typeof arg2 === "number") {
                    length = arg2;
                    position = arg3;
                    var encoding = arg4;
                    cb = typeof arg5 === "function" ? arg5 : cb;
                    offset = 0;
                    buffer$$1 = Buffer3.alloc(length);
                    newCb = wrapCb(function(err2, bytesRead, buf) {
                      if (err2) {
                        return cb(err2);
                      }
                      cb(err2, buf.toString(encoding), bytesRead);
                    }, 3);
                  } else {
                    buffer$$1 = arg2;
                    offset = arg3;
                    length = arg4;
                    position = arg5;
                    newCb = wrapCb(cb, 3);
                  }
                  try {
                    var file = this.fd2file(fd);
                    if (position === void 0 || position === null) {
                      position = file.getPos();
                    }
                    file.read(buffer$$1, offset, length, position, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.readSync = function readSync(fd, arg2, arg3, arg4, arg5) {
                  var shenanigans = false;
                  var buffer$$1, offset, length, position, encoding = "utf8";
                  if (typeof arg2 === "number") {
                    length = arg2;
                    position = arg3;
                    encoding = arg4;
                    offset = 0;
                    buffer$$1 = Buffer3.alloc(length);
                    shenanigans = true;
                  } else {
                    buffer$$1 = arg2;
                    offset = arg3;
                    length = arg4;
                    position = arg5;
                  }
                  var file = this.fd2file(fd);
                  if (position === void 0 || position === null) {
                    position = file.getPos();
                  }
                  var rv = file.readSync(buffer$$1, offset, length, position);
                  if (!shenanigans) {
                    return rv;
                  } else {
                    return [buffer$$1.toString(encoding), rv];
                  }
                };
                FS.prototype.fchown = function fchown(fd, uid, gid, callback) {
                  if (callback === void 0)
                    callback = nopCb;
                  var newCb = wrapCb(callback, 1);
                  try {
                    this.fd2file(fd).chown(uid, gid, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.fchownSync = function fchownSync(fd, uid, gid) {
                  this.fd2file(fd).chownSync(uid, gid);
                };
                FS.prototype.fchmod = function fchmod(fd, mode, cb) {
                  var newCb = wrapCb(cb, 1);
                  try {
                    var numMode = typeof mode === "string" ? parseInt(mode, 8) : mode;
                    this.fd2file(fd).chmod(numMode, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.fchmodSync = function fchmodSync(fd, mode) {
                  var numMode = typeof mode === "string" ? parseInt(mode, 8) : mode;
                  this.fd2file(fd).chmodSync(numMode);
                };
                FS.prototype.futimes = function futimes(fd, atime, mtime, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    var file = this.fd2file(fd);
                    if (typeof atime === "number") {
                      atime = new Date(atime * 1e3);
                    }
                    if (typeof mtime === "number") {
                      mtime = new Date(mtime * 1e3);
                    }
                    file.utimes(atime, mtime, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.futimesSync = function futimesSync(fd, atime, mtime) {
                  this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
                };
                FS.prototype.rmdir = function rmdir(path$$1, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    path$$1 = normalizePath(path$$1);
                    assertRoot(this.root).rmdir(path$$1, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.rmdirSync = function rmdirSync(path$$1) {
                  path$$1 = normalizePath(path$$1);
                  return assertRoot(this.root).rmdirSync(path$$1);
                };
                FS.prototype.mkdir = function mkdir(path$$1, mode, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  if (typeof mode === "function") {
                    cb = mode;
                    mode = 511;
                  }
                  var newCb = wrapCb(cb, 1);
                  try {
                    path$$1 = normalizePath(path$$1);
                    assertRoot(this.root).mkdir(path$$1, mode, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.mkdirSync = function mkdirSync(path$$1, mode) {
                  assertRoot(this.root).mkdirSync(normalizePath(path$$1), normalizeMode(mode, 511));
                };
                FS.prototype.readdir = function readdir(path$$1, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    path$$1 = normalizePath(path$$1);
                    assertRoot(this.root).readdir(path$$1, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.readdirSync = function readdirSync(path$$1) {
                  path$$1 = normalizePath(path$$1);
                  return assertRoot(this.root).readdirSync(path$$1);
                };
                FS.prototype.link = function link(srcpath, dstpath, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    srcpath = normalizePath(srcpath);
                    dstpath = normalizePath(dstpath);
                    assertRoot(this.root).link(srcpath, dstpath, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.linkSync = function linkSync(srcpath, dstpath) {
                  srcpath = normalizePath(srcpath);
                  dstpath = normalizePath(dstpath);
                  return assertRoot(this.root).linkSync(srcpath, dstpath);
                };
                FS.prototype.symlink = function symlink(srcpath, dstpath, arg3, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var type = typeof arg3 === "string" ? arg3 : "file";
                  cb = typeof arg3 === "function" ? arg3 : cb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    if (type !== "file" && type !== "dir") {
                      return newCb(new ApiError(ErrorCode.EINVAL, "Invalid type: " + type));
                    }
                    srcpath = normalizePath(srcpath);
                    dstpath = normalizePath(dstpath);
                    assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
                  if (!type) {
                    type = "file";
                  } else if (type !== "file" && type !== "dir") {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid type: " + type);
                  }
                  srcpath = normalizePath(srcpath);
                  dstpath = normalizePath(dstpath);
                  return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);
                };
                FS.prototype.readlink = function readlink(path$$1, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    path$$1 = normalizePath(path$$1);
                    assertRoot(this.root).readlink(path$$1, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.readlinkSync = function readlinkSync(path$$1) {
                  path$$1 = normalizePath(path$$1);
                  return assertRoot(this.root).readlinkSync(path$$1);
                };
                FS.prototype.chown = function chown(path$$1, uid, gid, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    path$$1 = normalizePath(path$$1);
                    assertRoot(this.root).chown(path$$1, false, uid, gid, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.chownSync = function chownSync(path$$1, uid, gid) {
                  path$$1 = normalizePath(path$$1);
                  assertRoot(this.root).chownSync(path$$1, false, uid, gid);
                };
                FS.prototype.lchown = function lchown(path$$1, uid, gid, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    path$$1 = normalizePath(path$$1);
                    assertRoot(this.root).chown(path$$1, true, uid, gid, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.lchownSync = function lchownSync(path$$1, uid, gid) {
                  path$$1 = normalizePath(path$$1);
                  assertRoot(this.root).chownSync(path$$1, true, uid, gid);
                };
                FS.prototype.chmod = function chmod(path$$1, mode, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    var numMode = normalizeMode(mode, -1);
                    if (numMode < 0) {
                      throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
                    }
                    assertRoot(this.root).chmod(normalizePath(path$$1), false, numMode, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.chmodSync = function chmodSync(path$$1, mode) {
                  var numMode = normalizeMode(mode, -1);
                  if (numMode < 0) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
                  }
                  path$$1 = normalizePath(path$$1);
                  assertRoot(this.root).chmodSync(path$$1, false, numMode);
                };
                FS.prototype.lchmod = function lchmod(path$$1, mode, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    var numMode = normalizeMode(mode, -1);
                    if (numMode < 0) {
                      throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
                    }
                    assertRoot(this.root).chmod(normalizePath(path$$1), true, numMode, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.lchmodSync = function lchmodSync(path$$1, mode) {
                  var numMode = normalizeMode(mode, -1);
                  if (numMode < 1) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
                  }
                  assertRoot(this.root).chmodSync(normalizePath(path$$1), true, numMode);
                };
                FS.prototype.utimes = function utimes(path$$1, atime, mtime, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var newCb = wrapCb(cb, 1);
                  try {
                    assertRoot(this.root).utimes(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime), newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.utimesSync = function utimesSync(path$$1, atime, mtime) {
                  assertRoot(this.root).utimesSync(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime));
                };
                FS.prototype.realpath = function realpath(path$$1, arg2, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  var cache = typeof arg2 === "object" ? arg2 : {};
                  cb = typeof arg2 === "function" ? arg2 : nopCb;
                  var newCb = wrapCb(cb, 2);
                  try {
                    path$$1 = normalizePath(path$$1);
                    assertRoot(this.root).realpath(path$$1, cache, newCb);
                  } catch (e) {
                    newCb(e);
                  }
                };
                FS.prototype.realpathSync = function realpathSync(path$$1, cache) {
                  if (cache === void 0)
                    cache = {};
                  path$$1 = normalizePath(path$$1);
                  return assertRoot(this.root).realpathSync(path$$1, cache);
                };
                FS.prototype.watchFile = function watchFile(filename, arg2, listener) {
                  if (listener === void 0)
                    listener = nopCb;
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                FS.prototype.unwatchFile = function unwatchFile(filename, listener) {
                  if (listener === void 0)
                    listener = nopCb;
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                FS.prototype.watch = function watch(filename, arg2, listener) {
                  if (listener === void 0)
                    listener = nopCb;
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                FS.prototype.access = function access(path$$1, arg2, cb) {
                  if (cb === void 0)
                    cb = nopCb;
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                FS.prototype.accessSync = function accessSync(path$$1, mode) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                FS.prototype.createReadStream = function createReadStream(path$$1, options2) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                FS.prototype.createWriteStream = function createWriteStream(path$$1, options2) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                FS.prototype.wrapCallbacks = function wrapCallbacks(cbWrapper) {
                  wrapCb = cbWrapper;
                };
                FS.prototype.getFdForFile = function getFdForFile(file) {
                  var fd = this.nextFd++;
                  this.fdMap[fd] = file;
                  return fd;
                };
                FS.prototype.fd2file = function fd2file(fd) {
                  var rv = this.fdMap[fd];
                  if (rv) {
                    return rv;
                  } else {
                    throw new ApiError(ErrorCode.EBADF, "Invalid file descriptor.");
                  }
                };
                FS.prototype.closeFd = function closeFd(fd) {
                  delete this.fdMap[fd];
                };
                FS.Stats = Stats;
                var fs3 = new FS();
                var _fsMock = {};
                var fsProto = FS.prototype;
                Object.keys(fsProto).forEach(function(key) {
                  if (typeof fs3[key] === "function") {
                    _fsMock[key] = function() {
                      return fs3[key].apply(fs3, arguments);
                    };
                  } else {
                    _fsMock[key] = fs3[key];
                  }
                });
                _fsMock["changeFSModule"] = function(newFs) {
                  fs3 = newFs;
                };
                _fsMock["getFSModule"] = function() {
                  return fs3;
                };
                _fsMock["FS"] = FS;
                function _min(d0, d1, d2, bx, ay) {
                  return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
                }
                function levenshtein(a, b3) {
                  if (a === b3) {
                    return 0;
                  }
                  if (a.length > b3.length) {
                    var tmp = a;
                    a = b3;
                    b3 = tmp;
                  }
                  var la = a.length;
                  var lb = b3.length;
                  while (la > 0 && a.charCodeAt(la - 1) === b3.charCodeAt(lb - 1)) {
                    la--;
                    lb--;
                  }
                  var offset = 0;
                  while (offset < la && a.charCodeAt(offset) === b3.charCodeAt(offset)) {
                    offset++;
                  }
                  la -= offset;
                  lb -= offset;
                  if (la === 0 || lb === 1) {
                    return lb;
                  }
                  var vector = new Array(la << 1);
                  for (var y2 = 0; y2 < la; ) {
                    vector[la + y2] = a.charCodeAt(offset + y2);
                    vector[y2] = ++y2;
                  }
                  var x3;
                  var d0;
                  var d1;
                  var d2;
                  var d3;
                  for (x3 = 0; x3 + 3 < lb; ) {
                    var bx0 = b3.charCodeAt(offset + (d0 = x3));
                    var bx1 = b3.charCodeAt(offset + (d1 = x3 + 1));
                    var bx2 = b3.charCodeAt(offset + (d2 = x3 + 2));
                    var bx3 = b3.charCodeAt(offset + (d3 = x3 + 3));
                    var dd$1 = x3 += 4;
                    for (var y$1 = 0; y$1 < la; ) {
                      var ay = vector[la + y$1];
                      var dy = vector[y$1];
                      d0 = _min(dy, d0, d1, bx0, ay);
                      d1 = _min(d0, d1, d2, bx1, ay);
                      d2 = _min(d1, d2, d3, bx2, ay);
                      dd$1 = _min(d2, d3, dd$1, bx3, ay);
                      vector[y$1++] = dd$1;
                      d3 = d2;
                      d2 = d1;
                      d1 = d0;
                      d0 = dy;
                    }
                  }
                  var dd = 0;
                  for (; x3 < lb; ) {
                    var bx0$1 = b3.charCodeAt(offset + (d0 = x3));
                    dd = ++x3;
                    for (var y$2 = 0; y$2 < la; y$2++) {
                      var dy$1 = vector[y$2];
                      vector[y$2] = dd = dy$1 < d0 || dd < d0 ? dy$1 > dd ? dd + 1 : dy$1 + 1 : bx0$1 === vector[la + y$2] ? d0 : d0 + 1;
                      d0 = dy$1;
                    }
                  }
                  return dd;
                }
                function deprecationMessage(print, fsName, opts) {
                  if (print) {
                    console.warn("[" + fsName + "] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '" + fsName + ".Create(" + JSON.stringify(opts) + ", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.");
                  }
                }
                var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf("Trident") !== -1);
                var isWebWorker = typeof window === "undefined";
                function fail() {
                  throw new Error("BFS has reached an impossible code path; please file a bug.");
                }
                function mkdirpSync(p, mode, fs4) {
                  if (!fs4.existsSync(p)) {
                    mkdirpSync(path.dirname(p), mode, fs4);
                    fs4.mkdirSync(p, mode);
                  }
                }
                function buffer2ArrayBuffer(buff) {
                  var u8 = buffer2Uint8array(buff), u8offset = u8.byteOffset, u8Len = u8.byteLength;
                  if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
                    return u8.buffer;
                  } else {
                    return u8.buffer.slice(u8offset, u8offset + u8Len);
                  }
                }
                function buffer2Uint8array(buff) {
                  if (buff instanceof Uint8Array) {
                    return buff;
                  } else {
                    return new Uint8Array(buff);
                  }
                }
                function arrayish2Buffer(arr) {
                  if (arr instanceof Buffer3) {
                    return arr;
                  } else if (arr instanceof Uint8Array) {
                    return uint8Array2Buffer(arr);
                  } else {
                    return Buffer3.from(arr);
                  }
                }
                function uint8Array2Buffer(u8) {
                  if (u8 instanceof Buffer3) {
                    return u8;
                  } else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
                    return arrayBuffer2Buffer(u8.buffer);
                  } else {
                    return Buffer3.from(u8.buffer, u8.byteOffset, u8.byteLength);
                  }
                }
                function arrayBuffer2Buffer(ab) {
                  return Buffer3.from(ab);
                }
                function copyingSlice(buff, start, end) {
                  if (start === void 0)
                    start = 0;
                  if (end === void 0)
                    end = buff.length;
                  if (start < 0 || end < 0 || end > buff.length || start > end) {
                    throw new TypeError("Invalid slice bounds on buffer of length " + buff.length + ": [" + start + ", " + end + "]");
                  }
                  if (buff.length === 0) {
                    return emptyBuffer();
                  } else {
                    var u8 = buffer2Uint8array(buff), s0 = buff[0], newS0 = (s0 + 1) % 255;
                    buff[0] = newS0;
                    if (u8[0] === newS0) {
                      u8[0] = s0;
                      return uint8Array2Buffer(u8.slice(start, end));
                    } else {
                      buff[0] = s0;
                      return uint8Array2Buffer(u8.subarray(start, end));
                    }
                  }
                }
                var emptyBuff = null;
                function emptyBuffer() {
                  if (emptyBuff) {
                    return emptyBuff;
                  }
                  return emptyBuff = Buffer3.alloc(0);
                }
                function bufferValidator(v2, cb) {
                  if (Buffer3.isBuffer(v2)) {
                    cb();
                  } else {
                    cb(new ApiError(ErrorCode.EINVAL, "option must be a Buffer."));
                  }
                }
                function checkOptions(fsType, opts, cb) {
                  var optsInfo = fsType.Options;
                  var fsName = fsType.Name;
                  var pendingValidators = 0;
                  var callbackCalled = false;
                  var loopEnded = false;
                  function validatorCallback(e) {
                    if (!callbackCalled) {
                      if (e) {
                        callbackCalled = true;
                        cb(e);
                      }
                      pendingValidators--;
                      if (pendingValidators === 0 && loopEnded) {
                        cb();
                      }
                    }
                  }
                  var loop = function(optName2) {
                    if (optsInfo.hasOwnProperty(optName2)) {
                      var opt = optsInfo[optName2];
                      var providedValue = opts[optName2];
                      if (providedValue === void 0 || providedValue === null) {
                        if (!opt.optional) {
                          var incorrectOptions = Object.keys(opts).filter(function(o) {
                            return !(o in optsInfo);
                          }).map(function(a) {
                            return { str: a, distance: levenshtein(optName2, a) };
                          }).filter(function(o) {
                            return o.distance < 5;
                          }).sort(function(a, b3) {
                            return a.distance - b3.distance;
                          });
                          if (callbackCalled) {
                            return {};
                          }
                          callbackCalled = true;
                          return { v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Required option '" + optName2 + "' not provided." + (incorrectOptions.length > 0 ? " You provided unrecognized option '" + incorrectOptions[0].str + "'; perhaps you meant to type '" + optName2 + "'." : "") + "\nOption description: " + opt.description)) };
                        }
                      } else {
                        var typeMatches = false;
                        if (Array.isArray(opt.type)) {
                          typeMatches = opt.type.indexOf(typeof providedValue) !== -1;
                        } else {
                          typeMatches = typeof providedValue === opt.type;
                        }
                        if (!typeMatches) {
                          if (callbackCalled) {
                            return {};
                          }
                          callbackCalled = true;
                          return { v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Value provided for option " + optName2 + " is not the proper type. Expected " + (Array.isArray(opt.type) ? "one of {" + opt.type.join(", ") + "}" : opt.type) + ", but received " + typeof providedValue + "\nOption description: " + opt.description)) };
                        } else if (opt.validator) {
                          pendingValidators++;
                          opt.validator(providedValue, validatorCallback);
                        }
                      }
                    }
                  };
                  for (var optName in optsInfo) {
                    var returned = loop(optName);
                    if (returned)
                      return returned.v;
                  }
                  loopEnded = true;
                  if (pendingValidators === 0 && !callbackCalled) {
                    cb();
                  }
                }
                var BFSUtils = Object.freeze({
                  deprecationMessage,
                  isIE,
                  isWebWorker,
                  fail,
                  mkdirpSync,
                  buffer2ArrayBuffer,
                  buffer2Uint8array,
                  arrayish2Buffer,
                  uint8Array2Buffer,
                  arrayBuffer2Buffer,
                  copyingSlice,
                  emptyBuffer,
                  bufferValidator,
                  checkOptions
                });
                var BFSEmscriptenStreamOps = function BFSEmscriptenStreamOps2(fs4) {
                  this.fs = fs4;
                  this.nodefs = fs4.getNodeFS();
                  this.FS = fs4.getFS();
                  this.PATH = fs4.getPATH();
                  this.ERRNO_CODES = fs4.getERRNO_CODES();
                };
                BFSEmscriptenStreamOps.prototype.open = function open(stream) {
                  var path$$1 = this.fs.realPath(stream.node);
                  var FS2 = this.FS;
                  try {
                    if (FS2.isFile(stream.node.mode)) {
                      stream.nfd = this.nodefs.openSync(path$$1, this.fs.flagsToPermissionString(stream.flags));
                    }
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new FS2.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenStreamOps.prototype.close = function close(stream) {
                  var FS2 = this.FS;
                  try {
                    if (FS2.isFile(stream.node.mode) && stream.nfd) {
                      this.nodefs.closeSync(stream.nfd);
                    }
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new FS2.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenStreamOps.prototype.read = function read(stream, buffer$$1, offset, length, position) {
                  try {
                    return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
                  } catch (e) {
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenStreamOps.prototype.write = function write(stream, buffer$$1, offset, length, position) {
                  try {
                    return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
                  } catch (e) {
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenStreamOps.prototype.llseek = function llseek(stream, offset, whence) {
                  var position = offset;
                  if (whence === 1) {
                    position += stream.position;
                  } else if (whence === 2) {
                    if (this.FS.isFile(stream.node.mode)) {
                      try {
                        var stat = this.nodefs.fstatSync(stream.nfd);
                        position += stat.size;
                      } catch (e) {
                        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                      }
                    }
                  }
                  if (position < 0) {
                    throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
                  }
                  stream.position = position;
                  return position;
                };
                var BFSEmscriptenNodeOps = function BFSEmscriptenNodeOps2(fs4) {
                  this.fs = fs4;
                  this.nodefs = fs4.getNodeFS();
                  this.FS = fs4.getFS();
                  this.PATH = fs4.getPATH();
                  this.ERRNO_CODES = fs4.getERRNO_CODES();
                };
                BFSEmscriptenNodeOps.prototype.getattr = function getattr(node) {
                  var path$$1 = this.fs.realPath(node);
                  var stat;
                  try {
                    stat = this.nodefs.lstatSync(path$$1);
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                  return {
                    dev: stat.dev,
                    ino: stat.ino,
                    mode: stat.mode,
                    nlink: stat.nlink,
                    uid: stat.uid,
                    gid: stat.gid,
                    rdev: stat.rdev,
                    size: stat.size,
                    atime: stat.atime,
                    mtime: stat.mtime,
                    ctime: stat.ctime,
                    blksize: stat.blksize,
                    blocks: stat.blocks
                  };
                };
                BFSEmscriptenNodeOps.prototype.setattr = function setattr(node, attr) {
                  var path$$1 = this.fs.realPath(node);
                  try {
                    if (attr.mode !== void 0) {
                      this.nodefs.chmodSync(path$$1, attr.mode);
                      node.mode = attr.mode;
                    }
                    if (attr.timestamp !== void 0) {
                      var date = new Date(attr.timestamp);
                      this.nodefs.utimesSync(path$$1, date, date);
                    }
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    if (e.code !== "ENOTSUP") {
                      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                    }
                  }
                  if (attr.size !== void 0) {
                    try {
                      this.nodefs.truncateSync(path$$1, attr.size);
                    } catch (e) {
                      if (!e.code) {
                        throw e;
                      }
                      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                    }
                  }
                };
                BFSEmscriptenNodeOps.prototype.lookup = function lookup(parent, name) {
                  var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
                  var mode = this.fs.getMode(path$$1);
                  return this.fs.createNode(parent, name, mode);
                };
                BFSEmscriptenNodeOps.prototype.mknod = function mknod(parent, name, mode, dev) {
                  var node = this.fs.createNode(parent, name, mode, dev);
                  var path$$1 = this.fs.realPath(node);
                  try {
                    if (this.FS.isDir(node.mode)) {
                      this.nodefs.mkdirSync(path$$1, node.mode);
                    } else {
                      this.nodefs.writeFileSync(path$$1, "", { mode: node.mode });
                    }
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                  return node;
                };
                BFSEmscriptenNodeOps.prototype.rename = function rename(oldNode, newDir, newName) {
                  var oldPath = this.fs.realPath(oldNode);
                  var newPath = this.PATH.join2(this.fs.realPath(newDir), newName);
                  try {
                    this.nodefs.renameSync(oldPath, newPath);
                    oldNode.name = newName;
                    oldNode.parent = newDir;
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenNodeOps.prototype.unlink = function unlink(parent, name) {
                  var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
                  try {
                    this.nodefs.unlinkSync(path$$1);
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenNodeOps.prototype.rmdir = function rmdir(parent, name) {
                  var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
                  try {
                    this.nodefs.rmdirSync(path$$1);
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenNodeOps.prototype.readdir = function readdir(node) {
                  var path$$1 = this.fs.realPath(node);
                  try {
                    var contents = this.nodefs.readdirSync(path$$1);
                    contents.push(".", "..");
                    return contents;
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenNodeOps.prototype.symlink = function symlink(parent, newName, oldPath) {
                  var newPath = this.PATH.join2(this.fs.realPath(parent), newName);
                  try {
                    this.nodefs.symlinkSync(oldPath, newPath);
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                BFSEmscriptenNodeOps.prototype.readlink = function readlink(node) {
                  var path$$1 = this.fs.realPath(node);
                  try {
                    return this.nodefs.readlinkSync(path$$1);
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                };
                var BFSEmscriptenFS = function BFSEmscriptenFS2(_FS, _PATH, _ERRNO_CODES, nodefs) {
                  if (_FS === void 0)
                    _FS = self["FS"];
                  if (_PATH === void 0)
                    _PATH = self["PATH"];
                  if (_ERRNO_CODES === void 0)
                    _ERRNO_CODES = self["ERRNO_CODES"];
                  if (nodefs === void 0)
                    nodefs = _fsMock;
                  this.flagsToPermissionStringMap = {
                    0: "r",
                    1: "r+",
                    2: "r+",
                    64: "r",
                    65: "r+",
                    66: "r+",
                    129: "rx+",
                    193: "rx+",
                    514: "w+",
                    577: "w",
                    578: "w+",
                    705: "wx",
                    706: "wx+",
                    1024: "a",
                    1025: "a",
                    1026: "a+",
                    1089: "a",
                    1090: "a+",
                    1153: "ax",
                    1154: "ax+",
                    1217: "ax",
                    1218: "ax+",
                    4096: "rs",
                    4098: "rs+"
                  };
                  this.nodefs = nodefs;
                  this.FS = _FS;
                  this.PATH = _PATH;
                  this.ERRNO_CODES = _ERRNO_CODES;
                  this.node_ops = new BFSEmscriptenNodeOps(this);
                  this.stream_ops = new BFSEmscriptenStreamOps(this);
                };
                BFSEmscriptenFS.prototype.mount = function mount(m2) {
                  return this.createNode(null, "/", this.getMode(m2.opts.root), 0);
                };
                BFSEmscriptenFS.prototype.createNode = function createNode2(parent, name, mode, dev) {
                  var FS2 = this.FS;
                  if (!FS2.isDir(mode) && !FS2.isFile(mode) && !FS2.isLink(mode)) {
                    throw new FS2.ErrnoError(this.ERRNO_CODES.EINVAL);
                  }
                  var node = FS2.createNode(parent, name, mode);
                  node.node_ops = this.node_ops;
                  node.stream_ops = this.stream_ops;
                  return node;
                };
                BFSEmscriptenFS.prototype.getMode = function getMode(path$$1) {
                  var stat;
                  try {
                    stat = this.nodefs.lstatSync(path$$1);
                  } catch (e) {
                    if (!e.code) {
                      throw e;
                    }
                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
                  }
                  return stat.mode;
                };
                BFSEmscriptenFS.prototype.realPath = function realPath(node) {
                  var parts = [];
                  while (node.parent !== node) {
                    parts.push(node.name);
                    node = node.parent;
                  }
                  parts.push(node.mount.opts.root);
                  parts.reverse();
                  return this.PATH.join.apply(null, parts);
                };
                BFSEmscriptenFS.prototype.flagsToPermissionString = function flagsToPermissionString(flags) {
                  var parsedFlags = typeof flags === "string" ? parseInt(flags, 10) : flags;
                  parsedFlags &= 8191;
                  if (parsedFlags in this.flagsToPermissionStringMap) {
                    return this.flagsToPermissionStringMap[parsedFlags];
                  } else {
                    return flags;
                  }
                };
                BFSEmscriptenFS.prototype.getNodeFS = function getNodeFS() {
                  return this.nodefs;
                };
                BFSEmscriptenFS.prototype.getFS = function getFS() {
                  return this.FS;
                };
                BFSEmscriptenFS.prototype.getPATH = function getPATH() {
                  return this.PATH;
                };
                BFSEmscriptenFS.prototype.getERRNO_CODES = function getERRNO_CODES() {
                  return this.ERRNO_CODES;
                };
                var BaseFileSystem = function BaseFileSystem2() {
                };
                BaseFileSystem.prototype.supportsLinks = function supportsLinks() {
                  return false;
                };
                BaseFileSystem.prototype.diskSpace = function diskSpace(p, cb) {
                  cb(0, 0);
                };
                BaseFileSystem.prototype.openFile = function openFile(p, flag, cb) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.createFile = function createFile(p, flag, mode, cb) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.open = function open(p, flag, mode, cb) {
                  var this$1 = this;
                  var mustBeFile = function(e, stats) {
                    if (e) {
                      switch (flag.pathNotExistsAction()) {
                        case ActionType.CREATE_FILE:
                          return this$1.stat(path.dirname(p), false, function(e2, parentStats) {
                            if (e2) {
                              cb(e2);
                            } else if (parentStats && !parentStats.isDirectory()) {
                              cb(ApiError.ENOTDIR(path.dirname(p)));
                            } else {
                              this$1.createFile(p, flag, mode, cb);
                            }
                          });
                        case ActionType.THROW_EXCEPTION:
                          return cb(ApiError.ENOENT(p));
                        default:
                          return cb(new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object."));
                      }
                    } else {
                      if (stats && stats.isDirectory()) {
                        return cb(ApiError.EISDIR(p));
                      }
                      switch (flag.pathExistsAction()) {
                        case ActionType.THROW_EXCEPTION:
                          return cb(ApiError.EEXIST(p));
                        case ActionType.TRUNCATE_FILE:
                          return this$1.openFile(p, flag, function(e2, fd) {
                            if (e2) {
                              cb(e2);
                            } else if (fd) {
                              fd.truncate(0, function() {
                                fd.sync(function() {
                                  cb(null, fd);
                                });
                              });
                            } else {
                              fail();
                            }
                          });
                        case ActionType.NOP:
                          return this$1.openFile(p, flag, cb);
                        default:
                          return cb(new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object."));
                      }
                    }
                  };
                  this.stat(p, false, mustBeFile);
                };
                BaseFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.stat = function stat(p, isLstat, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.statSync = function statSync(p, isLstat) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.openFileSync = function openFileSync(p, flag, mode) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.createFileSync = function createFileSync(p, flag, mode) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.openSync = function openSync(p, flag, mode) {
                  var stats;
                  try {
                    stats = this.statSync(p, false);
                  } catch (e) {
                    switch (flag.pathNotExistsAction()) {
                      case ActionType.CREATE_FILE:
                        var parentStats = this.statSync(path.dirname(p), false);
                        if (!parentStats.isDirectory()) {
                          throw ApiError.ENOTDIR(path.dirname(p));
                        }
                        return this.createFileSync(p, flag, mode);
                      case ActionType.THROW_EXCEPTION:
                        throw ApiError.ENOENT(p);
                      default:
                        throw new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object.");
                    }
                  }
                  if (stats.isDirectory()) {
                    throw ApiError.EISDIR(p);
                  }
                  switch (flag.pathExistsAction()) {
                    case ActionType.THROW_EXCEPTION:
                      throw ApiError.EEXIST(p);
                    case ActionType.TRUNCATE_FILE:
                      this.unlinkSync(p);
                      return this.createFileSync(p, flag, stats.mode);
                    case ActionType.NOP:
                      return this.openFileSync(p, flag, mode);
                    default:
                      throw new ApiError(ErrorCode.EINVAL, "Invalid FileFlag object.");
                  }
                };
                BaseFileSystem.prototype.unlink = function unlink(p, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.unlinkSync = function unlinkSync(p) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.rmdir = function rmdir(p, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.rmdirSync = function rmdirSync(p) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.readdir = function readdir(p, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.readdirSync = function readdirSync(p) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.exists = function exists(p, cb) {
                  this.stat(p, null, function(err2) {
                    cb(!err2);
                  });
                };
                BaseFileSystem.prototype.existsSync = function existsSync(p) {
                  try {
                    this.statSync(p, true);
                    return true;
                  } catch (e) {
                    return false;
                  }
                };
                BaseFileSystem.prototype.realpath = function realpath(p, cache, cb) {
                  if (this.supportsLinks()) {
                    var splitPath = p.split(path.sep);
                    for (var i3 = 0; i3 < splitPath.length; i3++) {
                      var addPaths = splitPath.slice(0, i3 + 1);
                      splitPath[i3] = path.join.apply(null, addPaths);
                    }
                  } else {
                    this.exists(p, function(doesExist) {
                      if (doesExist) {
                        cb(null, p);
                      } else {
                        cb(ApiError.ENOENT(p));
                      }
                    });
                  }
                };
                BaseFileSystem.prototype.realpathSync = function realpathSync(p, cache) {
                  if (this.supportsLinks()) {
                    var splitPath = p.split(path.sep);
                    for (var i3 = 0; i3 < splitPath.length; i3++) {
                      var addPaths = splitPath.slice(0, i3 + 1);
                      splitPath[i3] = path.join.apply(path, addPaths);
                    }
                    return splitPath.join(path.sep);
                  } else {
                    if (this.existsSync(p)) {
                      return p;
                    } else {
                      throw ApiError.ENOENT(p);
                    }
                  }
                };
                BaseFileSystem.prototype.truncate = function truncate(p, len, cb) {
                  this.open(p, FileFlag.getFileFlag("r+"), 420, function(er, fd) {
                    if (er) {
                      return cb(er);
                    }
                    fd.truncate(len, function(er2) {
                      fd.close(function(er22) {
                        cb(er2 || er22);
                      });
                    });
                  });
                };
                BaseFileSystem.prototype.truncateSync = function truncateSync(p, len) {
                  var fd = this.openSync(p, FileFlag.getFileFlag("r+"), 420);
                  try {
                    fd.truncateSync(len);
                  } catch (e) {
                    throw e;
                  } finally {
                    fd.closeSync();
                  }
                };
                BaseFileSystem.prototype.readFile = function readFile(fname, encoding, flag, cb) {
                  var oldCb = cb;
                  this.open(fname, flag, 420, function(err2, fd) {
                    if (err2) {
                      return cb(err2);
                    }
                    cb = function(err3, arg) {
                      fd.close(function(err22) {
                        if (!err3) {
                          err3 = err22;
                        }
                        return oldCb(err3, arg);
                      });
                    };
                    fd.stat(function(err3, stat) {
                      if (err3) {
                        return cb(err3);
                      }
                      var buf = Buffer3.alloc(stat.size);
                      fd.read(buf, 0, stat.size, 0, function(err4) {
                        if (err4) {
                          return cb(err4);
                        } else if (encoding === null) {
                          return cb(err4, buf);
                        }
                        try {
                          cb(null, buf.toString(encoding));
                        } catch (e) {
                          cb(e);
                        }
                      });
                    });
                  });
                };
                BaseFileSystem.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                  var fd = this.openSync(fname, flag, 420);
                  try {
                    var stat = fd.statSync();
                    var buf = Buffer3.alloc(stat.size);
                    fd.readSync(buf, 0, stat.size, 0);
                    fd.closeSync();
                    if (encoding === null) {
                      return buf;
                    }
                    return buf.toString(encoding);
                  } finally {
                    fd.closeSync();
                  }
                };
                BaseFileSystem.prototype.writeFile = function writeFile2(fname, data, encoding, flag, mode, cb) {
                  var oldCb = cb;
                  this.open(fname, flag, 420, function(err2, fd) {
                    if (err2) {
                      return cb(err2);
                    }
                    cb = function(err3) {
                      fd.close(function(err22) {
                        oldCb(err3 ? err3 : err22);
                      });
                    };
                    try {
                      if (typeof data === "string") {
                        data = Buffer3.from(data, encoding);
                      }
                    } catch (e) {
                      return cb(e);
                    }
                    fd.write(data, 0, data.length, 0, cb);
                  });
                };
                BaseFileSystem.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
                  var fd = this.openSync(fname, flag, mode);
                  try {
                    if (typeof data === "string") {
                      data = Buffer3.from(data, encoding);
                    }
                    fd.writeSync(data, 0, data.length, 0);
                  } finally {
                    fd.closeSync();
                  }
                };
                BaseFileSystem.prototype.appendFile = function appendFile2(fname, data, encoding, flag, mode, cb) {
                  var oldCb = cb;
                  this.open(fname, flag, mode, function(err2, fd) {
                    if (err2) {
                      return cb(err2);
                    }
                    cb = function(err3) {
                      fd.close(function(err22) {
                        oldCb(err3 ? err3 : err22);
                      });
                    };
                    if (typeof data === "string") {
                      data = Buffer3.from(data, encoding);
                    }
                    fd.write(data, 0, data.length, null, cb);
                  });
                };
                BaseFileSystem.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
                  var fd = this.openSync(fname, flag, mode);
                  try {
                    if (typeof data === "string") {
                      data = Buffer3.from(data, encoding);
                    }
                    fd.writeSync(data, 0, data.length, null);
                  } finally {
                    fd.closeSync();
                  }
                };
                BaseFileSystem.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.utimes = function utimes(p, atime, mtime, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.link = function link(srcpath, dstpath, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.linkSync = function linkSync(srcpath, dstpath) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFileSystem.prototype.readlink = function readlink(p, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFileSystem.prototype.readlinkSync = function readlinkSync(p) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                var SynchronousFileSystem = function(BaseFileSystem2) {
                  function SynchronousFileSystem2() {
                    BaseFileSystem2.apply(this, arguments);
                  }
                  if (BaseFileSystem2)
                    SynchronousFileSystem2.__proto__ = BaseFileSystem2;
                  SynchronousFileSystem2.prototype = Object.create(BaseFileSystem2 && BaseFileSystem2.prototype);
                  SynchronousFileSystem2.prototype.constructor = SynchronousFileSystem2;
                  SynchronousFileSystem2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  SynchronousFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                    try {
                      this.renameSync(oldPath, newPath);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.stat = function stat(p, isLstat, cb) {
                    try {
                      cb(null, this.statSync(p, isLstat));
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.open = function open(p, flags, mode, cb) {
                    try {
                      cb(null, this.openSync(p, flags, mode));
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.unlink = function unlink(p, cb) {
                    try {
                      this.unlinkSync(p);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.rmdir = function rmdir(p, cb) {
                    try {
                      this.rmdirSync(p);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.mkdir = function mkdir(p, mode, cb) {
                    try {
                      this.mkdirSync(p, mode);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.readdir = function readdir(p, cb) {
                    try {
                      cb(null, this.readdirSync(p));
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                    try {
                      this.chmodSync(p, isLchmod, mode);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
                    try {
                      this.chownSync(p, isLchown, uid, gid);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.utimes = function utimes(p, atime, mtime, cb) {
                    try {
                      this.utimesSync(p, atime, mtime);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.link = function link(srcpath, dstpath, cb) {
                    try {
                      this.linkSync(srcpath, dstpath);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
                    try {
                      this.symlinkSync(srcpath, dstpath, type);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  SynchronousFileSystem2.prototype.readlink = function readlink(p, cb) {
                    try {
                      cb(null, this.readlinkSync(p));
                    } catch (e) {
                      cb(e);
                    }
                  };
                  return SynchronousFileSystem2;
                }(BaseFileSystem);
                var BaseFile = function BaseFile2() {
                };
                BaseFile.prototype.sync = function sync(cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFile.prototype.syncSync = function syncSync() {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFile.prototype.datasync = function datasync(cb) {
                  this.sync(cb);
                };
                BaseFile.prototype.datasyncSync = function datasyncSync() {
                  return this.syncSync();
                };
                BaseFile.prototype.chown = function chown(uid, gid, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFile.prototype.chownSync = function chownSync(uid, gid) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFile.prototype.chmod = function chmod(mode, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFile.prototype.chmodSync = function chmodSync(mode) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                BaseFile.prototype.utimes = function utimes(atime, mtime, cb) {
                  cb(new ApiError(ErrorCode.ENOTSUP));
                };
                BaseFile.prototype.utimesSync = function utimesSync(atime, mtime) {
                  throw new ApiError(ErrorCode.ENOTSUP);
                };
                var PreloadFile = function(BaseFile$$1) {
                  function PreloadFile2(_fs, _path, _flag, _stat, contents) {
                    BaseFile$$1.call(this);
                    this._pos = 0;
                    this._dirty = false;
                    this._fs = _fs;
                    this._path = _path;
                    this._flag = _flag;
                    this._stat = _stat;
                    if (contents) {
                      this._buffer = contents;
                    } else {
                      this._buffer = emptyBuffer();
                    }
                    if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
                      throw new Error("Invalid buffer: Buffer is " + this._buffer.length + " long, yet Stats object specifies that file is " + this._stat.size + " long.");
                    }
                  }
                  if (BaseFile$$1)
                    PreloadFile2.__proto__ = BaseFile$$1;
                  PreloadFile2.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
                  PreloadFile2.prototype.constructor = PreloadFile2;
                  PreloadFile2.prototype.getBuffer = function getBuffer() {
                    return this._buffer;
                  };
                  PreloadFile2.prototype.getStats = function getStats() {
                    return this._stat;
                  };
                  PreloadFile2.prototype.getFlag = function getFlag2() {
                    return this._flag;
                  };
                  PreloadFile2.prototype.getPath = function getPath() {
                    return this._path;
                  };
                  PreloadFile2.prototype.getPos = function getPos() {
                    if (this._flag.isAppendable()) {
                      return this._stat.size;
                    }
                    return this._pos;
                  };
                  PreloadFile2.prototype.advancePos = function advancePos(delta) {
                    return this._pos += delta;
                  };
                  PreloadFile2.prototype.setPos = function setPos(newPos) {
                    return this._pos = newPos;
                  };
                  PreloadFile2.prototype.sync = function sync(cb) {
                    try {
                      this.syncSync();
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  PreloadFile2.prototype.syncSync = function syncSync() {
                    throw new ApiError(ErrorCode.ENOTSUP);
                  };
                  PreloadFile2.prototype.close = function close(cb) {
                    try {
                      this.closeSync();
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  PreloadFile2.prototype.closeSync = function closeSync() {
                    throw new ApiError(ErrorCode.ENOTSUP);
                  };
                  PreloadFile2.prototype.stat = function stat(cb) {
                    try {
                      cb(null, this._stat.clone());
                    } catch (e) {
                      cb(e);
                    }
                  };
                  PreloadFile2.prototype.statSync = function statSync() {
                    return this._stat.clone();
                  };
                  PreloadFile2.prototype.truncate = function truncate(len, cb) {
                    try {
                      this.truncateSync(len);
                      if (this._flag.isSynchronous() && !_fsMock.getRootFS().supportsSynch()) {
                        this.sync(cb);
                      }
                      cb();
                    } catch (e) {
                      return cb(e);
                    }
                  };
                  PreloadFile2.prototype.truncateSync = function truncateSync(len) {
                    this._dirty = true;
                    if (!this._flag.isWriteable()) {
                      throw new ApiError(ErrorCode.EPERM, "File not opened with a writeable mode.");
                    }
                    this._stat.mtime = /* @__PURE__ */ new Date();
                    if (len > this._buffer.length) {
                      var buf = Buffer3.alloc(len - this._buffer.length, 0);
                      this.writeSync(buf, 0, buf.length, this._buffer.length);
                      if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
                        this.syncSync();
                      }
                      return;
                    }
                    this._stat.size = len;
                    var newBuff = Buffer3.alloc(len);
                    this._buffer.copy(newBuff, 0, 0, len);
                    this._buffer = newBuff;
                    if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
                      this.syncSync();
                    }
                  };
                  PreloadFile2.prototype.write = function write(buffer$$1, offset, length, position, cb) {
                    try {
                      cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
                    } catch (e) {
                      cb(e);
                    }
                  };
                  PreloadFile2.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
                    this._dirty = true;
                    if (position === void 0 || position === null) {
                      position = this.getPos();
                    }
                    if (!this._flag.isWriteable()) {
                      throw new ApiError(ErrorCode.EPERM, "File not opened with a writeable mode.");
                    }
                    var endFp = position + length;
                    if (endFp > this._stat.size) {
                      this._stat.size = endFp;
                      if (endFp > this._buffer.length) {
                        var newBuff = Buffer3.alloc(endFp);
                        this._buffer.copy(newBuff);
                        this._buffer = newBuff;
                      }
                    }
                    var len = buffer$$1.copy(this._buffer, position, offset, offset + length);
                    this._stat.mtime = /* @__PURE__ */ new Date();
                    if (this._flag.isSynchronous()) {
                      this.syncSync();
                      return len;
                    }
                    this.setPos(position + len);
                    return len;
                  };
                  PreloadFile2.prototype.read = function read(buffer$$1, offset, length, position, cb) {
                    try {
                      cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
                    } catch (e) {
                      cb(e);
                    }
                  };
                  PreloadFile2.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
                    if (!this._flag.isReadable()) {
                      throw new ApiError(ErrorCode.EPERM, "File not opened with a readable mode.");
                    }
                    if (position === void 0 || position === null) {
                      position = this.getPos();
                    }
                    var endRead = position + length;
                    if (endRead > this._stat.size) {
                      length = this._stat.size - position;
                    }
                    var rv = this._buffer.copy(buffer$$1, offset, position, position + length);
                    this._stat.atime = /* @__PURE__ */ new Date();
                    this._pos = position + length;
                    return rv;
                  };
                  PreloadFile2.prototype.chmod = function chmod(mode, cb) {
                    try {
                      this.chmodSync(mode);
                      cb();
                    } catch (e) {
                      cb(e);
                    }
                  };
                  PreloadFile2.prototype.chmodSync = function chmodSync(mode) {
                    if (!this._fs.supportsProps()) {
                      throw new ApiError(ErrorCode.ENOTSUP);
                    }
                    this._dirty = true;
                    this._stat.chmod(mode);
                    this.syncSync();
                  };
                  PreloadFile2.prototype.isDirty = function isDirty() {
                    return this._dirty;
                  };
                  PreloadFile2.prototype.resetDirty = function resetDirty() {
                    this._dirty = false;
                  };
                  return PreloadFile2;
                }(BaseFile);
                var NoSyncFile = function(PreloadFile2) {
                  function NoSyncFile2(_fs, _path, _flag, _stat, contents) {
                    PreloadFile2.call(this, _fs, _path, _flag, _stat, contents);
                  }
                  if (PreloadFile2)
                    NoSyncFile2.__proto__ = PreloadFile2;
                  NoSyncFile2.prototype = Object.create(PreloadFile2 && PreloadFile2.prototype);
                  NoSyncFile2.prototype.constructor = NoSyncFile2;
                  NoSyncFile2.prototype.sync = function sync(cb) {
                    cb();
                  };
                  NoSyncFile2.prototype.syncSync = function syncSync() {
                  };
                  NoSyncFile2.prototype.close = function close(cb) {
                    cb();
                  };
                  NoSyncFile2.prototype.closeSync = function closeSync() {
                  };
                  return NoSyncFile2;
                }(PreloadFile);
                var MirrorFile = function(PreloadFile$$1) {
                  function MirrorFile2(fs4, path$$1, flag, stat, data) {
                    PreloadFile$$1.call(this, fs4, path$$1, flag, stat, data);
                  }
                  if (PreloadFile$$1)
                    MirrorFile2.__proto__ = PreloadFile$$1;
                  MirrorFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
                  MirrorFile2.prototype.constructor = MirrorFile2;
                  MirrorFile2.prototype.syncSync = function syncSync() {
                    if (this.isDirty()) {
                      this._fs._syncSync(this);
                      this.resetDirty();
                    }
                  };
                  MirrorFile2.prototype.closeSync = function closeSync() {
                    this.syncSync();
                  };
                  return MirrorFile2;
                }(PreloadFile);
                var AsyncMirror = function(SynchronousFileSystem$$1) {
                  function AsyncMirror2(sync, async, deprecateMsg) {
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    SynchronousFileSystem$$1.call(this);
                    this._queue = [];
                    this._queueRunning = false;
                    this._isInitialized = false;
                    this._initializeCallbacks = [];
                    this._sync = sync;
                    this._async = async;
                    if (!sync.supportsSynch()) {
                      throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");
                    }
                    deprecationMessage(deprecateMsg, AsyncMirror2.Name, { sync: "sync file system instance", async: "async file system instance" });
                  }
                  if (SynchronousFileSystem$$1)
                    AsyncMirror2.__proto__ = SynchronousFileSystem$$1;
                  AsyncMirror2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
                  AsyncMirror2.prototype.constructor = AsyncMirror2;
                  AsyncMirror2.Create = function Create(opts, cb) {
                    try {
                      var fs4 = new AsyncMirror2(opts.sync, opts.async, false);
                      fs4.initialize(function(e) {
                        if (e) {
                          cb(e);
                        } else {
                          cb(null, fs4);
                        }
                      }, false);
                    } catch (e) {
                      cb(e);
                    }
                  };
                  AsyncMirror2.isAvailable = function isAvailable() {
                    return true;
                  };
                  AsyncMirror2.prototype.getName = function getName() {
                    return AsyncMirror2.Name;
                  };
                  AsyncMirror2.prototype._syncSync = function _syncSync(fd) {
                    this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag("w"), fd.getStats().mode);
                    this.enqueueOp({
                      apiMethod: "writeFile",
                      arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), fd.getStats().mode]
                    });
                  };
                  AsyncMirror2.prototype.initialize = function initialize3(userCb, deprecateMsg) {
                    var this$1 = this;
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    if (deprecateMsg) {
                      console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");
                    }
                    var callbacks = this._initializeCallbacks;
                    var end = function(e) {
                      this$1._isInitialized = !e;
                      this$1._initializeCallbacks = [];
                      callbacks.forEach(function(cb) {
                        return cb(e);
                      });
                    };
                    if (!this._isInitialized) {
                      if (callbacks.push(userCb) === 1) {
                        var copyDirectory = function(p, mode, cb) {
                          if (p !== "/") {
                            this$1._sync.mkdirSync(p, mode);
                          }
                          this$1._async.readdir(p, function(err2, files) {
                            var i3 = 0;
                            function copyNextFile(err3) {
                              if (err3) {
                                cb(err3);
                              } else if (i3 < files.length) {
                                copyItem(path.join(p, files[i3]), copyNextFile);
                                i3++;
                              } else {
                                cb();
                              }
                            }
                            if (err2) {
                              cb(err2);
                            } else {
                              copyNextFile();
                            }
                          });
                        }, copyFile = function(p, mode, cb) {
                          this$1._async.readFile(p, null, FileFlag.getFileFlag("r"), function(err2, data) {
                            if (err2) {
                              cb(err2);
                            } else {
                              try {
                                this$1._sync.writeFileSync(p, data, null, FileFlag.getFileFlag("w"), mode);
                              } catch (e) {
                                err2 = e;
                              } finally {
                                cb(err2);
                              }
                            }
                          });
                        }, copyItem = function(p, cb) {
                          this$1._async.stat(p, false, function(err2, stats) {
                            if (err2) {
                              cb(err2);
                            } else if (stats.isDirectory()) {
                              copyDirectory(p, stats.mode, cb);
                            } else {
                              copyFile(p, stats.mode, cb);
                            }
                          });
                        };
                        copyDirectory("/", 0, end);
                      }
                    } else {
                      userCb();
                    }
                  };
                  AsyncMirror2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  AsyncMirror2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  AsyncMirror2.prototype.supportsLinks = function supportsLinks() {
                    return false;
                  };
                  AsyncMirror2.prototype.supportsProps = function supportsProps() {
                    return this._sync.supportsProps() && this._async.supportsProps();
                  };
                  AsyncMirror2.prototype.renameSync = function renameSync(oldPath, newPath) {
                    this.checkInitialized();
                    this._sync.renameSync(oldPath, newPath);
                    this.enqueueOp({
                      apiMethod: "rename",
                      arguments: [oldPath, newPath]
                    });
                  };
                  AsyncMirror2.prototype.statSync = function statSync(p, isLstat) {
                    this.checkInitialized();
                    return this._sync.statSync(p, isLstat);
                  };
                  AsyncMirror2.prototype.openSync = function openSync(p, flag, mode) {
                    this.checkInitialized();
                    var fd = this._sync.openSync(p, flag, mode);
                    fd.closeSync();
                    return new MirrorFile(this, p, flag, this._sync.statSync(p, false), this._sync.readFileSync(p, null, FileFlag.getFileFlag("r")));
                  };
                  AsyncMirror2.prototype.unlinkSync = function unlinkSync(p) {
                    this.checkInitialized();
                    this._sync.unlinkSync(p);
                    this.enqueueOp({
                      apiMethod: "unlink",
                      arguments: [p]
                    });
                  };
                  AsyncMirror2.prototype.rmdirSync = function rmdirSync(p) {
                    this.checkInitialized();
                    this._sync.rmdirSync(p);
                    this.enqueueOp({
                      apiMethod: "rmdir",
                      arguments: [p]
                    });
                  };
                  AsyncMirror2.prototype.mkdirSync = function mkdirSync(p, mode) {
                    this.checkInitialized();
                    this._sync.mkdirSync(p, mode);
                    this.enqueueOp({
                      apiMethod: "mkdir",
                      arguments: [p, mode]
                    });
                  };
                  AsyncMirror2.prototype.readdirSync = function readdirSync(p) {
                    this.checkInitialized();
                    return this._sync.readdirSync(p);
                  };
                  AsyncMirror2.prototype.existsSync = function existsSync(p) {
                    this.checkInitialized();
                    return this._sync.existsSync(p);
                  };
                  AsyncMirror2.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                    this.checkInitialized();
                    this._sync.chmodSync(p, isLchmod, mode);
                    this.enqueueOp({
                      apiMethod: "chmod",
                      arguments: [p, isLchmod, mode]
                    });
                  };
                  AsyncMirror2.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                    this.checkInitialized();
                    this._sync.chownSync(p, isLchown, uid, gid);
                    this.enqueueOp({
                      apiMethod: "chown",
                      arguments: [p, isLchown, uid, gid]
                    });
                  };
                  AsyncMirror2.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                    this.checkInitialized();
                    this._sync.utimesSync(p, atime, mtime);
                    this.enqueueOp({
                      apiMethod: "utimes",
                      arguments: [p, atime, mtime]
                    });
                  };
                  AsyncMirror2.prototype.checkInitialized = function checkInitialized() {
                    if (!this._isInitialized) {
                      throw new ApiError(ErrorCode.EPERM, "AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.");
                    }
                  };
                  AsyncMirror2.prototype.enqueueOp = function enqueueOp(op) {
                    var this$1 = this;
                    this._queue.push(op);
                    if (!this._queueRunning) {
                      this._queueRunning = true;
                      var doNextOp = function(err2) {
                        if (err2) {
                          console.error("WARNING: File system has desynchronized. Received following error: " + err2 + "\n$");
                        }
                        if (this$1._queue.length > 0) {
                          var op2 = this$1._queue.shift(), args = op2.arguments;
                          args.push(doNextOp);
                          this$1._async[op2.apiMethod].apply(this$1._async, args);
                        } else {
                          this$1._queueRunning = false;
                        }
                      };
                      doNextOp();
                    }
                  };
                  return AsyncMirror2;
                }(SynchronousFileSystem);
                AsyncMirror.Name = "AsyncMirror";
                AsyncMirror.Options = {
                  sync: {
                    type: "object",
                    description: "The synchronous file system to mirror the asynchronous file system to."
                  },
                  async: {
                    type: "object",
                    description: "The asynchronous file system to mirror."
                  }
                };
                function apply(func, thisArg, args) {
                  switch (args.length) {
                    case 0:
                      return func.call(thisArg);
                    case 1:
                      return func.call(thisArg, args[0]);
                    case 2:
                      return func.call(thisArg, args[0], args[1]);
                    case 3:
                      return func.call(thisArg, args[0], args[1], args[2]);
                  }
                  return func.apply(thisArg, args);
                }
                var nativeMax = Math.max;
                function overRest$1(func, start, transform) {
                  start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
                  return function() {
                    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                    while (++index < length) {
                      array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                      otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                  };
                }
                function identity(value) {
                  return value;
                }
                function rest(func, start) {
                  return overRest$1(func, start, identity);
                }
                var initialParams = function(fn) {
                  return rest(function(args) {
                    var callback = args.pop();
                    fn.call(this, args, callback);
                  });
                };
                function applyEach$1(eachfn) {
                  return rest(function(fns, args) {
                    var go = initialParams(function(args2, callback) {
                      var that = this;
                      return eachfn(fns, function(fn, cb) {
                        fn.apply(that, args2.concat(cb));
                      }, callback);
                    });
                    if (args.length) {
                      return go.apply(this, args);
                    } else {
                      return go;
                    }
                  });
                }
                var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
                var freeSelf = typeof self == "object" && self && self.Object === Object && self;
                var root = freeGlobal || freeSelf || Function("return this")();
                var Symbol$1 = root.Symbol;
                var objectProto = Object.prototype;
                var hasOwnProperty = objectProto.hasOwnProperty;
                var nativeObjectToString = objectProto.toString;
                var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
                function getRawTag(value) {
                  var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1];
                  try {
                    value[symToStringTag$1] = void 0;
                    var unmasked = true;
                  } catch (e) {
                  }
                  var result = nativeObjectToString.call(value);
                  if (unmasked) {
                    if (isOwn) {
                      value[symToStringTag$1] = tag;
                    } else {
                      delete value[symToStringTag$1];
                    }
                  }
                  return result;
                }
                var objectProto$1 = Object.prototype;
                var nativeObjectToString$1 = objectProto$1.toString;
                function objectToString(value) {
                  return nativeObjectToString$1.call(value);
                }
                var nullTag = "[object Null]";
                var undefinedTag = "[object Undefined]";
                var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
                function baseGetTag(value) {
                  if (value == null) {
                    return value === void 0 ? undefinedTag : nullTag;
                  }
                  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
                }
                function isObject(value) {
                  var type = typeof value;
                  return value != null && (type == "object" || type == "function");
                }
                var asyncTag = "[object AsyncFunction]";
                var funcTag = "[object Function]";
                var genTag = "[object GeneratorFunction]";
                var proxyTag = "[object Proxy]";
                function isFunction(value) {
                  if (!isObject(value)) {
                    return false;
                  }
                  var tag = baseGetTag(value);
                  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                }
                var MAX_SAFE_INTEGER = 9007199254740991;
                function isLength(value) {
                  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                }
                function isArrayLike(value) {
                  return value != null && isLength(value.length) && !isFunction(value);
                }
                var breakLoop = {};
                function noop() {
                }
                function once(fn) {
                  return function() {
                    if (fn === null) {
                      return;
                    }
                    var callFn = fn;
                    fn = null;
                    callFn.apply(this, arguments);
                  };
                }
                var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator;
                var getIterator = function(coll) {
                  return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
                };
                function baseTimes(n, iteratee) {
                  var index = -1, result = Array(n);
                  while (++index < n) {
                    result[index] = iteratee(index);
                  }
                  return result;
                }
                function isObjectLike(value) {
                  return value != null && typeof value == "object";
                }
                var argsTag = "[object Arguments]";
                function baseIsArguments(value) {
                  return isObjectLike(value) && baseGetTag(value) == argsTag;
                }
                var objectProto$3 = Object.prototype;
                var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
                var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
                var isArguments = baseIsArguments(/* @__PURE__ */ function() {
                  return arguments;
                }()) ? baseIsArguments : function(value) {
                  return isObjectLike(value) && hasOwnProperty$2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
                };
                var isArray = Array.isArray;
                function stubFalse() {
                  return false;
                }
                var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
                var freeModule = freeExports && typeof module3 == "object" && module3 && !module3.nodeType && module3;
                var moduleExports = freeModule && freeModule.exports === freeExports;
                var Buffer$1 = moduleExports ? root.Buffer : void 0;
                var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
                var isBuffer = nativeIsBuffer || stubFalse;
                var MAX_SAFE_INTEGER$1 = 9007199254740991;
                var reIsUint = /^(?:0|[1-9]\d*)$/;
                function isIndex(value, length) {
                  length = length == null ? MAX_SAFE_INTEGER$1 : length;
                  return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
                }
                var argsTag$1 = "[object Arguments]";
                var arrayTag = "[object Array]";
                var boolTag = "[object Boolean]";
                var dateTag = "[object Date]";
                var errorTag = "[object Error]";
                var funcTag$1 = "[object Function]";
                var mapTag = "[object Map]";
                var numberTag = "[object Number]";
                var objectTag = "[object Object]";
                var regexpTag = "[object RegExp]";
                var setTag = "[object Set]";
                var stringTag = "[object String]";
                var weakMapTag = "[object WeakMap]";
                var arrayBufferTag = "[object ArrayBuffer]";
                var dataViewTag = "[object DataView]";
                var float32Tag = "[object Float32Array]";
                var float64Tag = "[object Float64Array]";
                var int8Tag = "[object Int8Array]";
                var int16Tag = "[object Int16Array]";
                var int32Tag = "[object Int32Array]";
                var uint8Tag = "[object Uint8Array]";
                var uint8ClampedTag = "[object Uint8ClampedArray]";
                var uint16Tag = "[object Uint16Array]";
                var uint32Tag = "[object Uint32Array]";
                var typedArrayTags = {};
                typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
                typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
                function baseIsTypedArray(value) {
                  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                }
                function baseUnary(func) {
                  return function(value) {
                    return func(value);
                  };
                }
                var freeExports$1 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
                var freeModule$1 = freeExports$1 && typeof module3 == "object" && module3 && !module3.nodeType && module3;
                var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
                var freeProcess = moduleExports$1 && freeGlobal.process;
                var nodeUtil = function() {
                  try {
                    return freeProcess && freeProcess.binding && freeProcess.binding("util");
                  } catch (e) {
                  }
                }();
                var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
                var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
                var objectProto$2 = Object.prototype;
                var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
                function arrayLikeKeys(value, inherited) {
                  var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
                  for (var key in value) {
                    if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
                    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
                    isIndex(key, length)))) {
                      result.push(key);
                    }
                  }
                  return result;
                }
                var objectProto$5 = Object.prototype;
                function isPrototype(value) {
                  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$5;
                  return value === proto;
                }
                function overArg(func, transform) {
                  return function(arg) {
                    return func(transform(arg));
                  };
                }
                var nativeKeys = overArg(Object.keys, Object);
                var objectProto$4 = Object.prototype;
                var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
                function baseKeys(object) {
                  if (!isPrototype(object)) {
                    return nativeKeys(object);
                  }
                  var result = [];
                  for (var key in Object(object)) {
                    if (hasOwnProperty$3.call(object, key) && key != "constructor") {
                      result.push(key);
                    }
                  }
                  return result;
                }
                function keys(object) {
                  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                }
                function createArrayIterator(coll) {
                  var i3 = -1;
                  var len = coll.length;
                  return function next() {
                    return ++i3 < len ? { value: coll[i3], key: i3 } : null;
                  };
                }
                function createES2015Iterator(iterator2) {
                  var i3 = -1;
                  return function next() {
                    var item = iterator2.next();
                    if (item.done) {
                      return null;
                    }
                    i3++;
                    return { value: item.value, key: i3 };
                  };
                }
                function createObjectIterator(obj) {
                  var okeys = keys(obj);
                  var i3 = -1;
                  var len = okeys.length;
                  return function next() {
                    var key = okeys[++i3];
                    return i3 < len ? { value: obj[key], key } : null;
                  };
                }
                function iterator(coll) {
                  if (isArrayLike(coll)) {
                    return createArrayIterator(coll);
                  }
                  var iterator2 = getIterator(coll);
                  return iterator2 ? createES2015Iterator(iterator2) : createObjectIterator(coll);
                }
                function onlyOnce(fn) {
                  return function() {
                    if (fn === null) {
                      throw new Error("Callback was already called.");
                    }
                    var callFn = fn;
                    fn = null;
                    callFn.apply(this, arguments);
                  };
                }
                function _eachOfLimit(limit) {
                  return function(obj, iteratee, callback) {
                    callback = once(callback || noop);
                    if (limit <= 0 || !obj) {
                      return callback(null);
                    }
                    var nextElem = iterator(obj);
                    var done = false;
                    var running = 0;
                    function iterateeCallback(err2, value) {
                      running -= 1;
                      if (err2) {
                        done = true;
                        callback(err2);
                      } else if (value === breakLoop || done && running <= 0) {
                        done = true;
                        return callback(null);
                      } else {
                        replenish();
                      }
                    }
                    function replenish() {
                      while (running < limit && !done) {
                        var elem = nextElem();
                        if (elem === null) {
                          done = true;
                          if (running <= 0) {
                            callback(null);
                          }
                          return;
                        }
                        running += 1;
                        iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
                      }
                    }
                    replenish();
                  };
                }
                function eachOfLimit(coll, limit, iteratee, callback) {
                  _eachOfLimit(limit)(coll, iteratee, callback);
                }
                function doLimit(fn, limit) {
                  return function(iterable, iteratee, callback) {
                    return fn(iterable, limit, iteratee, callback);
                  };
                }
                function eachOfArrayLike(coll, iteratee, callback) {
                  callback = once(callback || noop);
                  var index = 0, completed = 0, length = coll.length;
                  if (length === 0) {
                    callback(null);
                  }
                  function iteratorCallback(err2, value) {
                    if (err2) {
                      callback(err2);
                    } else if (++completed === length || value === breakLoop) {
                      callback(null);
                    }
                  }
                  for (; index < length; index++) {
                    iteratee(coll[index], index, onlyOnce(iteratorCallback));
                  }
                }
                var eachOfGeneric = doLimit(eachOfLimit, Infinity);
                var eachOf = function(coll, iteratee, callback) {
                  var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
                  eachOfImplementation(coll, iteratee, callback);
                };
                function doParallel(fn) {
                  return function(obj, iteratee, callback) {
                    return fn(eachOf, obj, iteratee, callback);
                  };
                }
                function _asyncMap(eachfn, arr, iteratee, callback) {
                  callback = callback || noop;
                  arr = arr || [];
                  var results = [];
                  var counter = 0;
                  eachfn(arr, function(value, _2, callback2) {
                    var index = counter++;
                    iteratee(value, function(err2, v2) {
                      results[index] = v2;
                      callback2(err2);
                    });
                  }, function(err2) {
                    callback(err2, results);
                  });
                }
                var map = doParallel(_asyncMap);
                applyEach$1(map);
                function doParallelLimit(fn) {
                  return function(obj, limit, iteratee, callback) {
                    return fn(_eachOfLimit(limit), obj, iteratee, callback);
                  };
                }
                var mapLimit = doParallelLimit(_asyncMap);
                var mapSeries = doLimit(mapLimit, 1);
                applyEach$1(mapSeries);
                rest(function(fn, args) {
                  return rest(function(callArgs) {
                    return fn.apply(null, args.concat(callArgs));
                  });
                });
                function arrayEach(array, iteratee) {
                  var index = -1, length = array == null ? 0 : array.length;
                  while (++index < length) {
                    if (iteratee(array[index], index, array) === false) {
                      break;
                    }
                  }
                  return array;
                }
                function createBaseFor(fromRight) {
                  return function(object, iteratee, keysFunc) {
                    var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                    while (length--) {
                      var key = props[fromRight ? length : ++index];
                      if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                      }
                    }
                    return object;
                  };
                }
                var baseFor = createBaseFor();
                function baseForOwn(object, iteratee) {
                  return object && baseFor(object, iteratee, keys);
                }
                function baseFindIndex(array, predicate, fromIndex, fromRight) {
                  var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
                  while (fromRight ? index-- : ++index < length) {
                    if (predicate(array[index], index, array)) {
                      return index;
                    }
                  }
                  return -1;
                }
                function baseIsNaN(value) {
                  return value !== value;
                }
                function strictIndexOf(array, value, fromIndex) {
                  var index = fromIndex - 1, length = array.length;
                  while (++index < length) {
                    if (array[index] === value) {
                      return index;
                    }
                  }
                  return -1;
                }
                function baseIndexOf(array, value, fromIndex) {
                  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
                }
                var rsAstralRange$1 = "\\ud800-\\udfff";
                var rsComboMarksRange$1 = "\\u0300-\\u036f";
                var reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f";
                var rsComboSymbolsRange$1 = "\\u20d0-\\u20ff";
                var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
                var rsVarRange$1 = "\\ufe0e\\ufe0f";
                var rsAstral = "[" + rsAstralRange$1 + "]";
                var rsCombo = "[" + rsComboRange$1 + "]";
                var rsFitz = "\\ud83c[\\udffb-\\udfff]";
                var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
                var rsNonAstral = "[^" + rsAstralRange$1 + "]";
                var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
                var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
                var rsZWJ$1 = "\\u200d";
                var reOptMod = rsModifier + "?";
                var rsOptVar = "[" + rsVarRange$1 + "]?";
                var rsOptJoin = "(?:" + rsZWJ$1 + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
                var rsSeq = rsOptVar + reOptMod + rsOptJoin;
                var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
                var hasSetImmediate = typeof setImmediate === "function" && setImmediate;
                var hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
                function fallback(fn) {
                  setTimeout(fn, 0);
                }
                function wrap(defer) {
                  return rest(function(fn, args) {
                    defer(function() {
                      fn.apply(null, args);
                    });
                  });
                }
                var _defer;
                if (hasSetImmediate) {
                  _defer = setImmediate;
                } else if (hasNextTick) {
                  _defer = process.nextTick;
                } else {
                  _defer = fallback;
                }
                wrap(_defer);
                var eachOfSeries = doLimit(eachOfLimit, 1);
                function reduce(coll, memo, iteratee, callback) {
                  callback = once(callback || noop);
                  eachOfSeries(coll, function(x3, i3, callback2) {
                    iteratee(memo, x3, function(err2, v2) {
                      memo = v2;
                      callback2(err2);
                    });
                  }, function(err2) {
                    callback(err2, memo);
                  });
                }
                var seq = rest(function seq2(functions) {
                  return rest(function(args) {
                    var that = this;
                    var cb = args[args.length - 1];
                    if (typeof cb == "function") {
                      args.pop();
                    } else {
                      cb = noop;
                    }
                    reduce(
                      functions,
                      args,
                      function(newargs, fn, cb2) {
                        fn.apply(that, newargs.concat(rest(function(err2, nextargs) {
                          cb2(err2, nextargs);
                        })));
                      },
                      function(err2, results) {
                        cb.apply(that, [err2].concat(results));
                      }
                    );
                  });
                });
                rest(function(args) {
                  return seq.apply(null, args.reverse());
                });
                rest(function(values) {
                  var args = [null].concat(values);
                  return initialParams(function(ignoredArgs, callback) {
                    return callback.apply(this, args);
                  });
                });
                function consoleFunc(name) {
                  return rest(function(fn, args) {
                    fn.apply(null, args.concat(rest(function(err2, args2) {
                      if (typeof console === "object") {
                        if (err2) {
                          if (console.error) {
                            console.error(err2);
                          }
                        } else if (console[name]) {
                          arrayEach(args2, function(x3) {
                            console[name](x3);
                          });
                        }
                      }
                    })));
                  });
                }
                consoleFunc("dir");
                function _withoutIndex(iteratee) {
                  return function(value, index, callback) {
                    return iteratee(value, callback);
                  };
                }
                function eachLimit(coll, iteratee, callback) {
                  eachOf(coll, _withoutIndex(iteratee), callback);
                }
                consoleFunc("log");
                var _defer$1;
                if (hasNextTick) {
                  _defer$1 = process.nextTick;
                } else if (hasSetImmediate) {
                  _defer$1 = setImmediate;
                } else {
                  _defer$1 = fallback;
                }
                wrap(_defer$1);
                var nativeCeil = Math.ceil;
                var nativeMax$1 = Math.max;
                var errorCodeLookup;
                function constructErrorCodeLookup() {
                  if (errorCodeLookup) {
                    return;
                  }
                  errorCodeLookup = {};
                  errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR] = ErrorCode.EIO;
                  errorCodeLookup[Dropbox.ApiError.INVALID_PARAM] = ErrorCode.EINVAL;
                  errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN] = ErrorCode.EPERM;
                  errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR] = ErrorCode.EPERM;
                  errorCodeLookup[Dropbox.ApiError.NOT_FOUND] = ErrorCode.ENOENT;
                  errorCodeLookup[Dropbox.ApiError.INVALID_METHOD] = ErrorCode.EINVAL;
                  errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE] = ErrorCode.EINVAL;
                  errorCodeLookup[Dropbox.ApiError.CONFLICT] = ErrorCode.EINVAL;
                  errorCodeLookup[Dropbox.ApiError.RATE_LIMITED] = ErrorCode.EBUSY;
                  errorCodeLookup[Dropbox.ApiError.SERVER_ERROR] = ErrorCode.EBUSY;
                  errorCodeLookup[Dropbox.ApiError.OVER_QUOTA] = ErrorCode.ENOSPC;
                }
                function isFileInfo(cache) {
                  return cache && cache.stat.isFile;
                }
                function isDirInfo(cache) {
                  return cache && cache.stat.isFolder;
                }
                function isArrayBuffer(ab) {
                  return ab === null || ab === void 0 || typeof ab === "object" && typeof ab["byteLength"] === "number";
                }
                var CachedDropboxClient = function CachedDropboxClient2(client) {
                  this._cache = {};
                  this._client = client;
                };
                CachedDropboxClient.prototype.readdir = function readdir(p, cb) {
                  var this$1 = this;
                  var cacheInfo = this.getCachedDirInfo(p);
                  this._wrap(function(interceptCb) {
                    if (cacheInfo !== null && cacheInfo.contents) {
                      this$1._client.readdir(p, {
                        contentHash: cacheInfo.stat.contentHash
                      }, interceptCb);
                    } else {
                      this$1._client.readdir(p, interceptCb);
                    }
                  }, function(err2, filenames, stat, folderEntries) {
                    if (err2) {
                      if (err2.status === Dropbox.ApiError.NO_CONTENT && cacheInfo !== null) {
                        cb(null, cacheInfo.contents.slice(0));
                      } else {
                        cb(err2);
                      }
                    } else {
                      this$1.updateCachedDirInfo(p, stat, filenames.slice(0));
                      folderEntries.forEach(function(entry) {
                        this$1.updateCachedInfo(path.join(p, entry.name), entry);
                      });
                      cb(null, filenames);
                    }
                  });
                };
                CachedDropboxClient.prototype.remove = function remove(p, cb) {
                  var this$1 = this;
                  this._wrap(function(interceptCb) {
                    this$1._client.remove(p, interceptCb);
                  }, function(err2, stat) {
                    if (!err2) {
                      this$1.updateCachedInfo(p, stat);
                    }
                    cb(err2);
                  });
                };
                CachedDropboxClient.prototype.move = function move(src, dest, cb) {
                  var this$1 = this;
                  this._wrap(function(interceptCb) {
                    this$1._client.move(src, dest, interceptCb);
                  }, function(err2, stat) {
                    if (!err2) {
                      this$1.deleteCachedInfo(src);
                      this$1.updateCachedInfo(dest, stat);
                    }
                    cb(err2);
                  });
                };
                CachedDropboxClient.prototype.stat = function stat(p, cb) {
                  var this$1 = this;
                  this._wrap(function(interceptCb) {
                    this$1._client.stat(p, interceptCb);
                  }, function(err2, stat2) {
                    if (!err2) {
                      this$1.updateCachedInfo(p, stat2);
                    }
                    cb(err2, stat2);
                  });
                };
                CachedDropboxClient.prototype.readFile = function readFile(p, cb) {
                  var this$1 = this;
                  var cacheInfo = this.getCachedFileInfo(p);
                  if (cacheInfo !== null && cacheInfo.contents !== null) {
                    this.stat(p, function(error, stat) {
                      if (error) {
                        cb(error);
                      } else if (stat.contentHash === cacheInfo.stat.contentHash) {
                        cb(error, cacheInfo.contents.slice(0), cacheInfo.stat);
                      } else {
                        this$1.readFile(p, cb);
                      }
                    });
                  } else {
                    this._wrap(function(interceptCb) {
                      this$1._client.readFile(p, { arrayBuffer: true }, interceptCb);
                    }, function(err2, contents, stat) {
                      if (!err2) {
                        this$1.updateCachedInfo(p, stat, contents.slice(0));
                      }
                      cb(err2, contents, stat);
                    });
                  }
                };
                CachedDropboxClient.prototype.writeFile = function writeFile2(p, contents, cb) {
                  var this$1 = this;
                  this._wrap(function(interceptCb) {
                    this$1._client.writeFile(p, contents, interceptCb);
                  }, function(err2, stat) {
                    if (!err2) {
                      this$1.updateCachedInfo(p, stat, contents.slice(0));
                    }
                    cb(err2, stat);
                  });
                };
                CachedDropboxClient.prototype.mkdir = function mkdir(p, cb) {
                  var this$1 = this;
                  this._wrap(function(interceptCb) {
                    this$1._client.mkdir(p, interceptCb);
                  }, function(err2, stat) {
                    if (!err2) {
                      this$1.updateCachedInfo(p, stat, []);
                    }
                    cb(err2);
                  });
                };
                CachedDropboxClient.prototype._wrap = function _wrap(performOp, cb) {
                  var numRun = 0;
                  var interceptCb = function(error) {
                    var timeoutDuration = 2;
                    if (error && 3 > ++numRun) {
                      switch (error.status) {
                        case Dropbox.ApiError.SERVER_ERROR:
                        case Dropbox.ApiError.NETWORK_ERROR:
                        case Dropbox.ApiError.RATE_LIMITED:
                          setTimeout(function() {
                            performOp(interceptCb);
                          }, timeoutDuration * 1e3);
                          break;
                        default:
                          cb.apply(null, arguments);
                          break;
                      }
                    } else {
                      cb.apply(null, arguments);
                    }
                  };
                  performOp(interceptCb);
                };
                CachedDropboxClient.prototype.getCachedInfo = function getCachedInfo(p) {
                  return this._cache[p.toLowerCase()];
                };
                CachedDropboxClient.prototype.putCachedInfo = function putCachedInfo(p, cache) {
                  this._cache[p.toLowerCase()] = cache;
                };
                CachedDropboxClient.prototype.deleteCachedInfo = function deleteCachedInfo(p) {
                  delete this._cache[p.toLowerCase()];
                };
                CachedDropboxClient.prototype.getCachedDirInfo = function getCachedDirInfo(p) {
                  var info = this.getCachedInfo(p);
                  if (isDirInfo(info)) {
                    return info;
                  } else {
                    return null;
                  }
                };
                CachedDropboxClient.prototype.getCachedFileInfo = function getCachedFileInfo(p) {
                  var info = this.getCachedInfo(p);
                  if (isFileInfo(info)) {
                    return info;
                  } else {
                    return null;
                  }
                };
                CachedDropboxClient.prototype.updateCachedDirInfo = function updateCachedDirInfo(p, stat, contents) {
                  if (contents === void 0)
                    contents = null;
                  var cachedInfo = this.getCachedInfo(p);
                  if (stat.contentHash !== null && (cachedInfo === void 0 || cachedInfo.stat.contentHash !== stat.contentHash)) {
                    this.putCachedInfo(p, {
                      stat,
                      contents
                    });
                  }
                };
                CachedDropboxClient.prototype.updateCachedFileInfo = function updateCachedFileInfo(p, stat, contents) {
                  if (contents === void 0)
                    contents = null;
                  var cachedInfo = this.getCachedInfo(p);
                  if (stat.versionTag !== null && (cachedInfo === void 0 || cachedInfo.stat.versionTag !== stat.versionTag)) {
                    this.putCachedInfo(p, {
                      stat,
                      contents
                    });
                  }
                };
                CachedDropboxClient.prototype.updateCachedInfo = function updateCachedInfo(p, stat, contents) {
                  if (contents === void 0)
                    contents = null;
                  if (stat.isFile && isArrayBuffer(contents)) {
                    this.updateCachedFileInfo(p, stat, contents);
                  } else if (stat.isFolder && Array.isArray(contents)) {
                    this.updateCachedDirInfo(p, stat, contents);
                  }
                };
                var DropboxFile = function(PreloadFile$$1) {
                  function DropboxFile2(_fs, _path, _flag, _stat, contents) {
                    PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
                  }
                  if (PreloadFile$$1)
                    DropboxFile2.__proto__ = PreloadFile$$1;
                  DropboxFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
                  DropboxFile2.prototype.constructor = DropboxFile2;
                  DropboxFile2.prototype.sync = function sync(cb) {
                    var this$1 = this;
                    if (this.isDirty()) {
                      var buffer$$1 = this.getBuffer(), arrayBuffer = buffer2ArrayBuffer(buffer$$1);
                      this._fs._writeFileStrict(this.getPath(), arrayBuffer, function(e) {
                        if (!e) {
                          this$1.resetDirty();
                        }
                        cb(e);
                      });
                    } else {
                      cb();
                    }
                  };
                  DropboxFile2.prototype.close = function close(cb) {
                    this.sync(cb);
                  };
                  return DropboxFile2;
                }(PreloadFile);
                var DropboxFileSystem = function(BaseFileSystem$$1) {
                  function DropboxFileSystem2(client, deprecateMsg) {
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    BaseFileSystem$$1.call(this);
                    this._client = new CachedDropboxClient(client);
                    deprecationMessage(deprecateMsg, DropboxFileSystem2.Name, { client: "authenticated dropbox client instance" });
                    constructErrorCodeLookup();
                  }
                  if (BaseFileSystem$$1)
                    DropboxFileSystem2.__proto__ = BaseFileSystem$$1;
                  DropboxFileSystem2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  DropboxFileSystem2.prototype.constructor = DropboxFileSystem2;
                  DropboxFileSystem2.Create = function Create(opts, cb) {
                    cb(null, new DropboxFileSystem2(opts.client, false));
                  };
                  DropboxFileSystem2.isAvailable = function isAvailable() {
                    return typeof Dropbox !== "undefined";
                  };
                  DropboxFileSystem2.prototype.getName = function getName() {
                    return DropboxFileSystem2.Name;
                  };
                  DropboxFileSystem2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  DropboxFileSystem2.prototype.supportsSymlinks = function supportsSymlinks() {
                    return false;
                  };
                  DropboxFileSystem2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  DropboxFileSystem2.prototype.supportsSynch = function supportsSynch() {
                    return false;
                  };
                  DropboxFileSystem2.prototype.empty = function empty(mainCb) {
                    var this$1 = this;
                    this._client.readdir("/", function(error, files) {
                      if (error) {
                        mainCb(this$1.convert(error, "/"));
                      } else {
                        var deleteFile2 = function(file, cb) {
                          var p = path.join("/", file);
                          this$1._client.remove(p, function(err2) {
                            cb(err2 ? this$1.convert(err2, p) : null);
                          });
                        };
                        var finished = function(err2) {
                          if (err2) {
                            mainCb(err2);
                          } else {
                            mainCb();
                          }
                        };
                        eachLimit(files, deleteFile2, finished);
                      }
                    });
                  };
                  DropboxFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                    var this$1 = this;
                    this._client.move(oldPath, newPath, function(error) {
                      if (error) {
                        this$1._client.stat(newPath, function(error2, stat) {
                          if (error2 || stat.isFolder) {
                            var missingPath = error.response.error.indexOf(oldPath) > -1 ? oldPath : newPath;
                            cb(this$1.convert(error, missingPath));
                          } else {
                            this$1._client.remove(newPath, function(error22) {
                              if (error22) {
                                cb(this$1.convert(error22, newPath));
                              } else {
                                this$1.rename(oldPath, newPath, cb);
                              }
                            });
                          }
                        });
                      } else {
                        cb();
                      }
                    });
                  };
                  DropboxFileSystem2.prototype.stat = function stat(path$$1, isLstat, cb) {
                    var this$1 = this;
                    this._client.stat(path$$1, function(error, stat2) {
                      if (error) {
                        cb(this$1.convert(error, path$$1));
                      } else if (stat2 && stat2.isRemoved) {
                        cb(ApiError.FileError(ErrorCode.ENOENT, path$$1));
                      } else {
                        var stats = new Stats(this$1._statType(stat2), stat2.size);
                        return cb(null, stats);
                      }
                    });
                  };
                  DropboxFileSystem2.prototype.open = function open(path$$1, flags, mode, cb) {
                    var this$1 = this;
                    this._client.readFile(path$$1, function(error, content, dbStat) {
                      if (error) {
                        if (flags.isReadable()) {
                          cb(this$1.convert(error, path$$1));
                        } else {
                          switch (error.status) {
                            case Dropbox.ApiError.NOT_FOUND:
                              var ab = new ArrayBuffer(0);
                              return this$1._writeFileStrict(path$$1, ab, function(error2, stat) {
                                if (error2) {
                                  cb(error2);
                                } else {
                                  var file2 = this$1._makeFile(path$$1, flags, stat, arrayBuffer2Buffer(ab));
                                  cb(null, file2);
                                }
                              });
                            default:
                              return cb(this$1.convert(error, path$$1));
                          }
                        }
                      } else {
                        var buffer$$1;
                        if (content === null) {
                          buffer$$1 = emptyBuffer();
                        } else {
                          buffer$$1 = arrayBuffer2Buffer(content);
                        }
                        var file = this$1._makeFile(path$$1, flags, dbStat, buffer$$1);
                        return cb(null, file);
                      }
                    });
                  };
                  DropboxFileSystem2.prototype._writeFileStrict = function _writeFileStrict(p, data, cb) {
                    var this$1 = this;
                    var parent = path.dirname(p);
                    this.stat(parent, false, function(error, stat) {
                      if (error) {
                        cb(ApiError.FileError(ErrorCode.ENOENT, parent));
                      } else {
                        this$1._client.writeFile(p, data, function(error2, stat2) {
                          if (error2) {
                            cb(this$1.convert(error2, p));
                          } else {
                            cb(null, stat2);
                          }
                        });
                      }
                    });
                  };
                  DropboxFileSystem2.prototype._statType = function _statType(stat) {
                    return stat.isFile ? FileType.FILE : FileType.DIRECTORY;
                  };
                  DropboxFileSystem2.prototype._makeFile = function _makeFile(path$$1, flag, stat, buffer$$1) {
                    var type = this._statType(stat);
                    var stats = new Stats(type, stat.size);
                    return new DropboxFile(this, path$$1, flag, stats, buffer$$1);
                  };
                  DropboxFileSystem2.prototype._remove = function _remove(path$$1, cb, isFile) {
                    var this$1 = this;
                    this._client.stat(path$$1, function(error, stat) {
                      if (error) {
                        cb(this$1.convert(error, path$$1));
                      } else {
                        if (stat.isFile && !isFile) {
                          cb(ApiError.FileError(ErrorCode.ENOTDIR, path$$1));
                        } else if (!stat.isFile && isFile) {
                          cb(ApiError.FileError(ErrorCode.EISDIR, path$$1));
                        } else {
                          this$1._client.remove(path$$1, function(error2) {
                            if (error2) {
                              cb(this$1.convert(error2, path$$1));
                            } else {
                              cb(null);
                            }
                          });
                        }
                      }
                    });
                  };
                  DropboxFileSystem2.prototype.unlink = function unlink(path$$1, cb) {
                    this._remove(path$$1, cb, true);
                  };
                  DropboxFileSystem2.prototype.rmdir = function rmdir(path$$1, cb) {
                    this._remove(path$$1, cb, false);
                  };
                  DropboxFileSystem2.prototype.mkdir = function mkdir(p, mode, cb) {
                    var this$1 = this;
                    var parent = path.dirname(p);
                    this._client.stat(parent, function(error, stat) {
                      if (error) {
                        cb(this$1.convert(error, parent));
                      } else {
                        this$1._client.mkdir(p, function(error2) {
                          if (error2) {
                            cb(ApiError.FileError(ErrorCode.EEXIST, p));
                          } else {
                            cb(null);
                          }
                        });
                      }
                    });
                  };
                  DropboxFileSystem2.prototype.readdir = function readdir(path$$1, cb) {
                    var this$1 = this;
                    this._client.readdir(path$$1, function(error, files) {
                      if (error) {
                        return cb(this$1.convert(error));
                      } else {
                        return cb(null, files);
                      }
                    });
                  };
                  DropboxFileSystem2.prototype.convert = function convert(err2, path$$1) {
                    if (path$$1 === void 0)
                      path$$1 = null;
                    var errorCode = errorCodeLookup[err2.status];
                    if (errorCode === void 0) {
                      errorCode = ErrorCode.EIO;
                    }
                    if (!path$$1) {
                      return new ApiError(errorCode);
                    } else {
                      return ApiError.FileError(errorCode, path$$1);
                    }
                  };
                  return DropboxFileSystem2;
                }(BaseFileSystem);
                DropboxFileSystem.Name = "Dropbox";
                DropboxFileSystem.Options = {
                  client: {
                    type: "object",
                    description: "An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",
                    validator: function(opt, cb) {
                      if (opt.isAuthenticated && opt.isAuthenticated()) {
                        cb();
                      } else {
                        cb(new ApiError(ErrorCode.EINVAL, "'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."));
                      }
                    }
                  }
                };
                function convertError(e, path$$1) {
                  if (path$$1 === void 0)
                    path$$1 = "";
                  var errno = e.errno;
                  var parent = e.node;
                  var paths = [];
                  while (parent) {
                    paths.unshift(parent.name);
                    if (parent === parent.parent) {
                      break;
                    }
                    parent = parent.parent;
                  }
                  return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? "/" + paths.join("/") : path$$1);
                }
                var EmscriptenFile = function(BaseFile$$1) {
                  function EmscriptenFile2(_fs, _FS, _path, _stream) {
                    BaseFile$$1.call(this);
                    this._fs = _fs;
                    this._FS = _FS;
                    this._path = _path;
                    this._stream = _stream;
                  }
                  if (BaseFile$$1)
                    EmscriptenFile2.__proto__ = BaseFile$$1;
                  EmscriptenFile2.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
                  EmscriptenFile2.prototype.constructor = EmscriptenFile2;
                  EmscriptenFile2.prototype.getPos = function getPos() {
                    return void 0;
                  };
                  EmscriptenFile2.prototype.close = function close(cb) {
                    var err2 = null;
                    try {
                      this.closeSync();
                    } catch (e) {
                      err2 = e;
                    } finally {
                      cb(err2);
                    }
                  };
                  EmscriptenFile2.prototype.closeSync = function closeSync() {
                    try {
                      this._FS.close(this._stream);
                    } catch (e) {
                      throw convertError(e, this._path);
                    }
                  };
                  EmscriptenFile2.prototype.stat = function stat(cb) {
                    try {
                      cb(null, this.statSync());
                    } catch (e) {
                      cb(e);
                    }
                  };
                  EmscriptenFile2.prototype.statSync = function statSync() {
                    try {
                      return this._fs.statSync(this._path, false);
                    } catch (e) {
                      throw convertError(e, this._path);
                    }
                  };
                  EmscriptenFile2.prototype.truncate = function truncate(len, cb) {
                    var err2 = null;
                    try {
                      this.truncateSync(len);
                    } catch (e) {
                      err2 = e;
                    } finally {
                      cb(err2);
                    }
                  };
                  EmscriptenFile2.prototype.truncateSync = function truncateSync(len) {
                    try {
                      this._FS.ftruncate(this._stream.fd, len);
                    } catch (e) {
                      throw convertError(e, this._path);
                    }
                  };
                  EmscriptenFile2.prototype.write = function write(buffer$$1, offset, length, position, cb) {
                    try {
                      cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
                    } catch (e) {
                      cb(e);
                    }
                  };
                  EmscriptenFile2.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
                    try {
                      var u8 = buffer2Uint8array(buffer$$1);
                      var emPosition = position === null ? void 0 : position;
                      return this._FS.write(this._stream, u8, offset, length, emPosition);
                    } catch (e) {
                      throw convertError(e, this._path);
                    }
                  };
                  EmscriptenFile2.prototype.read = function read(buffer$$1, offset, length, position, cb) {
                    try {
                      cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
                    } catch (e) {
                      cb(e);
                    }
                  };
                  EmscriptenFile2.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
                    try {
                      var u8 = buffer2Uint8array(buffer$$1);
                      var emPosition = position === null ? void 0 : position;
                      return this._FS.read(this._stream, u8, offset, length, emPosition);
                    } catch (e) {
                      throw convertError(e, this._path);
                    }
                  };
                  EmscriptenFile2.prototype.sync = function sync(cb) {
                    cb();
                  };
                  EmscriptenFile2.prototype.syncSync = function syncSync() {
                  };
                  EmscriptenFile2.prototype.chown = function chown(uid, gid, cb) {
                    var err2 = null;
                    try {
                      this.chownSync(uid, gid);
                    } catch (e) {
                      err2 = e;
                    } finally {
                      cb(err2);
                    }
                  };
                  EmscriptenFile2.prototype.chownSync = function chownSync(uid, gid) {
                    try {
                      this._FS.fchown(this._stream.fd, uid, gid);
                    } catch (e) {
                      throw convertError(e, this._path);
                    }
                  };
                  EmscriptenFile2.prototype.chmod = function chmod(mode, cb) {
                    var err2 = null;
                    try {
                      this.chmodSync(mode);
                    } catch (e) {
                      err2 = e;
                    } finally {
                      cb(err2);
                    }
                  };
                  EmscriptenFile2.prototype.chmodSync = function chmodSync(mode) {
                    try {
                      this._FS.fchmod(this._stream.fd, mode);
                    } catch (e) {
                      throw convertError(e, this._path);
                    }
                  };
                  EmscriptenFile2.prototype.utimes = function utimes(atime, mtime, cb) {
                    var err2 = null;
                    try {
                      this.utimesSync(atime, mtime);
                    } catch (e) {
                      err2 = e;
                    } finally {
                      cb(err2);
                    }
                  };
                  EmscriptenFile2.prototype.utimesSync = function utimesSync(atime, mtime) {
                    this._fs.utimesSync(this._path, atime, mtime);
                  };
                  return EmscriptenFile2;
                }(BaseFile);
                var EmscriptenFileSystem = function(SynchronousFileSystem$$1) {
                  function EmscriptenFileSystem2(_FS) {
                    SynchronousFileSystem$$1.call(this);
                    this._FS = _FS;
                  }
                  if (SynchronousFileSystem$$1)
                    EmscriptenFileSystem2.__proto__ = SynchronousFileSystem$$1;
                  EmscriptenFileSystem2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
                  EmscriptenFileSystem2.prototype.constructor = EmscriptenFileSystem2;
                  EmscriptenFileSystem2.Create = function Create(opts, cb) {
                    cb(null, new EmscriptenFileSystem2(opts.FS));
                  };
                  EmscriptenFileSystem2.isAvailable = function isAvailable() {
                    return true;
                  };
                  EmscriptenFileSystem2.prototype.getName = function getName() {
                    return this._FS.DB_NAME();
                  };
                  EmscriptenFileSystem2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  EmscriptenFileSystem2.prototype.supportsLinks = function supportsLinks() {
                    return true;
                  };
                  EmscriptenFileSystem2.prototype.supportsProps = function supportsProps() {
                    return true;
                  };
                  EmscriptenFileSystem2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  EmscriptenFileSystem2.prototype.renameSync = function renameSync(oldPath, newPath) {
                    try {
                      this._FS.rename(oldPath, newPath);
                    } catch (e) {
                      if (e.errno === ErrorCode.ENOENT) {
                        throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);
                      } else {
                        throw convertError(e);
                      }
                    }
                  };
                  EmscriptenFileSystem2.prototype.statSync = function statSync(p, isLstat) {
                    try {
                      var stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
                      var itemType = this.modeToFileType(stats.mode);
                      return new Stats(itemType, stats.size, stats.mode, stats.atime, stats.mtime, stats.ctime);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.openSync = function openSync(p, flag, mode) {
                    try {
                      var stream = this._FS.open(p, flag.getFlagString(), mode);
                      if (this._FS.isDir(stream.node.mode)) {
                        this._FS.close(stream);
                        throw ApiError.EISDIR(p);
                      }
                      return new EmscriptenFile(this, this._FS, p, stream);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.unlinkSync = function unlinkSync(p) {
                    try {
                      this._FS.unlink(p);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.rmdirSync = function rmdirSync(p) {
                    try {
                      this._FS.rmdir(p);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.mkdirSync = function mkdirSync(p, mode) {
                    try {
                      this._FS.mkdir(p, mode);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.readdirSync = function readdirSync(p) {
                    try {
                      return this._FS.readdir(p).filter(function(p2) {
                        return p2 !== "." && p2 !== "..";
                      });
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.truncateSync = function truncateSync(p, len) {
                    try {
                      this._FS.truncate(p, len);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.readFileSync = function readFileSync(p, encoding, flag) {
                    try {
                      var data = this._FS.readFile(p, { flags: flag.getFlagString() });
                      var buff = uint8Array2Buffer(data);
                      if (encoding) {
                        return buff.toString(encoding);
                      } else {
                        return buff;
                      }
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.writeFileSync = function writeFileSync(p, data, encoding, flag, mode) {
                    try {
                      if (encoding) {
                        data = Buffer3.from(data, encoding);
                      }
                      var u8 = buffer2Uint8array(data);
                      this._FS.writeFile(p, u8, { flags: flag.getFlagString(), encoding: "binary" });
                      this._FS.chmod(p, mode);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                    try {
                      isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                    try {
                      isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
                    try {
                      this._FS.symlink(srcpath, dstpath);
                    } catch (e) {
                      throw convertError(e);
                    }
                  };
                  EmscriptenFileSystem2.prototype.readlinkSync = function readlinkSync(p) {
                    try {
                      return this._FS.readlink(p);
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                    try {
                      this._FS.utime(p, atime.getTime(), mtime.getTime());
                    } catch (e) {
                      throw convertError(e, p);
                    }
                  };
                  EmscriptenFileSystem2.prototype.modeToFileType = function modeToFileType(mode) {
                    if (this._FS.isDir(mode)) {
                      return FileType.DIRECTORY;
                    } else if (this._FS.isFile(mode)) {
                      return FileType.FILE;
                    } else if (this._FS.isLink(mode)) {
                      return FileType.SYMLINK;
                    } else {
                      throw ApiError.EPERM("Invalid mode: " + mode);
                    }
                  };
                  return EmscriptenFileSystem2;
                }(SynchronousFileSystem);
                EmscriptenFileSystem.Name = "EmscriptenFileSystem";
                EmscriptenFileSystem.Options = {
                  FS: {
                    type: "object",
                    description: "The Emscripten file system to use (the `FS` variable)"
                  }
                };
                var FolderAdapter = function(BaseFileSystem$$1) {
                  function FolderAdapter2(folder, wrapped) {
                    BaseFileSystem$$1.call(this);
                    this._folder = folder;
                    this._wrapped = wrapped;
                  }
                  if (BaseFileSystem$$1)
                    FolderAdapter2.__proto__ = BaseFileSystem$$1;
                  FolderAdapter2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  FolderAdapter2.prototype.constructor = FolderAdapter2;
                  FolderAdapter2.Create = function Create(opts, cb) {
                    cb(null, new FolderAdapter2(opts.folder, opts.wrapped));
                  };
                  FolderAdapter2.isAvailable = function isAvailable() {
                    return true;
                  };
                  FolderAdapter2.prototype.initialize = function initialize3(cb) {
                    var this$1 = this;
                    this._wrapped.exists(this._folder, function(exists) {
                      if (exists) {
                        cb();
                      } else if (this$1._wrapped.isReadOnly()) {
                        cb(ApiError.ENOENT(this$1._folder));
                      } else {
                        this$1._wrapped.mkdir(this$1._folder, 511, cb);
                      }
                    });
                  };
                  FolderAdapter2.prototype.getName = function getName() {
                    return this._wrapped.getName();
                  };
                  FolderAdapter2.prototype.isReadOnly = function isReadOnly() {
                    return this._wrapped.isReadOnly();
                  };
                  FolderAdapter2.prototype.supportsProps = function supportsProps() {
                    return this._wrapped.supportsProps();
                  };
                  FolderAdapter2.prototype.supportsSynch = function supportsSynch() {
                    return this._wrapped.supportsSynch();
                  };
                  FolderAdapter2.prototype.supportsLinks = function supportsLinks() {
                    return false;
                  };
                  return FolderAdapter2;
                }(BaseFileSystem);
                FolderAdapter.Name = "FolderAdapter";
                FolderAdapter.Options = {
                  folder: {
                    type: "string",
                    description: "The folder to use as the root directory"
                  },
                  wrapped: {
                    type: "object",
                    description: "The file system to wrap"
                  }
                };
                function translateError(folder, e) {
                  if (e !== null && typeof e === "object") {
                    var err2 = e;
                    var p = err2.path;
                    if (p) {
                      p = "/" + path.relative(folder, p);
                      err2.message = err2.message.replace(err2.path, p);
                      err2.path = p;
                    }
                  }
                  return e;
                }
                function wrapCallback(folder, cb) {
                  if (typeof cb === "function") {
                    return function(err2) {
                      if (arguments.length > 0) {
                        arguments[0] = translateError(folder, err2);
                      }
                      cb.apply(null, arguments);
                    };
                  } else {
                    return cb;
                  }
                }
                function wrapFunction(name, wrapFirst, wrapSecond) {
                  if (name.slice(name.length - 4) !== "Sync") {
                    return function() {
                      if (arguments.length > 0) {
                        if (wrapFirst) {
                          arguments[0] = path.join(this._folder, arguments[0]);
                        }
                        if (wrapSecond) {
                          arguments[1] = path.join(this._folder, arguments[1]);
                        }
                        arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
                      }
                      return this._wrapped[name].apply(this._wrapped, arguments);
                    };
                  } else {
                    return function() {
                      try {
                        if (wrapFirst) {
                          arguments[0] = path.join(this._folder, arguments[0]);
                        }
                        if (wrapSecond) {
                          arguments[1] = path.join(this._folder, arguments[1]);
                        }
                        return this._wrapped[name].apply(this._wrapped, arguments);
                      } catch (e) {
                        throw translateError(this._folder, e);
                      }
                    };
                  }
                }
                [
                  "diskSpace",
                  "stat",
                  "statSync",
                  "open",
                  "openSync",
                  "unlink",
                  "unlinkSync",
                  "rmdir",
                  "rmdirSync",
                  "mkdir",
                  "mkdirSync",
                  "readdir",
                  "readdirSync",
                  "exists",
                  "existsSync",
                  "realpath",
                  "realpathSync",
                  "truncate",
                  "truncateSync",
                  "readFile",
                  "readFileSync",
                  "writeFile",
                  "writeFileSync",
                  "appendFile",
                  "appendFileSync",
                  "chmod",
                  "chmodSync",
                  "chown",
                  "chownSync",
                  "utimes",
                  "utimesSync",
                  "readlink",
                  "readlinkSync"
                ].forEach(function(name) {
                  FolderAdapter.prototype[name] = wrapFunction(name, true, false);
                });
                ["rename", "renameSync", "link", "linkSync", "symlink", "symlinkSync"].forEach(function(name) {
                  FolderAdapter.prototype[name] = wrapFunction(name, true, true);
                });
                var toExport;
                if (typeof window !== "undefined") {
                  toExport = window;
                } else if (typeof self !== "undefined") {
                  toExport = self;
                } else {
                  toExport = global;
                }
                var global$1 = toExport;
                function isDirectoryEntry(entry) {
                  return entry.isDirectory;
                }
                var _getFS = global$1.webkitRequestFileSystem || global$1.requestFileSystem || null;
                function _requestQuota(type, size, success, errorCallback) {
                  if (typeof navigator["webkitPersistentStorage"] !== "undefined") {
                    switch (type) {
                      case global$1.PERSISTENT:
                        navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
                        break;
                      case global$1.TEMPORARY:
                        navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
                        break;
                      default:
                        errorCallback(new TypeError("Invalid storage type: " + type));
                        break;
                    }
                  } else {
                    global$1.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
                  }
                }
                function _toArray(list2) {
                  return Array.prototype.slice.call(list2 || [], 0);
                }
                function convertError$1(err2, p, expectedDir) {
                  switch (err2.name) {
                    case "PathExistsError":
                      return ApiError.EEXIST(p);
                    case "QuotaExceededError":
                      return ApiError.FileError(ErrorCode.ENOSPC, p);
                    case "NotFoundError":
                      return ApiError.ENOENT(p);
                    case "SecurityError":
                      return ApiError.FileError(ErrorCode.EACCES, p);
                    case "InvalidModificationError":
                      return ApiError.FileError(ErrorCode.EPERM, p);
                    case "TypeMismatchError":
                      return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);
                    case "EncodingError":
                    case "InvalidStateError":
                    case "NoModificationAllowedError":
                    default:
                      return ApiError.FileError(ErrorCode.EINVAL, p);
                  }
                }
                var HTML5FSFile = function(PreloadFile$$1) {
                  function HTML5FSFile2(fs4, entry, path$$1, flag, stat, contents) {
                    PreloadFile$$1.call(this, fs4, path$$1, flag, stat, contents);
                    this._entry = entry;
                  }
                  if (PreloadFile$$1)
                    HTML5FSFile2.__proto__ = PreloadFile$$1;
                  HTML5FSFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
                  HTML5FSFile2.prototype.constructor = HTML5FSFile2;
                  HTML5FSFile2.prototype.sync = function sync(cb) {
                    var this$1 = this;
                    if (!this.isDirty()) {
                      return cb();
                    }
                    this._entry.createWriter(function(writer) {
                      var buffer$$1 = this$1.getBuffer();
                      var blob = new Blob([buffer2ArrayBuffer(buffer$$1)]);
                      var length = blob.size;
                      writer.onwriteend = function(err2) {
                        writer.onwriteend = null;
                        writer.onerror = null;
                        writer.truncate(length);
                        this$1.resetDirty();
                        cb();
                      };
                      writer.onerror = function(err2) {
                        cb(convertError$1(err2, this$1.getPath(), false));
                      };
                      writer.write(blob);
                    });
                  };
                  HTML5FSFile2.prototype.close = function close(cb) {
                    this.sync(cb);
                  };
                  return HTML5FSFile2;
                }(PreloadFile);
                var HTML5FS = function(BaseFileSystem$$1) {
                  function HTML5FS2(size, type, deprecateMsg) {
                    if (size === void 0)
                      size = 5;
                    if (type === void 0)
                      type = global$1.PERSISTENT;
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    BaseFileSystem$$1.call(this);
                    this.size = 1024 * 1024 * size;
                    this.type = type;
                    deprecationMessage(deprecateMsg, HTML5FS2.Name, { size, type });
                  }
                  if (BaseFileSystem$$1)
                    HTML5FS2.__proto__ = BaseFileSystem$$1;
                  HTML5FS2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  HTML5FS2.prototype.constructor = HTML5FS2;
                  HTML5FS2.Create = function Create(opts, cb) {
                    var fs4 = new HTML5FS2(opts.size, opts.type, false);
                    fs4.allocate(function(e) {
                      return e ? cb(e) : cb(null, fs4);
                    }, false);
                  };
                  HTML5FS2.isAvailable = function isAvailable() {
                    return !!_getFS;
                  };
                  HTML5FS2.prototype.getName = function getName() {
                    return HTML5FS2.Name;
                  };
                  HTML5FS2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  HTML5FS2.prototype.supportsSymlinks = function supportsSymlinks() {
                    return false;
                  };
                  HTML5FS2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  HTML5FS2.prototype.supportsSynch = function supportsSynch() {
                    return false;
                  };
                  HTML5FS2.prototype.allocate = function allocate(cb, deprecateMsg) {
                    var this$1 = this;
                    if (cb === void 0)
                      cb = function() {
                      };
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    if (deprecateMsg) {
                      console.warn("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: " + this.type + ", size: " + this.size + "}, cb)' to create and allocate HTML5FS instances.");
                    }
                    var success = function(fs4) {
                      this$1.fs = fs4;
                      cb();
                    };
                    var error = function(err2) {
                      cb(convertError$1(err2, "/", true));
                    };
                    if (this.type === global$1.PERSISTENT) {
                      _requestQuota(this.type, this.size, function(granted) {
                        _getFS(this$1.type, granted, success, error);
                      }, error);
                    } else {
                      _getFS(this.type, this.size, success, error);
                    }
                  };
                  HTML5FS2.prototype.empty = function empty(mainCb) {
                    this._readdir("/", function(err2, entries) {
                      if (err2) {
                        console.error("Failed to empty FS");
                        mainCb(err2);
                      } else {
                        var finished = function(er) {
                          if (err2) {
                            console.error("Failed to empty FS");
                            mainCb(err2);
                          } else {
                            mainCb();
                          }
                        };
                        var deleteEntry = function(entry, cb) {
                          var succ = function() {
                            cb();
                          };
                          var error = function(err3) {
                            cb(convertError$1(err3, entry.fullPath, !entry.isDirectory));
                          };
                          if (isDirectoryEntry(entry)) {
                            entry.removeRecursively(succ, error);
                          } else {
                            entry.remove(succ, error);
                          }
                        };
                        eachLimit(entries, deleteEntry, finished);
                      }
                    });
                  };
                  HTML5FS2.prototype.rename = function rename(oldPath, newPath, cb) {
                    var this$1 = this;
                    var semaphore = 2;
                    var successCount = 0;
                    var root2 = this.fs.root;
                    var currentPath = oldPath;
                    var error = function(err2) {
                      if (--semaphore <= 0) {
                        cb(convertError$1(err2, currentPath, false));
                      }
                    };
                    var success = function(file) {
                      if (++successCount === 2) {
                        return cb(new ApiError(ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
                      }
                      if (oldPath === newPath) {
                        return cb();
                      }
                      currentPath = path.dirname(newPath);
                      root2.getDirectory(currentPath, {}, function(parentDir) {
                        currentPath = path.basename(newPath);
                        file.moveTo(parentDir, currentPath, function(entry) {
                          cb();
                        }, function(err2) {
                          if (file.isDirectory) {
                            currentPath = newPath;
                            this$1.unlink(newPath, function(e) {
                              if (e) {
                                error(err2);
                              } else {
                                this$1.rename(oldPath, newPath, cb);
                              }
                            });
                          } else {
                            error(err2);
                          }
                        });
                      }, error);
                    };
                    root2.getFile(oldPath, {}, success, error);
                    root2.getDirectory(oldPath, {}, success, error);
                  };
                  HTML5FS2.prototype.stat = function stat(path$$1, isLstat, cb) {
                    var this$1 = this;
                    var opts = {
                      create: false
                    };
                    var loadAsFile = function(entry) {
                      var fileFromEntry = function(file) {
                        var stat2 = new Stats(FileType.FILE, file.size);
                        cb(null, stat2);
                      };
                      entry.file(fileFromEntry, failedToLoad);
                    };
                    var loadAsDir = function(dir$$1) {
                      var size = 4096;
                      var stat2 = new Stats(FileType.DIRECTORY, size);
                      cb(null, stat2);
                    };
                    var failedToLoad = function(err2) {
                      cb(convertError$1(
                        err2,
                        path$$1,
                        false
                        /* Unknown / irrelevant */
                      ));
                    };
                    var failedToLoadAsFile = function() {
                      this$1.fs.root.getDirectory(path$$1, opts, loadAsDir, failedToLoad);
                    };
                    this.fs.root.getFile(path$$1, opts, loadAsFile, failedToLoadAsFile);
                  };
                  HTML5FS2.prototype.open = function open(p, flags, mode, cb) {
                    var this$1 = this;
                    var error = function(err2) {
                      if (err2.name === "InvalidModificationError" && flags.isExclusive()) {
                        cb(ApiError.EEXIST(p));
                      } else {
                        cb(convertError$1(err2, p, false));
                      }
                    };
                    this.fs.root.getFile(p, {
                      create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,
                      exclusive: flags.isExclusive()
                    }, function(entry) {
                      entry.file(function(file) {
                        var reader = new FileReader();
                        reader.onloadend = function(event) {
                          var bfsFile = this$1._makeFile(p, entry, flags, file, reader.result);
                          cb(null, bfsFile);
                        };
                        reader.onerror = function(ev2) {
                          error(reader.error);
                        };
                        reader.readAsArrayBuffer(file);
                      }, error);
                    }, error);
                  };
                  HTML5FS2.prototype.unlink = function unlink(path$$1, cb) {
                    this._remove(path$$1, cb, true);
                  };
                  HTML5FS2.prototype.rmdir = function rmdir(path$$1, cb) {
                    var this$1 = this;
                    this.readdir(path$$1, function(e, files) {
                      if (e) {
                        cb(e);
                      } else if (files.length > 0) {
                        cb(ApiError.ENOTEMPTY(path$$1));
                      } else {
                        this$1._remove(path$$1, cb, false);
                      }
                    });
                  };
                  HTML5FS2.prototype.mkdir = function mkdir(path$$1, mode, cb) {
                    var opts = {
                      create: true,
                      exclusive: true
                    };
                    var success = function(dir$$1) {
                      cb();
                    };
                    var error = function(err2) {
                      cb(convertError$1(err2, path$$1, true));
                    };
                    this.fs.root.getDirectory(path$$1, opts, success, error);
                  };
                  HTML5FS2.prototype.readdir = function readdir(path$$1, cb) {
                    this._readdir(path$$1, function(e, entries) {
                      if (entries) {
                        var rv = [];
                        for (var i3 = 0, list2 = entries; i3 < list2.length; i3 += 1) {
                          var entry = list2[i3];
                          rv.push(entry.name);
                        }
                        cb(null, rv);
                      } else {
                        return cb(e);
                      }
                    });
                  };
                  HTML5FS2.prototype._makeFile = function _makeFile(path$$1, entry, flag, stat, data) {
                    if (data === void 0)
                      data = new ArrayBuffer(0);
                    var stats = new Stats(FileType.FILE, stat.size);
                    var buffer$$1 = arrayBuffer2Buffer(data);
                    return new HTML5FSFile(this, entry, path$$1, flag, stats, buffer$$1);
                  };
                  HTML5FS2.prototype._readdir = function _readdir(path$$1, cb) {
                    var error = function(err2) {
                      cb(convertError$1(err2, path$$1, true));
                    };
                    this.fs.root.getDirectory(path$$1, { create: false }, function(dirEntry) {
                      var reader = dirEntry.createReader();
                      var entries = [];
                      var readEntries = function() {
                        reader.readEntries(function(results) {
                          if (results.length) {
                            entries = entries.concat(_toArray(results));
                            readEntries();
                          } else {
                            cb(null, entries);
                          }
                        }, error);
                      };
                      readEntries();
                    }, error);
                  };
                  HTML5FS2.prototype._remove = function _remove(path$$1, cb, isFile) {
                    var success = function(entry) {
                      var succ = function() {
                        cb();
                      };
                      var err2 = function(err3) {
                        cb(convertError$1(err3, path$$1, !isFile));
                      };
                      entry.remove(succ, err2);
                    };
                    var error = function(err2) {
                      cb(convertError$1(err2, path$$1, !isFile));
                    };
                    var opts = {
                      create: false
                    };
                    if (isFile) {
                      this.fs.root.getFile(path$$1, opts, success, error);
                    } else {
                      this.fs.root.getDirectory(path$$1, opts, success, error);
                    }
                  };
                  return HTML5FS2;
                }(BaseFileSystem);
                HTML5FS.Name = "HTML5FS";
                HTML5FS.Options = {
                  size: {
                    type: "number",
                    optional: true,
                    description: "Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."
                  },
                  type: {
                    type: "number",
                    optional: true,
                    description: "window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."
                  }
                };
                var Inode = function Inode2(id, size, mode, atime, mtime, ctime) {
                  this.id = id;
                  this.size = size;
                  this.mode = mode;
                  this.atime = atime;
                  this.mtime = mtime;
                  this.ctime = ctime;
                };
                Inode.fromBuffer = function fromBuffer(buffer$$1) {
                  if (buffer$$1 === void 0) {
                    throw new Error("NO");
                  }
                  return new Inode(buffer$$1.toString("ascii", 30), buffer$$1.readUInt32LE(0), buffer$$1.readUInt16LE(4), buffer$$1.readDoubleLE(6), buffer$$1.readDoubleLE(14), buffer$$1.readDoubleLE(22));
                };
                Inode.prototype.toStats = function toStats() {
                  return new Stats((this.mode & 61440) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));
                };
                Inode.prototype.getSize = function getSize() {
                  return 30 + this.id.length;
                };
                Inode.prototype.toBuffer = function toBuffer(buff) {
                  if (buff === void 0)
                    buff = Buffer3.alloc(this.getSize());
                  buff.writeUInt32LE(this.size, 0);
                  buff.writeUInt16LE(this.mode, 4);
                  buff.writeDoubleLE(this.atime, 6);
                  buff.writeDoubleLE(this.mtime, 14);
                  buff.writeDoubleLE(this.ctime, 22);
                  buff.write(this.id, 30, this.id.length, "ascii");
                  return buff;
                };
                Inode.prototype.update = function update(stats) {
                  var hasChanged = false;
                  if (this.size !== stats.size) {
                    this.size = stats.size;
                    hasChanged = true;
                  }
                  if (this.mode !== stats.mode) {
                    this.mode = stats.mode;
                    hasChanged = true;
                  }
                  var atimeMs = stats.atime.getTime();
                  if (this.atime !== atimeMs) {
                    this.atime = atimeMs;
                    hasChanged = true;
                  }
                  var mtimeMs = stats.mtime.getTime();
                  if (this.mtime !== mtimeMs) {
                    this.mtime = mtimeMs;
                    hasChanged = true;
                  }
                  var ctimeMs = stats.ctime.getTime();
                  if (this.ctime !== ctimeMs) {
                    this.ctime = ctimeMs;
                    hasChanged = true;
                  }
                  return hasChanged;
                };
                Inode.prototype.isFile = function isFile() {
                  return (this.mode & 61440) === FileType.FILE;
                };
                Inode.prototype.isDirectory = function isDirectory() {
                  return (this.mode & 61440) === FileType.DIRECTORY;
                };
                var ROOT_NODE_ID = "/";
                var emptyDirNode = null;
                function getEmptyDirNode() {
                  if (emptyDirNode) {
                    return emptyDirNode;
                  }
                  return emptyDirNode = Buffer3.from("{}");
                }
                function GenerateRandomID() {
                  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                    var r2 = Math.random() * 16 | 0;
                    var v2 = c === "x" ? r2 : r2 & 3 | 8;
                    return v2.toString(16);
                  });
                }
                function noError(e, cb) {
                  if (e) {
                    cb(e);
                    return false;
                  }
                  return true;
                }
                function noErrorTx(e, tx, cb) {
                  if (e) {
                    tx.abort(function() {
                      cb(e);
                    });
                    return false;
                  }
                  return true;
                }
                var SimpleSyncRWTransaction = function SimpleSyncRWTransaction2(store) {
                  this.store = store;
                  this.originalData = {};
                  this.modifiedKeys = [];
                };
                SimpleSyncRWTransaction.prototype.get = function get(key) {
                  var val = this.store.get(key);
                  this.stashOldValue(key, val);
                  return val;
                };
                SimpleSyncRWTransaction.prototype.put = function put(key, data, overwrite) {
                  this.markModified(key);
                  return this.store.put(key, data, overwrite);
                };
                SimpleSyncRWTransaction.prototype.del = function del(key) {
                  this.markModified(key);
                  this.store.del(key);
                };
                SimpleSyncRWTransaction.prototype.commit = function commit() {
                };
                SimpleSyncRWTransaction.prototype.abort = function abort() {
                  var this$1 = this;
                  for (var i3 = 0, list2 = this$1.modifiedKeys; i3 < list2.length; i3 += 1) {
                    var key = list2[i3];
                    var value = this$1.originalData[key];
                    if (!value) {
                      this$1.store.del(key);
                    } else {
                      this$1.store.put(key, value, true);
                    }
                  }
                };
                SimpleSyncRWTransaction.prototype.stashOldValue = function stashOldValue(key, value) {
                  if (!this.originalData.hasOwnProperty(key)) {
                    this.originalData[key] = value;
                  }
                };
                SimpleSyncRWTransaction.prototype.markModified = function markModified(key) {
                  if (this.modifiedKeys.indexOf(key) === -1) {
                    this.modifiedKeys.push(key);
                    if (!this.originalData.hasOwnProperty(key)) {
                      this.originalData[key] = this.store.get(key);
                    }
                  }
                };
                var SyncKeyValueFile = function(PreloadFile$$1) {
                  function SyncKeyValueFile2(_fs, _path, _flag, _stat, contents) {
                    PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
                  }
                  if (PreloadFile$$1)
                    SyncKeyValueFile2.__proto__ = PreloadFile$$1;
                  SyncKeyValueFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
                  SyncKeyValueFile2.prototype.constructor = SyncKeyValueFile2;
                  SyncKeyValueFile2.prototype.syncSync = function syncSync() {
                    if (this.isDirty()) {
                      this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());
                      this.resetDirty();
                    }
                  };
                  SyncKeyValueFile2.prototype.closeSync = function closeSync() {
                    this.syncSync();
                  };
                  return SyncKeyValueFile2;
                }(PreloadFile);
                var SyncKeyValueFileSystem = function(SynchronousFileSystem$$1) {
                  function SyncKeyValueFileSystem2(options2) {
                    SynchronousFileSystem$$1.call(this);
                    this.store = options2.store;
                    this.makeRootDirectory();
                  }
                  if (SynchronousFileSystem$$1)
                    SyncKeyValueFileSystem2.__proto__ = SynchronousFileSystem$$1;
                  SyncKeyValueFileSystem2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
                  SyncKeyValueFileSystem2.prototype.constructor = SyncKeyValueFileSystem2;
                  SyncKeyValueFileSystem2.isAvailable = function isAvailable() {
                    return true;
                  };
                  SyncKeyValueFileSystem2.prototype.getName = function getName() {
                    return this.store.name();
                  };
                  SyncKeyValueFileSystem2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  SyncKeyValueFileSystem2.prototype.supportsSymlinks = function supportsSymlinks() {
                    return false;
                  };
                  SyncKeyValueFileSystem2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  SyncKeyValueFileSystem2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  SyncKeyValueFileSystem2.prototype.empty = function empty() {
                    this.store.clear();
                    this.makeRootDirectory();
                  };
                  SyncKeyValueFileSystem2.prototype.renameSync = function renameSync(oldPath, newPath) {
                    var tx = this.store.beginTransaction("readwrite"), oldParent = path.dirname(oldPath), oldName = path.basename(oldPath), newParent = path.dirname(newPath), newName = path.basename(newPath), oldDirNode = this.findINode(tx, oldParent), oldDirList = this.getDirListing(tx, oldParent, oldDirNode);
                    if (!oldDirList[oldName]) {
                      throw ApiError.ENOENT(oldPath);
                    }
                    var nodeId = oldDirList[oldName];
                    delete oldDirList[oldName];
                    if ((newParent + "/").indexOf(oldPath + "/") === 0) {
                      throw new ApiError(ErrorCode.EBUSY, oldParent);
                    }
                    var newDirNode, newDirList;
                    if (newParent === oldParent) {
                      newDirNode = oldDirNode;
                      newDirList = oldDirList;
                    } else {
                      newDirNode = this.findINode(tx, newParent);
                      newDirList = this.getDirListing(tx, newParent, newDirNode);
                    }
                    if (newDirList[newName]) {
                      var newNameNode = this.getINode(tx, newPath, newDirList[newName]);
                      if (newNameNode.isFile()) {
                        try {
                          tx.del(newNameNode.id);
                          tx.del(newDirList[newName]);
                        } catch (e) {
                          tx.abort();
                          throw e;
                        }
                      } else {
                        throw ApiError.EPERM(newPath);
                      }
                    }
                    newDirList[newName] = nodeId;
                    try {
                      tx.put(oldDirNode.id, Buffer3.from(JSON.stringify(oldDirList)), true);
                      tx.put(newDirNode.id, Buffer3.from(JSON.stringify(newDirList)), true);
                    } catch (e) {
                      tx.abort();
                      throw e;
                    }
                    tx.commit();
                  };
                  SyncKeyValueFileSystem2.prototype.statSync = function statSync(p, isLstat) {
                    return this.findINode(this.store.beginTransaction("readonly"), p).toStats();
                  };
                  SyncKeyValueFileSystem2.prototype.createFileSync = function createFileSync(p, flag, mode) {
                    var tx = this.store.beginTransaction("readwrite"), data = emptyBuffer(), newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data);
                    return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
                  };
                  SyncKeyValueFileSystem2.prototype.openFileSync = function openFileSync(p, flag) {
                    var tx = this.store.beginTransaction("readonly"), node = this.findINode(tx, p), data = tx.get(node.id);
                    if (data === void 0) {
                      throw ApiError.ENOENT(p);
                    }
                    return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
                  };
                  SyncKeyValueFileSystem2.prototype.unlinkSync = function unlinkSync(p) {
                    this.removeEntry(p, false);
                  };
                  SyncKeyValueFileSystem2.prototype.rmdirSync = function rmdirSync(p) {
                    if (this.readdirSync(p).length > 0) {
                      throw ApiError.ENOTEMPTY(p);
                    } else {
                      this.removeEntry(p, true);
                    }
                  };
                  SyncKeyValueFileSystem2.prototype.mkdirSync = function mkdirSync(p, mode) {
                    var tx = this.store.beginTransaction("readwrite"), data = Buffer3.from("{}");
                    this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);
                  };
                  SyncKeyValueFileSystem2.prototype.readdirSync = function readdirSync(p) {
                    var tx = this.store.beginTransaction("readonly");
                    return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));
                  };
                  SyncKeyValueFileSystem2.prototype._syncSync = function _syncSync(p, data, stats) {
                    var tx = this.store.beginTransaction("readwrite"), fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)), fileInode = this.getINode(tx, p, fileInodeId), inodeChanged = fileInode.update(stats);
                    try {
                      tx.put(fileInode.id, data, true);
                      if (inodeChanged) {
                        tx.put(fileInodeId, fileInode.toBuffer(), true);
                      }
                    } catch (e) {
                      tx.abort();
                      throw e;
                    }
                    tx.commit();
                  };
                  SyncKeyValueFileSystem2.prototype.makeRootDirectory = function makeRootDirectory() {
                    var tx = this.store.beginTransaction("readwrite");
                    if (tx.get(ROOT_NODE_ID) === void 0) {
                      var currTime = (/* @__PURE__ */ new Date()).getTime(), dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
                      tx.put(dirInode.id, getEmptyDirNode(), false);
                      tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
                      tx.commit();
                    }
                  };
                  SyncKeyValueFileSystem2.prototype._findINode = function _findINode(tx, parent, filename) {
                    var this$1 = this;
                    var readDirectory = function(inode) {
                      var dirList = this$1.getDirListing(tx, parent, inode);
                      if (dirList[filename]) {
                        return dirList[filename];
                      } else {
                        throw ApiError.ENOENT(path.resolve(parent, filename));
                      }
                    };
                    if (parent === "/") {
                      if (filename === "") {
                        return ROOT_NODE_ID;
                      } else {
                        return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
                      }
                    } else {
                      return readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));
                    }
                  };
                  SyncKeyValueFileSystem2.prototype.findINode = function findINode(tx, p) {
                    return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));
                  };
                  SyncKeyValueFileSystem2.prototype.getINode = function getINode(tx, p, id) {
                    var inode = tx.get(id);
                    if (inode === void 0) {
                      throw ApiError.ENOENT(p);
                    }
                    return Inode.fromBuffer(inode);
                  };
                  SyncKeyValueFileSystem2.prototype.getDirListing = function getDirListing(tx, p, inode) {
                    if (!inode.isDirectory()) {
                      throw ApiError.ENOTDIR(p);
                    }
                    var data = tx.get(inode.id);
                    if (data === void 0) {
                      throw ApiError.ENOENT(p);
                    }
                    return JSON.parse(data.toString());
                  };
                  SyncKeyValueFileSystem2.prototype.addNewNode = function addNewNode(tx, data) {
                    var retries = 0;
                    var currId;
                    while (retries < 5) {
                      try {
                        currId = GenerateRandomID();
                        tx.put(currId, data, false);
                        return currId;
                      } catch (e) {
                      }
                    }
                    throw new ApiError(ErrorCode.EIO, "Unable to commit data to key-value store.");
                  };
                  SyncKeyValueFileSystem2.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data) {
                    var parentDir = path.dirname(p), fname = path.basename(p), parentNode = this.findINode(tx, parentDir), dirListing = this.getDirListing(tx, parentDir, parentNode), currTime = (/* @__PURE__ */ new Date()).getTime();
                    if (p === "/") {
                      throw ApiError.EEXIST(p);
                    }
                    if (dirListing[fname]) {
                      throw ApiError.EEXIST(p);
                    }
                    var fileNode;
                    try {
                      var dataId = this.addNewNode(tx, data);
                      fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
                      var fileNodeId = this.addNewNode(tx, fileNode.toBuffer());
                      dirListing[fname] = fileNodeId;
                      tx.put(parentNode.id, Buffer3.from(JSON.stringify(dirListing)), true);
                    } catch (e) {
                      tx.abort();
                      throw e;
                    }
                    tx.commit();
                    return fileNode;
                  };
                  SyncKeyValueFileSystem2.prototype.removeEntry = function removeEntry(p, isDir) {
                    var tx = this.store.beginTransaction("readwrite"), parent = path.dirname(p), parentNode = this.findINode(tx, parent), parentListing = this.getDirListing(tx, parent, parentNode), fileName = path.basename(p);
                    if (!parentListing[fileName]) {
                      throw ApiError.ENOENT(p);
                    }
                    var fileNodeId = parentListing[fileName];
                    delete parentListing[fileName];
                    var fileNode = this.getINode(tx, p, fileNodeId);
                    if (!isDir && fileNode.isDirectory()) {
                      throw ApiError.EISDIR(p);
                    } else if (isDir && !fileNode.isDirectory()) {
                      throw ApiError.ENOTDIR(p);
                    }
                    try {
                      tx.del(fileNode.id);
                      tx.del(fileNodeId);
                      tx.put(parentNode.id, Buffer3.from(JSON.stringify(parentListing)), true);
                    } catch (e) {
                      tx.abort();
                      throw e;
                    }
                    tx.commit();
                  };
                  return SyncKeyValueFileSystem2;
                }(SynchronousFileSystem);
                var AsyncKeyValueFile = function(PreloadFile$$1) {
                  function AsyncKeyValueFile2(_fs, _path, _flag, _stat, contents) {
                    PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
                  }
                  if (PreloadFile$$1)
                    AsyncKeyValueFile2.__proto__ = PreloadFile$$1;
                  AsyncKeyValueFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
                  AsyncKeyValueFile2.prototype.constructor = AsyncKeyValueFile2;
                  AsyncKeyValueFile2.prototype.sync = function sync(cb) {
                    var this$1 = this;
                    if (this.isDirty()) {
                      this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function(e) {
                        if (!e) {
                          this$1.resetDirty();
                        }
                        cb(e);
                      });
                    } else {
                      cb();
                    }
                  };
                  AsyncKeyValueFile2.prototype.close = function close(cb) {
                    this.sync(cb);
                  };
                  return AsyncKeyValueFile2;
                }(PreloadFile);
                var AsyncKeyValueFileSystem = function(BaseFileSystem$$1) {
                  function AsyncKeyValueFileSystem2() {
                    BaseFileSystem$$1.apply(this, arguments);
                  }
                  if (BaseFileSystem$$1)
                    AsyncKeyValueFileSystem2.__proto__ = BaseFileSystem$$1;
                  AsyncKeyValueFileSystem2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  AsyncKeyValueFileSystem2.prototype.constructor = AsyncKeyValueFileSystem2;
                  AsyncKeyValueFileSystem2.isAvailable = function isAvailable() {
                    return true;
                  };
                  AsyncKeyValueFileSystem2.prototype.init = function init(store, cb) {
                    this.store = store;
                    this.makeRootDirectory(cb);
                  };
                  AsyncKeyValueFileSystem2.prototype.getName = function getName() {
                    return this.store.name();
                  };
                  AsyncKeyValueFileSystem2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  AsyncKeyValueFileSystem2.prototype.supportsSymlinks = function supportsSymlinks() {
                    return false;
                  };
                  AsyncKeyValueFileSystem2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  AsyncKeyValueFileSystem2.prototype.supportsSynch = function supportsSynch() {
                    return false;
                  };
                  AsyncKeyValueFileSystem2.prototype.empty = function empty(cb) {
                    var this$1 = this;
                    this.store.clear(function(e) {
                      if (noError(e, cb)) {
                        this$1.makeRootDirectory(cb);
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                    var this$1 = this;
                    var tx = this.store.beginTransaction("readwrite");
                    var oldParent = path.dirname(oldPath), oldName = path.basename(oldPath);
                    var newParent = path.dirname(newPath), newName = path.basename(newPath);
                    var inodes = {};
                    var lists = {};
                    var errorOccurred = false;
                    if ((newParent + "/").indexOf(oldPath + "/") === 0) {
                      return cb(new ApiError(ErrorCode.EBUSY, oldParent));
                    }
                    var theOleSwitcharoo = function() {
                      if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {
                        return;
                      }
                      var oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];
                      if (!oldParentList[oldName]) {
                        cb(ApiError.ENOENT(oldPath));
                      } else {
                        var fileId = oldParentList[oldName];
                        delete oldParentList[oldName];
                        var completeRename = function() {
                          newParentList[newName] = fileId;
                          tx.put(oldParentINode.id, Buffer3.from(JSON.stringify(oldParentList)), true, function(e) {
                            if (noErrorTx(e, tx, cb)) {
                              if (oldParent === newParent) {
                                tx.commit(cb);
                              } else {
                                tx.put(newParentINode.id, Buffer3.from(JSON.stringify(newParentList)), true, function(e2) {
                                  if (noErrorTx(e2, tx, cb)) {
                                    tx.commit(cb);
                                  }
                                });
                              }
                            }
                          });
                        };
                        if (newParentList[newName]) {
                          this$1.getINode(tx, newPath, newParentList[newName], function(e, inode) {
                            if (noErrorTx(e, tx, cb)) {
                              if (inode.isFile()) {
                                tx.del(inode.id, function(e2) {
                                  if (noErrorTx(e2, tx, cb)) {
                                    tx.del(newParentList[newName], function(e3) {
                                      if (noErrorTx(e3, tx, cb)) {
                                        completeRename();
                                      }
                                    });
                                  }
                                });
                              } else {
                                tx.abort(function(e2) {
                                  cb(ApiError.EPERM(newPath));
                                });
                              }
                            }
                          });
                        } else {
                          completeRename();
                        }
                      }
                    };
                    var processInodeAndListings = function(p) {
                      this$1.findINodeAndDirListing(tx, p, function(e, node, dirList) {
                        if (e) {
                          if (!errorOccurred) {
                            errorOccurred = true;
                            tx.abort(function() {
                              cb(e);
                            });
                          }
                        } else {
                          inodes[p] = node;
                          lists[p] = dirList;
                          theOleSwitcharoo();
                        }
                      });
                    };
                    processInodeAndListings(oldParent);
                    if (oldParent !== newParent) {
                      processInodeAndListings(newParent);
                    }
                  };
                  AsyncKeyValueFileSystem2.prototype.stat = function stat(p, isLstat, cb) {
                    var tx = this.store.beginTransaction("readonly");
                    this.findINode(tx, p, function(e, inode) {
                      if (noError(e, cb)) {
                        cb(null, inode.toStats());
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.createFile = function createFile(p, flag, mode, cb) {
                    var this$1 = this;
                    var tx = this.store.beginTransaction("readwrite"), data = emptyBuffer();
                    this.commitNewFile(tx, p, FileType.FILE, mode, data, function(e, newFile) {
                      if (noError(e, cb)) {
                        cb(null, new AsyncKeyValueFile(this$1, p, flag, newFile.toStats(), data));
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.openFile = function openFile(p, flag, cb) {
                    var this$1 = this;
                    var tx = this.store.beginTransaction("readonly");
                    this.findINode(tx, p, function(e, inode) {
                      if (noError(e, cb)) {
                        tx.get(inode.id, function(e2, data) {
                          if (noError(e2, cb)) {
                            if (data === void 0) {
                              cb(ApiError.ENOENT(p));
                            } else {
                              cb(null, new AsyncKeyValueFile(this$1, p, flag, inode.toStats(), data));
                            }
                          }
                        });
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.unlink = function unlink(p, cb) {
                    this.removeEntry(p, false, cb);
                  };
                  AsyncKeyValueFileSystem2.prototype.rmdir = function rmdir(p, cb) {
                    var this$1 = this;
                    this.readdir(p, function(err2, files) {
                      if (err2) {
                        cb(err2);
                      } else if (files.length > 0) {
                        cb(ApiError.ENOTEMPTY(p));
                      } else {
                        this$1.removeEntry(p, true, cb);
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.mkdir = function mkdir(p, mode, cb) {
                    var tx = this.store.beginTransaction("readwrite"), data = Buffer3.from("{}");
                    this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);
                  };
                  AsyncKeyValueFileSystem2.prototype.readdir = function readdir(p, cb) {
                    var this$1 = this;
                    var tx = this.store.beginTransaction("readonly");
                    this.findINode(tx, p, function(e, inode) {
                      if (noError(e, cb)) {
                        this$1.getDirListing(tx, p, inode, function(e2, dirListing) {
                          if (noError(e2, cb)) {
                            cb(null, Object.keys(dirListing));
                          }
                        });
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype._sync = function _sync(p, data, stats, cb) {
                    var this$1 = this;
                    var tx = this.store.beginTransaction("readwrite");
                    this._findINode(tx, path.dirname(p), path.basename(p), function(e, fileInodeId) {
                      if (noErrorTx(e, tx, cb)) {
                        this$1.getINode(tx, p, fileInodeId, function(e2, fileInode) {
                          if (noErrorTx(e2, tx, cb)) {
                            var inodeChanged = fileInode.update(stats);
                            tx.put(fileInode.id, data, true, function(e3) {
                              if (noErrorTx(e3, tx, cb)) {
                                if (inodeChanged) {
                                  tx.put(fileInodeId, fileInode.toBuffer(), true, function(e4) {
                                    if (noErrorTx(e4, tx, cb)) {
                                      tx.commit(cb);
                                    }
                                  });
                                } else {
                                  tx.commit(cb);
                                }
                              }
                            });
                          }
                        });
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.makeRootDirectory = function makeRootDirectory(cb) {
                    var tx = this.store.beginTransaction("readwrite");
                    tx.get(ROOT_NODE_ID, function(e, data) {
                      if (e || data === void 0) {
                        var currTime = (/* @__PURE__ */ new Date()).getTime(), dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
                        tx.put(dirInode.id, getEmptyDirNode(), false, function(e2) {
                          if (noErrorTx(e2, tx, cb)) {
                            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, function(e3) {
                              if (e3) {
                                tx.abort(function() {
                                  cb(e3);
                                });
                              } else {
                                tx.commit(cb);
                              }
                            });
                          }
                        });
                      } else {
                        tx.commit(cb);
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype._findINode = function _findINode(tx, parent, filename, cb) {
                    var this$1 = this;
                    var handleDirectoryListings = function(e, inode, dirList) {
                      if (e) {
                        cb(e);
                      } else if (dirList[filename]) {
                        cb(null, dirList[filename]);
                      } else {
                        cb(ApiError.ENOENT(path.resolve(parent, filename)));
                      }
                    };
                    if (parent === "/") {
                      if (filename === "") {
                        cb(null, ROOT_NODE_ID);
                      } else {
                        this.getINode(tx, parent, ROOT_NODE_ID, function(e, inode) {
                          if (noError(e, cb)) {
                            this$1.getDirListing(tx, parent, inode, function(e2, dirList) {
                              handleDirectoryListings(e2, inode, dirList);
                            });
                          }
                        });
                      }
                    } else {
                      this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
                    }
                  };
                  AsyncKeyValueFileSystem2.prototype.findINode = function findINode(tx, p, cb) {
                    var this$1 = this;
                    this._findINode(tx, path.dirname(p), path.basename(p), function(e, id) {
                      if (noError(e, cb)) {
                        this$1.getINode(tx, p, id, cb);
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.getINode = function getINode(tx, p, id, cb) {
                    tx.get(id, function(e, data) {
                      if (noError(e, cb)) {
                        if (data === void 0) {
                          cb(ApiError.ENOENT(p));
                        } else {
                          cb(null, Inode.fromBuffer(data));
                        }
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.getDirListing = function getDirListing(tx, p, inode, cb) {
                    if (!inode.isDirectory()) {
                      cb(ApiError.ENOTDIR(p));
                    } else {
                      tx.get(inode.id, function(e, data) {
                        if (noError(e, cb)) {
                          try {
                            cb(null, JSON.parse(data.toString()));
                          } catch (e2) {
                            cb(ApiError.ENOENT(p));
                          }
                        }
                      });
                    }
                  };
                  AsyncKeyValueFileSystem2.prototype.findINodeAndDirListing = function findINodeAndDirListing(tx, p, cb) {
                    var this$1 = this;
                    this.findINode(tx, p, function(e, inode) {
                      if (noError(e, cb)) {
                        this$1.getDirListing(tx, p, inode, function(e2, listing) {
                          if (noError(e2, cb)) {
                            cb(null, inode, listing);
                          }
                        });
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.addNewNode = function addNewNode(tx, data, cb) {
                    var retries = 0, currId;
                    var reroll = function() {
                      if (++retries === 5) {
                        cb(new ApiError(ErrorCode.EIO, "Unable to commit data to key-value store."));
                      } else {
                        currId = GenerateRandomID();
                        tx.put(currId, data, false, function(e, committed) {
                          if (e || !committed) {
                            reroll();
                          } else {
                            cb(null, currId);
                          }
                        });
                      }
                    };
                    reroll();
                  };
                  AsyncKeyValueFileSystem2.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data, cb) {
                    var this$1 = this;
                    var parentDir = path.dirname(p), fname = path.basename(p), currTime = (/* @__PURE__ */ new Date()).getTime();
                    if (p === "/") {
                      return cb(ApiError.EEXIST(p));
                    }
                    this.findINodeAndDirListing(tx, parentDir, function(e, parentNode, dirListing) {
                      if (noErrorTx(e, tx, cb)) {
                        if (dirListing[fname]) {
                          tx.abort(function() {
                            cb(ApiError.EEXIST(p));
                          });
                        } else {
                          this$1.addNewNode(tx, data, function(e2, dataId) {
                            if (noErrorTx(e2, tx, cb)) {
                              var fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
                              this$1.addNewNode(tx, fileInode.toBuffer(), function(e3, fileInodeId) {
                                if (noErrorTx(e3, tx, cb)) {
                                  dirListing[fname] = fileInodeId;
                                  tx.put(parentNode.id, Buffer3.from(JSON.stringify(dirListing)), true, function(e4) {
                                    if (noErrorTx(e4, tx, cb)) {
                                      tx.commit(function(e5) {
                                        if (noErrorTx(e5, tx, cb)) {
                                          cb(null, fileInode);
                                        }
                                      });
                                    }
                                  });
                                }
                              });
                            }
                          });
                        }
                      }
                    });
                  };
                  AsyncKeyValueFileSystem2.prototype.removeEntry = function removeEntry(p, isDir, cb) {
                    var this$1 = this;
                    var tx = this.store.beginTransaction("readwrite"), parent = path.dirname(p), fileName = path.basename(p);
                    this.findINodeAndDirListing(tx, parent, function(e, parentNode, parentListing) {
                      if (noErrorTx(e, tx, cb)) {
                        if (!parentListing[fileName]) {
                          tx.abort(function() {
                            cb(ApiError.ENOENT(p));
                          });
                        } else {
                          var fileNodeId = parentListing[fileName];
                          delete parentListing[fileName];
                          this$1.getINode(tx, p, fileNodeId, function(e2, fileNode) {
                            if (noErrorTx(e2, tx, cb)) {
                              if (!isDir && fileNode.isDirectory()) {
                                tx.abort(function() {
                                  cb(ApiError.EISDIR(p));
                                });
                              } else if (isDir && !fileNode.isDirectory()) {
                                tx.abort(function() {
                                  cb(ApiError.ENOTDIR(p));
                                });
                              } else {
                                tx.del(fileNode.id, function(e3) {
                                  if (noErrorTx(e3, tx, cb)) {
                                    tx.del(fileNodeId, function(e4) {
                                      if (noErrorTx(e4, tx, cb)) {
                                        tx.put(parentNode.id, Buffer3.from(JSON.stringify(parentListing)), true, function(e5) {
                                          if (noErrorTx(e5, tx, cb)) {
                                            tx.commit(cb);
                                          }
                                        });
                                      }
                                    });
                                  }
                                });
                              }
                            }
                          });
                        }
                      }
                    });
                  };
                  return AsyncKeyValueFileSystem2;
                }(BaseFileSystem);
                var InMemoryStore = function InMemoryStore2() {
                  this.store = {};
                };
                InMemoryStore.prototype.name = function name() {
                  return InMemoryFileSystem.Name;
                };
                InMemoryStore.prototype.clear = function clear() {
                  this.store = {};
                };
                InMemoryStore.prototype.beginTransaction = function beginTransaction(type) {
                  return new SimpleSyncRWTransaction(this);
                };
                InMemoryStore.prototype.get = function get(key) {
                  return this.store[key];
                };
                InMemoryStore.prototype.put = function put(key, data, overwrite) {
                  if (!overwrite && this.store.hasOwnProperty(key)) {
                    return false;
                  }
                  this.store[key] = data;
                  return true;
                };
                InMemoryStore.prototype.del = function del(key) {
                  delete this.store[key];
                };
                var InMemoryFileSystem = function(SyncKeyValueFileSystem$$1) {
                  function InMemoryFileSystem2() {
                    SyncKeyValueFileSystem$$1.call(this, { store: new InMemoryStore() });
                  }
                  if (SyncKeyValueFileSystem$$1)
                    InMemoryFileSystem2.__proto__ = SyncKeyValueFileSystem$$1;
                  InMemoryFileSystem2.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
                  InMemoryFileSystem2.prototype.constructor = InMemoryFileSystem2;
                  InMemoryFileSystem2.Create = function Create(options2, cb) {
                    cb(null, new InMemoryFileSystem2());
                  };
                  return InMemoryFileSystem2;
                }(SyncKeyValueFileSystem);
                InMemoryFileSystem.Name = "InMemory";
                InMemoryFileSystem.Options = {};
                var indexedDB = global$1.indexedDB || global$1.mozIndexedDB || global$1.webkitIndexedDB || global$1.msIndexedDB;
                function convertError$2(e, message) {
                  if (message === void 0)
                    message = e.toString();
                  switch (e.name) {
                    case "NotFoundError":
                      return new ApiError(ErrorCode.ENOENT, message);
                    case "QuotaExceededError":
                      return new ApiError(ErrorCode.ENOSPC, message);
                    default:
                      return new ApiError(ErrorCode.EIO, message);
                  }
                }
                function onErrorHandler(cb, code, message) {
                  if (code === void 0)
                    code = ErrorCode.EIO;
                  if (message === void 0)
                    message = null;
                  return function(e) {
                    e.preventDefault();
                    cb(new ApiError(code, message !== null ? message : void 0));
                  };
                }
                var IndexedDBROTransaction = function IndexedDBROTransaction2(tx, store) {
                  this.tx = tx;
                  this.store = store;
                };
                IndexedDBROTransaction.prototype.get = function get(key, cb) {
                  try {
                    var r2 = this.store.get(key);
                    r2.onerror = onErrorHandler(cb);
                    r2.onsuccess = function(event) {
                      var result = event.target.result;
                      if (result === void 0) {
                        cb(null, result);
                      } else {
                        cb(null, arrayBuffer2Buffer(result));
                      }
                    };
                  } catch (e) {
                    cb(convertError$2(e));
                  }
                };
                var IndexedDBRWTransaction = function(IndexedDBROTransaction2) {
                  function IndexedDBRWTransaction2(tx, store) {
                    IndexedDBROTransaction2.call(this, tx, store);
                  }
                  if (IndexedDBROTransaction2)
                    IndexedDBRWTransaction2.__proto__ = IndexedDBROTransaction2;
                  IndexedDBRWTransaction2.prototype = Object.create(IndexedDBROTransaction2 && IndexedDBROTransaction2.prototype);
                  IndexedDBRWTransaction2.prototype.constructor = IndexedDBRWTransaction2;
                  IndexedDBRWTransaction2.prototype.put = function put(key, data, overwrite, cb) {
                    try {
                      var arraybuffer = buffer2ArrayBuffer(data);
                      var r2;
                      if (overwrite) {
                        r2 = this.store.put(arraybuffer, key);
                      } else {
                        r2 = this.store.add(arraybuffer, key);
                      }
                      r2.onerror = onErrorHandler(cb);
                      r2.onsuccess = function(event) {
                        cb(null, true);
                      };
                    } catch (e) {
                      cb(convertError$2(e));
                    }
                  };
                  IndexedDBRWTransaction2.prototype.del = function del(key, cb) {
                    try {
                      var r2 = this.store["delete"](key);
                      r2.onerror = onErrorHandler(cb);
                      r2.onsuccess = function(event) {
                        cb();
                      };
                    } catch (e) {
                      cb(convertError$2(e));
                    }
                  };
                  IndexedDBRWTransaction2.prototype.commit = function commit(cb) {
                    setTimeout(cb, 0);
                  };
                  IndexedDBRWTransaction2.prototype.abort = function abort(cb) {
                    var _e = null;
                    try {
                      this.tx.abort();
                    } catch (e) {
                      _e = convertError$2(e);
                    } finally {
                      cb(_e);
                    }
                  };
                  return IndexedDBRWTransaction2;
                }(IndexedDBROTransaction);
                var IndexedDBStore = function IndexedDBStore2(cb, storeName) {
                  var this$1 = this;
                  if (storeName === void 0)
                    storeName = "browserfs";
                  this.storeName = storeName;
                  var openReq = indexedDB.open(this.storeName, 1);
                  openReq.onupgradeneeded = function(event) {
                    var db = event.target.result;
                    if (db.objectStoreNames.contains(this$1.storeName)) {
                      db.deleteObjectStore(this$1.storeName);
                    }
                    db.createObjectStore(this$1.storeName);
                  };
                  openReq.onsuccess = function(event) {
                    this$1.db = event.target.result;
                    cb(null, this$1);
                  };
                  openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);
                };
                IndexedDBStore.prototype.name = function name() {
                  return IndexedDBFileSystem.Name + " - " + this.storeName;
                };
                IndexedDBStore.prototype.clear = function clear(cb) {
                  try {
                    var tx = this.db.transaction(this.storeName, "readwrite"), objectStore = tx.objectStore(this.storeName), r2 = objectStore.clear();
                    r2.onsuccess = function(event) {
                      setTimeout(cb, 0);
                    };
                    r2.onerror = onErrorHandler(cb);
                  } catch (e) {
                    cb(convertError$2(e));
                  }
                };
                IndexedDBStore.prototype.beginTransaction = function beginTransaction(type) {
                  if (type === void 0)
                    type = "readonly";
                  var tx = this.db.transaction(this.storeName, type), objectStore = tx.objectStore(this.storeName);
                  if (type === "readwrite") {
                    return new IndexedDBRWTransaction(tx, objectStore);
                  } else if (type === "readonly") {
                    return new IndexedDBROTransaction(tx, objectStore);
                  } else {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid transaction type.");
                  }
                };
                var IndexedDBFileSystem = function(AsyncKeyValueFileSystem$$1) {
                  function IndexedDBFileSystem2(cb, storeName, deprecateMsg) {
                    var this$1 = this;
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    AsyncKeyValueFileSystem$$1.call(this);
                    this.store = new IndexedDBStore(function(e) {
                      if (e) {
                        cb(e);
                      } else {
                        this$1.init(this$1.store, function(e2) {
                          cb(e2, this$1);
                        });
                      }
                    }, storeName);
                    deprecationMessage(deprecateMsg, IndexedDBFileSystem2.Name, { storeName });
                  }
                  if (AsyncKeyValueFileSystem$$1)
                    IndexedDBFileSystem2.__proto__ = AsyncKeyValueFileSystem$$1;
                  IndexedDBFileSystem2.prototype = Object.create(AsyncKeyValueFileSystem$$1 && AsyncKeyValueFileSystem$$1.prototype);
                  IndexedDBFileSystem2.prototype.constructor = IndexedDBFileSystem2;
                  IndexedDBFileSystem2.Create = function Create(opts, cb) {
                    new IndexedDBFileSystem2(cb, opts.storeName, false);
                  };
                  IndexedDBFileSystem2.isAvailable = function isAvailable() {
                    try {
                      return typeof indexedDB !== "undefined" && null !== indexedDB.open("__browserfs_test__");
                    } catch (e) {
                      return false;
                    }
                  };
                  return IndexedDBFileSystem2;
                }(AsyncKeyValueFileSystem);
                IndexedDBFileSystem.Name = "IndexedDB";
                IndexedDBFileSystem.Options = {
                  storeName: {
                    type: "string",
                    optional: true,
                    description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
                  }
                };
                var supportsBinaryString = false;
                var binaryEncoding;
                try {
                  global$1.localStorage.setItem("__test__", String.fromCharCode(55296));
                  supportsBinaryString = global$1.localStorage.getItem("__test__") === String.fromCharCode(55296);
                } catch (e) {
                  supportsBinaryString = false;
                }
                binaryEncoding = supportsBinaryString ? "binary_string" : "binary_string_ie";
                if (!Buffer3.isEncoding(binaryEncoding)) {
                  binaryEncoding = "base64";
                }
                var LocalStorageStore = function LocalStorageStore2() {
                };
                LocalStorageStore.prototype.name = function name() {
                  return LocalStorageFileSystem.Name;
                };
                LocalStorageStore.prototype.clear = function clear() {
                  global$1.localStorage.clear();
                };
                LocalStorageStore.prototype.beginTransaction = function beginTransaction(type) {
                  return new SimpleSyncRWTransaction(this);
                };
                LocalStorageStore.prototype.get = function get(key) {
                  try {
                    var data = global$1.localStorage.getItem(key);
                    if (data !== null) {
                      return Buffer3.from(data, binaryEncoding);
                    }
                  } catch (e) {
                  }
                  return void 0;
                };
                LocalStorageStore.prototype.put = function put(key, data, overwrite) {
                  try {
                    if (!overwrite && global$1.localStorage.getItem(key) !== null) {
                      return false;
                    }
                    global$1.localStorage.setItem(key, data.toString(binaryEncoding));
                    return true;
                  } catch (e) {
                    throw new ApiError(ErrorCode.ENOSPC, "LocalStorage is full.");
                  }
                };
                LocalStorageStore.prototype.del = function del(key) {
                  try {
                    global$1.localStorage.removeItem(key);
                  } catch (e) {
                    throw new ApiError(ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
                  }
                };
                var LocalStorageFileSystem = function(SyncKeyValueFileSystem$$1) {
                  function LocalStorageFileSystem2() {
                    SyncKeyValueFileSystem$$1.call(this, { store: new LocalStorageStore() });
                  }
                  if (SyncKeyValueFileSystem$$1)
                    LocalStorageFileSystem2.__proto__ = SyncKeyValueFileSystem$$1;
                  LocalStorageFileSystem2.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
                  LocalStorageFileSystem2.prototype.constructor = LocalStorageFileSystem2;
                  LocalStorageFileSystem2.Create = function Create(options2, cb) {
                    cb(null, new LocalStorageFileSystem2());
                  };
                  LocalStorageFileSystem2.isAvailable = function isAvailable() {
                    return typeof global$1.localStorage !== "undefined";
                  };
                  return LocalStorageFileSystem2;
                }(SyncKeyValueFileSystem);
                LocalStorageFileSystem.Name = "LocalStorage";
                LocalStorageFileSystem.Options = {};
                var MountableFileSystem = function(BaseFileSystem$$1) {
                  function MountableFileSystem2() {
                    BaseFileSystem$$1.call(this);
                    this.mountList = [];
                    this.mntMap = {};
                    this.rootFs = new InMemoryFileSystem();
                  }
                  if (BaseFileSystem$$1)
                    MountableFileSystem2.__proto__ = BaseFileSystem$$1;
                  MountableFileSystem2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  MountableFileSystem2.prototype.constructor = MountableFileSystem2;
                  MountableFileSystem2.Create = function Create(opts, cb) {
                    var fs4 = new MountableFileSystem2();
                    Object.keys(opts).forEach(function(mountPoint) {
                      fs4.mount(mountPoint, opts[mountPoint]);
                    });
                    cb(null, fs4);
                  };
                  MountableFileSystem2.isAvailable = function isAvailable() {
                    return true;
                  };
                  MountableFileSystem2.prototype.mount = function mount(mountPoint, fs4) {
                    if (mountPoint[0] !== "/") {
                      mountPoint = "/" + mountPoint;
                    }
                    mountPoint = path.resolve(mountPoint);
                    if (this.mntMap[mountPoint]) {
                      throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already taken.");
                    }
                    mkdirpSync(mountPoint, 511, this.rootFs);
                    this.mntMap[mountPoint] = fs4;
                    this.mountList.push(mountPoint);
                    this.mountList = this.mountList.sort(function(a, b3) {
                      return b3.length - a.length;
                    });
                  };
                  MountableFileSystem2.prototype.umount = function umount(mountPoint) {
                    var this$1 = this;
                    if (mountPoint[0] !== "/") {
                      mountPoint = "/" + mountPoint;
                    }
                    mountPoint = path.resolve(mountPoint);
                    if (!this.mntMap[mountPoint]) {
                      throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already unmounted.");
                    }
                    delete this.mntMap[mountPoint];
                    this.mountList.splice(this.mountList.indexOf(mountPoint), 1);
                    while (mountPoint !== "/") {
                      if (this$1.rootFs.readdirSync(mountPoint).length === 0) {
                        this$1.rootFs.rmdirSync(mountPoint);
                        mountPoint = path.dirname(mountPoint);
                      } else {
                        break;
                      }
                    }
                  };
                  MountableFileSystem2.prototype._getFs = function _getFs(path$$1) {
                    var this$1 = this;
                    var mountList = this.mountList, len = mountList.length;
                    for (var i3 = 0; i3 < len; i3++) {
                      var mountPoint = mountList[i3];
                      if (mountPoint.length <= path$$1.length && path$$1.indexOf(mountPoint) === 0) {
                        path$$1 = path$$1.substr(mountPoint.length > 1 ? mountPoint.length : 0);
                        if (path$$1 === "") {
                          path$$1 = "/";
                        }
                        return { fs: this$1.mntMap[mountPoint], path: path$$1 };
                      }
                    }
                    return { fs: this.rootFs, path: path$$1 };
                  };
                  MountableFileSystem2.prototype.getName = function getName() {
                    return MountableFileSystem2.Name;
                  };
                  MountableFileSystem2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                    cb(0, 0);
                  };
                  MountableFileSystem2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  MountableFileSystem2.prototype.supportsLinks = function supportsLinks() {
                    return false;
                  };
                  MountableFileSystem2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  MountableFileSystem2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  MountableFileSystem2.prototype.standardizeError = function standardizeError(err2, path$$1, realPath) {
                    var index = err2.message.indexOf(path$$1);
                    if (index !== -1) {
                      err2.message = err2.message.substr(0, index) + realPath + err2.message.substr(index + path$$1.length);
                      err2.path = realPath;
                    }
                    return err2;
                  };
                  MountableFileSystem2.prototype.rename = function rename(oldPath, newPath, cb) {
                    var this$1 = this;
                    var fs1rv = this._getFs(oldPath);
                    var fs2rv = this._getFs(newPath);
                    if (fs1rv.fs === fs2rv.fs) {
                      return fs1rv.fs.rename(fs1rv.path, fs2rv.path, function(e) {
                        if (e) {
                          this$1.standardizeError(this$1.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                        }
                        cb(e);
                      });
                    }
                    return _fsMock.readFile(oldPath, function(err2, data) {
                      if (err2) {
                        return cb(err2);
                      }
                      _fsMock.writeFile(newPath, data, function(err3) {
                        if (err3) {
                          return cb(err3);
                        }
                        _fsMock.unlink(oldPath, cb);
                      });
                    });
                  };
                  MountableFileSystem2.prototype.renameSync = function renameSync(oldPath, newPath) {
                    var fs1rv = this._getFs(oldPath);
                    var fs2rv = this._getFs(newPath);
                    if (fs1rv.fs === fs2rv.fs) {
                      try {
                        return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);
                      } catch (e) {
                        this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                        throw e;
                      }
                    }
                    var data = _fsMock.readFileSync(oldPath);
                    _fsMock.writeFileSync(newPath, data);
                    return _fsMock.unlinkSync(oldPath);
                  };
                  MountableFileSystem2.prototype.readdirSync = function readdirSync(p) {
                    var fsInfo = this._getFs(p);
                    var rv = null;
                    if (fsInfo.fs !== this.rootFs) {
                      try {
                        rv = this.rootFs.readdirSync(p);
                      } catch (e) {
                      }
                    }
                    try {
                      var rv2 = fsInfo.fs.readdirSync(fsInfo.path);
                      if (rv === null) {
                        return rv2;
                      } else {
                        return rv2.concat(rv.filter(function(val) {
                          return rv2.indexOf(val) === -1;
                        }));
                      }
                    } catch (e) {
                      if (rv === null) {
                        throw this.standardizeError(e, fsInfo.path, p);
                      } else {
                        return rv;
                      }
                    }
                  };
                  MountableFileSystem2.prototype.readdir = function readdir(p, cb) {
                    var this$1 = this;
                    var fsInfo = this._getFs(p);
                    fsInfo.fs.readdir(fsInfo.path, function(err2, files) {
                      if (fsInfo.fs !== this$1.rootFs) {
                        try {
                          var rv = this$1.rootFs.readdirSync(p);
                          if (files) {
                            files = files.concat(rv.filter(function(val) {
                              return files.indexOf(val) === -1;
                            }));
                          } else {
                            files = rv;
                          }
                        } catch (e) {
                          if (err2) {
                            return cb(this$1.standardizeError(err2, fsInfo.path, p));
                          }
                        }
                      } else if (err2) {
                        return cb(this$1.standardizeError(err2, fsInfo.path, p));
                      }
                      cb(null, files);
                    });
                  };
                  MountableFileSystem2.prototype.rmdirSync = function rmdirSync(p) {
                    var fsInfo = this._getFs(p);
                    if (this._containsMountPt(p)) {
                      throw ApiError.ENOTEMPTY(p);
                    } else {
                      try {
                        fsInfo.fs.rmdirSync(fsInfo.path);
                      } catch (e) {
                        throw this.standardizeError(e, fsInfo.path, p);
                      }
                    }
                  };
                  MountableFileSystem2.prototype.rmdir = function rmdir(p, cb) {
                    var this$1 = this;
                    var fsInfo = this._getFs(p);
                    if (this._containsMountPt(p)) {
                      cb(ApiError.ENOTEMPTY(p));
                    } else {
                      fsInfo.fs.rmdir(fsInfo.path, function(err2) {
                        cb(err2 ? this$1.standardizeError(err2, fsInfo.path, p) : null);
                      });
                    }
                  };
                  MountableFileSystem2.prototype._containsMountPt = function _containsMountPt(p) {
                    var mountPoints = this.mountList, len = mountPoints.length;
                    for (var i3 = 0; i3 < len; i3++) {
                      var pt = mountPoints[i3];
                      if (pt.length >= p.length && pt.slice(0, p.length) === p) {
                        return true;
                      }
                    }
                    return false;
                  };
                  return MountableFileSystem2;
                }(BaseFileSystem);
                MountableFileSystem.Name = "MountableFileSystem";
                MountableFileSystem.Options = {};
                function defineFcn(name, isSync, numArgs) {
                  if (isSync) {
                    return function() {
                      var args = [], len = arguments.length;
                      while (len--)
                        args[len] = arguments[len];
                      var path$$1 = args[0];
                      var rv = this._getFs(path$$1);
                      args[0] = rv.path;
                      try {
                        return rv.fs[name].apply(rv.fs, args);
                      } catch (e) {
                        this.standardizeError(e, rv.path, path$$1);
                        throw e;
                      }
                    };
                  } else {
                    return function() {
                      var this$1 = this;
                      var args = [], len = arguments.length;
                      while (len--)
                        args[len] = arguments[len];
                      var path$$1 = args[0];
                      var rv = this._getFs(path$$1);
                      args[0] = rv.path;
                      if (typeof args[args.length - 1] === "function") {
                        var cb = args[args.length - 1];
                        args[args.length - 1] = function() {
                          var args2 = [], len2 = arguments.length;
                          while (len2--)
                            args2[len2] = arguments[len2];
                          if (args2.length > 0 && args2[0] instanceof ApiError) {
                            this$1.standardizeError(args2[0], rv.path, path$$1);
                          }
                          cb.apply(null, args2);
                        };
                      }
                      return rv.fs[name].apply(rv.fs, args);
                    };
                  }
                }
                var fsCmdMap = [
                  // 1 arg functions
                  ["exists", "unlink", "readlink"],
                  // 2 arg functions
                  ["stat", "mkdir", "realpath", "truncate"],
                  // 3 arg functions
                  ["open", "readFile", "chmod", "utimes"],
                  // 4 arg functions
                  ["chown"],
                  // 5 arg functions
                  ["writeFile", "appendFile"]
                ];
                for (var i2 = 0; i2 < fsCmdMap.length; i2++) {
                  var cmds = fsCmdMap[i2];
                  for (var i$1 = 0, list = cmds; i$1 < list.length; i$1 += 1) {
                    var fnName = list[i$1];
                    MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i2 + 1);
                    MountableFileSystem.prototype[fnName + "Sync"] = defineFcn(fnName + "Sync", true, i2 + 1);
                  }
                }
                var bfsSetImmediate;
                if (typeof setImmediate !== "undefined") {
                  bfsSetImmediate = setImmediate;
                } else {
                  var gScope = global$1;
                  var timeouts = [];
                  var messageName = "zero-timeout-message";
                  var canUsePostMessage = function() {
                    if (typeof gScope.importScripts !== "undefined" || !gScope.postMessage) {
                      return false;
                    }
                    var postMessageIsAsync = true;
                    var oldOnMessage = gScope.onmessage;
                    gScope.onmessage = function() {
                      postMessageIsAsync = false;
                    };
                    gScope.postMessage("", "*");
                    gScope.onmessage = oldOnMessage;
                    return postMessageIsAsync;
                  };
                  if (canUsePostMessage()) {
                    bfsSetImmediate = function(fn) {
                      timeouts.push(fn);
                      gScope.postMessage(messageName, "*");
                    };
                    var handleMessage = function(event) {
                      if (event.source === self && event.data === messageName) {
                        if (event.stopPropagation) {
                          event.stopPropagation();
                        } else {
                          event.cancelBubble = true;
                        }
                        if (timeouts.length > 0) {
                          var fn = timeouts.shift();
                          return fn();
                        }
                      }
                    };
                    if (gScope.addEventListener) {
                      gScope.addEventListener("message", handleMessage, true);
                    } else {
                      gScope.attachEvent("onmessage", handleMessage);
                    }
                  } else if (gScope.MessageChannel) {
                    var channel = new gScope.MessageChannel();
                    channel.port1.onmessage = function(event) {
                      if (timeouts.length > 0) {
                        return timeouts.shift()();
                      }
                    };
                    bfsSetImmediate = function(fn) {
                      timeouts.push(fn);
                      channel.port2.postMessage("");
                    };
                  } else {
                    bfsSetImmediate = function(fn) {
                      return setTimeout(fn, 0);
                    };
                  }
                }
                var setImmediate$3 = bfsSetImmediate;
                var Mutex = function Mutex2() {
                  this._locked = false;
                  this._waiters = [];
                };
                Mutex.prototype.lock = function lock(cb) {
                  if (this._locked) {
                    this._waiters.push(cb);
                    return;
                  }
                  this._locked = true;
                  cb();
                };
                Mutex.prototype.unlock = function unlock() {
                  if (!this._locked) {
                    throw new Error("unlock of a non-locked mutex");
                  }
                  var next = this._waiters.shift();
                  if (next) {
                    setImmediate$3(next);
                    return;
                  }
                  this._locked = false;
                };
                Mutex.prototype.tryLock = function tryLock() {
                  if (this._locked) {
                    return false;
                  }
                  this._locked = true;
                  return true;
                };
                Mutex.prototype.isLocked = function isLocked() {
                  return this._locked;
                };
                var LockedFS = function LockedFS2(fs4) {
                  this._fs = fs4;
                  this._mu = new Mutex();
                };
                LockedFS.prototype.getName = function getName() {
                  return "LockedFS<" + this._fs.getName() + ">";
                };
                LockedFS.prototype.getFSUnlocked = function getFSUnlocked() {
                  return this._fs;
                };
                LockedFS.prototype.initialize = function initialize3(cb) {
                  this._fs.initialize(cb);
                };
                LockedFS.prototype.diskSpace = function diskSpace(p, cb) {
                  this._fs.diskSpace(p, cb);
                };
                LockedFS.prototype.isReadOnly = function isReadOnly() {
                  return this._fs.isReadOnly();
                };
                LockedFS.prototype.supportsLinks = function supportsLinks() {
                  return this._fs.supportsLinks();
                };
                LockedFS.prototype.supportsProps = function supportsProps() {
                  return this._fs.supportsProps();
                };
                LockedFS.prototype.supportsSynch = function supportsSynch() {
                  return this._fs.supportsSynch();
                };
                LockedFS.prototype.rename = function rename(oldPath, newPath, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.rename(oldPath, newPath, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.renameSync = function renameSync(oldPath, newPath) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.renameSync(oldPath, newPath);
                };
                LockedFS.prototype.stat = function stat(p, isLstat, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.stat(p, isLstat, function(err2, stat2) {
                      this$1._mu.unlock();
                      cb(err2, stat2);
                    });
                  });
                };
                LockedFS.prototype.statSync = function statSync(p, isLstat) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.statSync(p, isLstat);
                };
                LockedFS.prototype.open = function open(p, flag, mode, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.open(p, flag, mode, function(err2, fd) {
                      this$1._mu.unlock();
                      cb(err2, fd);
                    });
                  });
                };
                LockedFS.prototype.openSync = function openSync(p, flag, mode) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.openSync(p, flag, mode);
                };
                LockedFS.prototype.unlink = function unlink(p, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.unlink(p, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.unlinkSync = function unlinkSync(p) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.unlinkSync(p);
                };
                LockedFS.prototype.rmdir = function rmdir(p, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.rmdir(p, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.rmdirSync = function rmdirSync(p) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.rmdirSync(p);
                };
                LockedFS.prototype.mkdir = function mkdir(p, mode, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.mkdir(p, mode, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.mkdirSync = function mkdirSync(p, mode) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.mkdirSync(p, mode);
                };
                LockedFS.prototype.readdir = function readdir(p, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.readdir(p, function(err2, files) {
                      this$1._mu.unlock();
                      cb(err2, files);
                    });
                  });
                };
                LockedFS.prototype.readdirSync = function readdirSync(p) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.readdirSync(p);
                };
                LockedFS.prototype.exists = function exists(p, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.exists(p, function(exists2) {
                      this$1._mu.unlock();
                      cb(exists2);
                    });
                  });
                };
                LockedFS.prototype.existsSync = function existsSync(p) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.existsSync(p);
                };
                LockedFS.prototype.realpath = function realpath(p, cache, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.realpath(p, cache, function(err2, resolvedPath) {
                      this$1._mu.unlock();
                      cb(err2, resolvedPath);
                    });
                  });
                };
                LockedFS.prototype.realpathSync = function realpathSync(p, cache) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.realpathSync(p, cache);
                };
                LockedFS.prototype.truncate = function truncate(p, len, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.truncate(p, len, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.truncateSync = function truncateSync(p, len) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.truncateSync(p, len);
                };
                LockedFS.prototype.readFile = function readFile(fname, encoding, flag, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.readFile(fname, encoding, flag, function(err2, data) {
                      this$1._mu.unlock();
                      cb(err2, data);
                    });
                  });
                };
                LockedFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.readFileSync(fname, encoding, flag);
                };
                LockedFS.prototype.writeFile = function writeFile2(fname, data, encoding, flag, mode, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.writeFile(fname, data, encoding, flag, mode, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.writeFileSync(fname, data, encoding, flag, mode);
                };
                LockedFS.prototype.appendFile = function appendFile2(fname, data, encoding, flag, mode, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.appendFile(fname, data, encoding, flag, mode, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.appendFileSync(fname, data, encoding, flag, mode);
                };
                LockedFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.chmod(p, isLchmod, mode, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.chmodSync(p, isLchmod, mode);
                };
                LockedFS.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.chown(p, isLchown, uid, gid, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.chownSync(p, isLchown, uid, gid);
                };
                LockedFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.utimes(p, atime, mtime, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.utimesSync(p, atime, mtime);
                };
                LockedFS.prototype.link = function link(srcpath, dstpath, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.link(srcpath, dstpath, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.linkSync = function linkSync(srcpath, dstpath) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.linkSync(srcpath, dstpath);
                };
                LockedFS.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.symlink(srcpath, dstpath, type, function(err2) {
                      this$1._mu.unlock();
                      cb(err2);
                    });
                  });
                };
                LockedFS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.symlinkSync(srcpath, dstpath, type);
                };
                LockedFS.prototype.readlink = function readlink(p, cb) {
                  var this$1 = this;
                  this._mu.lock(function() {
                    this$1._fs.readlink(p, function(err2, linkString) {
                      this$1._mu.unlock();
                      cb(err2, linkString);
                    });
                  });
                };
                LockedFS.prototype.readlinkSync = function readlinkSync(p) {
                  if (this._mu.isLocked()) {
                    throw new Error("invalid sync call");
                  }
                  return this._fs.readlinkSync(p);
                };
                var deletionLogPath = "/.deletedFiles.log";
                function makeModeWritable(mode) {
                  return 146 | mode;
                }
                function getFlag(f) {
                  return FileFlag.getFileFlag(f);
                }
                var OverlayFile = function(PreloadFile$$1) {
                  function OverlayFile2(fs4, path$$1, flag, stats, data) {
                    PreloadFile$$1.call(this, fs4, path$$1, flag, stats, data);
                  }
                  if (PreloadFile$$1)
                    OverlayFile2.__proto__ = PreloadFile$$1;
                  OverlayFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
                  OverlayFile2.prototype.constructor = OverlayFile2;
                  OverlayFile2.prototype.sync = function sync(cb) {
                    var this$1 = this;
                    if (!this.isDirty()) {
                      cb(null);
                      return;
                    }
                    this._fs._syncAsync(this, function(err2) {
                      this$1.resetDirty();
                      cb(err2);
                    });
                  };
                  OverlayFile2.prototype.syncSync = function syncSync() {
                    if (this.isDirty()) {
                      this._fs._syncSync(this);
                      this.resetDirty();
                    }
                  };
                  OverlayFile2.prototype.close = function close(cb) {
                    this.sync(cb);
                  };
                  OverlayFile2.prototype.closeSync = function closeSync() {
                    this.syncSync();
                  };
                  return OverlayFile2;
                }(PreloadFile);
                var UnlockedOverlayFS = function(BaseFileSystem$$1) {
                  function UnlockedOverlayFS2(writable, readable) {
                    BaseFileSystem$$1.call(this);
                    this._isInitialized = false;
                    this._initializeCallbacks = [];
                    this._deletedFiles = {};
                    this._deleteLog = "";
                    this._deleteLogUpdatePending = false;
                    this._deleteLogUpdateNeeded = false;
                    this._deleteLogError = null;
                    this._writable = writable;
                    this._readable = readable;
                    if (this._writable.isReadOnly()) {
                      throw new ApiError(ErrorCode.EINVAL, "Writable file system must be writable.");
                    }
                  }
                  if (BaseFileSystem$$1)
                    UnlockedOverlayFS2.__proto__ = BaseFileSystem$$1;
                  UnlockedOverlayFS2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  UnlockedOverlayFS2.prototype.constructor = UnlockedOverlayFS2;
                  UnlockedOverlayFS2.isAvailable = function isAvailable() {
                    return true;
                  };
                  UnlockedOverlayFS2.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
                    return {
                      readable: this._readable,
                      writable: this._writable
                    };
                  };
                  UnlockedOverlayFS2.prototype._syncAsync = function _syncAsync(file, cb) {
                    var this$1 = this;
                    this.createParentDirectoriesAsync(file.getPath(), function(err2) {
                      if (err2) {
                        return cb(err2);
                      }
                      this$1._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag("w"), file.getStats().mode, cb);
                    });
                  };
                  UnlockedOverlayFS2.prototype._syncSync = function _syncSync(file) {
                    this.createParentDirectories(file.getPath());
                    this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag("w"), file.getStats().mode);
                  };
                  UnlockedOverlayFS2.prototype.getName = function getName() {
                    return OverlayFS.Name;
                  };
                  UnlockedOverlayFS2.prototype.initialize = function initialize3(cb) {
                    var this$1 = this;
                    var callbackArray = this._initializeCallbacks;
                    var end = function(e) {
                      this$1._isInitialized = !e;
                      this$1._initializeCallbacks = [];
                      callbackArray.forEach(function(cb2) {
                        return cb2(e);
                      });
                    };
                    if (this._isInitialized) {
                      return cb();
                    }
                    callbackArray.push(cb);
                    if (callbackArray.length !== 1) {
                      return;
                    }
                    this._writable.readFile(deletionLogPath, "utf8", getFlag("r"), function(err2, data) {
                      if (err2) {
                        if (err2.errno !== ErrorCode.ENOENT) {
                          return end(err2);
                        }
                      } else {
                        this$1._deleteLog = data;
                      }
                      this$1._reparseDeletionLog();
                      end();
                    });
                  };
                  UnlockedOverlayFS2.prototype.isReadOnly = function isReadOnly() {
                    return false;
                  };
                  UnlockedOverlayFS2.prototype.supportsSynch = function supportsSynch() {
                    return this._readable.supportsSynch() && this._writable.supportsSynch();
                  };
                  UnlockedOverlayFS2.prototype.supportsLinks = function supportsLinks() {
                    return false;
                  };
                  UnlockedOverlayFS2.prototype.supportsProps = function supportsProps() {
                    return this._readable.supportsProps() && this._writable.supportsProps();
                  };
                  UnlockedOverlayFS2.prototype.getDeletionLog = function getDeletionLog() {
                    return this._deleteLog;
                  };
                  UnlockedOverlayFS2.prototype.restoreDeletionLog = function restoreDeletionLog(log) {
                    this._deleteLog = log;
                    this._reparseDeletionLog();
                    this.updateLog("");
                  };
                  UnlockedOverlayFS2.prototype.rename = function rename(oldPath, newPath, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
                      return;
                    }
                    if (oldPath === deletionLogPath || newPath === deletionLogPath) {
                      return cb(ApiError.EPERM("Cannot rename deletion log."));
                    }
                    if (oldPath === newPath) {
                      return cb();
                    }
                    this.stat(oldPath, false, function(oldErr, oldStats) {
                      if (oldErr) {
                        return cb(oldErr);
                      }
                      return this$1.stat(newPath, false, function(newErr, newStats) {
                        var self2 = this$1;
                        function copyDirContents(files) {
                          var file = files.shift();
                          if (!file) {
                            return cb();
                          }
                          var oldFile = path.resolve(oldPath, file);
                          var newFile = path.resolve(newPath, file);
                          self2.rename(oldFile, newFile, function(err2) {
                            if (err2) {
                              return cb(err2);
                            }
                            copyDirContents(files);
                          });
                        }
                        var mode = 511;
                        if (oldStats.isDirectory()) {
                          if (newErr) {
                            if (newErr.errno !== ErrorCode.ENOENT) {
                              return cb(newErr);
                            }
                            return this$1._writable.exists(oldPath, function(exists) {
                              if (exists) {
                                return this$1._writable.rename(oldPath, newPath, cb);
                              }
                              this$1._writable.mkdir(newPath, mode, function(mkdirErr) {
                                if (mkdirErr) {
                                  return cb(mkdirErr);
                                }
                                this$1._readable.readdir(oldPath, function(err2, files) {
                                  if (err2) {
                                    return cb();
                                  }
                                  copyDirContents(files);
                                });
                              });
                            });
                          }
                          mode = newStats.mode;
                          if (!newStats.isDirectory()) {
                            return cb(ApiError.ENOTDIR(newPath));
                          }
                          this$1.readdir(newPath, function(readdirErr, files) {
                            if (files && files.length) {
                              return cb(ApiError.ENOTEMPTY(newPath));
                            }
                            this$1._readable.readdir(oldPath, function(err2, files2) {
                              if (err2) {
                                return cb();
                              }
                              copyDirContents(files2);
                            });
                          });
                        }
                        if (newStats && newStats.isDirectory()) {
                          return cb(ApiError.EISDIR(newPath));
                        }
                        this$1.readFile(oldPath, null, getFlag("r"), function(err2, data) {
                          if (err2) {
                            return cb(err2);
                          }
                          return this$1.writeFile(newPath, data, null, getFlag("w"), oldStats.mode, function(err3) {
                            if (err3) {
                              return cb(err3);
                            }
                            return this$1.unlink(oldPath, cb);
                          });
                        });
                      });
                    });
                  };
                  UnlockedOverlayFS2.prototype.renameSync = function renameSync(oldPath, newPath) {
                    var this$1 = this;
                    this.checkInitialized();
                    this.checkPath(oldPath);
                    this.checkPath(newPath);
                    if (oldPath === deletionLogPath || newPath === deletionLogPath) {
                      throw ApiError.EPERM("Cannot rename deletion log.");
                    }
                    var oldStats = this.statSync(oldPath, false);
                    if (oldStats.isDirectory()) {
                      if (oldPath === newPath) {
                        return;
                      }
                      var mode = 511;
                      if (this.existsSync(newPath)) {
                        var stats = this.statSync(newPath, false);
                        mode = stats.mode;
                        if (stats.isDirectory()) {
                          if (this.readdirSync(newPath).length > 0) {
                            throw ApiError.ENOTEMPTY(newPath);
                          }
                        } else {
                          throw ApiError.ENOTDIR(newPath);
                        }
                      }
                      if (this._writable.existsSync(oldPath)) {
                        this._writable.renameSync(oldPath, newPath);
                      } else if (!this._writable.existsSync(newPath)) {
                        this._writable.mkdirSync(newPath, mode);
                      }
                      if (this._readable.existsSync(oldPath)) {
                        this._readable.readdirSync(oldPath).forEach(function(name) {
                          this$1.renameSync(path.resolve(oldPath, name), path.resolve(newPath, name));
                        });
                      }
                    } else {
                      if (this.existsSync(newPath) && this.statSync(newPath, false).isDirectory()) {
                        throw ApiError.EISDIR(newPath);
                      }
                      this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag("r")), null, getFlag("w"), oldStats.mode);
                    }
                    if (oldPath !== newPath && this.existsSync(oldPath)) {
                      this.unlinkSync(oldPath);
                    }
                  };
                  UnlockedOverlayFS2.prototype.stat = function stat(p, isLstat, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb)) {
                      return;
                    }
                    this._writable.stat(p, isLstat, function(err2, stat2) {
                      if (err2 && err2.errno === ErrorCode.ENOENT) {
                        if (this$1._deletedFiles[p]) {
                          cb(ApiError.ENOENT(p));
                        }
                        this$1._readable.stat(p, isLstat, function(err3, stat3) {
                          if (stat3) {
                            stat3 = stat3.clone();
                            stat3.mode = makeModeWritable(stat3.mode);
                          }
                          cb(err3, stat3);
                        });
                      } else {
                        cb(err2, stat2);
                      }
                    });
                  };
                  UnlockedOverlayFS2.prototype.statSync = function statSync(p, isLstat) {
                    this.checkInitialized();
                    try {
                      return this._writable.statSync(p, isLstat);
                    } catch (e) {
                      if (this._deletedFiles[p]) {
                        throw ApiError.ENOENT(p);
                      }
                      var oldStat = this._readable.statSync(p, isLstat).clone();
                      oldStat.mode = makeModeWritable(oldStat.mode);
                      return oldStat;
                    }
                  };
                  UnlockedOverlayFS2.prototype.open = function open(p, flag, mode, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
                      return;
                    }
                    this.stat(p, false, function(err2, stats) {
                      if (stats) {
                        switch (flag.pathExistsAction()) {
                          case ActionType.TRUNCATE_FILE:
                            return this$1.createParentDirectoriesAsync(p, function(err3) {
                              if (err3) {
                                return cb(err3);
                              }
                              this$1._writable.open(p, flag, mode, cb);
                            });
                          case ActionType.NOP:
                            return this$1._writable.exists(p, function(exists) {
                              if (exists) {
                                this$1._writable.open(p, flag, mode, cb);
                              } else {
                                stats = stats.clone();
                                stats.mode = mode;
                                this$1._readable.readFile(p, null, getFlag("r"), function(readFileErr, data) {
                                  if (readFileErr) {
                                    return cb(readFileErr);
                                  }
                                  if (stats.size === -1) {
                                    stats.size = data.length;
                                  }
                                  var f = new OverlayFile(this$1, p, flag, stats, data);
                                  cb(null, f);
                                });
                              }
                            });
                          default:
                            return cb(ApiError.EEXIST(p));
                        }
                      } else {
                        switch (flag.pathNotExistsAction()) {
                          case ActionType.CREATE_FILE:
                            return this$1.createParentDirectoriesAsync(p, function(err3) {
                              if (err3) {
                                return cb(err3);
                              }
                              return this$1._writable.open(p, flag, mode, cb);
                            });
                          default:
                            return cb(ApiError.ENOENT(p));
                        }
                      }
                    });
                  };
                  UnlockedOverlayFS2.prototype.openSync = function openSync(p, flag, mode) {
                    this.checkInitialized();
                    this.checkPath(p);
                    if (p === deletionLogPath) {
                      throw ApiError.EPERM("Cannot open deletion log.");
                    }
                    if (this.existsSync(p)) {
                      switch (flag.pathExistsAction()) {
                        case ActionType.TRUNCATE_FILE:
                          this.createParentDirectories(p);
                          return this._writable.openSync(p, flag, mode);
                        case ActionType.NOP:
                          if (this._writable.existsSync(p)) {
                            return this._writable.openSync(p, flag, mode);
                          } else {
                            var buf = this._readable.readFileSync(p, null, getFlag("r"));
                            var stats = this._readable.statSync(p, false).clone();
                            stats.mode = mode;
                            return new OverlayFile(this, p, flag, stats, buf);
                          }
                        default:
                          throw ApiError.EEXIST(p);
                      }
                    } else {
                      switch (flag.pathNotExistsAction()) {
                        case ActionType.CREATE_FILE:
                          this.createParentDirectories(p);
                          return this._writable.openSync(p, flag, mode);
                        default:
                          throw ApiError.ENOENT(p);
                      }
                    }
                  };
                  UnlockedOverlayFS2.prototype.unlink = function unlink(p, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
                      return;
                    }
                    this.exists(p, function(exists) {
                      if (!exists) {
                        return cb(ApiError.ENOENT(p));
                      }
                      this$1._writable.exists(p, function(writableExists) {
                        if (writableExists) {
                          return this$1._writable.unlink(p, function(err2) {
                            if (err2) {
                              return cb(err2);
                            }
                            this$1.exists(p, function(readableExists) {
                              if (readableExists) {
                                this$1.deletePath(p);
                              }
                              cb(null);
                            });
                          });
                        } else {
                          this$1.deletePath(p);
                          cb(null);
                        }
                      });
                    });
                  };
                  UnlockedOverlayFS2.prototype.unlinkSync = function unlinkSync(p) {
                    this.checkInitialized();
                    this.checkPath(p);
                    if (this.existsSync(p)) {
                      if (this._writable.existsSync(p)) {
                        this._writable.unlinkSync(p);
                      }
                      if (this.existsSync(p)) {
                        this.deletePath(p);
                      }
                    } else {
                      throw ApiError.ENOENT(p);
                    }
                  };
                  UnlockedOverlayFS2.prototype.rmdir = function rmdir(p, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb)) {
                      return;
                    }
                    var rmdirLower = function() {
                      this$1.readdir(p, function(err2, files) {
                        if (err2) {
                          return cb(err2);
                        }
                        if (files.length) {
                          return cb(ApiError.ENOTEMPTY(p));
                        }
                        this$1.deletePath(p);
                        cb(null);
                      });
                    };
                    this.exists(p, function(exists) {
                      if (!exists) {
                        return cb(ApiError.ENOENT(p));
                      }
                      this$1._writable.exists(p, function(writableExists) {
                        if (writableExists) {
                          this$1._writable.rmdir(p, function(err2) {
                            if (err2) {
                              return cb(err2);
                            }
                            this$1._readable.exists(p, function(readableExists) {
                              if (readableExists) {
                                rmdirLower();
                              } else {
                                cb();
                              }
                            });
                          });
                        } else {
                          rmdirLower();
                        }
                      });
                    });
                  };
                  UnlockedOverlayFS2.prototype.rmdirSync = function rmdirSync(p) {
                    this.checkInitialized();
                    if (this.existsSync(p)) {
                      if (this._writable.existsSync(p)) {
                        this._writable.rmdirSync(p);
                      }
                      if (this.existsSync(p)) {
                        if (this.readdirSync(p).length > 0) {
                          throw ApiError.ENOTEMPTY(p);
                        } else {
                          this.deletePath(p);
                        }
                      }
                    } else {
                      throw ApiError.ENOENT(p);
                    }
                  };
                  UnlockedOverlayFS2.prototype.mkdir = function mkdir(p, mode, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb)) {
                      return;
                    }
                    this.exists(p, function(exists) {
                      if (exists) {
                        return cb(ApiError.EEXIST(p));
                      }
                      this$1.createParentDirectoriesAsync(p, function(err2) {
                        if (err2) {
                          return cb(err2);
                        }
                        this$1._writable.mkdir(p, mode, cb);
                      });
                    });
                  };
                  UnlockedOverlayFS2.prototype.mkdirSync = function mkdirSync(p, mode) {
                    this.checkInitialized();
                    if (this.existsSync(p)) {
                      throw ApiError.EEXIST(p);
                    } else {
                      this.createParentDirectories(p);
                      this._writable.mkdirSync(p, mode);
                    }
                  };
                  UnlockedOverlayFS2.prototype.readdir = function readdir(p, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb)) {
                      return;
                    }
                    this.stat(p, false, function(err2, dirStats) {
                      if (err2) {
                        return cb(err2);
                      }
                      if (!dirStats.isDirectory()) {
                        return cb(ApiError.ENOTDIR(p));
                      }
                      this$1._writable.readdir(p, function(err3, wFiles) {
                        if (err3 && err3.code !== "ENOENT") {
                          return cb(err3);
                        } else if (err3 || !wFiles) {
                          wFiles = [];
                        }
                        this$1._readable.readdir(p, function(err4, rFiles) {
                          if (err4 || !rFiles) {
                            rFiles = [];
                          }
                          var seenMap = {};
                          var filtered = wFiles.concat(rFiles.filter(function(fPath) {
                            return !this$1._deletedFiles[p + "/" + fPath];
                          })).filter(function(fPath) {
                            var result = !seenMap[fPath];
                            seenMap[fPath] = true;
                            return result;
                          });
                          cb(null, filtered);
                        });
                      });
                    });
                  };
                  UnlockedOverlayFS2.prototype.readdirSync = function readdirSync(p) {
                    var this$1 = this;
                    this.checkInitialized();
                    var dirStats = this.statSync(p, false);
                    if (!dirStats.isDirectory()) {
                      throw ApiError.ENOTDIR(p);
                    }
                    var contents = [];
                    try {
                      contents = contents.concat(this._writable.readdirSync(p));
                    } catch (e) {
                    }
                    try {
                      contents = contents.concat(this._readable.readdirSync(p).filter(function(fPath) {
                        return !this$1._deletedFiles[p + "/" + fPath];
                      }));
                    } catch (e) {
                    }
                    var seenMap = {};
                    return contents.filter(function(fileP) {
                      var result = !seenMap[fileP];
                      seenMap[fileP] = true;
                      return result;
                    });
                  };
                  UnlockedOverlayFS2.prototype.exists = function exists(p, cb) {
                    var this$1 = this;
                    this.checkInitialized();
                    this._writable.exists(p, function(existsWritable) {
                      if (existsWritable) {
                        return cb(true);
                      }
                      this$1._readable.exists(p, function(existsReadable) {
                        cb(existsReadable && this$1._deletedFiles[p] !== true);
                      });
                    });
                  };
                  UnlockedOverlayFS2.prototype.existsSync = function existsSync(p) {
                    this.checkInitialized();
                    return this._writable.existsSync(p) || this._readable.existsSync(p) && this._deletedFiles[p] !== true;
                  };
                  UnlockedOverlayFS2.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb)) {
                      return;
                    }
                    this.operateOnWritableAsync(p, function(err2) {
                      if (err2) {
                        return cb(err2);
                      } else {
                        this$1._writable.chmod(p, isLchmod, mode, cb);
                      }
                    });
                  };
                  UnlockedOverlayFS2.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
                    var this$1 = this;
                    this.checkInitialized();
                    this.operateOnWritable(p, function() {
                      this$1._writable.chmodSync(p, isLchmod, mode);
                    });
                  };
                  UnlockedOverlayFS2.prototype.chown = function chown(p, isLchmod, uid, gid, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb)) {
                      return;
                    }
                    this.operateOnWritableAsync(p, function(err2) {
                      if (err2) {
                        return cb(err2);
                      } else {
                        this$1._writable.chown(p, isLchmod, uid, gid, cb);
                      }
                    });
                  };
                  UnlockedOverlayFS2.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
                    var this$1 = this;
                    this.checkInitialized();
                    this.operateOnWritable(p, function() {
                      this$1._writable.chownSync(p, isLchown, uid, gid);
                    });
                  };
                  UnlockedOverlayFS2.prototype.utimes = function utimes(p, atime, mtime, cb) {
                    var this$1 = this;
                    if (!this.checkInitAsync(cb)) {
                      return;
                    }
                    this.operateOnWritableAsync(p, function(err2) {
                      if (err2) {
                        return cb(err2);
                      } else {
                        this$1._writable.utimes(p, atime, mtime, cb);
                      }
                    });
                  };
                  UnlockedOverlayFS2.prototype.utimesSync = function utimesSync(p, atime, mtime) {
                    var this$1 = this;
                    this.checkInitialized();
                    this.operateOnWritable(p, function() {
                      this$1._writable.utimesSync(p, atime, mtime);
                    });
                  };
                  UnlockedOverlayFS2.prototype.deletePath = function deletePath(p) {
                    this._deletedFiles[p] = true;
                    this.updateLog("d" + p + "\n");
                  };
                  UnlockedOverlayFS2.prototype.updateLog = function updateLog(addition) {
                    var this$1 = this;
                    this._deleteLog += addition;
                    if (this._deleteLogUpdatePending) {
                      this._deleteLogUpdateNeeded = true;
                    } else {
                      this._deleteLogUpdatePending = true;
                      this._writable.writeFile(deletionLogPath, this._deleteLog, "utf8", FileFlag.getFileFlag("w"), 420, function(e) {
                        this$1._deleteLogUpdatePending = false;
                        if (e) {
                          this$1._deleteLogError = e;
                        } else if (this$1._deleteLogUpdateNeeded) {
                          this$1._deleteLogUpdateNeeded = false;
                          this$1.updateLog("");
                        }
                      });
                    }
                  };
                  UnlockedOverlayFS2.prototype._reparseDeletionLog = function _reparseDeletionLog() {
                    var this$1 = this;
                    this._deletedFiles = {};
                    this._deleteLog.split("\n").forEach(function(path$$1) {
                      this$1._deletedFiles[path$$1.slice(1)] = path$$1.slice(0, 1) === "d";
                    });
                  };
                  UnlockedOverlayFS2.prototype.checkInitialized = function checkInitialized() {
                    if (!this._isInitialized) {
                      throw new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
                    } else if (this._deleteLogError !== null) {
                      var e = this._deleteLogError;
                      this._deleteLogError = null;
                      throw e;
                    }
                  };
                  UnlockedOverlayFS2.prototype.checkInitAsync = function checkInitAsync(cb) {
                    if (!this._isInitialized) {
                      cb(new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
                      return false;
                    } else if (this._deleteLogError !== null) {
                      var e = this._deleteLogError;
                      this._deleteLogError = null;
                      cb(e);
                      return false;
                    }
                    return true;
                  };
                  UnlockedOverlayFS2.prototype.checkPath = function checkPath(p) {
                    if (p === deletionLogPath) {
                      throw ApiError.EPERM(p);
                    }
                  };
                  UnlockedOverlayFS2.prototype.checkPathAsync = function checkPathAsync(p, cb) {
                    if (p === deletionLogPath) {
                      cb(ApiError.EPERM(p));
                      return true;
                    }
                    return false;
                  };
                  UnlockedOverlayFS2.prototype.createParentDirectoriesAsync = function createParentDirectoriesAsync(p, cb) {
                    var parent = path.dirname(p);
                    var toCreate = [];
                    var self2 = this;
                    this._writable.stat(parent, false, statDone);
                    function statDone(err2, stat) {
                      if (err2) {
                        toCreate.push(parent);
                        parent = path.dirname(parent);
                        self2._writable.stat(parent, false, statDone);
                      } else {
                        createParents();
                      }
                    }
                    function createParents() {
                      if (!toCreate.length) {
                        return cb();
                      }
                      var dir = toCreate.pop();
                      self2._readable.stat(dir, false, function(err2, stats) {
                        if (!stats) {
                          return cb();
                        }
                        self2._writable.mkdir(dir, stats.mode, function(err3) {
                          if (err3) {
                            return cb(err3);
                          }
                          createParents();
                        });
                      });
                    }
                  };
                  UnlockedOverlayFS2.prototype.createParentDirectories = function createParentDirectories(p) {
                    var this$1 = this;
                    var parent = path.dirname(p), toCreate = [];
                    while (!this._writable.existsSync(parent)) {
                      toCreate.push(parent);
                      parent = path.dirname(parent);
                    }
                    toCreate = toCreate.reverse();
                    toCreate.forEach(function(p2) {
                      this$1._writable.mkdirSync(p2, this$1.statSync(p2, false).mode);
                    });
                  };
                  UnlockedOverlayFS2.prototype.operateOnWritable = function operateOnWritable(p, f) {
                    if (this.existsSync(p)) {
                      if (!this._writable.existsSync(p)) {
                        this.copyToWritable(p);
                      }
                      f();
                    } else {
                      throw ApiError.ENOENT(p);
                    }
                  };
                  UnlockedOverlayFS2.prototype.operateOnWritableAsync = function operateOnWritableAsync(p, cb) {
                    var this$1 = this;
                    this.exists(p, function(exists) {
                      if (!exists) {
                        return cb(ApiError.ENOENT(p));
                      }
                      this$1._writable.exists(p, function(existsWritable) {
                        if (existsWritable) {
                          cb();
                        } else {
                          return this$1.copyToWritableAsync(p, cb);
                        }
                      });
                    });
                  };
                  UnlockedOverlayFS2.prototype.copyToWritable = function copyToWritable(p) {
                    var pStats = this.statSync(p, false);
                    if (pStats.isDirectory()) {
                      this._writable.mkdirSync(p, pStats.mode);
                    } else {
                      this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag("r")), null, getFlag("w"), this.statSync(p, false).mode);
                    }
                  };
                  UnlockedOverlayFS2.prototype.copyToWritableAsync = function copyToWritableAsync(p, cb) {
                    var this$1 = this;
                    this.stat(p, false, function(err2, pStats) {
                      if (err2) {
                        return cb(err2);
                      }
                      if (pStats.isDirectory()) {
                        return this$1._writable.mkdir(p, pStats.mode, cb);
                      }
                      this$1._readable.readFile(p, null, getFlag("r"), function(err3, data) {
                        if (err3) {
                          return cb(err3);
                        }
                        this$1.writeFile(p, data, null, getFlag("w"), pStats.mode, cb);
                      });
                    });
                  };
                  return UnlockedOverlayFS2;
                }(BaseFileSystem);
                var OverlayFS = function(LockedFS$$1) {
                  function OverlayFS2(writable, readable, deprecateMsg) {
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    LockedFS$$1.call(this, new UnlockedOverlayFS(writable, readable));
                    deprecationMessage(deprecateMsg, OverlayFS2.Name, { readable: "readable file system", writable: "writable file system" });
                  }
                  if (LockedFS$$1)
                    OverlayFS2.__proto__ = LockedFS$$1;
                  OverlayFS2.prototype = Object.create(LockedFS$$1 && LockedFS$$1.prototype);
                  OverlayFS2.prototype.constructor = OverlayFS2;
                  OverlayFS2.Create = function Create(opts, cb) {
                    try {
                      var fs4 = new OverlayFS2(opts.writable, opts.readable, false);
                      fs4.initialize(function(e) {
                        cb(e, fs4);
                      }, false);
                    } catch (e) {
                      cb(e);
                    }
                  };
                  OverlayFS2.isAvailable = function isAvailable() {
                    return UnlockedOverlayFS.isAvailable();
                  };
                  OverlayFS2.prototype.initialize = function initialize3(cb, deprecateMsg) {
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    if (deprecateMsg) {
                      console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances.");
                    }
                    LockedFS$$1.prototype.initialize.call(this, cb);
                  };
                  OverlayFS2.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
                    return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems();
                  };
                  OverlayFS2.prototype.unwrap = function unwrap() {
                    return LockedFS$$1.prototype.getFSUnlocked.call(this);
                  };
                  return OverlayFS2;
                }(LockedFS);
                OverlayFS.Name = "OverlayFS";
                OverlayFS.Options = {
                  writable: {
                    type: "object",
                    description: "The file system to write modified files to."
                  },
                  readable: {
                    type: "object",
                    description: "The file system that initially populates this file system."
                  }
                };
                var SpecialArgType;
                (function(SpecialArgType2) {
                  SpecialArgType2[SpecialArgType2["CB"] = 0] = "CB";
                  SpecialArgType2[SpecialArgType2["FD"] = 1] = "FD";
                  SpecialArgType2[SpecialArgType2["API_ERROR"] = 2] = "API_ERROR";
                  SpecialArgType2[SpecialArgType2["STATS"] = 3] = "STATS";
                  SpecialArgType2[SpecialArgType2["PROBE"] = 4] = "PROBE";
                  SpecialArgType2[SpecialArgType2["FILEFLAG"] = 5] = "FILEFLAG";
                  SpecialArgType2[SpecialArgType2["BUFFER"] = 6] = "BUFFER";
                  SpecialArgType2[SpecialArgType2["ERROR"] = 7] = "ERROR";
                })(SpecialArgType || (SpecialArgType = {}));
                var CallbackArgumentConverter = function CallbackArgumentConverter2() {
                  this._callbacks = {};
                  this._nextId = 0;
                };
                CallbackArgumentConverter.prototype.toRemoteArg = function toRemoteArg(cb) {
                  var id = this._nextId++;
                  this._callbacks[id] = cb;
                  return {
                    type: SpecialArgType.CB,
                    id
                  };
                };
                CallbackArgumentConverter.prototype.toLocalArg = function toLocalArg(id) {
                  var cb = this._callbacks[id];
                  delete this._callbacks[id];
                  return cb;
                };
                var FileDescriptorArgumentConverter = function FileDescriptorArgumentConverter2() {
                  this._fileDescriptors = {};
                  this._nextId = 0;
                };
                FileDescriptorArgumentConverter.prototype.toRemoteArg = function toRemoteArg(fd, p, flag, cb) {
                  var id = this._nextId++;
                  var data;
                  var stat;
                  this._fileDescriptors[id] = fd;
                  fd.stat(function(err2, stats) {
                    if (err2) {
                      cb(err2);
                    } else {
                      stat = bufferToTransferrableObject(stats.toBuffer());
                      if (flag.isReadable()) {
                        fd.read(Buffer3.alloc(stats.size), 0, stats.size, 0, function(err3, bytesRead, buff) {
                          if (err3) {
                            cb(err3);
                          } else {
                            data = bufferToTransferrableObject(buff);
                            cb(null, {
                              type: SpecialArgType.FD,
                              id,
                              data,
                              stat,
                              path: p,
                              flag: flag.getFlagString()
                            });
                          }
                        });
                      } else {
                        cb(null, {
                          type: SpecialArgType.FD,
                          id,
                          data: new ArrayBuffer(0),
                          stat,
                          path: p,
                          flag: flag.getFlagString()
                        });
                      }
                    }
                  });
                };
                FileDescriptorArgumentConverter.prototype.applyFdAPIRequest = function applyFdAPIRequest(request, cb) {
                  var this$1 = this;
                  var fdArg = request.args[0];
                  this._applyFdChanges(fdArg, function(err2, fd) {
                    if (err2) {
                      cb(err2);
                    } else {
                      fd[request.method](function(e) {
                        if (request.method === "close") {
                          delete this$1._fileDescriptors[fdArg.id];
                        }
                        cb(e);
                      });
                    }
                  });
                };
                FileDescriptorArgumentConverter.prototype._applyFdChanges = function _applyFdChanges(remoteFd, cb) {
                  var fd = this._fileDescriptors[remoteFd.id], data = transferrableObjectToBuffer(remoteFd.data), remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat));
                  var flag = FileFlag.getFileFlag(remoteFd.flag);
                  if (flag.isWriteable()) {
                    fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, function(e) {
                      function applyStatChanges() {
                        fd.stat(function(e2, stats) {
                          if (e2) {
                            cb(e2);
                          } else {
                            if (stats.mode !== remoteStats.mode) {
                              fd.chmod(remoteStats.mode, function(e3) {
                                cb(e3, fd);
                              });
                            } else {
                              cb(e2, fd);
                            }
                          }
                        });
                      }
                      if (e) {
                        cb(e);
                      } else {
                        if (!flag.isAppendable()) {
                          fd.truncate(data.length, function() {
                            applyStatChanges();
                          });
                        } else {
                          applyStatChanges();
                        }
                      }
                    });
                  } else {
                    cb(null, fd);
                  }
                };
                function apiErrorLocal2Remote(e) {
                  return {
                    type: SpecialArgType.API_ERROR,
                    errorData: bufferToTransferrableObject(e.writeToBuffer())
                  };
                }
                function apiErrorRemote2Local(e) {
                  return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
                }
                function errorLocal2Remote(e) {
                  return {
                    type: SpecialArgType.ERROR,
                    name: e.name,
                    message: e.message,
                    stack: e.stack
                  };
                }
                function errorRemote2Local(e) {
                  var cnstr = global$1[e.name];
                  if (typeof cnstr !== "function") {
                    cnstr = Error;
                  }
                  var err2 = new cnstr(e.message);
                  err2.stack = e.stack;
                  return err2;
                }
                function statsLocal2Remote(stats) {
                  return {
                    type: SpecialArgType.STATS,
                    statsData: bufferToTransferrableObject(stats.toBuffer())
                  };
                }
                function statsRemote2Local(stats) {
                  return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
                }
                function fileFlagLocal2Remote(flag) {
                  return {
                    type: SpecialArgType.FILEFLAG,
                    flagStr: flag.getFlagString()
                  };
                }
                function fileFlagRemote2Local(remoteFlag) {
                  return FileFlag.getFileFlag(remoteFlag.flagStr);
                }
                function bufferToTransferrableObject(buff) {
                  return buffer2ArrayBuffer(buff);
                }
                function transferrableObjectToBuffer(buff) {
                  return arrayBuffer2Buffer(buff);
                }
                function bufferLocal2Remote(buff) {
                  return {
                    type: SpecialArgType.BUFFER,
                    data: bufferToTransferrableObject(buff)
                  };
                }
                function bufferRemote2Local(buffArg) {
                  return transferrableObjectToBuffer(buffArg.data);
                }
                function isAPIRequest(data) {
                  return data && typeof data === "object" && data.hasOwnProperty("browserfsMessage") && data["browserfsMessage"];
                }
                function isAPIResponse(data) {
                  return data && typeof data === "object" && data.hasOwnProperty("browserfsMessage") && data["browserfsMessage"];
                }
                var WorkerFile = function(PreloadFile$$1) {
                  function WorkerFile2(_fs, _path, _flag, _stat, remoteFdId, contents) {
                    PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
                    this._remoteFdId = remoteFdId;
                  }
                  if (PreloadFile$$1)
                    WorkerFile2.__proto__ = PreloadFile$$1;
                  WorkerFile2.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
                  WorkerFile2.prototype.constructor = WorkerFile2;
                  WorkerFile2.prototype.getRemoteFdId = function getRemoteFdId() {
                    return this._remoteFdId;
                  };
                  WorkerFile2.prototype.toRemoteArg = function toRemoteArg() {
                    return {
                      type: SpecialArgType.FD,
                      id: this._remoteFdId,
                      data: bufferToTransferrableObject(this.getBuffer()),
                      stat: bufferToTransferrableObject(this.getStats().toBuffer()),
                      path: this.getPath(),
                      flag: this.getFlag().getFlagString()
                    };
                  };
                  WorkerFile2.prototype.sync = function sync(cb) {
                    this._syncClose("sync", cb);
                  };
                  WorkerFile2.prototype.close = function close(cb) {
                    this._syncClose("close", cb);
                  };
                  WorkerFile2.prototype._syncClose = function _syncClose(type, cb) {
                    var this$1 = this;
                    if (this.isDirty()) {
                      this._fs.syncClose(type, this, function(e) {
                        if (!e) {
                          this$1.resetDirty();
                        }
                        cb(e);
                      });
                    } else {
                      cb();
                    }
                  };
                  return WorkerFile2;
                }(PreloadFile);
                var WorkerFS = function(BaseFileSystem$$1) {
                  function WorkerFS2(worker, deprecateMsg) {
                    var this$1 = this;
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    BaseFileSystem$$1.call(this);
                    this._callbackConverter = new CallbackArgumentConverter();
                    this._isInitialized = false;
                    this._isReadOnly = false;
                    this._supportLinks = false;
                    this._supportProps = false;
                    this._worker = worker;
                    deprecationMessage(deprecateMsg, WorkerFS2.Name, { worker: "Web Worker instance" });
                    this._worker.addEventListener("message", function(e) {
                      var resp = e.data;
                      if (isAPIResponse(resp)) {
                        var i3;
                        var args = resp.args;
                        var fixedArgs = new Array(args.length);
                        for (i3 = 0; i3 < fixedArgs.length; i3++) {
                          fixedArgs[i3] = this$1._argRemote2Local(args[i3]);
                        }
                        this$1._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
                      }
                    });
                  }
                  if (BaseFileSystem$$1)
                    WorkerFS2.__proto__ = BaseFileSystem$$1;
                  WorkerFS2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  WorkerFS2.prototype.constructor = WorkerFS2;
                  WorkerFS2.Create = function Create(opts, cb) {
                    var fs4 = new WorkerFS2(opts.worker, false);
                    fs4.initialize(function() {
                      cb(null, fs4);
                    });
                  };
                  WorkerFS2.isAvailable = function isAvailable() {
                    return typeof importScripts !== "undefined" || typeof Worker !== "undefined";
                  };
                  WorkerFS2.attachRemoteListener = function attachRemoteListener(worker) {
                    var fdConverter = new FileDescriptorArgumentConverter();
                    function argLocal2Remote(arg, requestArgs, cb) {
                      switch (typeof arg) {
                        case "object":
                          if (arg instanceof Stats) {
                            cb(null, statsLocal2Remote(arg));
                          } else if (arg instanceof ApiError) {
                            cb(null, apiErrorLocal2Remote(arg));
                          } else if (arg instanceof BaseFile) {
                            cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
                          } else if (arg instanceof FileFlag) {
                            cb(null, fileFlagLocal2Remote(arg));
                          } else if (arg instanceof Buffer3) {
                            cb(null, bufferLocal2Remote(arg));
                          } else if (arg instanceof Error) {
                            cb(null, errorLocal2Remote(arg));
                          } else {
                            cb(null, arg);
                          }
                          break;
                        default:
                          cb(null, arg);
                          break;
                      }
                    }
                    function argRemote2Local(arg, fixedRequestArgs) {
                      if (!arg) {
                        return arg;
                      }
                      switch (typeof arg) {
                        case "object":
                          if (typeof arg["type"] === "number") {
                            var specialArg = arg;
                            switch (specialArg.type) {
                              case SpecialArgType.CB:
                                var cbId = arg.id;
                                return function() {
                                  var arguments$1 = arguments;
                                  var i3;
                                  var fixedArgs = new Array(arguments.length);
                                  var message, countdown = arguments.length;
                                  function abortAndSendError(err2) {
                                    if (countdown > 0) {
                                      countdown = -1;
                                      message = {
                                        browserfsMessage: true,
                                        cbId,
                                        args: [apiErrorLocal2Remote(err2)]
                                      };
                                      worker.postMessage(message);
                                    }
                                  }
                                  for (i3 = 0; i3 < arguments.length; i3++) {
                                    (function(i4, arg2) {
                                      argLocal2Remote(arg2, fixedRequestArgs, function(err2, fixedArg) {
                                        fixedArgs[i4] = fixedArg;
                                        if (err2) {
                                          abortAndSendError(err2);
                                        } else if (--countdown === 0) {
                                          message = {
                                            browserfsMessage: true,
                                            cbId,
                                            args: fixedArgs
                                          };
                                          worker.postMessage(message);
                                        }
                                      });
                                    })(i3, arguments$1[i3]);
                                  }
                                  if (arguments.length === 0) {
                                    message = {
                                      browserfsMessage: true,
                                      cbId,
                                      args: fixedArgs
                                    };
                                    worker.postMessage(message);
                                  }
                                };
                              case SpecialArgType.API_ERROR:
                                return apiErrorRemote2Local(specialArg);
                              case SpecialArgType.STATS:
                                return statsRemote2Local(specialArg);
                              case SpecialArgType.FILEFLAG:
                                return fileFlagRemote2Local(specialArg);
                              case SpecialArgType.BUFFER:
                                return bufferRemote2Local(specialArg);
                              case SpecialArgType.ERROR:
                                return errorRemote2Local(specialArg);
                              default:
                                return arg;
                            }
                          } else {
                            return arg;
                          }
                        default:
                          return arg;
                      }
                    }
                    worker.addEventListener("message", function(e) {
                      var request = e.data;
                      if (isAPIRequest(request)) {
                        var args = request.args, fixedArgs = new Array(args.length);
                        switch (request.method) {
                          case "close":
                          case "sync":
                            (function() {
                              var remoteCb = args[1];
                              fdConverter.applyFdAPIRequest(request, function(err2) {
                                var response = {
                                  browserfsMessage: true,
                                  cbId: remoteCb.id,
                                  args: err2 ? [apiErrorLocal2Remote(err2)] : []
                                };
                                worker.postMessage(response);
                              });
                            })();
                            break;
                          case "probe":
                            (function() {
                              var rootFs = _fsMock.getRootFS(), remoteCb = args[1], probeResponse = {
                                type: SpecialArgType.PROBE,
                                isReadOnly: rootFs.isReadOnly(),
                                supportsLinks: rootFs.supportsLinks(),
                                supportsProps: rootFs.supportsProps()
                              }, response = {
                                browserfsMessage: true,
                                cbId: remoteCb.id,
                                args: [probeResponse]
                              };
                              worker.postMessage(response);
                            })();
                            break;
                          default:
                            for (var i3 = 0; i3 < args.length; i3++) {
                              fixedArgs[i3] = argRemote2Local(args[i3], fixedArgs);
                            }
                            var rootFS = _fsMock.getRootFS();
                            rootFS[request.method].apply(rootFS, fixedArgs);
                            break;
                        }
                      }
                    });
                  };
                  WorkerFS2.prototype.getName = function getName() {
                    return WorkerFS2.Name;
                  };
                  WorkerFS2.prototype.initialize = function initialize3(cb) {
                    var this$1 = this;
                    if (!this._isInitialized) {
                      var message = {
                        browserfsMessage: true,
                        method: "probe",
                        args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg(function(probeResponse) {
                          this$1._isInitialized = true;
                          this$1._isReadOnly = probeResponse.isReadOnly;
                          this$1._supportLinks = probeResponse.supportsLinks;
                          this$1._supportProps = probeResponse.supportsProps;
                          cb();
                        })]
                      };
                      this._worker.postMessage(message);
                    } else {
                      cb();
                    }
                  };
                  WorkerFS2.prototype.isReadOnly = function isReadOnly() {
                    return this._isReadOnly;
                  };
                  WorkerFS2.prototype.supportsSynch = function supportsSynch() {
                    return false;
                  };
                  WorkerFS2.prototype.supportsLinks = function supportsLinks() {
                    return this._supportLinks;
                  };
                  WorkerFS2.prototype.supportsProps = function supportsProps() {
                    return this._supportProps;
                  };
                  WorkerFS2.prototype.rename = function rename(oldPath, newPath, cb) {
                    this._rpc("rename", arguments);
                  };
                  WorkerFS2.prototype.stat = function stat(p, isLstat, cb) {
                    this._rpc("stat", arguments);
                  };
                  WorkerFS2.prototype.open = function open(p, flag, mode, cb) {
                    this._rpc("open", arguments);
                  };
                  WorkerFS2.prototype.unlink = function unlink(p, cb) {
                    this._rpc("unlink", arguments);
                  };
                  WorkerFS2.prototype.rmdir = function rmdir(p, cb) {
                    this._rpc("rmdir", arguments);
                  };
                  WorkerFS2.prototype.mkdir = function mkdir(p, mode, cb) {
                    this._rpc("mkdir", arguments);
                  };
                  WorkerFS2.prototype.readdir = function readdir(p, cb) {
                    this._rpc("readdir", arguments);
                  };
                  WorkerFS2.prototype.exists = function exists(p, cb) {
                    this._rpc("exists", arguments);
                  };
                  WorkerFS2.prototype.realpath = function realpath(p, cache, cb) {
                    this._rpc("realpath", arguments);
                  };
                  WorkerFS2.prototype.truncate = function truncate(p, len, cb) {
                    this._rpc("truncate", arguments);
                  };
                  WorkerFS2.prototype.readFile = function readFile(fname, encoding, flag, cb) {
                    this._rpc("readFile", arguments);
                  };
                  WorkerFS2.prototype.writeFile = function writeFile2(fname, data, encoding, flag, mode, cb) {
                    this._rpc("writeFile", arguments);
                  };
                  WorkerFS2.prototype.appendFile = function appendFile2(fname, data, encoding, flag, mode, cb) {
                    this._rpc("appendFile", arguments);
                  };
                  WorkerFS2.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
                    this._rpc("chmod", arguments);
                  };
                  WorkerFS2.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
                    this._rpc("chown", arguments);
                  };
                  WorkerFS2.prototype.utimes = function utimes(p, atime, mtime, cb) {
                    this._rpc("utimes", arguments);
                  };
                  WorkerFS2.prototype.link = function link(srcpath, dstpath, cb) {
                    this._rpc("link", arguments);
                  };
                  WorkerFS2.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
                    this._rpc("symlink", arguments);
                  };
                  WorkerFS2.prototype.readlink = function readlink(p, cb) {
                    this._rpc("readlink", arguments);
                  };
                  WorkerFS2.prototype.syncClose = function syncClose(method2, fd, cb) {
                    this._worker.postMessage({
                      browserfsMessage: true,
                      method: method2,
                      args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
                    });
                  };
                  WorkerFS2.prototype._argRemote2Local = function _argRemote2Local(arg) {
                    if (!arg) {
                      return arg;
                    }
                    switch (typeof arg) {
                      case "object":
                        if (typeof arg["type"] === "number") {
                          var specialArg = arg;
                          switch (specialArg.type) {
                            case SpecialArgType.API_ERROR:
                              return apiErrorRemote2Local(specialArg);
                            case SpecialArgType.FD:
                              var fdArg = specialArg;
                              return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));
                            case SpecialArgType.STATS:
                              return statsRemote2Local(specialArg);
                            case SpecialArgType.FILEFLAG:
                              return fileFlagRemote2Local(specialArg);
                            case SpecialArgType.BUFFER:
                              return bufferRemote2Local(specialArg);
                            case SpecialArgType.ERROR:
                              return errorRemote2Local(specialArg);
                            default:
                              return arg;
                          }
                        } else {
                          return arg;
                        }
                      default:
                        return arg;
                    }
                  };
                  WorkerFS2.prototype._rpc = function _rpc(methodName, args) {
                    var this$1 = this;
                    var fixedArgs = new Array(args.length);
                    for (var i3 = 0; i3 < args.length; i3++) {
                      fixedArgs[i3] = this$1._argLocal2Remote(args[i3]);
                    }
                    var message = {
                      browserfsMessage: true,
                      method: methodName,
                      args: fixedArgs
                    };
                    this._worker.postMessage(message);
                  };
                  WorkerFS2.prototype._argLocal2Remote = function _argLocal2Remote(arg) {
                    if (!arg) {
                      return arg;
                    }
                    switch (typeof arg) {
                      case "object":
                        if (arg instanceof Stats) {
                          return statsLocal2Remote(arg);
                        } else if (arg instanceof ApiError) {
                          return apiErrorLocal2Remote(arg);
                        } else if (arg instanceof WorkerFile) {
                          return arg.toRemoteArg();
                        } else if (arg instanceof FileFlag) {
                          return fileFlagLocal2Remote(arg);
                        } else if (arg instanceof Buffer3) {
                          return bufferLocal2Remote(arg);
                        } else if (arg instanceof Error) {
                          return errorLocal2Remote(arg);
                        } else {
                          return "Unknown argument";
                        }
                      case "function":
                        return this._callbackConverter.toRemoteArg(arg);
                      default:
                        return arg;
                    }
                  };
                  return WorkerFS2;
                }(BaseFileSystem);
                WorkerFS.Name = "WorkerFS";
                WorkerFS.Options = {
                  worker: {
                    type: "object",
                    description: "The target worker that you want to connect to, or the current worker if in a worker context.",
                    validator: function(v2, cb) {
                      if (v2["postMessage"]) {
                        cb();
                      } else {
                        cb(new ApiError(ErrorCode.EINVAL, "option must be a Web Worker instance."));
                      }
                    }
                  }
                };
                function asyncDownloadFileModern(p, type, cb) {
                  var req = new XMLHttpRequest();
                  req.open("GET", p, true);
                  var jsonSupported = true;
                  switch (type) {
                    case "buffer":
                      req.responseType = "arraybuffer";
                      break;
                    case "json":
                      try {
                        req.responseType = "json";
                        jsonSupported = req.responseType === "json";
                      } catch (e) {
                        jsonSupported = false;
                      }
                      break;
                    default:
                      return cb(new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type));
                  }
                  req.onreadystatechange = function(e) {
                    if (req.readyState === 4) {
                      if (req.status === 200) {
                        switch (type) {
                          case "buffer":
                            return cb(null, req.response ? Buffer3.from(req.response) : emptyBuffer());
                          case "json":
                            if (jsonSupported) {
                              return cb(null, req.response);
                            } else {
                              return cb(null, JSON.parse(req.responseText));
                            }
                        }
                      } else {
                        return cb(new ApiError(req.status, "XHR error."));
                      }
                    }
                  };
                  req.send();
                }
                function syncDownloadFileModern(p, type) {
                  var req = new XMLHttpRequest();
                  req.open("GET", p, false);
                  var data = null;
                  var err2 = null;
                  req.overrideMimeType("text/plain; charset=x-user-defined");
                  req.onreadystatechange = function(e) {
                    if (req.readyState === 4) {
                      if (req.status === 200) {
                        switch (type) {
                          case "buffer":
                            var text = req.responseText;
                            data = Buffer3.alloc(text.length);
                            for (var i3 = 0; i3 < text.length; i3++) {
                              data[i3] = text.charCodeAt(i3);
                            }
                            return;
                          case "json":
                            data = JSON.parse(req.responseText);
                            return;
                        }
                      } else {
                        err2 = new ApiError(req.status, "XHR error.");
                        return;
                      }
                    }
                  };
                  req.send();
                  if (err2) {
                    throw err2;
                  }
                  return data;
                }
                function syncDownloadFileIE10(p, type) {
                  var req = new XMLHttpRequest();
                  req.open("GET", p, false);
                  switch (type) {
                    case "buffer":
                      req.responseType = "arraybuffer";
                      break;
                    case "json":
                      break;
                    default:
                      throw new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type);
                  }
                  var data;
                  var err2;
                  req.onreadystatechange = function(e) {
                    if (req.readyState === 4) {
                      if (req.status === 200) {
                        switch (type) {
                          case "buffer":
                            data = Buffer3.from(req.response);
                            break;
                          case "json":
                            data = JSON.parse(req.response);
                            break;
                        }
                      } else {
                        err2 = new ApiError(req.status, "XHR error.");
                      }
                    }
                  };
                  req.send();
                  if (err2) {
                    throw err2;
                  }
                  return data;
                }
                function getFileSize2(async, p, cb) {
                  var req = new XMLHttpRequest();
                  req.open("HEAD", p, async);
                  req.onreadystatechange = function(e) {
                    if (req.readyState === 4) {
                      if (req.status === 200) {
                        try {
                          return cb(null, parseInt(req.getResponseHeader("Content-Length") || "-1", 10));
                        } catch (e2) {
                          return cb(new ApiError(ErrorCode.EIO, "XHR HEAD error: Could not read content-length."));
                        }
                      } else {
                        return cb(new ApiError(req.status, "XHR HEAD error."));
                      }
                    }
                  };
                  req.send();
                }
                var asyncDownloadFile = asyncDownloadFileModern;
                var syncDownloadFile = isIE && typeof Blob !== "undefined" ? syncDownloadFileIE10 : syncDownloadFileModern;
                function getFileSizeSync(p) {
                  var rv = -1;
                  getFileSize2(false, p, function(err2, size) {
                    if (err2) {
                      throw err2;
                    }
                    rv = size;
                  });
                  return rv;
                }
                function getFileSizeAsync(p, cb) {
                  getFileSize2(true, p, cb);
                }
                var FileIndex = function FileIndex2() {
                  this._index = {};
                  this.addPath("/", new DirInode());
                };
                FileIndex.fromListing = function fromListing(listing) {
                  var idx = new FileIndex();
                  var rootInode = new DirInode();
                  idx._index["/"] = rootInode;
                  var queue = [["", listing, rootInode]];
                  while (queue.length > 0) {
                    var inode = void 0;
                    var next = queue.pop();
                    var pwd = next[0];
                    var tree = next[1];
                    var parent = next[2];
                    for (var node in tree) {
                      if (tree.hasOwnProperty(node)) {
                        var children = tree[node];
                        var name = pwd + "/" + node;
                        if (children) {
                          idx._index[name] = inode = new DirInode();
                          queue.push([name, children, inode]);
                        } else {
                          inode = new FileInode(new Stats(FileType.FILE, -1, 365));
                        }
                        if (parent) {
                          parent._ls[node] = inode;
                        }
                      }
                    }
                  }
                  return idx;
                };
                FileIndex.prototype.fileIterator = function fileIterator(cb) {
                  var this$1 = this;
                  for (var path$$1 in this$1._index) {
                    if (this$1._index.hasOwnProperty(path$$1)) {
                      var dir = this$1._index[path$$1];
                      var files = dir.getListing();
                      for (var i3 = 0, list2 = files; i3 < list2.length; i3 += 1) {
                        var file = list2[i3];
                        var item = dir.getItem(file);
                        if (isFileInode(item)) {
                          cb(item.getData());
                        }
                      }
                    }
                  }
                };
                FileIndex.prototype.addPath = function addPath(path$$1, inode) {
                  if (!inode) {
                    throw new Error("Inode must be specified");
                  }
                  if (path$$1[0] !== "/") {
                    throw new Error("Path must be absolute, got: " + path$$1);
                  }
                  if (this._index.hasOwnProperty(path$$1)) {
                    return this._index[path$$1] === inode;
                  }
                  var splitPath = this._split_path(path$$1);
                  var dirpath = splitPath[0];
                  var itemname = splitPath[1];
                  var parent = this._index[dirpath];
                  if (parent === void 0 && path$$1 !== "/") {
                    parent = new DirInode();
                    if (!this.addPath(dirpath, parent)) {
                      return false;
                    }
                  }
                  if (path$$1 !== "/") {
                    if (!parent.addItem(itemname, inode)) {
                      return false;
                    }
                  }
                  if (isDirInode(inode)) {
                    this._index[path$$1] = inode;
                  }
                  return true;
                };
                FileIndex.prototype.addPathFast = function addPathFast(path$$1, inode) {
                  var itemNameMark = path$$1.lastIndexOf("/");
                  var parentPath = itemNameMark === 0 ? "/" : path$$1.substring(0, itemNameMark);
                  var itemName = path$$1.substring(itemNameMark + 1);
                  var parent = this._index[parentPath];
                  if (parent === void 0) {
                    parent = new DirInode();
                    this.addPathFast(parentPath, parent);
                  }
                  if (!parent.addItem(itemName, inode)) {
                    return false;
                  }
                  if (inode.isDir()) {
                    this._index[path$$1] = inode;
                  }
                  return true;
                };
                FileIndex.prototype.removePath = function removePath(path$$1) {
                  var this$1 = this;
                  var splitPath = this._split_path(path$$1);
                  var dirpath = splitPath[0];
                  var itemname = splitPath[1];
                  var parent = this._index[dirpath];
                  if (parent === void 0) {
                    return null;
                  }
                  var inode = parent.remItem(itemname);
                  if (inode === null) {
                    return null;
                  }
                  if (isDirInode(inode)) {
                    var children = inode.getListing();
                    for (var i3 = 0, list2 = children; i3 < list2.length; i3 += 1) {
                      var child = list2[i3];
                      this$1.removePath(path$$1 + "/" + child);
                    }
                    if (path$$1 !== "/") {
                      delete this._index[path$$1];
                    }
                  }
                  return inode;
                };
                FileIndex.prototype.ls = function ls(path$$1) {
                  var item = this._index[path$$1];
                  if (item === void 0) {
                    return null;
                  }
                  return item.getListing();
                };
                FileIndex.prototype.getInode = function getInode(path$$1) {
                  var splitPath = this._split_path(path$$1);
                  var dirpath = splitPath[0];
                  var itemname = splitPath[1];
                  var parent = this._index[dirpath];
                  if (parent === void 0) {
                    return null;
                  }
                  if (dirpath === path$$1) {
                    return parent;
                  }
                  return parent.getItem(itemname);
                };
                FileIndex.prototype._split_path = function _split_path(p) {
                  var dirpath = path.dirname(p);
                  var itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
                  return [dirpath, itemname];
                };
                var FileInode = function FileInode2(data) {
                  this.data = data;
                };
                FileInode.prototype.isFile = function isFile() {
                  return true;
                };
                FileInode.prototype.isDir = function isDir() {
                  return false;
                };
                FileInode.prototype.getData = function getData() {
                  return this.data;
                };
                FileInode.prototype.setData = function setData(data) {
                  this.data = data;
                };
                var DirInode = function DirInode2(data) {
                  if (data === void 0)
                    data = null;
                  this.data = data;
                  this._ls = {};
                };
                DirInode.prototype.isFile = function isFile() {
                  return false;
                };
                DirInode.prototype.isDir = function isDir() {
                  return true;
                };
                DirInode.prototype.getData = function getData() {
                  return this.data;
                };
                DirInode.prototype.getStats = function getStats() {
                  return new Stats(FileType.DIRECTORY, 4096, 365);
                };
                DirInode.prototype.getListing = function getListing() {
                  return Object.keys(this._ls);
                };
                DirInode.prototype.getItem = function getItem(p) {
                  var item = this._ls[p];
                  return item ? item : null;
                };
                DirInode.prototype.addItem = function addItem(p, inode) {
                  if (p in this._ls) {
                    return false;
                  }
                  this._ls[p] = inode;
                  return true;
                };
                DirInode.prototype.remItem = function remItem(p) {
                  var item = this._ls[p];
                  if (item === void 0) {
                    return null;
                  }
                  delete this._ls[p];
                  return item;
                };
                function isFileInode(inode) {
                  return !!inode && inode.isFile();
                }
                function isDirInode(inode) {
                  return !!inode && inode.isDir();
                }
                function tryToString(buff, encoding, cb) {
                  try {
                    cb(null, buff.toString(encoding));
                  } catch (e) {
                    cb(e);
                  }
                }
                var XmlHttpRequest = function(BaseFileSystem$$1) {
                  function XmlHttpRequest2(listingUrlOrObj, prefixUrl, deprecateMsg) {
                    if (prefixUrl === void 0)
                      prefixUrl = "";
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    BaseFileSystem$$1.call(this);
                    if (!listingUrlOrObj) {
                      listingUrlOrObj = "index.json";
                    }
                    if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== "/") {
                      prefixUrl = prefixUrl + "/";
                    }
                    this.prefixUrl = prefixUrl;
                    var listing = null;
                    if (typeof listingUrlOrObj === "string") {
                      listing = this._requestFileSync(listingUrlOrObj, "json");
                      if (!listing) {
                        throw new Error("Unable to find listing at URL: ${listingUrlOrObj}");
                      }
                    } else {
                      listing = listingUrlOrObj;
                    }
                    deprecationMessage(deprecateMsg, XmlHttpRequest2.Name, { index: typeof listingUrlOrObj === "string" ? listingUrlOrObj : "file index as an object", baseUrl: prefixUrl });
                    this._index = FileIndex.fromListing(listing);
                  }
                  if (BaseFileSystem$$1)
                    XmlHttpRequest2.__proto__ = BaseFileSystem$$1;
                  XmlHttpRequest2.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
                  XmlHttpRequest2.prototype.constructor = XmlHttpRequest2;
                  XmlHttpRequest2.Create = function Create(opts, cb) {
                    if (opts.index === void 0) {
                      opts.index = "index.json";
                    }
                    if (typeof opts.index === "string") {
                      XmlHttpRequest2.FromURL(opts.index, cb, opts.baseUrl, false);
                    } else {
                      cb(null, new XmlHttpRequest2(opts.index, opts.baseUrl, false));
                    }
                  };
                  XmlHttpRequest2.isAvailable = function isAvailable() {
                    return typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null;
                  };
                  XmlHttpRequest2.FromURL = function FromURL(url, cb, baseUrl, deprecateMsg) {
                    if (baseUrl === void 0)
                      baseUrl = url.slice(0, url.lastIndexOf("/") + 1);
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    if (deprecateMsg) {
                      console.warn(`[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: "` + url + '", baseUrl: "' + baseUrl + `" }, cb)' instead.`);
                    }
                    asyncDownloadFile(url, "json", function(e, data) {
                      if (e) {
                        cb(e);
                      } else {
                        cb(null, new XmlHttpRequest2(data, baseUrl, false));
                      }
                    });
                  };
                  XmlHttpRequest2.prototype.empty = function empty() {
                    this._index.fileIterator(function(file) {
                      file.fileData = null;
                    });
                  };
                  XmlHttpRequest2.prototype.getName = function getName() {
                    return XmlHttpRequest2.Name;
                  };
                  XmlHttpRequest2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                    cb(0, 0);
                  };
                  XmlHttpRequest2.prototype.isReadOnly = function isReadOnly() {
                    return true;
                  };
                  XmlHttpRequest2.prototype.supportsLinks = function supportsLinks() {
                    return false;
                  };
                  XmlHttpRequest2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  XmlHttpRequest2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  XmlHttpRequest2.prototype.preloadFile = function preloadFile(path$$1, buffer$$1) {
                    var inode = this._index.getInode(path$$1);
                    if (isFileInode(inode)) {
                      if (inode === null) {
                        throw ApiError.ENOENT(path$$1);
                      }
                      var stats = inode.getData();
                      stats.size = buffer$$1.length;
                      stats.fileData = buffer$$1;
                    } else {
                      throw ApiError.EISDIR(path$$1);
                    }
                  };
                  XmlHttpRequest2.prototype.stat = function stat(path$$1, isLstat, cb) {
                    var inode = this._index.getInode(path$$1);
                    if (inode === null) {
                      return cb(ApiError.ENOENT(path$$1));
                    }
                    var stats;
                    if (isFileInode(inode)) {
                      stats = inode.getData();
                      if (stats.size < 0) {
                        this._requestFileSizeAsync(path$$1, function(e, size) {
                          if (e) {
                            return cb(e);
                          }
                          stats.size = size;
                          cb(null, stats.clone());
                        });
                      } else {
                        cb(null, stats.clone());
                      }
                    } else if (isDirInode(inode)) {
                      stats = inode.getStats();
                      cb(null, stats);
                    } else {
                      cb(ApiError.FileError(ErrorCode.EINVAL, path$$1));
                    }
                  };
                  XmlHttpRequest2.prototype.statSync = function statSync(path$$1, isLstat) {
                    var inode = this._index.getInode(path$$1);
                    if (inode === null) {
                      throw ApiError.ENOENT(path$$1);
                    }
                    var stats;
                    if (isFileInode(inode)) {
                      stats = inode.getData();
                      if (stats.size < 0) {
                        stats.size = this._requestFileSizeSync(path$$1);
                      }
                    } else if (isDirInode(inode)) {
                      stats = inode.getStats();
                    } else {
                      throw ApiError.FileError(ErrorCode.EINVAL, path$$1);
                    }
                    return stats;
                  };
                  XmlHttpRequest2.prototype.open = function open(path$$1, flags, mode, cb) {
                    if (flags.isWriteable()) {
                      return cb(new ApiError(ErrorCode.EPERM, path$$1));
                    }
                    var self2 = this;
                    var inode = this._index.getInode(path$$1);
                    if (inode === null) {
                      return cb(ApiError.ENOENT(path$$1));
                    }
                    if (isFileInode(inode)) {
                      var stats = inode.getData();
                      switch (flags.pathExistsAction()) {
                        case ActionType.THROW_EXCEPTION:
                        case ActionType.TRUNCATE_FILE:
                          return cb(ApiError.EEXIST(path$$1));
                        case ActionType.NOP:
                          if (stats.fileData) {
                            return cb(null, new NoSyncFile(self2, path$$1, flags, stats.clone(), stats.fileData));
                          }
                          this._requestFileAsync(path$$1, "buffer", function(err2, buffer$$1) {
                            if (err2) {
                              return cb(err2);
                            }
                            stats.size = buffer$$1.length;
                            stats.fileData = buffer$$1;
                            return cb(null, new NoSyncFile(self2, path$$1, flags, stats.clone(), buffer$$1));
                          });
                          break;
                        default:
                          return cb(new ApiError(ErrorCode.EINVAL, "Invalid FileMode object."));
                      }
                    } else {
                      return cb(ApiError.EISDIR(path$$1));
                    }
                  };
                  XmlHttpRequest2.prototype.openSync = function openSync(path$$1, flags, mode) {
                    if (flags.isWriteable()) {
                      throw new ApiError(ErrorCode.EPERM, path$$1);
                    }
                    var inode = this._index.getInode(path$$1);
                    if (inode === null) {
                      throw ApiError.ENOENT(path$$1);
                    }
                    if (isFileInode(inode)) {
                      var stats = inode.getData();
                      switch (flags.pathExistsAction()) {
                        case ActionType.THROW_EXCEPTION:
                        case ActionType.TRUNCATE_FILE:
                          throw ApiError.EEXIST(path$$1);
                        case ActionType.NOP:
                          if (stats.fileData) {
                            return new NoSyncFile(this, path$$1, flags, stats.clone(), stats.fileData);
                          }
                          var buffer$$1 = this._requestFileSync(path$$1, "buffer");
                          stats.size = buffer$$1.length;
                          stats.fileData = buffer$$1;
                          return new NoSyncFile(this, path$$1, flags, stats.clone(), buffer$$1);
                        default:
                          throw new ApiError(ErrorCode.EINVAL, "Invalid FileMode object.");
                      }
                    } else {
                      throw ApiError.EISDIR(path$$1);
                    }
                  };
                  XmlHttpRequest2.prototype.readdir = function readdir(path$$1, cb) {
                    try {
                      cb(null, this.readdirSync(path$$1));
                    } catch (e) {
                      cb(e);
                    }
                  };
                  XmlHttpRequest2.prototype.readdirSync = function readdirSync(path$$1) {
                    var inode = this._index.getInode(path$$1);
                    if (inode === null) {
                      throw ApiError.ENOENT(path$$1);
                    } else if (isDirInode(inode)) {
                      return inode.getListing();
                    } else {
                      throw ApiError.ENOTDIR(path$$1);
                    }
                  };
                  XmlHttpRequest2.prototype.readFile = function readFile(fname, encoding, flag, cb) {
                    var oldCb = cb;
                    this.open(fname, flag, 420, function(err2, fd) {
                      if (err2) {
                        return cb(err2);
                      }
                      cb = function(err3, arg) {
                        fd.close(function(err22) {
                          if (!err3) {
                            err3 = err22;
                          }
                          return oldCb(err3, arg);
                        });
                      };
                      var fdCast = fd;
                      var fdBuff = fdCast.getBuffer();
                      if (encoding === null) {
                        cb(err2, copyingSlice(fdBuff));
                      } else {
                        tryToString(fdBuff, encoding, cb);
                      }
                    });
                  };
                  XmlHttpRequest2.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                    var fd = this.openSync(fname, flag, 420);
                    try {
                      var fdCast = fd;
                      var fdBuff = fdCast.getBuffer();
                      if (encoding === null) {
                        return copyingSlice(fdBuff);
                      }
                      return fdBuff.toString(encoding);
                    } finally {
                      fd.closeSync();
                    }
                  };
                  XmlHttpRequest2.prototype.getXhrPath = function getXhrPath(filePath) {
                    if (filePath.charAt(0) === "/") {
                      filePath = filePath.slice(1);
                    }
                    return this.prefixUrl + filePath;
                  };
                  XmlHttpRequest2.prototype._requestFileAsync = function _requestFileAsync(p, type, cb) {
                    asyncDownloadFile(this.getXhrPath(p), type, cb);
                  };
                  XmlHttpRequest2.prototype._requestFileSync = function _requestFileSync(p, type) {
                    return syncDownloadFile(this.getXhrPath(p), type);
                  };
                  XmlHttpRequest2.prototype._requestFileSizeAsync = function _requestFileSizeAsync(path$$1, cb) {
                    getFileSizeAsync(this.getXhrPath(path$$1), cb);
                  };
                  XmlHttpRequest2.prototype._requestFileSizeSync = function _requestFileSizeSync(path$$1) {
                    return getFileSizeSync(this.getXhrPath(path$$1));
                  };
                  return XmlHttpRequest2;
                }(BaseFileSystem);
                XmlHttpRequest.Name = "XmlHttpRequest";
                XmlHttpRequest.Options = {
                  index: {
                    type: ["string", "object"],
                    optional: true,
                    description: "URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."
                  },
                  baseUrl: {
                    type: "string",
                    optional: true,
                    description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
                  }
                };
                var ExtendedASCII = function ExtendedASCII2() {
                };
                ExtendedASCII.str2byte = function str2byte(str, buf) {
                  var length = str.length > buf.length ? buf.length : str.length;
                  for (var i3 = 0; i3 < length; i3++) {
                    var charCode = str.charCodeAt(i3);
                    if (charCode > 127) {
                      var charIdx = ExtendedASCII.extendedChars.indexOf(str.charAt(i3));
                      if (charIdx > -1) {
                        charCode = charIdx + 128;
                      }
                    }
                    buf[charCode] = i3;
                  }
                  return length;
                };
                ExtendedASCII.byte2str = function byte2str(buff) {
                  var chars = new Array(buff.length);
                  for (var i3 = 0; i3 < buff.length; i3++) {
                    var charCode = buff[i3];
                    if (charCode > 127) {
                      chars[i3] = ExtendedASCII.extendedChars[charCode - 128];
                    } else {
                      chars[i3] = String.fromCharCode(charCode);
                    }
                  }
                  return chars.join("");
                };
                ExtendedASCII.byteLength = function byteLength(str) {
                  return str.length;
                };
                ExtendedASCII.extendedChars = [
                  "\xC7",
                  "\xFC",
                  "\xE9",
                  "\xE2",
                  "\xE4",
                  "\xE0",
                  "\xE5",
                  "\xE7",
                  "\xEA",
                  "\xEB",
                  "\xE8",
                  "\xEF",
                  "\xEE",
                  "\xEC",
                  "\xC4",
                  "\xC5",
                  "\xC9",
                  "\xE6",
                  "\xC6",
                  "\xF4",
                  "\xF6",
                  "\xF2",
                  "\xFB",
                  "\xF9",
                  "\xFF",
                  "\xD6",
                  "\xDC",
                  "\xF8",
                  "\xA3",
                  "\xD8",
                  "\xD7",
                  "\u0192",
                  "\xE1",
                  "\xED",
                  "\xF3",
                  "\xFA",
                  "\xF1",
                  "\xD1",
                  "\xAA",
                  "\xBA",
                  "\xBF",
                  "\xAE",
                  "\xAC",
                  "\xBD",
                  "\xBC",
                  "\xA1",
                  "\xAB",
                  "\xBB",
                  "_",
                  "_",
                  "_",
                  "\xA6",
                  "\xA6",
                  "\xC1",
                  "\xC2",
                  "\xC0",
                  "\xA9",
                  "\xA6",
                  "\xA6",
                  "+",
                  "+",
                  "\xA2",
                  "\xA5",
                  "+",
                  "+",
                  "-",
                  "-",
                  "+",
                  "-",
                  "+",
                  "\xE3",
                  "\xC3",
                  "+",
                  "+",
                  "-",
                  "-",
                  "\xA6",
                  "-",
                  "+",
                  "\xA4",
                  "\xF0",
                  "\xD0",
                  "\xCA",
                  "\xCB",
                  "\xC8",
                  "i",
                  "\xCD",
                  "\xCE",
                  "\xCF",
                  "+",
                  "+",
                  "_",
                  "_",
                  "\xA6",
                  "\xCC",
                  "_",
                  "\xD3",
                  "\xDF",
                  "\xD4",
                  "\xD2",
                  "\xF5",
                  "\xD5",
                  "\xB5",
                  "\xFE",
                  "\xDE",
                  "\xDA",
                  "\xDB",
                  "\xD9",
                  "\xFD",
                  "\xDD",
                  "\xAF",
                  "\xB4",
                  "\xAD",
                  "\xB1",
                  "_",
                  "\xBE",
                  "\xB6",
                  "\xA7",
                  "\xF7",
                  "\xB8",
                  "\xB0",
                  "\xA8",
                  "\xB7",
                  "\xB9",
                  "\xB3",
                  "\xB2",
                  "_",
                  " "
                ];
                var inflateRaw = __webpack_require__(31).inflateRaw;
                var decompressionMethods = {};
                var ExternalFileAttributeType;
                (function(ExternalFileAttributeType2) {
                  ExternalFileAttributeType2[ExternalFileAttributeType2["MSDOS"] = 0] = "MSDOS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["AMIGA"] = 1] = "AMIGA";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["OPENVMS"] = 2] = "OPENVMS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["UNIX"] = 3] = "UNIX";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["VM_CMS"] = 4] = "VM_CMS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["ATARI_ST"] = 5] = "ATARI_ST";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["OS2_HPFS"] = 6] = "OS2_HPFS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["MAC"] = 7] = "MAC";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["Z_SYSTEM"] = 8] = "Z_SYSTEM";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["CP_M"] = 9] = "CP_M";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["NTFS"] = 10] = "NTFS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["MVS"] = 11] = "MVS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["VSE"] = 12] = "VSE";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["ACORN_RISC"] = 13] = "ACORN_RISC";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["VFAT"] = 14] = "VFAT";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["ALT_MVS"] = 15] = "ALT_MVS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["BEOS"] = 16] = "BEOS";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["TANDEM"] = 17] = "TANDEM";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["OS_400"] = 18] = "OS_400";
                  ExternalFileAttributeType2[ExternalFileAttributeType2["OSX"] = 19] = "OSX";
                })(ExternalFileAttributeType || (ExternalFileAttributeType = {}));
                var CompressionMethod;
                (function(CompressionMethod2) {
                  CompressionMethod2[CompressionMethod2["STORED"] = 0] = "STORED";
                  CompressionMethod2[CompressionMethod2["SHRUNK"] = 1] = "SHRUNK";
                  CompressionMethod2[CompressionMethod2["REDUCED_1"] = 2] = "REDUCED_1";
                  CompressionMethod2[CompressionMethod2["REDUCED_2"] = 3] = "REDUCED_2";
                  CompressionMethod2[CompressionMethod2["REDUCED_3"] = 4] = "REDUCED_3";
                  CompressionMethod2[CompressionMethod2["REDUCED_4"] = 5] = "REDUCED_4";
                  CompressionMethod2[CompressionMethod2["IMPLODE"] = 6] = "IMPLODE";
                  CompressionMethod2[CompressionMethod2["DEFLATE"] = 8] = "DEFLATE";
                  CompressionMethod2[CompressionMethod2["DEFLATE64"] = 9] = "DEFLATE64";
                  CompressionMethod2[CompressionMethod2["TERSE_OLD"] = 10] = "TERSE_OLD";
                  CompressionMethod2[CompressionMethod2["BZIP2"] = 12] = "BZIP2";
                  CompressionMethod2[CompressionMethod2["LZMA"] = 14] = "LZMA";
                  CompressionMethod2[CompressionMethod2["TERSE_NEW"] = 18] = "TERSE_NEW";
                  CompressionMethod2[CompressionMethod2["LZ77"] = 19] = "LZ77";
                  CompressionMethod2[CompressionMethod2["WAVPACK"] = 97] = "WAVPACK";
                  CompressionMethod2[CompressionMethod2["PPMD"] = 98] = "PPMD";
                })(CompressionMethod || (CompressionMethod = {}));
                function msdos2date(time, date) {
                  var day = date & 31;
                  var month = (date >> 5 & 15) - 1;
                  var year = (date >> 9) + 1980;
                  var second = time & 31;
                  var minute = time >> 5 & 63;
                  var hour = time >> 11;
                  return new Date(year, month, day, hour, minute, second);
                }
                function safeToString(buff, useUTF8, start, length) {
                  if (length === 0) {
                    return "";
                  } else if (useUTF8) {
                    return buff.toString("utf8", start, start + length);
                  } else {
                    return ExtendedASCII.byte2str(buff.slice(start, start + length));
                  }
                }
                var FileHeader = function FileHeader2(data) {
                  this.data = data;
                  if (data.readUInt32LE(0) !== 67324752) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
                  }
                };
                FileHeader.prototype.versionNeeded = function versionNeeded() {
                  return this.data.readUInt16LE(4);
                };
                FileHeader.prototype.flags = function flags() {
                  return this.data.readUInt16LE(6);
                };
                FileHeader.prototype.compressionMethod = function compressionMethod() {
                  return this.data.readUInt16LE(8);
                };
                FileHeader.prototype.lastModFileTime = function lastModFileTime() {
                  return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
                };
                FileHeader.prototype.rawLastModFileTime = function rawLastModFileTime() {
                  return this.data.readUInt32LE(10);
                };
                FileHeader.prototype.crc32 = function crc32() {
                  return this.data.readUInt32LE(14);
                };
                FileHeader.prototype.fileNameLength = function fileNameLength() {
                  return this.data.readUInt16LE(26);
                };
                FileHeader.prototype.extraFieldLength = function extraFieldLength() {
                  return this.data.readUInt16LE(28);
                };
                FileHeader.prototype.fileName = function fileName() {
                  return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
                };
                FileHeader.prototype.extraField = function extraField() {
                  var start = 30 + this.fileNameLength();
                  return this.data.slice(start, start + this.extraFieldLength());
                };
                FileHeader.prototype.totalSize = function totalSize() {
                  return 30 + this.fileNameLength() + this.extraFieldLength();
                };
                FileHeader.prototype.useUTF8 = function useUTF8() {
                  return (this.flags() & 2048) === 2048;
                };
                var FileData = function FileData2(header, record, data) {
                  this.header = header;
                  this.record = record;
                  this.data = data;
                };
                FileData.prototype.decompress = function decompress() {
                  var compressionMethod = this.header.compressionMethod();
                  var fcn = decompressionMethods[compressionMethod];
                  if (fcn) {
                    return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
                  } else {
                    var name = CompressionMethod[compressionMethod];
                    if (!name) {
                      name = "Unknown: " + compressionMethod;
                    }
                    throw new ApiError(ErrorCode.EINVAL, "Invalid compression method on file '" + this.header.fileName() + "': " + name);
                  }
                };
                FileData.prototype.getHeader = function getHeader() {
                  return this.header;
                };
                FileData.prototype.getRecord = function getRecord() {
                  return this.record;
                };
                FileData.prototype.getRawData = function getRawData() {
                  return this.data;
                };
                var DataDescriptor = function DataDescriptor2(data) {
                  this.data = data;
                };
                DataDescriptor.prototype.crc32 = function crc32() {
                  return this.data.readUInt32LE(0);
                };
                DataDescriptor.prototype.compressedSize = function compressedSize() {
                  return this.data.readUInt32LE(4);
                };
                DataDescriptor.prototype.uncompressedSize = function uncompressedSize() {
                  return this.data.readUInt32LE(8);
                };
                var ArchiveExtraDataRecord = function ArchiveExtraDataRecord2(data) {
                  this.data = data;
                  if (this.data.readUInt32LE(0) !== 134630224) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
                  }
                };
                ArchiveExtraDataRecord.prototype.length = function length() {
                  return this.data.readUInt32LE(4);
                };
                ArchiveExtraDataRecord.prototype.extraFieldData = function extraFieldData() {
                  return this.data.slice(8, 8 + this.length());
                };
                var DigitalSignature = function DigitalSignature2(data) {
                  this.data = data;
                  if (this.data.readUInt32LE(0) !== 84233040) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
                  }
                };
                DigitalSignature.prototype.size = function size() {
                  return this.data.readUInt16LE(4);
                };
                DigitalSignature.prototype.signatureData = function signatureData() {
                  return this.data.slice(6, 6 + this.size());
                };
                var CentralDirectory = function CentralDirectory2(zipData, data) {
                  this.zipData = zipData;
                  this.data = data;
                  if (this.data.readUInt32LE(0) !== 33639248) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Central directory record has invalid signature: " + this.data.readUInt32LE(0));
                  }
                  this._filename = this.produceFilename();
                };
                CentralDirectory.prototype.versionMadeBy = function versionMadeBy() {
                  return this.data.readUInt16LE(4);
                };
                CentralDirectory.prototype.versionNeeded = function versionNeeded() {
                  return this.data.readUInt16LE(6);
                };
                CentralDirectory.prototype.flag = function flag() {
                  return this.data.readUInt16LE(8);
                };
                CentralDirectory.prototype.compressionMethod = function compressionMethod() {
                  return this.data.readUInt16LE(10);
                };
                CentralDirectory.prototype.lastModFileTime = function lastModFileTime() {
                  return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
                };
                CentralDirectory.prototype.rawLastModFileTime = function rawLastModFileTime() {
                  return this.data.readUInt32LE(12);
                };
                CentralDirectory.prototype.crc32 = function crc32() {
                  return this.data.readUInt32LE(16);
                };
                CentralDirectory.prototype.compressedSize = function compressedSize() {
                  return this.data.readUInt32LE(20);
                };
                CentralDirectory.prototype.uncompressedSize = function uncompressedSize() {
                  return this.data.readUInt32LE(24);
                };
                CentralDirectory.prototype.fileNameLength = function fileNameLength() {
                  return this.data.readUInt16LE(28);
                };
                CentralDirectory.prototype.extraFieldLength = function extraFieldLength() {
                  return this.data.readUInt16LE(30);
                };
                CentralDirectory.prototype.fileCommentLength = function fileCommentLength() {
                  return this.data.readUInt16LE(32);
                };
                CentralDirectory.prototype.diskNumberStart = function diskNumberStart() {
                  return this.data.readUInt16LE(34);
                };
                CentralDirectory.prototype.internalAttributes = function internalAttributes() {
                  return this.data.readUInt16LE(36);
                };
                CentralDirectory.prototype.externalAttributes = function externalAttributes() {
                  return this.data.readUInt32LE(38);
                };
                CentralDirectory.prototype.headerRelativeOffset = function headerRelativeOffset() {
                  return this.data.readUInt32LE(42);
                };
                CentralDirectory.prototype.produceFilename = function produceFilename() {
                  var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
                  return fileName.replace(/\\/g, "/");
                };
                CentralDirectory.prototype.fileName = function fileName() {
                  return this._filename;
                };
                CentralDirectory.prototype.rawFileName = function rawFileName() {
                  return this.data.slice(46, 46 + this.fileNameLength());
                };
                CentralDirectory.prototype.extraField = function extraField() {
                  var start = 44 + this.fileNameLength();
                  return this.data.slice(start, start + this.extraFieldLength());
                };
                CentralDirectory.prototype.fileComment = function fileComment() {
                  var start = 46 + this.fileNameLength() + this.extraFieldLength();
                  return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
                };
                CentralDirectory.prototype.rawFileComment = function rawFileComment() {
                  var start = 46 + this.fileNameLength() + this.extraFieldLength();
                  return this.data.slice(start, start + this.fileCommentLength());
                };
                CentralDirectory.prototype.totalSize = function totalSize() {
                  return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
                };
                CentralDirectory.prototype.isDirectory = function isDirectory() {
                  var fileName = this.fileName();
                  return (this.externalAttributes() & 16 ? true : false) || fileName.charAt(fileName.length - 1) === "/";
                };
                CentralDirectory.prototype.isFile = function isFile() {
                  return !this.isDirectory();
                };
                CentralDirectory.prototype.useUTF8 = function useUTF8() {
                  return (this.flag() & 2048) === 2048;
                };
                CentralDirectory.prototype.isEncrypted = function isEncrypted() {
                  return (this.flag() & 1) === 1;
                };
                CentralDirectory.prototype.getFileData = function getFileData() {
                  var start = this.headerRelativeOffset();
                  var header = new FileHeader(this.zipData.slice(start));
                  return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
                };
                CentralDirectory.prototype.getData = function getData() {
                  return this.getFileData().decompress();
                };
                CentralDirectory.prototype.getRawData = function getRawData() {
                  return this.getFileData().getRawData();
                };
                CentralDirectory.prototype.getStats = function getStats() {
                  return new Stats(FileType.FILE, this.uncompressedSize(), 365, /* @__PURE__ */ new Date(), this.lastModFileTime());
                };
                var EndOfCentralDirectory = function EndOfCentralDirectory2(data) {
                  this.data = data;
                  if (this.data.readUInt32LE(0) !== 101010256) {
                    throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: End of central directory record has invalid signature: " + this.data.readUInt32LE(0));
                  }
                };
                EndOfCentralDirectory.prototype.diskNumber = function diskNumber() {
                  return this.data.readUInt16LE(4);
                };
                EndOfCentralDirectory.prototype.cdDiskNumber = function cdDiskNumber() {
                  return this.data.readUInt16LE(6);
                };
                EndOfCentralDirectory.prototype.cdDiskEntryCount = function cdDiskEntryCount() {
                  return this.data.readUInt16LE(8);
                };
                EndOfCentralDirectory.prototype.cdTotalEntryCount = function cdTotalEntryCount() {
                  return this.data.readUInt16LE(10);
                };
                EndOfCentralDirectory.prototype.cdSize = function cdSize() {
                  return this.data.readUInt32LE(12);
                };
                EndOfCentralDirectory.prototype.cdOffset = function cdOffset() {
                  return this.data.readUInt32LE(16);
                };
                EndOfCentralDirectory.prototype.cdZipCommentLength = function cdZipCommentLength() {
                  return this.data.readUInt16LE(20);
                };
                EndOfCentralDirectory.prototype.cdZipComment = function cdZipComment() {
                  return safeToString(this.data, true, 22, this.cdZipCommentLength());
                };
                EndOfCentralDirectory.prototype.rawCdZipComment = function rawCdZipComment() {
                  return this.data.slice(22, 22 + this.cdZipCommentLength());
                };
                var ZipTOC = function ZipTOC2(index, directoryEntries, eocd, data) {
                  this.index = index;
                  this.directoryEntries = directoryEntries;
                  this.eocd = eocd;
                  this.data = data;
                };
                var ZipFS = function(SynchronousFileSystem$$1) {
                  function ZipFS2(input, name, deprecateMsg) {
                    if (name === void 0)
                      name = "";
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    SynchronousFileSystem$$1.call(this);
                    this.name = name;
                    this._index = new FileIndex();
                    this._directoryEntries = [];
                    this._eocd = null;
                    deprecationMessage(deprecateMsg, ZipFS2.Name, { zipData: "zip data as a Buffer", name });
                    if (input instanceof ZipTOC) {
                      this._index = input.index;
                      this._directoryEntries = input.directoryEntries;
                      this._eocd = input.eocd;
                      this.data = input.data;
                    } else {
                      this.data = input;
                      this.populateIndex();
                    }
                  }
                  if (SynchronousFileSystem$$1)
                    ZipFS2.__proto__ = SynchronousFileSystem$$1;
                  ZipFS2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
                  ZipFS2.prototype.constructor = ZipFS2;
                  ZipFS2.Create = function Create(opts, cb) {
                    try {
                      ZipFS2.computeIndex(opts.zipData, function(zipTOC) {
                        var fs4 = new ZipFS2(zipTOC, opts.name, false);
                        cb(null, fs4);
                      }, false);
                    } catch (e) {
                      cb(e);
                    }
                  };
                  ZipFS2.isAvailable = function isAvailable() {
                    return true;
                  };
                  ZipFS2.RegisterDecompressionMethod = function RegisterDecompressionMethod(m2, fcn) {
                    decompressionMethods[m2] = fcn;
                  };
                  ZipFS2.computeIndex = function computeIndex(data, cb, deprecateMsg) {
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    if (deprecateMsg) {
                      console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");
                    }
                    var index = new FileIndex();
                    var eocd = ZipFS2.getEOCD(data);
                    if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
                      throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
                    }
                    var cdPtr = eocd.cdOffset();
                    if (cdPtr === 4294967295) {
                      throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
                    }
                    var cdEnd = cdPtr + eocd.cdSize();
                    ZipFS2.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
                  };
                  ZipFS2.getEOCD = function getEOCD(data) {
                    var startOffset = 22;
                    var endOffset = Math.min(startOffset + 65535, data.length - 1);
                    for (var i3 = startOffset; i3 < endOffset; i3++) {
                      if (data.readUInt32LE(data.length - i3) === 101010256) {
                        return new EndOfCentralDirectory(data.slice(data.length - i3));
                      }
                    }
                    throw new ApiError(ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
                  };
                  ZipFS2.addToIndex = function addToIndex(cd, index) {
                    var filename = cd.fileName();
                    if (filename.charAt(0) === "/") {
                      throw new Error("WHY IS THIS ABSOLUTE");
                    }
                    if (filename.charAt(filename.length - 1) === "/") {
                      filename = filename.substr(0, filename.length - 1);
                    }
                    if (cd.isDirectory()) {
                      index.addPathFast("/" + filename, new DirInode(cd));
                    } else {
                      index.addPathFast("/" + filename, new FileInode(cd));
                    }
                  };
                  ZipFS2.computeIndexResponsive = function computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
                    if (cdPtr < cdEnd) {
                      var count = 0;
                      while (count++ < 200 && cdPtr < cdEnd) {
                        var cd = new CentralDirectory(data, data.slice(cdPtr));
                        ZipFS2.addToIndex(cd, index);
                        cdPtr += cd.totalSize();
                        cdEntries.push(cd);
                      }
                      setImmediate$3(function() {
                        ZipFS2.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
                      });
                    } else {
                      cb(new ZipTOC(index, cdEntries, eocd, data));
                    }
                  };
                  ZipFS2.prototype.getName = function getName() {
                    return ZipFS2.Name + (this.name !== "" ? " " + this.name : "");
                  };
                  ZipFS2.prototype.getCentralDirectoryEntry = function getCentralDirectoryEntry(path$$1) {
                    var inode = this._index.getInode(path$$1);
                    if (inode === null) {
                      throw ApiError.ENOENT(path$$1);
                    }
                    if (isFileInode(inode)) {
                      return inode.getData();
                    } else if (isDirInode(inode)) {
                      return inode.getData();
                    } else {
                      throw ApiError.EPERM("Invalid inode: " + inode);
                    }
                  };
                  ZipFS2.prototype.getCentralDirectoryEntryAt = function getCentralDirectoryEntryAt(index) {
                    var dirEntry = this._directoryEntries[index];
                    if (!dirEntry) {
                      throw new RangeError("Invalid directory index: " + index + ".");
                    }
                    return dirEntry;
                  };
                  ZipFS2.prototype.getNumberOfCentralDirectoryEntries = function getNumberOfCentralDirectoryEntries() {
                    return this._directoryEntries.length;
                  };
                  ZipFS2.prototype.getEndOfCentralDirectory = function getEndOfCentralDirectory() {
                    return this._eocd;
                  };
                  ZipFS2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                    cb(this.data.length, 0);
                  };
                  ZipFS2.prototype.isReadOnly = function isReadOnly() {
                    return true;
                  };
                  ZipFS2.prototype.supportsLinks = function supportsLinks() {
                    return false;
                  };
                  ZipFS2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  ZipFS2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  ZipFS2.prototype.statSync = function statSync(path$$1, isLstat) {
                    var inode = this._index.getInode(path$$1);
                    if (inode === null) {
                      throw ApiError.ENOENT(path$$1);
                    }
                    var stats;
                    if (isFileInode(inode)) {
                      stats = inode.getData().getStats();
                    } else if (isDirInode(inode)) {
                      stats = inode.getStats();
                    } else {
                      throw new ApiError(ErrorCode.EINVAL, "Invalid inode.");
                    }
                    return stats;
                  };
                  ZipFS2.prototype.openSync = function openSync(path$$1, flags, mode) {
                    if (flags.isWriteable()) {
                      throw new ApiError(ErrorCode.EPERM, path$$1);
                    }
                    var inode = this._index.getInode(path$$1);
                    if (!inode) {
                      throw ApiError.ENOENT(path$$1);
                    } else if (isFileInode(inode)) {
                      var cdRecord = inode.getData();
                      var stats = cdRecord.getStats();
                      switch (flags.pathExistsAction()) {
                        case ActionType.THROW_EXCEPTION:
                        case ActionType.TRUNCATE_FILE:
                          throw ApiError.EEXIST(path$$1);
                        case ActionType.NOP:
                          return new NoSyncFile(this, path$$1, flags, stats, cdRecord.getData());
                        default:
                          throw new ApiError(ErrorCode.EINVAL, "Invalid FileMode object.");
                      }
                    } else {
                      throw ApiError.EISDIR(path$$1);
                    }
                  };
                  ZipFS2.prototype.readdirSync = function readdirSync(path$$1) {
                    var inode = this._index.getInode(path$$1);
                    if (!inode) {
                      throw ApiError.ENOENT(path$$1);
                    } else if (isDirInode(inode)) {
                      return inode.getListing();
                    } else {
                      throw ApiError.ENOTDIR(path$$1);
                    }
                  };
                  ZipFS2.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                    var fd = this.openSync(fname, flag, 420);
                    try {
                      var fdCast = fd;
                      var fdBuff = fdCast.getBuffer();
                      if (encoding === null) {
                        return copyingSlice(fdBuff);
                      }
                      return fdBuff.toString(encoding);
                    } finally {
                      fd.closeSync();
                    }
                  };
                  ZipFS2.prototype.populateIndex = function populateIndex() {
                    var this$1 = this;
                    var eocd = this._eocd = ZipFS2.getEOCD(this.data);
                    if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
                      throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
                    }
                    var cdPtr = eocd.cdOffset();
                    if (cdPtr === 4294967295) {
                      throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
                    }
                    var cdEnd = cdPtr + eocd.cdSize();
                    while (cdPtr < cdEnd) {
                      var cd = new CentralDirectory(this$1.data, this$1.data.slice(cdPtr));
                      cdPtr += cd.totalSize();
                      ZipFS2.addToIndex(cd, this$1._index);
                      this$1._directoryEntries.push(cd);
                    }
                  };
                  return ZipFS2;
                }(SynchronousFileSystem);
                ZipFS.Name = "ZipFS";
                ZipFS.Options = {
                  zipData: {
                    type: "object",
                    description: "The zip file as a Buffer object.",
                    validator: bufferValidator
                  },
                  name: {
                    type: "string",
                    optional: true,
                    description: "The name of the zip file (optional)."
                  }
                };
                ZipFS.CompressionMethod = CompressionMethod;
                ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE, function(data, compressedSize, uncompressedSize) {
                  return arrayish2Buffer(inflateRaw(data.slice(0, compressedSize), { chunkSize: uncompressedSize }));
                });
                ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED, function(data, compressedSize, uncompressedSize) {
                  return copyingSlice(data, 0, uncompressedSize);
                });
                var rockRidgeIdentifier = "IEEE_P1282";
                function getASCIIString(data, startIndex, length) {
                  return data.toString("ascii", startIndex, startIndex + length).trim();
                }
                function getJolietString(data, startIndex, length) {
                  if (length === 1) {
                    return String.fromCharCode(data[startIndex]);
                  }
                  var pairs = Math.floor(length / 2);
                  var chars = new Array(pairs);
                  for (var i3 = 0; i3 < pairs; i3++) {
                    var pos = startIndex + (i3 << 1);
                    chars[i3] = String.fromCharCode(data[pos + 1] | data[pos] << 8);
                  }
                  return chars.join("");
                }
                function getDate(data, startIndex) {
                  var year = parseInt(getASCIIString(data, startIndex, 4), 10);
                  var mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
                  var day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
                  var hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
                  var min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
                  var sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
                  var hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);
                  return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
                }
                function getShortFormDate(data, startIndex) {
                  var yearsSince1900 = data[startIndex];
                  var month = data[startIndex + 1];
                  var day = data[startIndex + 2];
                  var hour = data[startIndex + 3];
                  var minute = data[startIndex + 4];
                  var second = data[startIndex + 5];
                  return new Date(yearsSince1900, month - 1, day, hour, minute, second);
                }
                function constructSystemUseEntry(bigData, i3) {
                  var data = bigData.slice(i3);
                  var sue = new SystemUseEntry(data);
                  switch (sue.signatureWord()) {
                    case 17221:
                      return new CEEntry(data);
                    case 20548:
                      return new PDEntry(data);
                    case 21328:
                      return new SPEntry(data);
                    case 21332:
                      return new STEntry(data);
                    case 17746:
                      return new EREntry(data);
                    case 17747:
                      return new ESEntry(data);
                    case 20568:
                      return new PXEntry(data);
                    case 20558:
                      return new PNEntry(data);
                    case 21324:
                      return new SLEntry(data);
                    case 20045:
                      return new NMEntry(data);
                    case 17228:
                      return new CLEntry(data);
                    case 20556:
                      return new PLEntry(data);
                    case 21061:
                      return new REEntry(data);
                    case 21574:
                      return new TFEntry(data);
                    case 21318:
                      return new SFEntry(data);
                    case 21074:
                      return new RREntry(data);
                    default:
                      return sue;
                  }
                }
                function constructSystemUseEntries(data, i3, len, isoData) {
                  len = len - 4;
                  var entries = new Array();
                  while (i3 < len) {
                    var entry = constructSystemUseEntry(data, i3);
                    var length = entry.length();
                    if (length === 0) {
                      return entries;
                    }
                    i3 += length;
                    if (entry instanceof STEntry) {
                      break;
                    }
                    if (entry instanceof CEEntry) {
                      entries = entries.concat(entry.getEntries(isoData));
                    } else {
                      entries.push(entry);
                    }
                  }
                  return entries;
                }
                var VolumeDescriptor = function VolumeDescriptor2(data) {
                  this._data = data;
                };
                VolumeDescriptor.prototype.type = function type() {
                  return this._data[0];
                };
                VolumeDescriptor.prototype.standardIdentifier = function standardIdentifier() {
                  return getASCIIString(this._data, 1, 5);
                };
                VolumeDescriptor.prototype.version = function version() {
                  return this._data[6];
                };
                VolumeDescriptor.prototype.data = function data() {
                  return this._data.slice(7, 2048);
                };
                var PrimaryOrSupplementaryVolumeDescriptor = function(VolumeDescriptor2) {
                  function PrimaryOrSupplementaryVolumeDescriptor2(data) {
                    VolumeDescriptor2.call(this, data);
                    this._root = null;
                  }
                  if (VolumeDescriptor2)
                    PrimaryOrSupplementaryVolumeDescriptor2.__proto__ = VolumeDescriptor2;
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype = Object.create(VolumeDescriptor2 && VolumeDescriptor2.prototype);
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.constructor = PrimaryOrSupplementaryVolumeDescriptor2;
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.systemIdentifier = function systemIdentifier() {
                    return this._getString32(8);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeIdentifier = function volumeIdentifier() {
                    return this._getString32(40);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSpaceSize = function volumeSpaceSize() {
                    return this._data.readUInt32LE(80);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSetSize = function volumeSetSize() {
                    return this._data.readUInt16LE(120);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
                    return this._data.readUInt16LE(124);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.logicalBlockSize = function logicalBlockSize() {
                    return this._data.readUInt16LE(128);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.pathTableSize = function pathTableSize() {
                    return this._data.readUInt32LE(132);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfTypeLPathTable = function locationOfTypeLPathTable() {
                    return this._data.readUInt32LE(140);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfOptionalTypeLPathTable = function locationOfOptionalTypeLPathTable() {
                    return this._data.readUInt32LE(144);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfTypeMPathTable = function locationOfTypeMPathTable() {
                    return this._data.readUInt32BE(148);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfOptionalTypeMPathTable = function locationOfOptionalTypeMPathTable() {
                    return this._data.readUInt32BE(152);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.rootDirectoryEntry = function rootDirectoryEntry(isoData) {
                    if (this._root === null) {
                      this._root = this._constructRootDirectoryRecord(this._data.slice(156));
                      this._root.rootCheckForRockRidge(isoData);
                    }
                    return this._root;
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSetIdentifier = function volumeSetIdentifier() {
                    return this._getString(190, 128);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.publisherIdentifier = function publisherIdentifier() {
                    return this._getString(318, 128);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.dataPreparerIdentifier = function dataPreparerIdentifier() {
                    return this._getString(446, 128);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.applicationIdentifier = function applicationIdentifier() {
                    return this._getString(574, 128);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.copyrightFileIdentifier = function copyrightFileIdentifier() {
                    return this._getString(702, 38);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.abstractFileIdentifier = function abstractFileIdentifier() {
                    return this._getString(740, 36);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.bibliographicFileIdentifier = function bibliographicFileIdentifier() {
                    return this._getString(776, 37);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeCreationDate = function volumeCreationDate() {
                    return getDate(this._data, 813);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeModificationDate = function volumeModificationDate() {
                    return getDate(this._data, 830);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeExpirationDate = function volumeExpirationDate() {
                    return getDate(this._data, 847);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeEffectiveDate = function volumeEffectiveDate() {
                    return getDate(this._data, 864);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.fileStructureVersion = function fileStructureVersion() {
                    return this._data[881];
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.applicationUsed = function applicationUsed() {
                    return this._data.slice(883, 883 + 512);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype.reserved = function reserved() {
                    return this._data.slice(1395, 1395 + 653);
                  };
                  PrimaryOrSupplementaryVolumeDescriptor2.prototype._getString32 = function _getString32(idx) {
                    return this._getString(idx, 32);
                  };
                  return PrimaryOrSupplementaryVolumeDescriptor2;
                }(VolumeDescriptor);
                var PrimaryVolumeDescriptor = function(PrimaryOrSupplementaryVolumeDescriptor2) {
                  function PrimaryVolumeDescriptor2(data) {
                    PrimaryOrSupplementaryVolumeDescriptor2.call(this, data);
                    if (this.type() !== 1) {
                      throw new ApiError(ErrorCode.EIO, "Invalid primary volume descriptor.");
                    }
                  }
                  if (PrimaryOrSupplementaryVolumeDescriptor2)
                    PrimaryVolumeDescriptor2.__proto__ = PrimaryOrSupplementaryVolumeDescriptor2;
                  PrimaryVolumeDescriptor2.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor2 && PrimaryOrSupplementaryVolumeDescriptor2.prototype);
                  PrimaryVolumeDescriptor2.prototype.constructor = PrimaryVolumeDescriptor2;
                  PrimaryVolumeDescriptor2.prototype.name = function name() {
                    return "ISO9660";
                  };
                  PrimaryVolumeDescriptor2.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
                    return new ISODirectoryRecord(data, -1);
                  };
                  PrimaryVolumeDescriptor2.prototype._getString = function _getString(idx, len) {
                    return this._getString(idx, len);
                  };
                  return PrimaryVolumeDescriptor2;
                }(PrimaryOrSupplementaryVolumeDescriptor);
                var SupplementaryVolumeDescriptor = function(PrimaryOrSupplementaryVolumeDescriptor2) {
                  function SupplementaryVolumeDescriptor2(data) {
                    PrimaryOrSupplementaryVolumeDescriptor2.call(this, data);
                    if (this.type() !== 2) {
                      throw new ApiError(ErrorCode.EIO, "Invalid supplementary volume descriptor.");
                    }
                    var escapeSequence = this.escapeSequence();
                    var third = escapeSequence[2];
                    if (escapeSequence[0] !== 37 || escapeSequence[1] !== 47 || third !== 64 && third !== 67 && third !== 69) {
                      throw new ApiError(ErrorCode.EIO, "Unrecognized escape sequence for SupplementaryVolumeDescriptor: " + escapeSequence.toString());
                    }
                  }
                  if (PrimaryOrSupplementaryVolumeDescriptor2)
                    SupplementaryVolumeDescriptor2.__proto__ = PrimaryOrSupplementaryVolumeDescriptor2;
                  SupplementaryVolumeDescriptor2.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor2 && PrimaryOrSupplementaryVolumeDescriptor2.prototype);
                  SupplementaryVolumeDescriptor2.prototype.constructor = SupplementaryVolumeDescriptor2;
                  SupplementaryVolumeDescriptor2.prototype.name = function name() {
                    return "Joliet";
                  };
                  SupplementaryVolumeDescriptor2.prototype.escapeSequence = function escapeSequence() {
                    return this._data.slice(88, 120);
                  };
                  SupplementaryVolumeDescriptor2.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
                    return new JolietDirectoryRecord(data, -1);
                  };
                  SupplementaryVolumeDescriptor2.prototype._getString = function _getString(idx, len) {
                    return getJolietString(this._data, idx, len);
                  };
                  return SupplementaryVolumeDescriptor2;
                }(PrimaryOrSupplementaryVolumeDescriptor);
                var DirectoryRecord = function DirectoryRecord2(data, rockRidgeOffset) {
                  this._suEntries = null;
                  this._fileOrDir = null;
                  this._data = data;
                  this._rockRidgeOffset = rockRidgeOffset;
                };
                DirectoryRecord.prototype.hasRockRidge = function hasRockRidge() {
                  return this._rockRidgeOffset > -1;
                };
                DirectoryRecord.prototype.getRockRidgeOffset = function getRockRidgeOffset() {
                  return this._rockRidgeOffset;
                };
                DirectoryRecord.prototype.rootCheckForRockRidge = function rootCheckForRockRidge(isoData) {
                  var dir = this.getDirectory(isoData);
                  this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);
                  if (this._rockRidgeOffset > -1) {
                    this._fileOrDir = null;
                  }
                };
                DirectoryRecord.prototype.length = function length() {
                  return this._data[0];
                };
                DirectoryRecord.prototype.extendedAttributeRecordLength = function extendedAttributeRecordLength() {
                  return this._data[1];
                };
                DirectoryRecord.prototype.lba = function lba() {
                  return this._data.readUInt32LE(2) * 2048;
                };
                DirectoryRecord.prototype.dataLength = function dataLength() {
                  return this._data.readUInt32LE(10);
                };
                DirectoryRecord.prototype.recordingDate = function recordingDate() {
                  return getShortFormDate(this._data, 18);
                };
                DirectoryRecord.prototype.fileFlags = function fileFlags() {
                  return this._data[25];
                };
                DirectoryRecord.prototype.fileUnitSize = function fileUnitSize() {
                  return this._data[26];
                };
                DirectoryRecord.prototype.interleaveGapSize = function interleaveGapSize() {
                  return this._data[27];
                };
                DirectoryRecord.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
                  return this._data.readUInt16LE(28);
                };
                DirectoryRecord.prototype.identifier = function identifier() {
                  return this._getString(33, this._data[32]);
                };
                DirectoryRecord.prototype.fileName = function fileName(isoData) {
                  if (this.hasRockRidge()) {
                    var fn = this._rockRidgeFilename(isoData);
                    if (fn !== null) {
                      return fn;
                    }
                  }
                  var ident = this.identifier();
                  if (this.isDirectory(isoData)) {
                    return ident;
                  }
                  var versionSeparator = ident.indexOf(";");
                  if (versionSeparator === -1) {
                    return ident;
                  } else if (ident[versionSeparator - 1] === ".") {
                    return ident.slice(0, versionSeparator - 1);
                  } else {
                    return ident.slice(0, versionSeparator);
                  }
                };
                DirectoryRecord.prototype.isDirectory = function isDirectory(isoData) {
                  var rv = !!(this.fileFlags() & 2);
                  if (!rv && this.hasRockRidge()) {
                    rv = this.getSUEntries(isoData).filter(function(e) {
                      return e instanceof CLEntry;
                    }).length > 0;
                  }
                  return rv;
                };
                DirectoryRecord.prototype.isSymlink = function isSymlink(isoData) {
                  return this.hasRockRidge() && this.getSUEntries(isoData).filter(function(e) {
                    return e instanceof SLEntry;
                  }).length > 0;
                };
                DirectoryRecord.prototype.getSymlinkPath = function getSymlinkPath(isoData) {
                  var p = "";
                  var entries = this.getSUEntries(isoData);
                  var getStr = this._getGetString();
                  for (var i3 = 0, list2 = entries; i3 < list2.length; i3 += 1) {
                    var entry = list2[i3];
                    if (entry instanceof SLEntry) {
                      var components = entry.componentRecords();
                      for (var i$12 = 0, list$1 = components; i$12 < list$1.length; i$12 += 1) {
                        var component3 = list$1[i$12];
                        var flags = component3.flags();
                        if (flags & 2) {
                          p += "./";
                        } else if (flags & 4) {
                          p += "../";
                        } else if (flags & 8) {
                          p += "/";
                        } else {
                          p += component3.content(getStr);
                          if (!(flags & 1)) {
                            p += "/";
                          }
                        }
                      }
                      if (!entry.continueFlag()) {
                        break;
                      }
                    }
                  }
                  if (p.length > 1 && p[p.length - 1] === "/") {
                    return p.slice(0, p.length - 1);
                  } else {
                    return p;
                  }
                };
                DirectoryRecord.prototype.getFile = function getFile(isoData) {
                  if (this.isDirectory(isoData)) {
                    throw new Error("Tried to get a File from a directory.");
                  }
                  if (this._fileOrDir === null) {
                    this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
                  }
                  return this._fileOrDir;
                };
                DirectoryRecord.prototype.getDirectory = function getDirectory(isoData) {
                  if (!this.isDirectory(isoData)) {
                    throw new Error("Tried to get a Directory from a file.");
                  }
                  if (this._fileOrDir === null) {
                    this._fileOrDir = this._constructDirectory(isoData);
                  }
                  return this._fileOrDir;
                };
                DirectoryRecord.prototype.getSUEntries = function getSUEntries(isoData) {
                  if (!this._suEntries) {
                    this._constructSUEntries(isoData);
                  }
                  return this._suEntries;
                };
                DirectoryRecord.prototype._rockRidgeFilename = function _rockRidgeFilename(isoData) {
                  var nmEntries = this.getSUEntries(isoData).filter(function(e2) {
                    return e2 instanceof NMEntry;
                  });
                  if (nmEntries.length === 0 || nmEntries[0].flags() & (2 | 4)) {
                    return null;
                  }
                  var str = "";
                  var getString = this._getGetString();
                  for (var i3 = 0, list2 = nmEntries; i3 < list2.length; i3 += 1) {
                    var e = list2[i3];
                    str += e.name(getString);
                    if (!(e.flags() & 1)) {
                      break;
                    }
                  }
                  return str;
                };
                DirectoryRecord.prototype._constructSUEntries = function _constructSUEntries(isoData) {
                  var i3 = 33 + this._data[32];
                  if (i3 % 2 === 1) {
                    i3++;
                  }
                  i3 += this._rockRidgeOffset;
                  this._suEntries = constructSystemUseEntries(this._data, i3, this.length(), isoData);
                };
                DirectoryRecord.prototype._getRockRidgeOffset = function _getRockRidgeOffset(isoData) {
                  this._rockRidgeOffset = 0;
                  var suEntries = this.getSUEntries(isoData);
                  if (suEntries.length > 0) {
                    var spEntry = suEntries[0];
                    if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
                      for (var i3 = 1; i3 < suEntries.length; i3++) {
                        var entry = suEntries[i3];
                        if (entry instanceof RREntry || entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier) {
                          return spEntry.bytesSkipped();
                        }
                      }
                    }
                  }
                  this._rockRidgeOffset = -1;
                  return -1;
                };
                var ISODirectoryRecord = function(DirectoryRecord2) {
                  function ISODirectoryRecord2(data, rockRidgeOffset) {
                    DirectoryRecord2.call(this, data, rockRidgeOffset);
                  }
                  if (DirectoryRecord2)
                    ISODirectoryRecord2.__proto__ = DirectoryRecord2;
                  ISODirectoryRecord2.prototype = Object.create(DirectoryRecord2 && DirectoryRecord2.prototype);
                  ISODirectoryRecord2.prototype.constructor = ISODirectoryRecord2;
                  ISODirectoryRecord2.prototype._getString = function _getString(i3, len) {
                    return getASCIIString(this._data, i3, len);
                  };
                  ISODirectoryRecord2.prototype._constructDirectory = function _constructDirectory(isoData) {
                    return new ISODirectory(this, isoData);
                  };
                  ISODirectoryRecord2.prototype._getGetString = function _getGetString() {
                    return getASCIIString;
                  };
                  return ISODirectoryRecord2;
                }(DirectoryRecord);
                var JolietDirectoryRecord = function(DirectoryRecord2) {
                  function JolietDirectoryRecord2(data, rockRidgeOffset) {
                    DirectoryRecord2.call(this, data, rockRidgeOffset);
                  }
                  if (DirectoryRecord2)
                    JolietDirectoryRecord2.__proto__ = DirectoryRecord2;
                  JolietDirectoryRecord2.prototype = Object.create(DirectoryRecord2 && DirectoryRecord2.prototype);
                  JolietDirectoryRecord2.prototype.constructor = JolietDirectoryRecord2;
                  JolietDirectoryRecord2.prototype._getString = function _getString(i3, len) {
                    return getJolietString(this._data, i3, len);
                  };
                  JolietDirectoryRecord2.prototype._constructDirectory = function _constructDirectory(isoData) {
                    return new JolietDirectory(this, isoData);
                  };
                  JolietDirectoryRecord2.prototype._getGetString = function _getGetString() {
                    return getJolietString;
                  };
                  return JolietDirectoryRecord2;
                }(DirectoryRecord);
                var SystemUseEntry = function SystemUseEntry2(data) {
                  this._data = data;
                };
                SystemUseEntry.prototype.signatureWord = function signatureWord() {
                  return this._data.readUInt16BE(0);
                };
                SystemUseEntry.prototype.signatureWordString = function signatureWordString() {
                  return getASCIIString(this._data, 0, 2);
                };
                SystemUseEntry.prototype.length = function length() {
                  return this._data[2];
                };
                SystemUseEntry.prototype.suVersion = function suVersion() {
                  return this._data[3];
                };
                var CEEntry = function(SystemUseEntry2) {
                  function CEEntry2(data) {
                    SystemUseEntry2.call(this, data);
                    this._entries = null;
                  }
                  if (SystemUseEntry2)
                    CEEntry2.__proto__ = SystemUseEntry2;
                  CEEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  CEEntry2.prototype.constructor = CEEntry2;
                  CEEntry2.prototype.continuationLba = function continuationLba() {
                    return this._data.readUInt32LE(4);
                  };
                  CEEntry2.prototype.continuationLbaOffset = function continuationLbaOffset() {
                    return this._data.readUInt32LE(12);
                  };
                  CEEntry2.prototype.continuationLength = function continuationLength() {
                    return this._data.readUInt32LE(20);
                  };
                  CEEntry2.prototype.getEntries = function getEntries(isoData) {
                    if (!this._entries) {
                      var start = this.continuationLba() * 2048 + this.continuationLbaOffset();
                      this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
                    }
                    return this._entries;
                  };
                  return CEEntry2;
                }(SystemUseEntry);
                var PDEntry = function(SystemUseEntry2) {
                  function PDEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    PDEntry2.__proto__ = SystemUseEntry2;
                  PDEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  PDEntry2.prototype.constructor = PDEntry2;
                  return PDEntry2;
                }(SystemUseEntry);
                var SPEntry = function(SystemUseEntry2) {
                  function SPEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    SPEntry2.__proto__ = SystemUseEntry2;
                  SPEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  SPEntry2.prototype.constructor = SPEntry2;
                  SPEntry2.prototype.checkBytesPass = function checkBytesPass() {
                    return this._data[4] === 190 && this._data[5] === 239;
                  };
                  SPEntry2.prototype.bytesSkipped = function bytesSkipped() {
                    return this._data[6];
                  };
                  return SPEntry2;
                }(SystemUseEntry);
                var STEntry = function(SystemUseEntry2) {
                  function STEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    STEntry2.__proto__ = SystemUseEntry2;
                  STEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  STEntry2.prototype.constructor = STEntry2;
                  return STEntry2;
                }(SystemUseEntry);
                var EREntry = function(SystemUseEntry2) {
                  function EREntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    EREntry2.__proto__ = SystemUseEntry2;
                  EREntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  EREntry2.prototype.constructor = EREntry2;
                  EREntry2.prototype.identifierLength = function identifierLength() {
                    return this._data[4];
                  };
                  EREntry2.prototype.descriptorLength = function descriptorLength() {
                    return this._data[5];
                  };
                  EREntry2.prototype.sourceLength = function sourceLength() {
                    return this._data[6];
                  };
                  EREntry2.prototype.extensionVersion = function extensionVersion() {
                    return this._data[7];
                  };
                  EREntry2.prototype.extensionIdentifier = function extensionIdentifier() {
                    return getASCIIString(this._data, 8, this.identifierLength());
                  };
                  EREntry2.prototype.extensionDescriptor = function extensionDescriptor() {
                    return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
                  };
                  EREntry2.prototype.extensionSource = function extensionSource() {
                    return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
                  };
                  return EREntry2;
                }(SystemUseEntry);
                var ESEntry = function(SystemUseEntry2) {
                  function ESEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    ESEntry2.__proto__ = SystemUseEntry2;
                  ESEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  ESEntry2.prototype.constructor = ESEntry2;
                  ESEntry2.prototype.extensionSequence = function extensionSequence() {
                    return this._data[4];
                  };
                  return ESEntry2;
                }(SystemUseEntry);
                var RREntry = function(SystemUseEntry2) {
                  function RREntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    RREntry2.__proto__ = SystemUseEntry2;
                  RREntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  RREntry2.prototype.constructor = RREntry2;
                  return RREntry2;
                }(SystemUseEntry);
                var PXEntry = function(SystemUseEntry2) {
                  function PXEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    PXEntry2.__proto__ = SystemUseEntry2;
                  PXEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  PXEntry2.prototype.constructor = PXEntry2;
                  PXEntry2.prototype.mode = function mode() {
                    return this._data.readUInt32LE(4);
                  };
                  PXEntry2.prototype.fileLinks = function fileLinks() {
                    return this._data.readUInt32LE(12);
                  };
                  PXEntry2.prototype.uid = function uid() {
                    return this._data.readUInt32LE(20);
                  };
                  PXEntry2.prototype.gid = function gid() {
                    return this._data.readUInt32LE(28);
                  };
                  PXEntry2.prototype.inode = function inode() {
                    return this._data.readUInt32LE(36);
                  };
                  return PXEntry2;
                }(SystemUseEntry);
                var PNEntry = function(SystemUseEntry2) {
                  function PNEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    PNEntry2.__proto__ = SystemUseEntry2;
                  PNEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  PNEntry2.prototype.constructor = PNEntry2;
                  PNEntry2.prototype.devTHigh = function devTHigh() {
                    return this._data.readUInt32LE(4);
                  };
                  PNEntry2.prototype.devTLow = function devTLow() {
                    return this._data.readUInt32LE(12);
                  };
                  return PNEntry2;
                }(SystemUseEntry);
                var SLEntry = function(SystemUseEntry2) {
                  function SLEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    SLEntry2.__proto__ = SystemUseEntry2;
                  SLEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  SLEntry2.prototype.constructor = SLEntry2;
                  SLEntry2.prototype.flags = function flags() {
                    return this._data[4];
                  };
                  SLEntry2.prototype.continueFlag = function continueFlag() {
                    return this.flags() & 1;
                  };
                  SLEntry2.prototype.componentRecords = function componentRecords() {
                    var this$1 = this;
                    var records = new Array();
                    var i3 = 5;
                    while (i3 < this.length()) {
                      var record = new SLComponentRecord(this$1._data.slice(i3));
                      records.push(record);
                      i3 += record.length();
                    }
                    return records;
                  };
                  return SLEntry2;
                }(SystemUseEntry);
                var SLComponentRecord = function SLComponentRecord2(data) {
                  this._data = data;
                };
                SLComponentRecord.prototype.flags = function flags() {
                  return this._data[0];
                };
                SLComponentRecord.prototype.length = function length() {
                  return 2 + this.componentLength();
                };
                SLComponentRecord.prototype.componentLength = function componentLength() {
                  return this._data[1];
                };
                SLComponentRecord.prototype.content = function content(getString) {
                  return getString(this._data, 2, this.componentLength());
                };
                var NMEntry = function(SystemUseEntry2) {
                  function NMEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    NMEntry2.__proto__ = SystemUseEntry2;
                  NMEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  NMEntry2.prototype.constructor = NMEntry2;
                  NMEntry2.prototype.flags = function flags() {
                    return this._data[4];
                  };
                  NMEntry2.prototype.name = function name(getString) {
                    return getString(this._data, 5, this.length() - 5);
                  };
                  return NMEntry2;
                }(SystemUseEntry);
                var CLEntry = function(SystemUseEntry2) {
                  function CLEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    CLEntry2.__proto__ = SystemUseEntry2;
                  CLEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  CLEntry2.prototype.constructor = CLEntry2;
                  CLEntry2.prototype.childDirectoryLba = function childDirectoryLba() {
                    return this._data.readUInt32LE(4);
                  };
                  return CLEntry2;
                }(SystemUseEntry);
                var PLEntry = function(SystemUseEntry2) {
                  function PLEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    PLEntry2.__proto__ = SystemUseEntry2;
                  PLEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  PLEntry2.prototype.constructor = PLEntry2;
                  PLEntry2.prototype.parentDirectoryLba = function parentDirectoryLba() {
                    return this._data.readUInt32LE(4);
                  };
                  return PLEntry2;
                }(SystemUseEntry);
                var REEntry = function(SystemUseEntry2) {
                  function REEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    REEntry2.__proto__ = SystemUseEntry2;
                  REEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  REEntry2.prototype.constructor = REEntry2;
                  return REEntry2;
                }(SystemUseEntry);
                var TFEntry = function(SystemUseEntry2) {
                  function TFEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    TFEntry2.__proto__ = SystemUseEntry2;
                  TFEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  TFEntry2.prototype.constructor = TFEntry2;
                  TFEntry2.prototype.flags = function flags() {
                    return this._data[4];
                  };
                  TFEntry2.prototype.creation = function creation() {
                    if (this.flags() & 1) {
                      if (this._longFormDates()) {
                        return getDate(this._data, 5);
                      } else {
                        return getShortFormDate(this._data, 5);
                      }
                    } else {
                      return null;
                    }
                  };
                  TFEntry2.prototype.modify = function modify() {
                    if (this.flags() & 2) {
                      var previousDates = this.flags() & 1 ? 1 : 0;
                      if (this._longFormDates) {
                        return getDate(this._data, 5 + previousDates * 17);
                      } else {
                        return getShortFormDate(this._data, 5 + previousDates * 7);
                      }
                    } else {
                      return null;
                    }
                  };
                  TFEntry2.prototype.access = function access() {
                    if (this.flags() & 4) {
                      var previousDates = this.flags() & 1 ? 1 : 0;
                      previousDates += this.flags() & 2 ? 1 : 0;
                      if (this._longFormDates) {
                        return getDate(this._data, 5 + previousDates * 17);
                      } else {
                        return getShortFormDate(this._data, 5 + previousDates * 7);
                      }
                    } else {
                      return null;
                    }
                  };
                  TFEntry2.prototype.backup = function backup() {
                    if (this.flags() & 16) {
                      var previousDates = this.flags() & 1 ? 1 : 0;
                      previousDates += this.flags() & 2 ? 1 : 0;
                      previousDates += this.flags() & 4 ? 1 : 0;
                      if (this._longFormDates) {
                        return getDate(this._data, 5 + previousDates * 17);
                      } else {
                        return getShortFormDate(this._data, 5 + previousDates * 7);
                      }
                    } else {
                      return null;
                    }
                  };
                  TFEntry2.prototype.expiration = function expiration() {
                    if (this.flags() & 32) {
                      var previousDates = this.flags() & 1 ? 1 : 0;
                      previousDates += this.flags() & 2 ? 1 : 0;
                      previousDates += this.flags() & 4 ? 1 : 0;
                      previousDates += this.flags() & 16 ? 1 : 0;
                      if (this._longFormDates) {
                        return getDate(this._data, 5 + previousDates * 17);
                      } else {
                        return getShortFormDate(this._data, 5 + previousDates * 7);
                      }
                    } else {
                      return null;
                    }
                  };
                  TFEntry2.prototype.effective = function effective() {
                    if (this.flags() & 64) {
                      var previousDates = this.flags() & 1 ? 1 : 0;
                      previousDates += this.flags() & 2 ? 1 : 0;
                      previousDates += this.flags() & 4 ? 1 : 0;
                      previousDates += this.flags() & 16 ? 1 : 0;
                      previousDates += this.flags() & 32 ? 1 : 0;
                      if (this._longFormDates) {
                        return getDate(this._data, 5 + previousDates * 17);
                      } else {
                        return getShortFormDate(this._data, 5 + previousDates * 7);
                      }
                    } else {
                      return null;
                    }
                  };
                  TFEntry2.prototype._longFormDates = function _longFormDates() {
                    return !!(this.flags() && 128);
                  };
                  return TFEntry2;
                }(SystemUseEntry);
                var SFEntry = function(SystemUseEntry2) {
                  function SFEntry2(data) {
                    SystemUseEntry2.call(this, data);
                  }
                  if (SystemUseEntry2)
                    SFEntry2.__proto__ = SystemUseEntry2;
                  SFEntry2.prototype = Object.create(SystemUseEntry2 && SystemUseEntry2.prototype);
                  SFEntry2.prototype.constructor = SFEntry2;
                  SFEntry2.prototype.virtualSizeHigh = function virtualSizeHigh() {
                    return this._data.readUInt32LE(4);
                  };
                  SFEntry2.prototype.virtualSizeLow = function virtualSizeLow() {
                    return this._data.readUInt32LE(12);
                  };
                  SFEntry2.prototype.tableDepth = function tableDepth() {
                    return this._data[20];
                  };
                  return SFEntry2;
                }(SystemUseEntry);
                var Directory = function Directory2(record, isoData) {
                  var this$1 = this;
                  this._fileList = [];
                  this._fileMap = {};
                  this._record = record;
                  var i3 = record.lba();
                  var iLimit = i3 + record.dataLength();
                  if (!(record.fileFlags() & 2)) {
                    var cl = record.getSUEntries(isoData).filter(function(e) {
                      return e instanceof CLEntry;
                    })[0];
                    i3 = cl.childDirectoryLba() * 2048;
                    iLimit = Infinity;
                  }
                  while (i3 < iLimit) {
                    var len = isoData[i3];
                    if (len === 0) {
                      i3++;
                      continue;
                    }
                    var r2 = this$1._constructDirectoryRecord(isoData.slice(i3));
                    var fname = r2.fileName(isoData);
                    if (fname !== "\0" && fname !== "") {
                      if (!r2.hasRockRidge() || r2.getSUEntries(isoData).filter(function(e) {
                        return e instanceof REEntry;
                      }).length === 0) {
                        this$1._fileMap[fname] = r2;
                        this$1._fileList.push(fname);
                      }
                    } else if (iLimit === Infinity) {
                      iLimit = i3 + r2.dataLength();
                    }
                    i3 += r2.length();
                  }
                };
                Directory.prototype.getRecord = function getRecord(name) {
                  return this._fileMap[name];
                };
                Directory.prototype.getFileList = function getFileList() {
                  return this._fileList;
                };
                Directory.prototype.getDotEntry = function getDotEntry(isoData) {
                  return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
                };
                var ISODirectory = function(Directory2) {
                  function ISODirectory2(record, isoData) {
                    Directory2.call(this, record, isoData);
                  }
                  if (Directory2)
                    ISODirectory2.__proto__ = Directory2;
                  ISODirectory2.prototype = Object.create(Directory2 && Directory2.prototype);
                  ISODirectory2.prototype.constructor = ISODirectory2;
                  ISODirectory2.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
                    return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
                  };
                  return ISODirectory2;
                }(Directory);
                var JolietDirectory = function(Directory2) {
                  function JolietDirectory2(record, isoData) {
                    Directory2.call(this, record, isoData);
                  }
                  if (Directory2)
                    JolietDirectory2.__proto__ = Directory2;
                  JolietDirectory2.prototype = Object.create(Directory2 && Directory2.prototype);
                  JolietDirectory2.prototype.constructor = JolietDirectory2;
                  JolietDirectory2.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
                    return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
                  };
                  return JolietDirectory2;
                }(Directory);
                var IsoFS = function(SynchronousFileSystem$$1) {
                  function IsoFS2(data, name, deprecateMsg) {
                    var this$1 = this;
                    if (name === void 0)
                      name = "";
                    if (deprecateMsg === void 0)
                      deprecateMsg = true;
                    SynchronousFileSystem$$1.call(this);
                    this._data = data;
                    deprecationMessage(deprecateMsg, IsoFS2.Name, { data: "ISO data as a Buffer", name });
                    var vdTerminatorFound = false;
                    var i3 = 16 * 2048;
                    var candidateVDs = new Array();
                    while (!vdTerminatorFound) {
                      var slice = data.slice(i3);
                      var vd = new VolumeDescriptor(slice);
                      switch (vd.type()) {
                        case 1:
                          candidateVDs.push(new PrimaryVolumeDescriptor(slice));
                          break;
                        case 2:
                          candidateVDs.push(new SupplementaryVolumeDescriptor(slice));
                          break;
                        case 255:
                          vdTerminatorFound = true;
                          break;
                      }
                      i3 += 2048;
                    }
                    if (candidateVDs.length === 0) {
                      throw new ApiError(ErrorCode.EIO, "Unable to find a suitable volume descriptor.");
                    }
                    candidateVDs.forEach(function(v2) {
                      if (!this$1._pvd || this$1._pvd.type() !== 2) {
                        this$1._pvd = v2;
                      }
                    });
                    this._root = this._pvd.rootDirectoryEntry(data);
                    this._name = name;
                  }
                  if (SynchronousFileSystem$$1)
                    IsoFS2.__proto__ = SynchronousFileSystem$$1;
                  IsoFS2.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
                  IsoFS2.prototype.constructor = IsoFS2;
                  IsoFS2.Create = function Create(opts, cb) {
                    var fs4;
                    var e;
                    try {
                      fs4 = new IsoFS2(opts.data, opts.name, false);
                    } catch (e2) {
                      e2 = e2;
                    } finally {
                      cb(e, fs4);
                    }
                  };
                  IsoFS2.isAvailable = function isAvailable() {
                    return true;
                  };
                  IsoFS2.prototype.getName = function getName() {
                    var name = "IsoFS" + this._name + (this._pvd ? "-" + this._pvd.name() : "");
                    if (this._root && this._root.hasRockRidge()) {
                      name += "-RockRidge";
                    }
                    return name;
                  };
                  IsoFS2.prototype.diskSpace = function diskSpace(path$$1, cb) {
                    cb(this._data.length, 0);
                  };
                  IsoFS2.prototype.isReadOnly = function isReadOnly() {
                    return true;
                  };
                  IsoFS2.prototype.supportsLinks = function supportsLinks() {
                    return false;
                  };
                  IsoFS2.prototype.supportsProps = function supportsProps() {
                    return false;
                  };
                  IsoFS2.prototype.supportsSynch = function supportsSynch() {
                    return true;
                  };
                  IsoFS2.prototype.statSync = function statSync(p, isLstat) {
                    var record = this._getDirectoryRecord(p);
                    if (record === null) {
                      throw ApiError.ENOENT(p);
                    }
                    return this._getStats(p, record);
                  };
                  IsoFS2.prototype.openSync = function openSync(p, flags, mode) {
                    if (flags.isWriteable()) {
                      throw new ApiError(ErrorCode.EPERM, p);
                    }
                    var record = this._getDirectoryRecord(p);
                    if (!record) {
                      throw ApiError.ENOENT(p);
                    } else if (record.isSymlink(this._data)) {
                      return this.openSync(path.resolve(p, record.getSymlinkPath(this._data)), flags, mode);
                    } else if (!record.isDirectory(this._data)) {
                      var data = record.getFile(this._data);
                      var stats = this._getStats(p, record);
                      switch (flags.pathExistsAction()) {
                        case ActionType.THROW_EXCEPTION:
                        case ActionType.TRUNCATE_FILE:
                          throw ApiError.EEXIST(p);
                        case ActionType.NOP:
                          return new NoSyncFile(this, p, flags, stats, data);
                        default:
                          throw new ApiError(ErrorCode.EINVAL, "Invalid FileMode object.");
                      }
                    } else {
                      throw ApiError.EISDIR(p);
                    }
                  };
                  IsoFS2.prototype.readdirSync = function readdirSync(path$$1) {
                    var record = this._getDirectoryRecord(path$$1);
                    if (!record) {
                      throw ApiError.ENOENT(path$$1);
                    } else if (record.isDirectory(this._data)) {
                      return record.getDirectory(this._data).getFileList().slice(0);
                    } else {
                      throw ApiError.ENOTDIR(path$$1);
                    }
                  };
                  IsoFS2.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
                    var fd = this.openSync(fname, flag, 420);
                    try {
                      var fdCast = fd;
                      var fdBuff = fdCast.getBuffer();
                      if (encoding === null) {
                        return copyingSlice(fdBuff);
                      }
                      return fdBuff.toString(encoding);
                    } finally {
                      fd.closeSync();
                    }
                  };
                  IsoFS2.prototype._getDirectoryRecord = function _getDirectoryRecord(path$$1) {
                    var this$1 = this;
                    if (path$$1 === "/") {
                      return this._root;
                    }
                    var components = path$$1.split("/").slice(1);
                    var dir = this._root;
                    for (var i3 = 0, list2 = components; i3 < list2.length; i3 += 1) {
                      var component3 = list2[i3];
                      if (dir.isDirectory(this$1._data)) {
                        dir = dir.getDirectory(this$1._data).getRecord(component3);
                        if (!dir) {
                          return null;
                        }
                      } else {
                        return null;
                      }
                    }
                    return dir;
                  };
                  IsoFS2.prototype._getStats = function _getStats(p, record) {
                    if (record.isSymlink(this._data)) {
                      var newP = path.resolve(p, record.getSymlinkPath(this._data));
                      var dirRec = this._getDirectoryRecord(newP);
                      if (!dirRec) {
                        return null;
                      }
                      return this._getStats(newP, dirRec);
                    } else {
                      var len = record.dataLength();
                      var mode = 365;
                      var date = record.recordingDate();
                      var atime = date;
                      var mtime = date;
                      var ctime = date;
                      if (record.hasRockRidge()) {
                        var entries = record.getSUEntries(this._data);
                        for (var i3 = 0, list2 = entries; i3 < list2.length; i3 += 1) {
                          var entry = list2[i3];
                          if (entry instanceof PXEntry) {
                            mode = entry.mode();
                          } else if (entry instanceof TFEntry) {
                            var flags = entry.flags();
                            if (flags & 4) {
                              atime = entry.access();
                            }
                            if (flags & 2) {
                              mtime = entry.modify();
                            }
                            if (flags & 1) {
                              ctime = entry.creation();
                            }
                          }
                        }
                      }
                      mode = mode & 365;
                      return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);
                    }
                  };
                  return IsoFS2;
                }(SynchronousFileSystem);
                IsoFS.Name = "IsoFS";
                IsoFS.Options = {
                  data: {
                    type: "object",
                    description: "The ISO file in a buffer",
                    validator: bufferValidator
                  }
                };
                [AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach(function(fsType) {
                  var create = fsType.Create;
                  fsType.Create = function(opts, cb) {
                    var oneArg = typeof opts === "function";
                    var normalizedCb = oneArg ? opts : cb;
                    var normalizedOpts = oneArg ? {} : opts;
                    function wrappedCb(e) {
                      if (e) {
                        normalizedCb(e);
                      } else {
                        create.call(fsType, normalizedOpts, normalizedCb);
                      }
                    }
                    checkOptions(fsType, normalizedOpts, wrappedCb);
                  };
                });
                var Backends = { AsyncMirror, Dropbox: DropboxFileSystem, Emscripten: EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemory: InMemoryFileSystem, IndexedDB: IndexedDBFileSystem, IsoFS, LocalStorage: LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS };
                if (process["initializeTTYs"]) {
                  process["initializeTTYs"]();
                }
                function install(obj) {
                  obj.Buffer = Buffer3;
                  obj.process = process;
                  var oldRequire = obj.require ? obj.require : null;
                  obj.require = function(arg) {
                    var rv = BFSRequire2(arg);
                    if (!rv) {
                      return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
                    } else {
                      return rv;
                    }
                  };
                }
                function registerFileSystem(name, fs4) {
                  Backends[name] = fs4;
                }
                function BFSRequire2(module4) {
                  switch (module4) {
                    case "fs":
                      return _fsMock;
                    case "path":
                      return path;
                    case "buffer":
                      return buffer;
                    case "process":
                      return process;
                    case "bfs_utils":
                      return BFSUtils;
                    default:
                      return Backends[module4];
                  }
                }
                function initialize2(rootfs) {
                  return _fsMock.initialize(rootfs);
                }
                function configure(config, cb) {
                  getFileSystem(config, function(e, fs4) {
                    if (fs4) {
                      initialize2(fs4);
                      cb();
                    } else {
                      cb(e);
                    }
                  });
                }
                function getFileSystem(config, cb) {
                  var fsName = config["fs"];
                  if (!fsName) {
                    return cb(new ApiError(ErrorCode.EPERM, 'Missing "fs" property on configuration object.'));
                  }
                  var options2 = config["options"];
                  var waitCount = 0;
                  var called = false;
                  function finish() {
                    if (!called) {
                      called = true;
                      var fsc = Backends[fsName];
                      if (!fsc) {
                        cb(new ApiError(ErrorCode.EPERM, "File system " + fsName + " is not available in BrowserFS."));
                      } else {
                        fsc.Create(options2, cb);
                      }
                    }
                  }
                  if (options2 !== null && typeof options2 === "object") {
                    var finishedIterating = false;
                    var props = Object.keys(options2).filter(function(k2) {
                      return k2 !== "fs";
                    });
                    props.forEach(function(p) {
                      var d = options2[p];
                      if (d !== null && typeof d === "object" && d["fs"]) {
                        waitCount++;
                        getFileSystem(d, function(e, fs4) {
                          waitCount--;
                          if (e) {
                            if (called) {
                              return;
                            }
                            called = true;
                            cb(e);
                          } else {
                            options2[p] = fs4;
                            if (waitCount === 0 && finishedIterating) {
                              finish();
                            }
                          }
                        });
                      }
                    });
                    finishedIterating = true;
                  }
                  if (waitCount === 0) {
                    finish();
                  }
                }
                if ("ab".substr(-1) !== "b") {
                  String.prototype.substr = /* @__PURE__ */ function(substr) {
                    return function(start, length) {
                      if (start < 0) {
                        start = this.length + start;
                      }
                      return substr.call(this, start, length);
                    };
                  }(String.prototype.substr);
                }
                if (typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined") {
                  if (!Uint8Array.prototype["slice"]) {
                    Uint8Array.prototype.slice = function(start, end) {
                      if (start === void 0)
                        start = 0;
                      if (end === void 0)
                        end = this.length;
                      var self2 = this;
                      if (start < 0) {
                        start = this.length + start;
                        if (start < 0) {
                          start = 0;
                        }
                      }
                      if (end < 0) {
                        end = this.length + end;
                        if (end < 0) {
                          end = 0;
                        }
                      }
                      if (end < start) {
                        end = start;
                      }
                      return new Uint8Array(self2.buffer, self2.byteOffset + start, end - start);
                    };
                  }
                }
                exports2.install = install;
                exports2.registerFileSystem = registerFileSystem;
                exports2.BFSRequire = BFSRequire2;
                exports2.initialize = initialize2;
                exports2.configure = configure;
                exports2.getFileSystem = getFileSystem;
                exports2.EmscriptenFS = BFSEmscriptenFS;
                exports2.FileSystem = Backends;
                exports2.Errors = api_error;
                exports2.setImmediate = setImmediate$3;
              }).call(exports2, __webpack_require__(1), /* @__PURE__ */ function() {
                return this;
              }(), __webpack_require__(5)(module2), __webpack_require__(6));
            },
            /* 1 */
            /***/
            function(module2, exports2, __webpack_require__) {
              module2.exports = __webpack_require__(2).Buffer;
            },
            /* 2 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(Buffer3) {
                "use strict";
                var base64 = __webpack_require__(3);
                var ieee754 = __webpack_require__(4);
                exports2.Buffer = Buffer3;
                exports2.SlowBuffer = SlowBuffer;
                exports2.INSPECT_MAX_BYTES = 50;
                var K_MAX_LENGTH = 2147483647;
                exports2.kMaxLength = K_MAX_LENGTH;
                Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
                if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
                  console.error(
                    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
                  );
                }
                function typedArraySupport() {
                  try {
                    var arr = new Uint8Array(1);
                    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                      return 42;
                    } };
                    return arr.foo() === 42;
                  } catch (e) {
                    return false;
                  }
                }
                function createBuffer(length) {
                  if (length > K_MAX_LENGTH) {
                    throw new RangeError("Invalid typed array length");
                  }
                  var buf = new Uint8Array(length);
                  buf.__proto__ = Buffer3.prototype;
                  return buf;
                }
                function Buffer3(arg, encodingOrOffset, length) {
                  if (typeof arg === "number") {
                    if (typeof encodingOrOffset === "string") {
                      throw new Error(
                        "If encoding is specified then the first argument must be a string"
                      );
                    }
                    return allocUnsafe(arg);
                  }
                  return from(arg, encodingOrOffset, length);
                }
                if (typeof Symbol !== "undefined" && Symbol.species && Buffer3[Symbol.species] === Buffer3) {
                  Object.defineProperty(Buffer3, Symbol.species, {
                    value: null,
                    configurable: true,
                    enumerable: false,
                    writable: false
                  });
                }
                Buffer3.poolSize = 8192;
                function from(value, encodingOrOffset, length) {
                  if (typeof value === "number") {
                    throw new TypeError('"value" argument must not be a number');
                  }
                  if (isArrayBuffer(value)) {
                    return fromArrayBuffer(value, encodingOrOffset, length);
                  }
                  if (typeof value === "string") {
                    return fromString(value, encodingOrOffset);
                  }
                  return fromObject(value);
                }
                Buffer3.from = function(value, encodingOrOffset, length) {
                  return from(value, encodingOrOffset, length);
                };
                Buffer3.prototype.__proto__ = Uint8Array.prototype;
                Buffer3.__proto__ = Uint8Array;
                function assertSize(size) {
                  if (typeof size !== "number") {
                    throw new TypeError('"size" argument must be a number');
                  } else if (size < 0) {
                    throw new RangeError('"size" argument must not be negative');
                  }
                }
                function alloc(size, fill, encoding) {
                  assertSize(size);
                  if (size <= 0) {
                    return createBuffer(size);
                  }
                  if (fill !== void 0) {
                    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                  }
                  return createBuffer(size);
                }
                Buffer3.alloc = function(size, fill, encoding) {
                  return alloc(size, fill, encoding);
                };
                function allocUnsafe(size) {
                  assertSize(size);
                  return createBuffer(size < 0 ? 0 : checked(size) | 0);
                }
                Buffer3.allocUnsafe = function(size) {
                  return allocUnsafe(size);
                };
                Buffer3.allocUnsafeSlow = function(size) {
                  return allocUnsafe(size);
                };
                function fromString(string, encoding) {
                  if (typeof encoding !== "string" || encoding === "") {
                    encoding = "utf8";
                  }
                  if (!Buffer3.isEncoding(encoding)) {
                    throw new TypeError('"encoding" must be a valid string encoding');
                  }
                  var length = byteLength(string, encoding) | 0;
                  var buf = createBuffer(length);
                  var actual = buf.write(string, encoding);
                  if (actual !== length) {
                    buf = buf.slice(0, actual);
                  }
                  return buf;
                }
                function fromArrayLike(array) {
                  var length = array.length < 0 ? 0 : checked(array.length) | 0;
                  var buf = createBuffer(length);
                  for (var i2 = 0; i2 < length; i2 += 1) {
                    buf[i2] = array[i2] & 255;
                  }
                  return buf;
                }
                function fromArrayBuffer(array, byteOffset, length) {
                  if (byteOffset < 0 || array.byteLength < byteOffset) {
                    throw new RangeError("'offset' is out of bounds");
                  }
                  if (array.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError("'length' is out of bounds");
                  }
                  var buf;
                  if (byteOffset === void 0 && length === void 0) {
                    buf = new Uint8Array(array);
                  } else if (length === void 0) {
                    buf = new Uint8Array(array, byteOffset);
                  } else {
                    buf = new Uint8Array(array, byteOffset, length);
                  }
                  buf.__proto__ = Buffer3.prototype;
                  return buf;
                }
                function fromObject(obj) {
                  if (Buffer3.isBuffer(obj)) {
                    var len = checked(obj.length) | 0;
                    var buf = createBuffer(len);
                    if (buf.length === 0) {
                      return buf;
                    }
                    obj.copy(buf, 0, 0, len);
                    return buf;
                  }
                  if (obj) {
                    if (isArrayBufferView(obj) || "length" in obj) {
                      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                        return createBuffer(0);
                      }
                      return fromArrayLike(obj);
                    }
                    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                      return fromArrayLike(obj.data);
                    }
                  }
                  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                }
                function checked(length) {
                  if (length >= K_MAX_LENGTH) {
                    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
                  }
                  return length | 0;
                }
                function SlowBuffer(length) {
                  if (+length != length) {
                    length = 0;
                  }
                  return Buffer3.alloc(+length);
                }
                Buffer3.isBuffer = function isBuffer(b3) {
                  return b3 != null && b3._isBuffer === true;
                };
                Buffer3.compare = function compare(a, b3) {
                  if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b3)) {
                    throw new TypeError("Arguments must be Buffers");
                  }
                  if (a === b3)
                    return 0;
                  var x3 = a.length;
                  var y2 = b3.length;
                  for (var i2 = 0, len = Math.min(x3, y2); i2 < len; ++i2) {
                    if (a[i2] !== b3[i2]) {
                      x3 = a[i2];
                      y2 = b3[i2];
                      break;
                    }
                  }
                  if (x3 < y2)
                    return -1;
                  if (y2 < x3)
                    return 1;
                  return 0;
                };
                Buffer3.isEncoding = function isEncoding(encoding) {
                  switch (String(encoding).toLowerCase()) {
                    case "hex":
                    case "utf8":
                    case "utf-8":
                    case "ascii":
                    case "latin1":
                    case "binary":
                    case "base64":
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return true;
                    default:
                      return false;
                  }
                };
                Buffer3.concat = function concat(list, length) {
                  if (!Array.isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                  }
                  if (list.length === 0) {
                    return Buffer3.alloc(0);
                  }
                  var i2;
                  if (length === void 0) {
                    length = 0;
                    for (i2 = 0; i2 < list.length; ++i2) {
                      length += list[i2].length;
                    }
                  }
                  var buffer = Buffer3.allocUnsafe(length);
                  var pos = 0;
                  for (i2 = 0; i2 < list.length; ++i2) {
                    var buf = list[i2];
                    if (!Buffer3.isBuffer(buf)) {
                      throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    buf.copy(buffer, pos);
                    pos += buf.length;
                  }
                  return buffer;
                };
                function byteLength(string, encoding) {
                  if (Buffer3.isBuffer(string)) {
                    return string.length;
                  }
                  if (isArrayBufferView(string) || isArrayBuffer(string)) {
                    return string.byteLength;
                  }
                  if (typeof string !== "string") {
                    string = "" + string;
                  }
                  var len = string.length;
                  if (len === 0)
                    return 0;
                  var loweredCase = false;
                  for (; ; ) {
                    switch (encoding) {
                      case "ascii":
                      case "latin1":
                      case "binary":
                        return len;
                      case "utf8":
                      case "utf-8":
                      case void 0:
                        return utf8ToBytes(string).length;
                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return len * 2;
                      case "hex":
                        return len >>> 1;
                      case "base64":
                        return base64ToBytes(string).length;
                      default:
                        if (loweredCase)
                          return utf8ToBytes(string).length;
                        encoding = ("" + encoding).toLowerCase();
                        loweredCase = true;
                    }
                  }
                }
                Buffer3.byteLength = byteLength;
                function slowToString(encoding, start, end) {
                  var loweredCase = false;
                  if (start === void 0 || start < 0) {
                    start = 0;
                  }
                  if (start > this.length) {
                    return "";
                  }
                  if (end === void 0 || end > this.length) {
                    end = this.length;
                  }
                  if (end <= 0) {
                    return "";
                  }
                  end >>>= 0;
                  start >>>= 0;
                  if (end <= start) {
                    return "";
                  }
                  if (!encoding)
                    encoding = "utf8";
                  while (true) {
                    switch (encoding) {
                      case "hex":
                        return hexSlice(this, start, end);
                      case "utf8":
                      case "utf-8":
                        return utf8Slice(this, start, end);
                      case "ascii":
                        return asciiSlice(this, start, end);
                      case "latin1":
                      case "binary":
                        return latin1Slice(this, start, end);
                      case "base64":
                        return base64Slice(this, start, end);
                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return utf16leSlice(this, start, end);
                      default:
                        if (loweredCase)
                          throw new TypeError("Unknown encoding: " + encoding);
                        encoding = (encoding + "").toLowerCase();
                        loweredCase = true;
                    }
                  }
                }
                Buffer3.prototype._isBuffer = true;
                function swap(b3, n, m2) {
                  var i2 = b3[n];
                  b3[n] = b3[m2];
                  b3[m2] = i2;
                }
                Buffer3.prototype.swap16 = function swap16() {
                  var len = this.length;
                  if (len % 2 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 16-bits");
                  }
                  for (var i2 = 0; i2 < len; i2 += 2) {
                    swap(this, i2, i2 + 1);
                  }
                  return this;
                };
                Buffer3.prototype.swap32 = function swap32() {
                  var len = this.length;
                  if (len % 4 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 32-bits");
                  }
                  for (var i2 = 0; i2 < len; i2 += 4) {
                    swap(this, i2, i2 + 3);
                    swap(this, i2 + 1, i2 + 2);
                  }
                  return this;
                };
                Buffer3.prototype.swap64 = function swap64() {
                  var len = this.length;
                  if (len % 8 !== 0) {
                    throw new RangeError("Buffer size must be a multiple of 64-bits");
                  }
                  for (var i2 = 0; i2 < len; i2 += 8) {
                    swap(this, i2, i2 + 7);
                    swap(this, i2 + 1, i2 + 6);
                    swap(this, i2 + 2, i2 + 5);
                    swap(this, i2 + 3, i2 + 4);
                  }
                  return this;
                };
                Buffer3.prototype.toString = function toString() {
                  var length = this.length;
                  if (length === 0)
                    return "";
                  if (arguments.length === 0)
                    return utf8Slice(this, 0, length);
                  return slowToString.apply(this, arguments);
                };
                Buffer3.prototype.equals = function equals(b3) {
                  if (!Buffer3.isBuffer(b3))
                    throw new TypeError("Argument must be a Buffer");
                  if (this === b3)
                    return true;
                  return Buffer3.compare(this, b3) === 0;
                };
                Buffer3.prototype.inspect = function inspect() {
                  var str = "";
                  var max = exports2.INSPECT_MAX_BYTES;
                  if (this.length > 0) {
                    str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
                    if (this.length > max)
                      str += " ... ";
                  }
                  return "<Buffer " + str + ">";
                };
                Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                  if (!Buffer3.isBuffer(target)) {
                    throw new TypeError("Argument must be a Buffer");
                  }
                  if (start === void 0) {
                    start = 0;
                  }
                  if (end === void 0) {
                    end = target ? target.length : 0;
                  }
                  if (thisStart === void 0) {
                    thisStart = 0;
                  }
                  if (thisEnd === void 0) {
                    thisEnd = this.length;
                  }
                  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError("out of range index");
                  }
                  if (thisStart >= thisEnd && start >= end) {
                    return 0;
                  }
                  if (thisStart >= thisEnd) {
                    return -1;
                  }
                  if (start >= end) {
                    return 1;
                  }
                  start >>>= 0;
                  end >>>= 0;
                  thisStart >>>= 0;
                  thisEnd >>>= 0;
                  if (this === target)
                    return 0;
                  var x3 = thisEnd - thisStart;
                  var y2 = end - start;
                  var len = Math.min(x3, y2);
                  var thisCopy = this.slice(thisStart, thisEnd);
                  var targetCopy = target.slice(start, end);
                  for (var i2 = 0; i2 < len; ++i2) {
                    if (thisCopy[i2] !== targetCopy[i2]) {
                      x3 = thisCopy[i2];
                      y2 = targetCopy[i2];
                      break;
                    }
                  }
                  if (x3 < y2)
                    return -1;
                  if (y2 < x3)
                    return 1;
                  return 0;
                };
                function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                  if (buffer.length === 0)
                    return -1;
                  if (typeof byteOffset === "string") {
                    encoding = byteOffset;
                    byteOffset = 0;
                  } else if (byteOffset > 2147483647) {
                    byteOffset = 2147483647;
                  } else if (byteOffset < -2147483648) {
                    byteOffset = -2147483648;
                  }
                  byteOffset = +byteOffset;
                  if (numberIsNaN(byteOffset)) {
                    byteOffset = dir ? 0 : buffer.length - 1;
                  }
                  if (byteOffset < 0)
                    byteOffset = buffer.length + byteOffset;
                  if (byteOffset >= buffer.length) {
                    if (dir)
                      return -1;
                    else
                      byteOffset = buffer.length - 1;
                  } else if (byteOffset < 0) {
                    if (dir)
                      byteOffset = 0;
                    else
                      return -1;
                  }
                  if (typeof val === "string") {
                    val = Buffer3.from(val, encoding);
                  }
                  if (Buffer3.isBuffer(val)) {
                    if (val.length === 0) {
                      return -1;
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                  } else if (typeof val === "number") {
                    val = val & 255;
                    if (typeof Uint8Array.prototype.indexOf === "function") {
                      if (dir) {
                        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                      } else {
                        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                      }
                    }
                    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
                  }
                  throw new TypeError("val must be string, number or Buffer");
                }
                function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                  var indexSize = 1;
                  var arrLength = arr.length;
                  var valLength = val.length;
                  if (encoding !== void 0) {
                    encoding = String(encoding).toLowerCase();
                    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                      if (arr.length < 2 || val.length < 2) {
                        return -1;
                      }
                      indexSize = 2;
                      arrLength /= 2;
                      valLength /= 2;
                      byteOffset /= 2;
                    }
                  }
                  function read(buf, i3) {
                    if (indexSize === 1) {
                      return buf[i3];
                    } else {
                      return buf.readUInt16BE(i3 * indexSize);
                    }
                  }
                  var i2;
                  if (dir) {
                    var foundIndex = -1;
                    for (i2 = byteOffset; i2 < arrLength; i2++) {
                      if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
                        if (foundIndex === -1)
                          foundIndex = i2;
                        if (i2 - foundIndex + 1 === valLength)
                          return foundIndex * indexSize;
                      } else {
                        if (foundIndex !== -1)
                          i2 -= i2 - foundIndex;
                        foundIndex = -1;
                      }
                    }
                  } else {
                    if (byteOffset + valLength > arrLength)
                      byteOffset = arrLength - valLength;
                    for (i2 = byteOffset; i2 >= 0; i2--) {
                      var found = true;
                      for (var j = 0; j < valLength; j++) {
                        if (read(arr, i2 + j) !== read(val, j)) {
                          found = false;
                          break;
                        }
                      }
                      if (found)
                        return i2;
                    }
                  }
                  return -1;
                }
                Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
                  return this.indexOf(val, byteOffset, encoding) !== -1;
                };
                Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                };
                Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                };
                function hexWrite(buf, string, offset, length) {
                  offset = Number(offset) || 0;
                  var remaining = buf.length - offset;
                  if (!length) {
                    length = remaining;
                  } else {
                    length = Number(length);
                    if (length > remaining) {
                      length = remaining;
                    }
                  }
                  var strLen = string.length;
                  if (strLen % 2 !== 0)
                    throw new TypeError("Invalid hex string");
                  if (length > strLen / 2) {
                    length = strLen / 2;
                  }
                  for (var i2 = 0; i2 < length; ++i2) {
                    var parsed = parseInt(string.substr(i2 * 2, 2), 16);
                    if (numberIsNaN(parsed))
                      return i2;
                    buf[offset + i2] = parsed;
                  }
                  return i2;
                }
                function utf8Write(buf, string, offset, length) {
                  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                }
                function asciiWrite(buf, string, offset, length) {
                  return blitBuffer(asciiToBytes(string), buf, offset, length);
                }
                function latin1Write(buf, string, offset, length) {
                  return asciiWrite(buf, string, offset, length);
                }
                function base64Write(buf, string, offset, length) {
                  return blitBuffer(base64ToBytes(string), buf, offset, length);
                }
                function ucs2Write(buf, string, offset, length) {
                  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                }
                Buffer3.prototype.write = function write(string, offset, length, encoding) {
                  if (offset === void 0) {
                    encoding = "utf8";
                    length = this.length;
                    offset = 0;
                  } else if (length === void 0 && typeof offset === "string") {
                    encoding = offset;
                    length = this.length;
                    offset = 0;
                  } else if (isFinite(offset)) {
                    offset = offset >>> 0;
                    if (isFinite(length)) {
                      length = length >>> 0;
                      if (encoding === void 0)
                        encoding = "utf8";
                    } else {
                      encoding = length;
                      length = void 0;
                    }
                  } else {
                    throw new Error(
                      "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                    );
                  }
                  var remaining = this.length - offset;
                  if (length === void 0 || length > remaining)
                    length = remaining;
                  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                    throw new RangeError("Attempt to write outside buffer bounds");
                  }
                  if (!encoding)
                    encoding = "utf8";
                  var loweredCase = false;
                  for (; ; ) {
                    switch (encoding) {
                      case "hex":
                        return hexWrite(this, string, offset, length);
                      case "utf8":
                      case "utf-8":
                        return utf8Write(this, string, offset, length);
                      case "ascii":
                        return asciiWrite(this, string, offset, length);
                      case "latin1":
                      case "binary":
                        return latin1Write(this, string, offset, length);
                      case "base64":
                        return base64Write(this, string, offset, length);
                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return ucs2Write(this, string, offset, length);
                      default:
                        if (loweredCase)
                          throw new TypeError("Unknown encoding: " + encoding);
                        encoding = ("" + encoding).toLowerCase();
                        loweredCase = true;
                    }
                  }
                };
                Buffer3.prototype.toJSON = function toJSON() {
                  return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                  };
                };
                function base64Slice(buf, start, end) {
                  if (start === 0 && end === buf.length) {
                    return base64.fromByteArray(buf);
                  } else {
                    return base64.fromByteArray(buf.slice(start, end));
                  }
                }
                function utf8Slice(buf, start, end) {
                  end = Math.min(buf.length, end);
                  var res = [];
                  var i2 = start;
                  while (i2 < end) {
                    var firstByte = buf[i2];
                    var codePoint = null;
                    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                    if (i2 + bytesPerSequence <= end) {
                      var secondByte, thirdByte, fourthByte, tempCodePoint;
                      switch (bytesPerSequence) {
                        case 1:
                          if (firstByte < 128) {
                            codePoint = firstByte;
                          }
                          break;
                        case 2:
                          secondByte = buf[i2 + 1];
                          if ((secondByte & 192) === 128) {
                            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                            if (tempCodePoint > 127) {
                              codePoint = tempCodePoint;
                            }
                          }
                          break;
                        case 3:
                          secondByte = buf[i2 + 1];
                          thirdByte = buf[i2 + 2];
                          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                              codePoint = tempCodePoint;
                            }
                          }
                          break;
                        case 4:
                          secondByte = buf[i2 + 1];
                          thirdByte = buf[i2 + 2];
                          fourthByte = buf[i2 + 3];
                          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                              codePoint = tempCodePoint;
                            }
                          }
                      }
                    }
                    if (codePoint === null) {
                      codePoint = 65533;
                      bytesPerSequence = 1;
                    } else if (codePoint > 65535) {
                      codePoint -= 65536;
                      res.push(codePoint >>> 10 & 1023 | 55296);
                      codePoint = 56320 | codePoint & 1023;
                    }
                    res.push(codePoint);
                    i2 += bytesPerSequence;
                  }
                  return decodeCodePointsArray(res);
                }
                var MAX_ARGUMENTS_LENGTH = 4096;
                function decodeCodePointsArray(codePoints) {
                  var len = codePoints.length;
                  if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints);
                  }
                  var res = "";
                  var i2 = 0;
                  while (i2 < len) {
                    res += String.fromCharCode.apply(
                      String,
                      codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
                    );
                  }
                  return res;
                }
                function asciiSlice(buf, start, end) {
                  var ret = "";
                  end = Math.min(buf.length, end);
                  for (var i2 = start; i2 < end; ++i2) {
                    ret += String.fromCharCode(buf[i2] & 127);
                  }
                  return ret;
                }
                function latin1Slice(buf, start, end) {
                  var ret = "";
                  end = Math.min(buf.length, end);
                  for (var i2 = start; i2 < end; ++i2) {
                    ret += String.fromCharCode(buf[i2]);
                  }
                  return ret;
                }
                function hexSlice(buf, start, end) {
                  var len = buf.length;
                  if (!start || start < 0)
                    start = 0;
                  if (!end || end < 0 || end > len)
                    end = len;
                  var out = "";
                  for (var i2 = start; i2 < end; ++i2) {
                    out += toHex(buf[i2]);
                  }
                  return out;
                }
                function utf16leSlice(buf, start, end) {
                  var bytes = buf.slice(start, end);
                  var res = "";
                  for (var i2 = 0; i2 < bytes.length; i2 += 2) {
                    res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
                  }
                  return res;
                }
                Buffer3.prototype.slice = function slice(start, end) {
                  var len = this.length;
                  start = ~~start;
                  end = end === void 0 ? len : ~~end;
                  if (start < 0) {
                    start += len;
                    if (start < 0)
                      start = 0;
                  } else if (start > len) {
                    start = len;
                  }
                  if (end < 0) {
                    end += len;
                    if (end < 0)
                      end = 0;
                  } else if (end > len) {
                    end = len;
                  }
                  if (end < start)
                    end = start;
                  var newBuf = this.subarray(start, end);
                  newBuf.__proto__ = Buffer3.prototype;
                  return newBuf;
                };
                function checkOffset(offset, ext, length) {
                  if (offset % 1 !== 0 || offset < 0)
                    throw new RangeError("offset is not uint");
                  if (offset + ext > length)
                    throw new RangeError("Trying to access beyond buffer length");
                }
                Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
                  offset = offset >>> 0;
                  byteLength2 = byteLength2 >>> 0;
                  if (!noAssert)
                    checkOffset(offset, byteLength2, this.length);
                  var val = this[offset];
                  var mul = 1;
                  var i2 = 0;
                  while (++i2 < byteLength2 && (mul *= 256)) {
                    val += this[offset + i2] * mul;
                  }
                  return val;
                };
                Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
                  offset = offset >>> 0;
                  byteLength2 = byteLength2 >>> 0;
                  if (!noAssert) {
                    checkOffset(offset, byteLength2, this.length);
                  }
                  var val = this[offset + --byteLength2];
                  var mul = 1;
                  while (byteLength2 > 0 && (mul *= 256)) {
                    val += this[offset + --byteLength2] * mul;
                  }
                  return val;
                };
                Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 1, this.length);
                  return this[offset];
                };
                Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 2, this.length);
                  return this[offset] | this[offset + 1] << 8;
                };
                Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 2, this.length);
                  return this[offset] << 8 | this[offset + 1];
                };
                Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 4, this.length);
                  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
                };
                Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 4, this.length);
                  return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                };
                Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
                  offset = offset >>> 0;
                  byteLength2 = byteLength2 >>> 0;
                  if (!noAssert)
                    checkOffset(offset, byteLength2, this.length);
                  var val = this[offset];
                  var mul = 1;
                  var i2 = 0;
                  while (++i2 < byteLength2 && (mul *= 256)) {
                    val += this[offset + i2] * mul;
                  }
                  mul *= 128;
                  if (val >= mul)
                    val -= Math.pow(2, 8 * byteLength2);
                  return val;
                };
                Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
                  offset = offset >>> 0;
                  byteLength2 = byteLength2 >>> 0;
                  if (!noAssert)
                    checkOffset(offset, byteLength2, this.length);
                  var i2 = byteLength2;
                  var mul = 1;
                  var val = this[offset + --i2];
                  while (i2 > 0 && (mul *= 256)) {
                    val += this[offset + --i2] * mul;
                  }
                  mul *= 128;
                  if (val >= mul)
                    val -= Math.pow(2, 8 * byteLength2);
                  return val;
                };
                Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 1, this.length);
                  if (!(this[offset] & 128))
                    return this[offset];
                  return (255 - this[offset] + 1) * -1;
                };
                Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 2, this.length);
                  var val = this[offset] | this[offset + 1] << 8;
                  return val & 32768 ? val | 4294901760 : val;
                };
                Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 2, this.length);
                  var val = this[offset + 1] | this[offset] << 8;
                  return val & 32768 ? val | 4294901760 : val;
                };
                Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 4, this.length);
                  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                };
                Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 4, this.length);
                  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                };
                Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 4, this.length);
                  return ieee754.read(this, offset, true, 23, 4);
                };
                Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 4, this.length);
                  return ieee754.read(this, offset, false, 23, 4);
                };
                Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 8, this.length);
                  return ieee754.read(this, offset, true, 52, 8);
                };
                Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkOffset(offset, 8, this.length);
                  return ieee754.read(this, offset, false, 52, 8);
                };
                function checkInt(buf, value, offset, ext, max, min) {
                  if (!Buffer3.isBuffer(buf))
                    throw new TypeError('"buffer" argument must be a Buffer instance');
                  if (value > max || value < min)
                    throw new RangeError('"value" argument is out of bounds');
                  if (offset + ext > buf.length)
                    throw new RangeError("Index out of range");
                }
                Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  byteLength2 = byteLength2 >>> 0;
                  if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                    checkInt(this, value, offset, byteLength2, maxBytes, 0);
                  }
                  var mul = 1;
                  var i2 = 0;
                  this[offset] = value & 255;
                  while (++i2 < byteLength2 && (mul *= 256)) {
                    this[offset + i2] = value / mul & 255;
                  }
                  return offset + byteLength2;
                };
                Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  byteLength2 = byteLength2 >>> 0;
                  if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                    checkInt(this, value, offset, byteLength2, maxBytes, 0);
                  }
                  var i2 = byteLength2 - 1;
                  var mul = 1;
                  this[offset + i2] = value & 255;
                  while (--i2 >= 0 && (mul *= 256)) {
                    this[offset + i2] = value / mul & 255;
                  }
                  return offset + byteLength2;
                };
                Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 1, 255, 0);
                  this[offset] = value & 255;
                  return offset + 1;
                };
                Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 2, 65535, 0);
                  this[offset] = value & 255;
                  this[offset + 1] = value >>> 8;
                  return offset + 2;
                };
                Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 2, 65535, 0);
                  this[offset] = value >>> 8;
                  this[offset + 1] = value & 255;
                  return offset + 2;
                };
                Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 4, 4294967295, 0);
                  this[offset + 3] = value >>> 24;
                  this[offset + 2] = value >>> 16;
                  this[offset + 1] = value >>> 8;
                  this[offset] = value & 255;
                  return offset + 4;
                };
                Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 4, 4294967295, 0);
                  this[offset] = value >>> 24;
                  this[offset + 1] = value >>> 16;
                  this[offset + 2] = value >>> 8;
                  this[offset + 3] = value & 255;
                  return offset + 4;
                };
                Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength2 - 1);
                    checkInt(this, value, offset, byteLength2, limit - 1, -limit);
                  }
                  var i2 = 0;
                  var mul = 1;
                  var sub = 0;
                  this[offset] = value & 255;
                  while (++i2 < byteLength2 && (mul *= 256)) {
                    if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
                      sub = 1;
                    }
                    this[offset + i2] = (value / mul >> 0) - sub & 255;
                  }
                  return offset + byteLength2;
                };
                Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength2 - 1);
                    checkInt(this, value, offset, byteLength2, limit - 1, -limit);
                  }
                  var i2 = byteLength2 - 1;
                  var mul = 1;
                  var sub = 0;
                  this[offset + i2] = value & 255;
                  while (--i2 >= 0 && (mul *= 256)) {
                    if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
                      sub = 1;
                    }
                    this[offset + i2] = (value / mul >> 0) - sub & 255;
                  }
                  return offset + byteLength2;
                };
                Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 1, 127, -128);
                  if (value < 0)
                    value = 255 + value + 1;
                  this[offset] = value & 255;
                  return offset + 1;
                };
                Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 2, 32767, -32768);
                  this[offset] = value & 255;
                  this[offset + 1] = value >>> 8;
                  return offset + 2;
                };
                Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 2, 32767, -32768);
                  this[offset] = value >>> 8;
                  this[offset + 1] = value & 255;
                  return offset + 2;
                };
                Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 4, 2147483647, -2147483648);
                  this[offset] = value & 255;
                  this[offset + 1] = value >>> 8;
                  this[offset + 2] = value >>> 16;
                  this[offset + 3] = value >>> 24;
                  return offset + 4;
                };
                Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert)
                    checkInt(this, value, offset, 4, 2147483647, -2147483648);
                  if (value < 0)
                    value = 4294967295 + value + 1;
                  this[offset] = value >>> 24;
                  this[offset + 1] = value >>> 16;
                  this[offset + 2] = value >>> 8;
                  this[offset + 3] = value & 255;
                  return offset + 4;
                };
                function checkIEEE754(buf, value, offset, ext, max, min) {
                  if (offset + ext > buf.length)
                    throw new RangeError("Index out of range");
                  if (offset < 0)
                    throw new RangeError("Index out of range");
                }
                function writeFloat(buf, value, offset, littleEndian, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert) {
                    checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
                  }
                  ieee754.write(buf, value, offset, littleEndian, 23, 4);
                  return offset + 4;
                }
                Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                  return writeFloat(this, value, offset, true, noAssert);
                };
                Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                  return writeFloat(this, value, offset, false, noAssert);
                };
                function writeDouble(buf, value, offset, littleEndian, noAssert) {
                  value = +value;
                  offset = offset >>> 0;
                  if (!noAssert) {
                    checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
                  }
                  ieee754.write(buf, value, offset, littleEndian, 52, 8);
                  return offset + 8;
                }
                Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                  return writeDouble(this, value, offset, true, noAssert);
                };
                Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                  return writeDouble(this, value, offset, false, noAssert);
                };
                Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
                  if (!start)
                    start = 0;
                  if (!end && end !== 0)
                    end = this.length;
                  if (targetStart >= target.length)
                    targetStart = target.length;
                  if (!targetStart)
                    targetStart = 0;
                  if (end > 0 && end < start)
                    end = start;
                  if (end === start)
                    return 0;
                  if (target.length === 0 || this.length === 0)
                    return 0;
                  if (targetStart < 0) {
                    throw new RangeError("targetStart out of bounds");
                  }
                  if (start < 0 || start >= this.length)
                    throw new RangeError("sourceStart out of bounds");
                  if (end < 0)
                    throw new RangeError("sourceEnd out of bounds");
                  if (end > this.length)
                    end = this.length;
                  if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start;
                  }
                  var len = end - start;
                  var i2;
                  if (this === target && start < targetStart && targetStart < end) {
                    for (i2 = len - 1; i2 >= 0; --i2) {
                      target[i2 + targetStart] = this[i2 + start];
                    }
                  } else if (len < 1e3) {
                    for (i2 = 0; i2 < len; ++i2) {
                      target[i2 + targetStart] = this[i2 + start];
                    }
                  } else {
                    Uint8Array.prototype.set.call(
                      target,
                      this.subarray(start, start + len),
                      targetStart
                    );
                  }
                  return len;
                };
                Buffer3.prototype.fill = function fill(val, start, end, encoding) {
                  if (typeof val === "string") {
                    if (typeof start === "string") {
                      encoding = start;
                      start = 0;
                      end = this.length;
                    } else if (typeof end === "string") {
                      encoding = end;
                      end = this.length;
                    }
                    if (val.length === 1) {
                      var code = val.charCodeAt(0);
                      if (code < 256) {
                        val = code;
                      }
                    }
                    if (encoding !== void 0 && typeof encoding !== "string") {
                      throw new TypeError("encoding must be a string");
                    }
                    if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
                      throw new TypeError("Unknown encoding: " + encoding);
                    }
                  } else if (typeof val === "number") {
                    val = val & 255;
                  }
                  if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError("Out of range index");
                  }
                  if (end <= start) {
                    return this;
                  }
                  start = start >>> 0;
                  end = end === void 0 ? this.length : end >>> 0;
                  if (!val)
                    val = 0;
                  var i2;
                  if (typeof val === "number") {
                    for (i2 = start; i2 < end; ++i2) {
                      this[i2] = val;
                    }
                  } else {
                    var bytes = Buffer3.isBuffer(val) ? val : new Buffer3(val, encoding);
                    var len = bytes.length;
                    for (i2 = 0; i2 < end - start; ++i2) {
                      this[i2 + start] = bytes[i2 % len];
                    }
                  }
                  return this;
                };
                var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
                function base64clean(str) {
                  str = str.trim().replace(INVALID_BASE64_RE, "");
                  if (str.length < 2)
                    return "";
                  while (str.length % 4 !== 0) {
                    str = str + "=";
                  }
                  return str;
                }
                function toHex(n) {
                  if (n < 16)
                    return "0" + n.toString(16);
                  return n.toString(16);
                }
                function utf8ToBytes(string, units) {
                  units = units || Infinity;
                  var codePoint;
                  var length = string.length;
                  var leadSurrogate = null;
                  var bytes = [];
                  for (var i2 = 0; i2 < length; ++i2) {
                    codePoint = string.charCodeAt(i2);
                    if (codePoint > 55295 && codePoint < 57344) {
                      if (!leadSurrogate) {
                        if (codePoint > 56319) {
                          if ((units -= 3) > -1)
                            bytes.push(239, 191, 189);
                          continue;
                        } else if (i2 + 1 === length) {
                          if ((units -= 3) > -1)
                            bytes.push(239, 191, 189);
                          continue;
                        }
                        leadSurrogate = codePoint;
                        continue;
                      }
                      if (codePoint < 56320) {
                        if ((units -= 3) > -1)
                          bytes.push(239, 191, 189);
                        leadSurrogate = codePoint;
                        continue;
                      }
                      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                    } else if (leadSurrogate) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                    }
                    leadSurrogate = null;
                    if (codePoint < 128) {
                      if ((units -= 1) < 0)
                        break;
                      bytes.push(codePoint);
                    } else if (codePoint < 2048) {
                      if ((units -= 2) < 0)
                        break;
                      bytes.push(
                        codePoint >> 6 | 192,
                        codePoint & 63 | 128
                      );
                    } else if (codePoint < 65536) {
                      if ((units -= 3) < 0)
                        break;
                      bytes.push(
                        codePoint >> 12 | 224,
                        codePoint >> 6 & 63 | 128,
                        codePoint & 63 | 128
                      );
                    } else if (codePoint < 1114112) {
                      if ((units -= 4) < 0)
                        break;
                      bytes.push(
                        codePoint >> 18 | 240,
                        codePoint >> 12 & 63 | 128,
                        codePoint >> 6 & 63 | 128,
                        codePoint & 63 | 128
                      );
                    } else {
                      throw new Error("Invalid code point");
                    }
                  }
                  return bytes;
                }
                function asciiToBytes(str) {
                  var byteArray = [];
                  for (var i2 = 0; i2 < str.length; ++i2) {
                    byteArray.push(str.charCodeAt(i2) & 255);
                  }
                  return byteArray;
                }
                function utf16leToBytes(str, units) {
                  var c, hi, lo;
                  var byteArray = [];
                  for (var i2 = 0; i2 < str.length; ++i2) {
                    if ((units -= 2) < 0)
                      break;
                    c = str.charCodeAt(i2);
                    hi = c >> 8;
                    lo = c % 256;
                    byteArray.push(lo);
                    byteArray.push(hi);
                  }
                  return byteArray;
                }
                function base64ToBytes(str) {
                  return base64.toByteArray(base64clean(str));
                }
                function blitBuffer(src, dst, offset, length) {
                  for (var i2 = 0; i2 < length; ++i2) {
                    if (i2 + offset >= dst.length || i2 >= src.length)
                      break;
                    dst[i2 + offset] = src[i2];
                  }
                  return i2;
                }
                function isArrayBuffer(obj) {
                  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === "ArrayBuffer" && typeof obj.byteLength === "number";
                }
                function isArrayBufferView(obj) {
                  return typeof ArrayBuffer.isView === "function" && ArrayBuffer.isView(obj);
                }
                function numberIsNaN(obj) {
                  return obj !== obj;
                }
              }).call(exports2, __webpack_require__(1));
            },
            /* 3 */
            /***/
            function(module2, exports2) {
              "use strict";
              exports2.byteLength = byteLength;
              exports2.toByteArray = toByteArray;
              exports2.fromByteArray = fromByteArray;
              var lookup = [];
              var revLookup = [];
              var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
              var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              for (var i2 = 0, len = code.length; i2 < len; ++i2) {
                lookup[i2] = code[i2];
                revLookup[code.charCodeAt(i2)] = i2;
              }
              revLookup["-".charCodeAt(0)] = 62;
              revLookup["_".charCodeAt(0)] = 63;
              function placeHoldersCount(b64) {
                var len2 = b64.length;
                if (len2 % 4 > 0) {
                  throw new Error("Invalid string. Length must be a multiple of 4");
                }
                return b64[len2 - 2] === "=" ? 2 : b64[len2 - 1] === "=" ? 1 : 0;
              }
              function byteLength(b64) {
                return b64.length * 3 / 4 - placeHoldersCount(b64);
              }
              function toByteArray(b64) {
                var i3, j, l, tmp, placeHolders, arr;
                var len2 = b64.length;
                placeHolders = placeHoldersCount(b64);
                arr = new Arr(len2 * 3 / 4 - placeHolders);
                l = placeHolders > 0 ? len2 - 4 : len2;
                var L2 = 0;
                for (i3 = 0, j = 0; i3 < l; i3 += 4, j += 3) {
                  tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
                  arr[L2++] = tmp >> 16 & 255;
                  arr[L2++] = tmp >> 8 & 255;
                  arr[L2++] = tmp & 255;
                }
                if (placeHolders === 2) {
                  tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
                  arr[L2++] = tmp & 255;
                } else if (placeHolders === 1) {
                  tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
                  arr[L2++] = tmp >> 8 & 255;
                  arr[L2++] = tmp & 255;
                }
                return arr;
              }
              function tripletToBase64(num) {
                return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
              }
              function encodeChunk(uint8, start, end) {
                var tmp;
                var output = [];
                for (var i3 = start; i3 < end; i3 += 3) {
                  tmp = (uint8[i3] << 16) + (uint8[i3 + 1] << 8) + uint8[i3 + 2];
                  output.push(tripletToBase64(tmp));
                }
                return output.join("");
              }
              function fromByteArray(uint8) {
                var tmp;
                var len2 = uint8.length;
                var extraBytes = len2 % 3;
                var output = "";
                var parts = [];
                var maxChunkLength = 16383;
                for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
                  parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
                }
                if (extraBytes === 1) {
                  tmp = uint8[len2 - 1];
                  output += lookup[tmp >> 2];
                  output += lookup[tmp << 4 & 63];
                  output += "==";
                } else if (extraBytes === 2) {
                  tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
                  output += lookup[tmp >> 10];
                  output += lookup[tmp >> 4 & 63];
                  output += lookup[tmp << 2 & 63];
                  output += "=";
                }
                parts.push(output);
                return parts.join("");
              }
            },
            /* 4 */
            /***/
            function(module2, exports2) {
              exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
                var e, m2;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var nBits = -7;
                var i2 = isLE ? nBytes - 1 : 0;
                var d = isLE ? -1 : 1;
                var s = buffer[offset + i2];
                i2 += d;
                e = s & (1 << -nBits) - 1;
                s >>= -nBits;
                nBits += eLen;
                for (; nBits > 0; e = e * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
                }
                m2 = e & (1 << -nBits) - 1;
                e >>= -nBits;
                nBits += mLen;
                for (; nBits > 0; m2 = m2 * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
                }
                if (e === 0) {
                  e = 1 - eBias;
                } else if (e === eMax) {
                  return m2 ? NaN : (s ? -1 : 1) * Infinity;
                } else {
                  m2 = m2 + Math.pow(2, mLen);
                  e = e - eBias;
                }
                return (s ? -1 : 1) * m2 * Math.pow(2, e - mLen);
              };
              exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
                var e, m2, c;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                var i2 = isLE ? 0 : nBytes - 1;
                var d = isLE ? 1 : -1;
                var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                value = Math.abs(value);
                if (isNaN(value) || value === Infinity) {
                  m2 = isNaN(value) ? 1 : 0;
                  e = eMax;
                } else {
                  e = Math.floor(Math.log(value) / Math.LN2);
                  if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                  }
                  if (e + eBias >= 1) {
                    value += rt / c;
                  } else {
                    value += rt * Math.pow(2, 1 - eBias);
                  }
                  if (value * c >= 2) {
                    e++;
                    c /= 2;
                  }
                  if (e + eBias >= eMax) {
                    m2 = 0;
                    e = eMax;
                  } else if (e + eBias >= 1) {
                    m2 = (value * c - 1) * Math.pow(2, mLen);
                    e = e + eBias;
                  } else {
                    m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0;
                  }
                }
                for (; mLen >= 8; buffer[offset + i2] = m2 & 255, i2 += d, m2 /= 256, mLen -= 8) {
                }
                e = e << mLen | m2;
                eLen += mLen;
                for (; eLen > 0; buffer[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
                }
                buffer[offset + i2 - d] |= s * 128;
              };
            },
            /* 5 */
            /***/
            function(module2, exports2) {
              module2.exports = function(module3) {
                if (!module3.webpackPolyfill) {
                  module3.deprecate = function() {
                  };
                  module3.paths = [];
                  module3.children = [];
                  module3.webpackPolyfill = 1;
                }
                return module3;
              };
            },
            /* 6 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var Process = __webpack_require__(7);
              var process = new Process(), processProxy = {};
              function defineKey(key2) {
                if (processProxy[key2]) {
                  return;
                }
                if (typeof process[key2] === "function") {
                  processProxy[key2] = function() {
                    return process[key2].apply(process, arguments);
                  };
                } else {
                  processProxy[key2] = process[key2];
                }
              }
              for (var key in process) {
                defineKey(key);
              }
              processProxy.initializeTTYs = function() {
                if (process.stdin === null) {
                  process.initializeTTYs();
                  processProxy.stdin = process.stdin;
                  processProxy.stdout = process.stdout;
                  processProxy.stderr = process.stderr;
                }
              };
              process.nextTick(function() {
                processProxy.initializeTTYs();
              });
              module2.exports = processProxy;
            },
            /* 7 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(__dirname) {
                "use strict";
                var __extends = this && this.__extends || function(d, b3) {
                  for (var p in b3)
                    if (b3.hasOwnProperty(p))
                      d[p] = b3[p];
                  function __() {
                    this.constructor = d;
                  }
                  d.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
                };
                var events = __webpack_require__(8);
                var path = null;
                var Item = function() {
                  function Item2(fun, array) {
                    this.fun = fun;
                    this.array = array;
                  }
                  Item2.prototype.run = function() {
                    this.fun.apply(null, this.array);
                  };
                  return Item2;
                }();
                var NextTickQueue = function() {
                  function NextTickQueue2() {
                    this._queue = [];
                    this._draining = false;
                    this._currentQueue = null;
                    this._queueIndex = -1;
                  }
                  NextTickQueue2.prototype.push = function(item) {
                    var _this = this;
                    if (this._queue.push(item) === 1 && !this._draining) {
                      setTimeout(function() {
                        return _this._drainQueue();
                      }, 0);
                    }
                  };
                  NextTickQueue2.prototype._cleanUpNextTick = function() {
                    this._draining = false;
                    if (this._currentQueue && this._currentQueue.length) {
                      this._queue = this._currentQueue.concat(this._queue);
                    } else {
                      this._queueIndex = -1;
                    }
                    if (this._queue.length) {
                      this._drainQueue();
                    }
                  };
                  NextTickQueue2.prototype._drainQueue = function() {
                    var _this = this;
                    if (this._draining) {
                      return;
                    }
                    var timeout = setTimeout(function() {
                      return _this._cleanUpNextTick();
                    });
                    this._draining = true;
                    var len = this._queue.length;
                    while (len) {
                      this._currentQueue = this._queue;
                      this._queue = [];
                      while (++this._queueIndex < len) {
                        if (this._currentQueue) {
                          this._currentQueue[this._queueIndex].run();
                        }
                      }
                      this._queueIndex = -1;
                      len = this._queue.length;
                    }
                    this._currentQueue = null;
                    this._draining = false;
                    clearTimeout(timeout);
                  };
                  return NextTickQueue2;
                }();
                var Process = function(_super) {
                  __extends(Process2, _super);
                  function Process2() {
                    _super.apply(this, arguments);
                    this.startTime = Date.now();
                    this._cwd = "/";
                    this.platform = "browser";
                    this.argv = [];
                    this.execArgv = [];
                    this.stdout = null;
                    this.stderr = null;
                    this.stdin = null;
                    this.domain = null;
                    this._queue = new NextTickQueue();
                    this.execPath = __dirname;
                    this.env = {};
                    this.exitCode = 0;
                    this._gid = 1;
                    this._uid = 1;
                    this.version = "v5.0";
                    this.versions = {
                      http_parser: "0.0",
                      node: "5.0",
                      v8: "0.0",
                      uv: "0.0",
                      zlib: "0.0",
                      ares: "0.0",
                      icu: "0.0",
                      modules: "0",
                      openssl: "0.0"
                    };
                    this.config = {
                      target_defaults: {
                        cflags: [],
                        default_configuration: "Release",
                        defines: [],
                        include_dirs: [],
                        libraries: []
                      },
                      variables: {
                        clang: 0,
                        host_arch: "x32",
                        node_install_npm: false,
                        node_install_waf: false,
                        node_prefix: "",
                        node_shared_cares: false,
                        node_shared_http_parser: false,
                        node_shared_libuv: false,
                        node_shared_zlib: false,
                        node_shared_v8: false,
                        node_use_dtrace: false,
                        node_use_etw: false,
                        node_use_openssl: false,
                        node_shared_openssl: false,
                        strict_aliasing: false,
                        target_arch: "x32",
                        v8_use_snapshot: false,
                        v8_no_strict_aliasing: 0,
                        visibility: ""
                      }
                    };
                    this.pid = Math.random() * 1e3 | 0;
                    this.title = "node";
                    this.arch = "x32";
                    this._mask = 18;
                    this.connected = void 0;
                  }
                  Process2.prototype.chdir = function(dir) {
                    if (path === null) {
                      path = __webpack_require__(9);
                    }
                    this._cwd = path.resolve(dir);
                  };
                  Process2.prototype.cwd = function() {
                    return this._cwd;
                  };
                  Process2.prototype.uptime = function() {
                    return (Date.now() - this.startTime) / 1e3 | 0;
                  };
                  Process2.prototype.nextTick = function(fun) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                      args[_i - 1] = arguments[_i];
                    }
                    this._queue.push(new Item(fun, args));
                  };
                  Process2.prototype.abort = function() {
                    this.emit("abort");
                  };
                  Process2.prototype.exit = function(code) {
                    this.exitCode = code;
                    this.emit("exit", [code]);
                  };
                  Process2.prototype.getgid = function() {
                    return this._gid;
                  };
                  Process2.prototype.setgid = function(gid) {
                    if (typeof gid === "number") {
                      this._gid = gid;
                    } else {
                      this._gid = 1;
                    }
                  };
                  Process2.prototype.getuid = function() {
                    return this._uid;
                  };
                  Process2.prototype.setuid = function(uid) {
                    if (typeof uid === "number") {
                      this._uid = uid;
                    } else {
                      this._uid = 1;
                    }
                  };
                  Process2.prototype.kill = function(pid, signal) {
                    this.emit("kill", [pid, signal]);
                  };
                  Process2.prototype.memoryUsage = function() {
                    return { rss: 0, heapTotal: 0, heapUsed: 0 };
                  };
                  Process2.prototype.umask = function(mask) {
                    if (mask === void 0) {
                      mask = this._mask;
                    }
                    var oldMask = this._mask;
                    this._mask = mask;
                    this.emit("umask", [mask]);
                    return oldMask;
                  };
                  Process2.prototype.hrtime = function() {
                    var timeinfo;
                    if (typeof performance !== "undefined") {
                      timeinfo = performance.now();
                    } else if (Date["now"]) {
                      timeinfo = Date.now();
                    } else {
                      timeinfo = (/* @__PURE__ */ new Date()).getTime();
                    }
                    var secs = timeinfo / 1e3 | 0;
                    timeinfo -= secs * 1e3;
                    timeinfo = timeinfo * 1e6 | 0;
                    return [secs, timeinfo];
                  };
                  Process2.prototype.initializeTTYs = function() {
                    if (this.stdout === null) {
                      var TTY = __webpack_require__(10);
                      this.stdout = new TTY();
                      this.stderr = new TTY();
                      this.stdin = new TTY();
                    }
                  };
                  Process2.prototype.disconnect = function() {
                  };
                  return Process2;
                }(events.EventEmitter);
                module2.exports = Process;
              }).call(exports2, "/");
            },
            /* 8 */
            /***/
            function(module2, exports2) {
              function EventEmitter() {
                this._events = this._events || {};
                this._maxListeners = this._maxListeners || void 0;
              }
              module2.exports = EventEmitter;
              EventEmitter.EventEmitter = EventEmitter;
              EventEmitter.prototype._events = void 0;
              EventEmitter.prototype._maxListeners = void 0;
              EventEmitter.defaultMaxListeners = 10;
              EventEmitter.prototype.setMaxListeners = function(n) {
                if (!isNumber(n) || n < 0 || isNaN(n))
                  throw TypeError("n must be a positive number");
                this._maxListeners = n;
                return this;
              };
              EventEmitter.prototype.emit = function(type) {
                var er, handler, len, args, i2, listeners;
                if (!this._events)
                  this._events = {};
                if (type === "error") {
                  if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                    er = arguments[1];
                    if (er instanceof Error) {
                      throw er;
                    } else {
                      var err2 = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                      err2.context = er;
                      throw err2;
                    }
                  }
                }
                handler = this._events[type];
                if (isUndefined(handler))
                  return false;
                if (isFunction(handler)) {
                  switch (arguments.length) {
                    case 1:
                      handler.call(this);
                      break;
                    case 2:
                      handler.call(this, arguments[1]);
                      break;
                    case 3:
                      handler.call(this, arguments[1], arguments[2]);
                      break;
                    default:
                      args = Array.prototype.slice.call(arguments, 1);
                      handler.apply(this, args);
                  }
                } else if (isObject(handler)) {
                  args = Array.prototype.slice.call(arguments, 1);
                  listeners = handler.slice();
                  len = listeners.length;
                  for (i2 = 0; i2 < len; i2++)
                    listeners[i2].apply(this, args);
                }
                return true;
              };
              EventEmitter.prototype.addListener = function(type, listener) {
                var m2;
                if (!isFunction(listener))
                  throw TypeError("listener must be a function");
                if (!this._events)
                  this._events = {};
                if (this._events.newListener)
                  this.emit(
                    "newListener",
                    type,
                    isFunction(listener.listener) ? listener.listener : listener
                  );
                if (!this._events[type])
                  this._events[type] = listener;
                else if (isObject(this._events[type]))
                  this._events[type].push(listener);
                else
                  this._events[type] = [this._events[type], listener];
                if (isObject(this._events[type]) && !this._events[type].warned) {
                  if (!isUndefined(this._maxListeners)) {
                    m2 = this._maxListeners;
                  } else {
                    m2 = EventEmitter.defaultMaxListeners;
                  }
                  if (m2 && m2 > 0 && this._events[type].length > m2) {
                    this._events[type].warned = true;
                    console.error(
                      "(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",
                      this._events[type].length
                    );
                    if (typeof console.trace === "function") {
                      console.trace();
                    }
                  }
                }
                return this;
              };
              EventEmitter.prototype.on = EventEmitter.prototype.addListener;
              EventEmitter.prototype.once = function(type, listener) {
                if (!isFunction(listener))
                  throw TypeError("listener must be a function");
                var fired = false;
                function g3() {
                  this.removeListener(type, g3);
                  if (!fired) {
                    fired = true;
                    listener.apply(this, arguments);
                  }
                }
                g3.listener = listener;
                this.on(type, g3);
                return this;
              };
              EventEmitter.prototype.removeListener = function(type, listener) {
                var list, position, length, i2;
                if (!isFunction(listener))
                  throw TypeError("listener must be a function");
                if (!this._events || !this._events[type])
                  return this;
                list = this._events[type];
                length = list.length;
                position = -1;
                if (list === listener || isFunction(list.listener) && list.listener === listener) {
                  delete this._events[type];
                  if (this._events.removeListener)
                    this.emit("removeListener", type, listener);
                } else if (isObject(list)) {
                  for (i2 = length; i2-- > 0; ) {
                    if (list[i2] === listener || list[i2].listener && list[i2].listener === listener) {
                      position = i2;
                      break;
                    }
                  }
                  if (position < 0)
                    return this;
                  if (list.length === 1) {
                    list.length = 0;
                    delete this._events[type];
                  } else {
                    list.splice(position, 1);
                  }
                  if (this._events.removeListener)
                    this.emit("removeListener", type, listener);
                }
                return this;
              };
              EventEmitter.prototype.removeAllListeners = function(type) {
                var key, listeners;
                if (!this._events)
                  return this;
                if (!this._events.removeListener) {
                  if (arguments.length === 0)
                    this._events = {};
                  else if (this._events[type])
                    delete this._events[type];
                  return this;
                }
                if (arguments.length === 0) {
                  for (key in this._events) {
                    if (key === "removeListener")
                      continue;
                    this.removeAllListeners(key);
                  }
                  this.removeAllListeners("removeListener");
                  this._events = {};
                  return this;
                }
                listeners = this._events[type];
                if (isFunction(listeners)) {
                  this.removeListener(type, listeners);
                } else if (listeners) {
                  while (listeners.length)
                    this.removeListener(type, listeners[listeners.length - 1]);
                }
                delete this._events[type];
                return this;
              };
              EventEmitter.prototype.listeners = function(type) {
                var ret;
                if (!this._events || !this._events[type])
                  ret = [];
                else if (isFunction(this._events[type]))
                  ret = [this._events[type]];
                else
                  ret = this._events[type].slice();
                return ret;
              };
              EventEmitter.prototype.listenerCount = function(type) {
                if (this._events) {
                  var evlistener = this._events[type];
                  if (isFunction(evlistener))
                    return 1;
                  else if (evlistener)
                    return evlistener.length;
                }
                return 0;
              };
              EventEmitter.listenerCount = function(emitter, type) {
                return emitter.listenerCount(type);
              };
              function isFunction(arg) {
                return typeof arg === "function";
              }
              function isNumber(arg) {
                return typeof arg === "number";
              }
              function isObject(arg) {
                return typeof arg === "object" && arg !== null;
              }
              function isUndefined(arg) {
                return arg === void 0;
              }
            },
            /* 9 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(process) {
                "use strict";
                var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                function posixSplitPath(filename) {
                  var out = splitPathRe.exec(filename);
                  out.shift();
                  return out;
                }
                var path = function() {
                  function path2() {
                  }
                  path2.normalize = function(p) {
                    if (p === "") {
                      p = ".";
                    }
                    var absolute = p.charAt(0) === path2.sep;
                    p = path2._removeDuplicateSeps(p);
                    var components = p.split(path2.sep);
                    var goodComponents = [];
                    for (var idx = 0; idx < components.length; idx++) {
                      var c = components[idx];
                      if (c === ".") {
                        continue;
                      } else if (c === ".." && (absolute || !absolute && goodComponents.length > 0 && goodComponents[0] !== "..")) {
                        goodComponents.pop();
                      } else {
                        goodComponents.push(c);
                      }
                    }
                    if (!absolute && goodComponents.length < 2) {
                      switch (goodComponents.length) {
                        case 1:
                          if (goodComponents[0] === "") {
                            goodComponents.unshift(".");
                          }
                          break;
                        default:
                          goodComponents.push(".");
                      }
                    }
                    p = goodComponents.join(path2.sep);
                    if (absolute && p.charAt(0) !== path2.sep) {
                      p = path2.sep + p;
                    }
                    return p;
                  };
                  path2.join = function() {
                    var paths = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                      paths[_i - 0] = arguments[_i];
                    }
                    var processed = [];
                    for (var i2 = 0; i2 < paths.length; i2++) {
                      var segment = paths[i2];
                      if (typeof segment !== "string") {
                        throw new TypeError("Invalid argument type to path.join: " + typeof segment);
                      } else if (segment !== "") {
                        processed.push(segment);
                      }
                    }
                    return path2.normalize(processed.join(path2.sep));
                  };
                  path2.resolve = function() {
                    var paths = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                      paths[_i - 0] = arguments[_i];
                    }
                    var processed = [];
                    for (var i2 = 0; i2 < paths.length; i2++) {
                      var p = paths[i2];
                      if (typeof p !== "string") {
                        throw new TypeError("Invalid argument type to path.join: " + typeof p);
                      } else if (p !== "") {
                        if (p.charAt(0) === path2.sep) {
                          processed = [];
                        }
                        processed.push(p);
                      }
                    }
                    var resolved = path2.normalize(processed.join(path2.sep));
                    if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === path2.sep) {
                      return resolved.substr(0, resolved.length - 1);
                    }
                    if (resolved.charAt(0) !== path2.sep) {
                      if (resolved.charAt(0) === "." && (resolved.length === 1 || resolved.charAt(1) === path2.sep)) {
                        resolved = resolved.length === 1 ? "" : resolved.substr(2);
                      }
                      var cwd = process.cwd();
                      if (resolved !== "") {
                        resolved = this.normalize(cwd + (cwd !== "/" ? path2.sep : "") + resolved);
                      } else {
                        resolved = cwd;
                      }
                    }
                    return resolved;
                  };
                  path2.relative = function(from, to) {
                    var i2;
                    from = path2.resolve(from);
                    to = path2.resolve(to);
                    var fromSegs = from.split(path2.sep);
                    var toSegs = to.split(path2.sep);
                    toSegs.shift();
                    fromSegs.shift();
                    var upCount = 0;
                    var downSegs = [];
                    for (i2 = 0; i2 < fromSegs.length; i2++) {
                      var seg = fromSegs[i2];
                      if (seg === toSegs[i2]) {
                        continue;
                      }
                      upCount = fromSegs.length - i2;
                      break;
                    }
                    downSegs = toSegs.slice(i2);
                    if (fromSegs.length === 1 && fromSegs[0] === "") {
                      upCount = 0;
                    }
                    if (upCount > fromSegs.length) {
                      upCount = fromSegs.length;
                    }
                    var rv = "";
                    for (i2 = 0; i2 < upCount; i2++) {
                      rv += "../";
                    }
                    rv += downSegs.join(path2.sep);
                    if (rv.length > 1 && rv.charAt(rv.length - 1) === path2.sep) {
                      rv = rv.substr(0, rv.length - 1);
                    }
                    return rv;
                  };
                  path2.dirname = function(p) {
                    p = path2._removeDuplicateSeps(p);
                    var absolute = p.charAt(0) === path2.sep;
                    var sections = p.split(path2.sep);
                    if (sections.pop() === "" && sections.length > 0) {
                      sections.pop();
                    }
                    if (sections.length > 1 || sections.length === 1 && !absolute) {
                      return sections.join(path2.sep);
                    } else if (absolute) {
                      return path2.sep;
                    } else {
                      return ".";
                    }
                  };
                  path2.basename = function(p, ext) {
                    if (ext === void 0) {
                      ext = "";
                    }
                    if (p === "") {
                      return p;
                    }
                    p = path2.normalize(p);
                    var sections = p.split(path2.sep);
                    var lastPart = sections[sections.length - 1];
                    if (lastPart === "" && sections.length > 1) {
                      return sections[sections.length - 2];
                    }
                    if (ext.length > 0) {
                      var lastPartExt = lastPart.substr(lastPart.length - ext.length);
                      if (lastPartExt === ext) {
                        return lastPart.substr(0, lastPart.length - ext.length);
                      }
                    }
                    return lastPart;
                  };
                  path2.extname = function(p) {
                    p = path2.normalize(p);
                    var sections = p.split(path2.sep);
                    p = sections.pop();
                    if (p === "" && sections.length > 0) {
                      p = sections.pop();
                    }
                    if (p === "..") {
                      return "";
                    }
                    var i2 = p.lastIndexOf(".");
                    if (i2 === -1 || i2 === 0) {
                      return "";
                    }
                    return p.substr(i2);
                  };
                  path2.isAbsolute = function(p) {
                    return p.length > 0 && p.charAt(0) === path2.sep;
                  };
                  path2._makeLong = function(p) {
                    return p;
                  };
                  path2.parse = function(p) {
                    var allParts = posixSplitPath(p);
                    return {
                      root: allParts[0],
                      dir: allParts[0] + allParts[1].slice(0, -1),
                      base: allParts[2],
                      ext: allParts[3],
                      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
                    };
                  };
                  path2.format = function(pathObject) {
                    if (pathObject === null || typeof pathObject !== "object") {
                      throw new TypeError("Parameter 'pathObject' must be an object, not " + typeof pathObject);
                    }
                    var root = pathObject.root || "";
                    if (typeof root !== "string") {
                      throw new TypeError("'pathObject.root' must be a string or undefined, not " + typeof pathObject.root);
                    }
                    var dir = pathObject.dir ? pathObject.dir + path2.sep : "";
                    var base = pathObject.base || "";
                    return dir + base;
                  };
                  path2._removeDuplicateSeps = function(p) {
                    p = p.replace(this._replaceRegex, this.sep);
                    return p;
                  };
                  path2.sep = "/";
                  path2._replaceRegex = new RegExp("//+", "g");
                  path2.delimiter = ":";
                  path2.posix = path2;
                  path2.win32 = path2;
                  return path2;
                }();
                var _2 = path;
                module2.exports = path;
              }).call(exports2, __webpack_require__(6));
            },
            /* 10 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(Buffer3) {
                "use strict";
                var __extends = this && this.__extends || function(d, b3) {
                  for (var p in b3)
                    if (b3.hasOwnProperty(p))
                      d[p] = b3[p];
                  function __() {
                    this.constructor = d;
                  }
                  d.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
                };
                var stream = __webpack_require__(11);
                var TTY = function(_super) {
                  __extends(TTY2, _super);
                  function TTY2() {
                    _super.call(this);
                    this.isRaw = false;
                    this.columns = 80;
                    this.rows = 120;
                    this.isTTY = true;
                    this._bufferedWrites = [];
                    this._waitingForWrites = false;
                  }
                  TTY2.prototype.setRawMode = function(mode) {
                    if (this.isRaw !== mode) {
                      this.isRaw = mode;
                      this.emit("modeChange");
                    }
                  };
                  TTY2.prototype.changeColumns = function(columns) {
                    if (columns !== this.columns) {
                      this.columns = columns;
                      this.emit("resize");
                    }
                  };
                  TTY2.prototype.changeRows = function(rows) {
                    if (rows !== this.rows) {
                      this.rows = rows;
                      this.emit("resize");
                    }
                  };
                  TTY2.isatty = function(fd) {
                    return fd && fd instanceof TTY2;
                  };
                  TTY2.prototype._write = function(chunk, encoding, cb) {
                    var error;
                    try {
                      var data;
                      if (typeof chunk === "string") {
                        data = new Buffer3(chunk, encoding);
                      } else {
                        data = chunk;
                      }
                      this._bufferedWrites.push(data);
                      if (this._waitingForWrites) {
                        this._read(1024);
                      }
                    } catch (e) {
                      error = e;
                    } finally {
                      cb(error);
                    }
                  };
                  TTY2.prototype._read = function(size) {
                    if (this._bufferedWrites.length === 0) {
                      this._waitingForWrites = true;
                    } else {
                      while (this._bufferedWrites.length > 0) {
                        this._waitingForWrites = this.push(this._bufferedWrites.shift());
                        if (!this._waitingForWrites) {
                          break;
                        }
                      }
                    }
                  };
                  return TTY2;
                }(stream.Duplex);
                module2.exports = TTY;
              }).call(exports2, __webpack_require__(1));
            },
            /* 11 */
            /***/
            function(module2, exports2, __webpack_require__) {
              module2.exports = Stream;
              var EE = __webpack_require__(8).EventEmitter;
              var inherits = __webpack_require__(12);
              inherits(Stream, EE);
              Stream.Readable = __webpack_require__(13);
              Stream.Writable = __webpack_require__(27);
              Stream.Duplex = __webpack_require__(28);
              Stream.Transform = __webpack_require__(29);
              Stream.PassThrough = __webpack_require__(30);
              Stream.Stream = Stream;
              function Stream() {
                EE.call(this);
              }
              Stream.prototype.pipe = function(dest, options2) {
                var source = this;
                function ondata(chunk) {
                  if (dest.writable) {
                    if (false === dest.write(chunk) && source.pause) {
                      source.pause();
                    }
                  }
                }
                source.on("data", ondata);
                function ondrain() {
                  if (source.readable && source.resume) {
                    source.resume();
                  }
                }
                dest.on("drain", ondrain);
                if (!dest._isStdio && (!options2 || options2.end !== false)) {
                  source.on("end", onend);
                  source.on("close", onclose);
                }
                var didOnEnd = false;
                function onend() {
                  if (didOnEnd)
                    return;
                  didOnEnd = true;
                  dest.end();
                }
                function onclose() {
                  if (didOnEnd)
                    return;
                  didOnEnd = true;
                  if (typeof dest.destroy === "function")
                    dest.destroy();
                }
                function onerror(er) {
                  cleanup();
                  if (EE.listenerCount(this, "error") === 0) {
                    throw er;
                  }
                }
                source.on("error", onerror);
                dest.on("error", onerror);
                function cleanup() {
                  source.removeListener("data", ondata);
                  dest.removeListener("drain", ondrain);
                  source.removeListener("end", onend);
                  source.removeListener("close", onclose);
                  source.removeListener("error", onerror);
                  dest.removeListener("error", onerror);
                  source.removeListener("end", cleanup);
                  source.removeListener("close", cleanup);
                  dest.removeListener("close", cleanup);
                }
                source.on("end", cleanup);
                source.on("close", cleanup);
                dest.on("close", cleanup);
                dest.emit("pipe", source);
                return dest;
              };
            },
            /* 12 */
            /***/
            function(module2, exports2) {
              if (typeof Object.create === "function") {
                module2.exports = function inherits(ctor, superCtor) {
                  ctor.super_ = superCtor;
                  ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                      value: ctor,
                      enumerable: false,
                      writable: true,
                      configurable: true
                    }
                  });
                };
              } else {
                module2.exports = function inherits(ctor, superCtor) {
                  ctor.super_ = superCtor;
                  var TempCtor = function() {
                  };
                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                };
              }
            },
            /* 13 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(process) {
                var Stream = function() {
                  try {
                    return __webpack_require__(11);
                  } catch (_2) {
                  }
                }();
                exports2 = module2.exports = __webpack_require__(14);
                exports2.Stream = Stream || exports2;
                exports2.Readable = exports2;
                exports2.Writable = __webpack_require__(22);
                exports2.Duplex = __webpack_require__(21);
                exports2.Transform = __webpack_require__(25);
                exports2.PassThrough = __webpack_require__(26);
                if (!process.browser && process.env.READABLE_STREAM === "disable" && Stream) {
                  module2.exports = Stream;
                }
              }).call(exports2, __webpack_require__(6));
            },
            /* 14 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(process) {
                "use strict";
                module2.exports = Readable;
                var processNextTick = __webpack_require__(15);
                var isArray = __webpack_require__(16);
                var Duplex;
                Readable.ReadableState = ReadableState;
                var EE = __webpack_require__(8).EventEmitter;
                var EElistenerCount = function(emitter, type) {
                  return emitter.listeners(type).length;
                };
                var Stream;
                (function() {
                  try {
                    Stream = __webpack_require__(11);
                  } catch (_2) {
                  } finally {
                    if (!Stream)
                      Stream = __webpack_require__(8).EventEmitter;
                  }
                })();
                var Buffer3 = __webpack_require__(2).Buffer;
                var bufferShim = __webpack_require__(17);
                var util = __webpack_require__(18);
                util.inherits = __webpack_require__(12);
                var debugUtil = __webpack_require__(19);
                var debug = void 0;
                if (debugUtil && debugUtil.debuglog) {
                  debug = debugUtil.debuglog("stream");
                } else {
                  debug = function() {
                  };
                }
                var BufferList = __webpack_require__(20);
                var StringDecoder;
                util.inherits(Readable, Stream);
                function prependListener(emitter, event, fn) {
                  if (typeof emitter.prependListener === "function") {
                    return emitter.prependListener(event, fn);
                  } else {
                    if (!emitter._events || !emitter._events[event])
                      emitter.on(event, fn);
                    else if (isArray(emitter._events[event]))
                      emitter._events[event].unshift(fn);
                    else
                      emitter._events[event] = [fn, emitter._events[event]];
                  }
                }
                function ReadableState(options2, stream) {
                  Duplex = Duplex || __webpack_require__(21);
                  options2 = options2 || {};
                  this.objectMode = !!options2.objectMode;
                  if (stream instanceof Duplex)
                    this.objectMode = this.objectMode || !!options2.readableObjectMode;
                  var hwm = options2.highWaterMark;
                  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
                  this.highWaterMark = ~~this.highWaterMark;
                  this.buffer = new BufferList();
                  this.length = 0;
                  this.pipes = null;
                  this.pipesCount = 0;
                  this.flowing = null;
                  this.ended = false;
                  this.endEmitted = false;
                  this.reading = false;
                  this.sync = true;
                  this.needReadable = false;
                  this.emittedReadable = false;
                  this.readableListening = false;
                  this.resumeScheduled = false;
                  this.defaultEncoding = options2.defaultEncoding || "utf8";
                  this.ranOut = false;
                  this.awaitDrain = 0;
                  this.readingMore = false;
                  this.decoder = null;
                  this.encoding = null;
                  if (options2.encoding) {
                    if (!StringDecoder)
                      StringDecoder = __webpack_require__(24).StringDecoder;
                    this.decoder = new StringDecoder(options2.encoding);
                    this.encoding = options2.encoding;
                  }
                }
                function Readable(options2) {
                  Duplex = Duplex || __webpack_require__(21);
                  if (!(this instanceof Readable))
                    return new Readable(options2);
                  this._readableState = new ReadableState(options2, this);
                  this.readable = true;
                  if (options2 && typeof options2.read === "function")
                    this._read = options2.read;
                  Stream.call(this);
                }
                Readable.prototype.push = function(chunk, encoding) {
                  var state2 = this._readableState;
                  if (!state2.objectMode && typeof chunk === "string") {
                    encoding = encoding || state2.defaultEncoding;
                    if (encoding !== state2.encoding) {
                      chunk = bufferShim.from(chunk, encoding);
                      encoding = "";
                    }
                  }
                  return readableAddChunk(this, state2, chunk, encoding, false);
                };
                Readable.prototype.unshift = function(chunk) {
                  var state2 = this._readableState;
                  return readableAddChunk(this, state2, chunk, "", true);
                };
                Readable.prototype.isPaused = function() {
                  return this._readableState.flowing === false;
                };
                function readableAddChunk(stream, state2, chunk, encoding, addToFront) {
                  var er = chunkInvalid(state2, chunk);
                  if (er) {
                    stream.emit("error", er);
                  } else if (chunk === null) {
                    state2.reading = false;
                    onEofChunk(stream, state2);
                  } else if (state2.objectMode || chunk && chunk.length > 0) {
                    if (state2.ended && !addToFront) {
                      var e = new Error("stream.push() after EOF");
                      stream.emit("error", e);
                    } else if (state2.endEmitted && addToFront) {
                      var _e = new Error("stream.unshift() after end event");
                      stream.emit("error", _e);
                    } else {
                      var skipAdd;
                      if (state2.decoder && !addToFront && !encoding) {
                        chunk = state2.decoder.write(chunk);
                        skipAdd = !state2.objectMode && chunk.length === 0;
                      }
                      if (!addToFront)
                        state2.reading = false;
                      if (!skipAdd) {
                        if (state2.flowing && state2.length === 0 && !state2.sync) {
                          stream.emit("data", chunk);
                          stream.read(0);
                        } else {
                          state2.length += state2.objectMode ? 1 : chunk.length;
                          if (addToFront)
                            state2.buffer.unshift(chunk);
                          else
                            state2.buffer.push(chunk);
                          if (state2.needReadable)
                            emitReadable(stream);
                        }
                      }
                      maybeReadMore(stream, state2);
                    }
                  } else if (!addToFront) {
                    state2.reading = false;
                  }
                  return needMoreData(state2);
                }
                function needMoreData(state2) {
                  return !state2.ended && (state2.needReadable || state2.length < state2.highWaterMark || state2.length === 0);
                }
                Readable.prototype.setEncoding = function(enc) {
                  if (!StringDecoder)
                    StringDecoder = __webpack_require__(24).StringDecoder;
                  this._readableState.decoder = new StringDecoder(enc);
                  this._readableState.encoding = enc;
                  return this;
                };
                var MAX_HWM = 8388608;
                function computeNewHighWaterMark(n) {
                  if (n >= MAX_HWM) {
                    n = MAX_HWM;
                  } else {
                    n--;
                    n |= n >>> 1;
                    n |= n >>> 2;
                    n |= n >>> 4;
                    n |= n >>> 8;
                    n |= n >>> 16;
                    n++;
                  }
                  return n;
                }
                function howMuchToRead(n, state2) {
                  if (n <= 0 || state2.length === 0 && state2.ended)
                    return 0;
                  if (state2.objectMode)
                    return 1;
                  if (n !== n) {
                    if (state2.flowing && state2.length)
                      return state2.buffer.head.data.length;
                    else
                      return state2.length;
                  }
                  if (n > state2.highWaterMark)
                    state2.highWaterMark = computeNewHighWaterMark(n);
                  if (n <= state2.length)
                    return n;
                  if (!state2.ended) {
                    state2.needReadable = true;
                    return 0;
                  }
                  return state2.length;
                }
                Readable.prototype.read = function(n) {
                  debug("read", n);
                  n = parseInt(n, 10);
                  var state2 = this._readableState;
                  var nOrig = n;
                  if (n !== 0)
                    state2.emittedReadable = false;
                  if (n === 0 && state2.needReadable && (state2.length >= state2.highWaterMark || state2.ended)) {
                    debug("read: emitReadable", state2.length, state2.ended);
                    if (state2.length === 0 && state2.ended)
                      endReadable(this);
                    else
                      emitReadable(this);
                    return null;
                  }
                  n = howMuchToRead(n, state2);
                  if (n === 0 && state2.ended) {
                    if (state2.length === 0)
                      endReadable(this);
                    return null;
                  }
                  var doRead = state2.needReadable;
                  debug("need readable", doRead);
                  if (state2.length === 0 || state2.length - n < state2.highWaterMark) {
                    doRead = true;
                    debug("length less than watermark", doRead);
                  }
                  if (state2.ended || state2.reading) {
                    doRead = false;
                    debug("reading or ended", doRead);
                  } else if (doRead) {
                    debug("do read");
                    state2.reading = true;
                    state2.sync = true;
                    if (state2.length === 0)
                      state2.needReadable = true;
                    this._read(state2.highWaterMark);
                    state2.sync = false;
                    if (!state2.reading)
                      n = howMuchToRead(nOrig, state2);
                  }
                  var ret;
                  if (n > 0)
                    ret = fromList(n, state2);
                  else
                    ret = null;
                  if (ret === null) {
                    state2.needReadable = true;
                    n = 0;
                  } else {
                    state2.length -= n;
                  }
                  if (state2.length === 0) {
                    if (!state2.ended)
                      state2.needReadable = true;
                    if (nOrig !== n && state2.ended)
                      endReadable(this);
                  }
                  if (ret !== null)
                    this.emit("data", ret);
                  return ret;
                };
                function chunkInvalid(state2, chunk) {
                  var er = null;
                  if (!Buffer3.isBuffer(chunk) && typeof chunk !== "string" && chunk !== null && chunk !== void 0 && !state2.objectMode) {
                    er = new TypeError("Invalid non-string/buffer chunk");
                  }
                  return er;
                }
                function onEofChunk(stream, state2) {
                  if (state2.ended)
                    return;
                  if (state2.decoder) {
                    var chunk = state2.decoder.end();
                    if (chunk && chunk.length) {
                      state2.buffer.push(chunk);
                      state2.length += state2.objectMode ? 1 : chunk.length;
                    }
                  }
                  state2.ended = true;
                  emitReadable(stream);
                }
                function emitReadable(stream) {
                  var state2 = stream._readableState;
                  state2.needReadable = false;
                  if (!state2.emittedReadable) {
                    debug("emitReadable", state2.flowing);
                    state2.emittedReadable = true;
                    if (state2.sync)
                      processNextTick(emitReadable_, stream);
                    else
                      emitReadable_(stream);
                  }
                }
                function emitReadable_(stream) {
                  debug("emit readable");
                  stream.emit("readable");
                  flow(stream);
                }
                function maybeReadMore(stream, state2) {
                  if (!state2.readingMore) {
                    state2.readingMore = true;
                    processNextTick(maybeReadMore_, stream, state2);
                  }
                }
                function maybeReadMore_(stream, state2) {
                  var len = state2.length;
                  while (!state2.reading && !state2.flowing && !state2.ended && state2.length < state2.highWaterMark) {
                    debug("maybeReadMore read 0");
                    stream.read(0);
                    if (len === state2.length)
                      break;
                    else
                      len = state2.length;
                  }
                  state2.readingMore = false;
                }
                Readable.prototype._read = function(n) {
                  this.emit("error", new Error("_read() is not implemented"));
                };
                Readable.prototype.pipe = function(dest, pipeOpts) {
                  var src = this;
                  var state2 = this._readableState;
                  switch (state2.pipesCount) {
                    case 0:
                      state2.pipes = dest;
                      break;
                    case 1:
                      state2.pipes = [state2.pipes, dest];
                      break;
                    default:
                      state2.pipes.push(dest);
                      break;
                  }
                  state2.pipesCount += 1;
                  debug("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
                  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                  var endFn = doEnd ? onend : cleanup;
                  if (state2.endEmitted)
                    processNextTick(endFn);
                  else
                    src.once("end", endFn);
                  dest.on("unpipe", onunpipe);
                  function onunpipe(readable) {
                    debug("onunpipe");
                    if (readable === src) {
                      cleanup();
                    }
                  }
                  function onend() {
                    debug("onend");
                    dest.end();
                  }
                  var ondrain = pipeOnDrain(src);
                  dest.on("drain", ondrain);
                  var cleanedUp = false;
                  function cleanup() {
                    debug("cleanup");
                    dest.removeListener("close", onclose);
                    dest.removeListener("finish", onfinish);
                    dest.removeListener("drain", ondrain);
                    dest.removeListener("error", onerror);
                    dest.removeListener("unpipe", onunpipe);
                    src.removeListener("end", onend);
                    src.removeListener("end", cleanup);
                    src.removeListener("data", ondata);
                    cleanedUp = true;
                    if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                      ondrain();
                  }
                  var increasedAwaitDrain = false;
                  src.on("data", ondata);
                  function ondata(chunk) {
                    debug("ondata");
                    increasedAwaitDrain = false;
                    var ret = dest.write(chunk);
                    if (false === ret && !increasedAwaitDrain) {
                      if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf(state2.pipes, dest) !== -1) && !cleanedUp) {
                        debug("false write response, pause", src._readableState.awaitDrain);
                        src._readableState.awaitDrain++;
                        increasedAwaitDrain = true;
                      }
                      src.pause();
                    }
                  }
                  function onerror(er) {
                    debug("onerror", er);
                    unpipe();
                    dest.removeListener("error", onerror);
                    if (EElistenerCount(dest, "error") === 0)
                      dest.emit("error", er);
                  }
                  prependListener(dest, "error", onerror);
                  function onclose() {
                    dest.removeListener("finish", onfinish);
                    unpipe();
                  }
                  dest.once("close", onclose);
                  function onfinish() {
                    debug("onfinish");
                    dest.removeListener("close", onclose);
                    unpipe();
                  }
                  dest.once("finish", onfinish);
                  function unpipe() {
                    debug("unpipe");
                    src.unpipe(dest);
                  }
                  dest.emit("pipe", src);
                  if (!state2.flowing) {
                    debug("pipe resume");
                    src.resume();
                  }
                  return dest;
                };
                function pipeOnDrain(src) {
                  return function() {
                    var state2 = src._readableState;
                    debug("pipeOnDrain", state2.awaitDrain);
                    if (state2.awaitDrain)
                      state2.awaitDrain--;
                    if (state2.awaitDrain === 0 && EElistenerCount(src, "data")) {
                      state2.flowing = true;
                      flow(src);
                    }
                  };
                }
                Readable.prototype.unpipe = function(dest) {
                  var state2 = this._readableState;
                  if (state2.pipesCount === 0)
                    return this;
                  if (state2.pipesCount === 1) {
                    if (dest && dest !== state2.pipes)
                      return this;
                    if (!dest)
                      dest = state2.pipes;
                    state2.pipes = null;
                    state2.pipesCount = 0;
                    state2.flowing = false;
                    if (dest)
                      dest.emit("unpipe", this);
                    return this;
                  }
                  if (!dest) {
                    var dests = state2.pipes;
                    var len = state2.pipesCount;
                    state2.pipes = null;
                    state2.pipesCount = 0;
                    state2.flowing = false;
                    for (var i2 = 0; i2 < len; i2++) {
                      dests[i2].emit("unpipe", this);
                    }
                    return this;
                  }
                  var index = indexOf(state2.pipes, dest);
                  if (index === -1)
                    return this;
                  state2.pipes.splice(index, 1);
                  state2.pipesCount -= 1;
                  if (state2.pipesCount === 1)
                    state2.pipes = state2.pipes[0];
                  dest.emit("unpipe", this);
                  return this;
                };
                Readable.prototype.on = function(ev2, fn) {
                  var res = Stream.prototype.on.call(this, ev2, fn);
                  if (ev2 === "data") {
                    if (this._readableState.flowing !== false)
                      this.resume();
                  } else if (ev2 === "readable") {
                    var state2 = this._readableState;
                    if (!state2.endEmitted && !state2.readableListening) {
                      state2.readableListening = state2.needReadable = true;
                      state2.emittedReadable = false;
                      if (!state2.reading) {
                        processNextTick(nReadingNextTick, this);
                      } else if (state2.length) {
                        emitReadable(this, state2);
                      }
                    }
                  }
                  return res;
                };
                Readable.prototype.addListener = Readable.prototype.on;
                function nReadingNextTick(self2) {
                  debug("readable nexttick read 0");
                  self2.read(0);
                }
                Readable.prototype.resume = function() {
                  var state2 = this._readableState;
                  if (!state2.flowing) {
                    debug("resume");
                    state2.flowing = true;
                    resume(this, state2);
                  }
                  return this;
                };
                function resume(stream, state2) {
                  if (!state2.resumeScheduled) {
                    state2.resumeScheduled = true;
                    processNextTick(resume_, stream, state2);
                  }
                }
                function resume_(stream, state2) {
                  if (!state2.reading) {
                    debug("resume read 0");
                    stream.read(0);
                  }
                  state2.resumeScheduled = false;
                  state2.awaitDrain = 0;
                  stream.emit("resume");
                  flow(stream);
                  if (state2.flowing && !state2.reading)
                    stream.read(0);
                }
                Readable.prototype.pause = function() {
                  debug("call pause flowing=%j", this._readableState.flowing);
                  if (false !== this._readableState.flowing) {
                    debug("pause");
                    this._readableState.flowing = false;
                    this.emit("pause");
                  }
                  return this;
                };
                function flow(stream) {
                  var state2 = stream._readableState;
                  debug("flow", state2.flowing);
                  while (state2.flowing && stream.read() !== null) {
                  }
                }
                Readable.prototype.wrap = function(stream) {
                  var state2 = this._readableState;
                  var paused = false;
                  var self2 = this;
                  stream.on("end", function() {
                    debug("wrapped end");
                    if (state2.decoder && !state2.ended) {
                      var chunk = state2.decoder.end();
                      if (chunk && chunk.length)
                        self2.push(chunk);
                    }
                    self2.push(null);
                  });
                  stream.on("data", function(chunk) {
                    debug("wrapped data");
                    if (state2.decoder)
                      chunk = state2.decoder.write(chunk);
                    if (state2.objectMode && (chunk === null || chunk === void 0))
                      return;
                    else if (!state2.objectMode && (!chunk || !chunk.length))
                      return;
                    var ret = self2.push(chunk);
                    if (!ret) {
                      paused = true;
                      stream.pause();
                    }
                  });
                  for (var i2 in stream) {
                    if (this[i2] === void 0 && typeof stream[i2] === "function") {
                      this[i2] = /* @__PURE__ */ function(method2) {
                        return function() {
                          return stream[method2].apply(stream, arguments);
                        };
                      }(i2);
                    }
                  }
                  var events = ["error", "close", "destroy", "pause", "resume"];
                  forEach(events, function(ev2) {
                    stream.on(ev2, self2.emit.bind(self2, ev2));
                  });
                  self2._read = function(n) {
                    debug("wrapped _read", n);
                    if (paused) {
                      paused = false;
                      stream.resume();
                    }
                  };
                  return self2;
                };
                Readable._fromList = fromList;
                function fromList(n, state2) {
                  if (state2.length === 0)
                    return null;
                  var ret;
                  if (state2.objectMode)
                    ret = state2.buffer.shift();
                  else if (!n || n >= state2.length) {
                    if (state2.decoder)
                      ret = state2.buffer.join("");
                    else if (state2.buffer.length === 1)
                      ret = state2.buffer.head.data;
                    else
                      ret = state2.buffer.concat(state2.length);
                    state2.buffer.clear();
                  } else {
                    ret = fromListPartial(n, state2.buffer, state2.decoder);
                  }
                  return ret;
                }
                function fromListPartial(n, list, hasStrings) {
                  var ret;
                  if (n < list.head.data.length) {
                    ret = list.head.data.slice(0, n);
                    list.head.data = list.head.data.slice(n);
                  } else if (n === list.head.data.length) {
                    ret = list.shift();
                  } else {
                    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                  }
                  return ret;
                }
                function copyFromBufferString(n, list) {
                  var p = list.head;
                  var c = 1;
                  var ret = p.data;
                  n -= ret.length;
                  while (p = p.next) {
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length)
                      ret += str;
                    else
                      ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                      if (nb === str.length) {
                        ++c;
                        if (p.next)
                          list.head = p.next;
                        else
                          list.head = list.tail = null;
                      } else {
                        list.head = p;
                        p.data = str.slice(nb);
                      }
                      break;
                    }
                    ++c;
                  }
                  list.length -= c;
                  return ret;
                }
                function copyFromBuffer(n, list) {
                  var ret = bufferShim.allocUnsafe(n);
                  var p = list.head;
                  var c = 1;
                  p.data.copy(ret);
                  n -= p.data.length;
                  while (p = p.next) {
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                      if (nb === buf.length) {
                        ++c;
                        if (p.next)
                          list.head = p.next;
                        else
                          list.head = list.tail = null;
                      } else {
                        list.head = p;
                        p.data = buf.slice(nb);
                      }
                      break;
                    }
                    ++c;
                  }
                  list.length -= c;
                  return ret;
                }
                function endReadable(stream) {
                  var state2 = stream._readableState;
                  if (state2.length > 0)
                    throw new Error('"endReadable()" called on non-empty stream');
                  if (!state2.endEmitted) {
                    state2.ended = true;
                    processNextTick(endReadableNT, state2, stream);
                  }
                }
                function endReadableNT(state2, stream) {
                  if (!state2.endEmitted && state2.length === 0) {
                    state2.endEmitted = true;
                    stream.readable = false;
                    stream.emit("end");
                  }
                }
                function forEach(xs, f) {
                  for (var i2 = 0, l = xs.length; i2 < l; i2++) {
                    f(xs[i2], i2);
                  }
                }
                function indexOf(xs, x3) {
                  for (var i2 = 0, l = xs.length; i2 < l; i2++) {
                    if (xs[i2] === x3)
                      return i2;
                  }
                  return -1;
                }
              }).call(exports2, __webpack_require__(6));
            },
            /* 15 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(process) {
                "use strict";
                if (!process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
                  module2.exports = nextTick;
                } else {
                  module2.exports = process.nextTick;
                }
                function nextTick(fn, arg1, arg2, arg3) {
                  if (typeof fn !== "function") {
                    throw new TypeError('"callback" argument must be a function');
                  }
                  var len = arguments.length;
                  var args, i2;
                  switch (len) {
                    case 0:
                    case 1:
                      return process.nextTick(fn);
                    case 2:
                      return process.nextTick(function afterTickOne() {
                        fn.call(null, arg1);
                      });
                    case 3:
                      return process.nextTick(function afterTickTwo() {
                        fn.call(null, arg1, arg2);
                      });
                    case 4:
                      return process.nextTick(function afterTickThree() {
                        fn.call(null, arg1, arg2, arg3);
                      });
                    default:
                      args = new Array(len - 1);
                      i2 = 0;
                      while (i2 < args.length) {
                        args[i2++] = arguments[i2];
                      }
                      return process.nextTick(function afterTick() {
                        fn.apply(null, args);
                      });
                  }
                }
              }).call(exports2, __webpack_require__(6));
            },
            /* 16 */
            /***/
            function(module2, exports2) {
              var toString = {}.toString;
              module2.exports = Array.isArray || function(arr) {
                return toString.call(arr) == "[object Array]";
              };
            },
            /* 17 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(global) {
                "use strict";
                var buffer = __webpack_require__(2);
                var Buffer3 = buffer.Buffer;
                var SlowBuffer = buffer.SlowBuffer;
                var MAX_LEN = buffer.kMaxLength || 2147483647;
                exports2.alloc = function alloc(size, fill, encoding) {
                  if (typeof Buffer3.alloc === "function") {
                    return Buffer3.alloc(size, fill, encoding);
                  }
                  if (typeof encoding === "number") {
                    throw new TypeError("encoding must not be number");
                  }
                  if (typeof size !== "number") {
                    throw new TypeError("size must be a number");
                  }
                  if (size > MAX_LEN) {
                    throw new RangeError("size is too large");
                  }
                  var enc = encoding;
                  var _fill = fill;
                  if (_fill === void 0) {
                    enc = void 0;
                    _fill = 0;
                  }
                  var buf = new Buffer3(size);
                  if (typeof _fill === "string") {
                    var fillBuf = new Buffer3(_fill, enc);
                    var flen = fillBuf.length;
                    var i2 = -1;
                    while (++i2 < size) {
                      buf[i2] = fillBuf[i2 % flen];
                    }
                  } else {
                    buf.fill(_fill);
                  }
                  return buf;
                };
                exports2.allocUnsafe = function allocUnsafe(size) {
                  if (typeof Buffer3.allocUnsafe === "function") {
                    return Buffer3.allocUnsafe(size);
                  }
                  if (typeof size !== "number") {
                    throw new TypeError("size must be a number");
                  }
                  if (size > MAX_LEN) {
                    throw new RangeError("size is too large");
                  }
                  return new Buffer3(size);
                };
                exports2.from = function from(value, encodingOrOffset, length) {
                  if (typeof Buffer3.from === "function" && (!global.Uint8Array || Uint8Array.from !== Buffer3.from)) {
                    return Buffer3.from(value, encodingOrOffset, length);
                  }
                  if (typeof value === "number") {
                    throw new TypeError('"value" argument must not be a number');
                  }
                  if (typeof value === "string") {
                    return new Buffer3(value, encodingOrOffset);
                  }
                  if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
                    var offset = encodingOrOffset;
                    if (arguments.length === 1) {
                      return new Buffer3(value);
                    }
                    if (typeof offset === "undefined") {
                      offset = 0;
                    }
                    var len = length;
                    if (typeof len === "undefined") {
                      len = value.byteLength - offset;
                    }
                    if (offset >= value.byteLength) {
                      throw new RangeError("'offset' is out of bounds");
                    }
                    if (len > value.byteLength - offset) {
                      throw new RangeError("'length' is out of bounds");
                    }
                    return new Buffer3(value.slice(offset, offset + len));
                  }
                  if (Buffer3.isBuffer(value)) {
                    var out = new Buffer3(value.length);
                    value.copy(out, 0, 0, value.length);
                    return out;
                  }
                  if (value) {
                    if (Array.isArray(value) || typeof ArrayBuffer !== "undefined" && value.buffer instanceof ArrayBuffer || "length" in value) {
                      return new Buffer3(value);
                    }
                    if (value.type === "Buffer" && Array.isArray(value.data)) {
                      return new Buffer3(value.data);
                    }
                  }
                  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                };
                exports2.allocUnsafeSlow = function allocUnsafeSlow(size) {
                  if (typeof Buffer3.allocUnsafeSlow === "function") {
                    return Buffer3.allocUnsafeSlow(size);
                  }
                  if (typeof size !== "number") {
                    throw new TypeError("size must be a number");
                  }
                  if (size >= MAX_LEN) {
                    throw new RangeError("size is too large");
                  }
                  return new SlowBuffer(size);
                };
              }).call(exports2, /* @__PURE__ */ function() {
                return this;
              }());
            },
            /* 18 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(Buffer3) {
                function isArray(arg) {
                  if (Array.isArray) {
                    return Array.isArray(arg);
                  }
                  return objectToString(arg) === "[object Array]";
                }
                exports2.isArray = isArray;
                function isBoolean(arg) {
                  return typeof arg === "boolean";
                }
                exports2.isBoolean = isBoolean;
                function isNull(arg) {
                  return arg === null;
                }
                exports2.isNull = isNull;
                function isNullOrUndefined(arg) {
                  return arg == null;
                }
                exports2.isNullOrUndefined = isNullOrUndefined;
                function isNumber(arg) {
                  return typeof arg === "number";
                }
                exports2.isNumber = isNumber;
                function isString(arg) {
                  return typeof arg === "string";
                }
                exports2.isString = isString;
                function isSymbol(arg) {
                  return typeof arg === "symbol";
                }
                exports2.isSymbol = isSymbol;
                function isUndefined(arg) {
                  return arg === void 0;
                }
                exports2.isUndefined = isUndefined;
                function isRegExp(re) {
                  return objectToString(re) === "[object RegExp]";
                }
                exports2.isRegExp = isRegExp;
                function isObject(arg) {
                  return typeof arg === "object" && arg !== null;
                }
                exports2.isObject = isObject;
                function isDate(d) {
                  return objectToString(d) === "[object Date]";
                }
                exports2.isDate = isDate;
                function isError(e) {
                  return objectToString(e) === "[object Error]" || e instanceof Error;
                }
                exports2.isError = isError;
                function isFunction(arg) {
                  return typeof arg === "function";
                }
                exports2.isFunction = isFunction;
                function isPrimitive(arg) {
                  return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
                  typeof arg === "undefined";
                }
                exports2.isPrimitive = isPrimitive;
                exports2.isBuffer = Buffer3.isBuffer;
                function objectToString(o) {
                  return Object.prototype.toString.call(o);
                }
              }).call(exports2, __webpack_require__(1));
            },
            /* 19 */
            /***/
            function(module2, exports2) {
            },
            /* 20 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var Buffer3 = __webpack_require__(2).Buffer;
              var bufferShim = __webpack_require__(17);
              module2.exports = BufferList;
              function BufferList() {
                this.head = null;
                this.tail = null;
                this.length = 0;
              }
              BufferList.prototype.push = function(v2) {
                var entry = { data: v2, next: null };
                if (this.length > 0)
                  this.tail.next = entry;
                else
                  this.head = entry;
                this.tail = entry;
                ++this.length;
              };
              BufferList.prototype.unshift = function(v2) {
                var entry = { data: v2, next: this.head };
                if (this.length === 0)
                  this.tail = entry;
                this.head = entry;
                ++this.length;
              };
              BufferList.prototype.shift = function() {
                if (this.length === 0)
                  return;
                var ret = this.head.data;
                if (this.length === 1)
                  this.head = this.tail = null;
                else
                  this.head = this.head.next;
                --this.length;
                return ret;
              };
              BufferList.prototype.clear = function() {
                this.head = this.tail = null;
                this.length = 0;
              };
              BufferList.prototype.join = function(s) {
                if (this.length === 0)
                  return "";
                var p = this.head;
                var ret = "" + p.data;
                while (p = p.next) {
                  ret += s + p.data;
                }
                return ret;
              };
              BufferList.prototype.concat = function(n) {
                if (this.length === 0)
                  return bufferShim.alloc(0);
                if (this.length === 1)
                  return this.head.data;
                var ret = bufferShim.allocUnsafe(n >>> 0);
                var p = this.head;
                var i2 = 0;
                while (p) {
                  p.data.copy(ret, i2);
                  i2 += p.data.length;
                  p = p.next;
                }
                return ret;
              };
            },
            /* 21 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var objectKeys = Object.keys || function(obj) {
                var keys2 = [];
                for (var key in obj) {
                  keys2.push(key);
                }
                return keys2;
              };
              module2.exports = Duplex;
              var processNextTick = __webpack_require__(15);
              var util = __webpack_require__(18);
              util.inherits = __webpack_require__(12);
              var Readable = __webpack_require__(14);
              var Writable = __webpack_require__(22);
              util.inherits(Duplex, Readable);
              var keys = objectKeys(Writable.prototype);
              for (var v2 = 0; v2 < keys.length; v2++) {
                var method2 = keys[v2];
                if (!Duplex.prototype[method2])
                  Duplex.prototype[method2] = Writable.prototype[method2];
              }
              function Duplex(options2) {
                if (!(this instanceof Duplex))
                  return new Duplex(options2);
                Readable.call(this, options2);
                Writable.call(this, options2);
                if (options2 && options2.readable === false)
                  this.readable = false;
                if (options2 && options2.writable === false)
                  this.writable = false;
                this.allowHalfOpen = true;
                if (options2 && options2.allowHalfOpen === false)
                  this.allowHalfOpen = false;
                this.once("end", onend);
              }
              function onend() {
                if (this.allowHalfOpen || this._writableState.ended)
                  return;
                processNextTick(onEndNT, this);
              }
              function onEndNT(self2) {
                self2.end();
              }
              function forEach(xs, f) {
                for (var i2 = 0, l = xs.length; i2 < l; i2++) {
                  f(xs[i2], i2);
                }
              }
            },
            /* 22 */
            /***/
            function(module2, exports2, __webpack_require__) {
              (function(process) {
                "use strict";
                module2.exports = Writable;
                var processNextTick = __webpack_require__(15);
                var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
                var Duplex;
                Writable.WritableState = WritableState;
                var util = __webpack_require__(18);
                util.inherits = __webpack_require__(12);
                var internalUtil = {
                  deprecate: __webpack_require__(23)
                };
                var Stream;
                (function() {
                  try {
                    Stream = __webpack_require__(11);
                  } catch (_2) {
                  } finally {
                    if (!Stream)
                      Stream = __webpack_require__(8).EventEmitter;
                  }
                })();
                var Buffer3 = __webpack_require__(2).Buffer;
                var bufferShim = __webpack_require__(17);
                util.inherits(Writable, Stream);
                function nop() {
                }
                function WriteReq(chunk, encoding, cb) {
                  this.chunk = chunk;
                  this.encoding = encoding;
                  this.callback = cb;
                  this.next = null;
                }
                function WritableState(options2, stream) {
                  Duplex = Duplex || __webpack_require__(21);
                  options2 = options2 || {};
                  this.objectMode = !!options2.objectMode;
                  if (stream instanceof Duplex)
                    this.objectMode = this.objectMode || !!options2.writableObjectMode;
                  var hwm = options2.highWaterMark;
                  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
                  this.highWaterMark = ~~this.highWaterMark;
                  this.needDrain = false;
                  this.ending = false;
                  this.ended = false;
                  this.finished = false;
                  var noDecode = options2.decodeStrings === false;
                  this.decodeStrings = !noDecode;
                  this.defaultEncoding = options2.defaultEncoding || "utf8";
                  this.length = 0;
                  this.writing = false;
                  this.corked = 0;
                  this.sync = true;
                  this.bufferProcessing = false;
                  this.onwrite = function(er) {
                    onwrite(stream, er);
                  };
                  this.writecb = null;
                  this.writelen = 0;
                  this.bufferedRequest = null;
                  this.lastBufferedRequest = null;
                  this.pendingcb = 0;
                  this.prefinished = false;
                  this.errorEmitted = false;
                  this.bufferedRequestCount = 0;
                  this.corkedRequestsFree = new CorkedRequest(this);
                }
                WritableState.prototype.getBuffer = function getBuffer() {
                  var current = this.bufferedRequest;
                  var out = [];
                  while (current) {
                    out.push(current);
                    current = current.next;
                  }
                  return out;
                };
                (function() {
                  try {
                    Object.defineProperty(WritableState.prototype, "buffer", {
                      get: internalUtil.deprecate(function() {
                        return this.getBuffer();
                      }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
                    });
                  } catch (_2) {
                  }
                })();
                var realHasInstance;
                if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
                  realHasInstance = Function.prototype[Symbol.hasInstance];
                  Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function(object) {
                      if (realHasInstance.call(this, object))
                        return true;
                      return object && object._writableState instanceof WritableState;
                    }
                  });
                } else {
                  realHasInstance = function(object) {
                    return object instanceof this;
                  };
                }
                function Writable(options2) {
                  Duplex = Duplex || __webpack_require__(21);
                  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                    return new Writable(options2);
                  }
                  this._writableState = new WritableState(options2, this);
                  this.writable = true;
                  if (options2) {
                    if (typeof options2.write === "function")
                      this._write = options2.write;
                    if (typeof options2.writev === "function")
                      this._writev = options2.writev;
                  }
                  Stream.call(this);
                }
                Writable.prototype.pipe = function() {
                  this.emit("error", new Error("Cannot pipe, not readable"));
                };
                function writeAfterEnd(stream, cb) {
                  var er = new Error("write after end");
                  stream.emit("error", er);
                  processNextTick(cb, er);
                }
                function validChunk(stream, state2, chunk, cb) {
                  var valid = true;
                  var er = false;
                  if (chunk === null) {
                    er = new TypeError("May not write null values to stream");
                  } else if (typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
                    er = new TypeError("Invalid non-string/buffer chunk");
                  }
                  if (er) {
                    stream.emit("error", er);
                    processNextTick(cb, er);
                    valid = false;
                  }
                  return valid;
                }
                Writable.prototype.write = function(chunk, encoding, cb) {
                  var state2 = this._writableState;
                  var ret = false;
                  var isBuf = Buffer3.isBuffer(chunk);
                  if (typeof encoding === "function") {
                    cb = encoding;
                    encoding = null;
                  }
                  if (isBuf)
                    encoding = "buffer";
                  else if (!encoding)
                    encoding = state2.defaultEncoding;
                  if (typeof cb !== "function")
                    cb = nop;
                  if (state2.ended)
                    writeAfterEnd(this, cb);
                  else if (isBuf || validChunk(this, state2, chunk, cb)) {
                    state2.pendingcb++;
                    ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);
                  }
                  return ret;
                };
                Writable.prototype.cork = function() {
                  var state2 = this._writableState;
                  state2.corked++;
                };
                Writable.prototype.uncork = function() {
                  var state2 = this._writableState;
                  if (state2.corked) {
                    state2.corked--;
                    if (!state2.writing && !state2.corked && !state2.finished && !state2.bufferProcessing && state2.bufferedRequest)
                      clearBuffer(this, state2);
                  }
                };
                Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                  if (typeof encoding === "string")
                    encoding = encoding.toLowerCase();
                  if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                    throw new TypeError("Unknown encoding: " + encoding);
                  this._writableState.defaultEncoding = encoding;
                  return this;
                };
                function decodeChunk(state2, chunk, encoding) {
                  if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
                    chunk = bufferShim.from(chunk, encoding);
                  }
                  return chunk;
                }
                function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb) {
                  if (!isBuf) {
                    chunk = decodeChunk(state2, chunk, encoding);
                    if (Buffer3.isBuffer(chunk))
                      encoding = "buffer";
                  }
                  var len = state2.objectMode ? 1 : chunk.length;
                  state2.length += len;
                  var ret = state2.length < state2.highWaterMark;
                  if (!ret)
                    state2.needDrain = true;
                  if (state2.writing || state2.corked) {
                    var last = state2.lastBufferedRequest;
                    state2.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                    if (last) {
                      last.next = state2.lastBufferedRequest;
                    } else {
                      state2.bufferedRequest = state2.lastBufferedRequest;
                    }
                    state2.bufferedRequestCount += 1;
                  } else {
                    doWrite(stream, state2, false, len, chunk, encoding, cb);
                  }
                  return ret;
                }
                function doWrite(stream, state2, writev, len, chunk, encoding, cb) {
                  state2.writelen = len;
                  state2.writecb = cb;
                  state2.writing = true;
                  state2.sync = true;
                  if (writev)
                    stream._writev(chunk, state2.onwrite);
                  else
                    stream._write(chunk, encoding, state2.onwrite);
                  state2.sync = false;
                }
                function onwriteError(stream, state2, sync, er, cb) {
                  --state2.pendingcb;
                  if (sync)
                    processNextTick(cb, er);
                  else
                    cb(er);
                  stream._writableState.errorEmitted = true;
                  stream.emit("error", er);
                }
                function onwriteStateUpdate(state2) {
                  state2.writing = false;
                  state2.writecb = null;
                  state2.length -= state2.writelen;
                  state2.writelen = 0;
                }
                function onwrite(stream, er) {
                  var state2 = stream._writableState;
                  var sync = state2.sync;
                  var cb = state2.writecb;
                  onwriteStateUpdate(state2);
                  if (er)
                    onwriteError(stream, state2, sync, er, cb);
                  else {
                    var finished = needFinish(state2);
                    if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
                      clearBuffer(stream, state2);
                    }
                    if (sync) {
                      asyncWrite(afterWrite, stream, state2, finished, cb);
                    } else {
                      afterWrite(stream, state2, finished, cb);
                    }
                  }
                }
                function afterWrite(stream, state2, finished, cb) {
                  if (!finished)
                    onwriteDrain(stream, state2);
                  state2.pendingcb--;
                  cb();
                  finishMaybe(stream, state2);
                }
                function onwriteDrain(stream, state2) {
                  if (state2.length === 0 && state2.needDrain) {
                    state2.needDrain = false;
                    stream.emit("drain");
                  }
                }
                function clearBuffer(stream, state2) {
                  state2.bufferProcessing = true;
                  var entry = state2.bufferedRequest;
                  if (stream._writev && entry && entry.next) {
                    var l = state2.bufferedRequestCount;
                    var buffer = new Array(l);
                    var holder = state2.corkedRequestsFree;
                    holder.entry = entry;
                    var count = 0;
                    while (entry) {
                      buffer[count] = entry;
                      entry = entry.next;
                      count += 1;
                    }
                    doWrite(stream, state2, true, state2.length, buffer, "", holder.finish);
                    state2.pendingcb++;
                    state2.lastBufferedRequest = null;
                    if (holder.next) {
                      state2.corkedRequestsFree = holder.next;
                      holder.next = null;
                    } else {
                      state2.corkedRequestsFree = new CorkedRequest(state2);
                    }
                  } else {
                    while (entry) {
                      var chunk = entry.chunk;
                      var encoding = entry.encoding;
                      var cb = entry.callback;
                      var len = state2.objectMode ? 1 : chunk.length;
                      doWrite(stream, state2, false, len, chunk, encoding, cb);
                      entry = entry.next;
                      if (state2.writing) {
                        break;
                      }
                    }
                    if (entry === null)
                      state2.lastBufferedRequest = null;
                  }
                  state2.bufferedRequestCount = 0;
                  state2.bufferedRequest = entry;
                  state2.bufferProcessing = false;
                }
                Writable.prototype._write = function(chunk, encoding, cb) {
                  cb(new Error("_write() is not implemented"));
                };
                Writable.prototype._writev = null;
                Writable.prototype.end = function(chunk, encoding, cb) {
                  var state2 = this._writableState;
                  if (typeof chunk === "function") {
                    cb = chunk;
                    chunk = null;
                    encoding = null;
                  } else if (typeof encoding === "function") {
                    cb = encoding;
                    encoding = null;
                  }
                  if (chunk !== null && chunk !== void 0)
                    this.write(chunk, encoding);
                  if (state2.corked) {
                    state2.corked = 1;
                    this.uncork();
                  }
                  if (!state2.ending && !state2.finished)
                    endWritable(this, state2, cb);
                };
                function needFinish(state2) {
                  return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
                }
                function prefinish(stream, state2) {
                  if (!state2.prefinished) {
                    state2.prefinished = true;
                    stream.emit("prefinish");
                  }
                }
                function finishMaybe(stream, state2) {
                  var need = needFinish(state2);
                  if (need) {
                    if (state2.pendingcb === 0) {
                      prefinish(stream, state2);
                      state2.finished = true;
                      stream.emit("finish");
                    } else {
                      prefinish(stream, state2);
                    }
                  }
                  return need;
                }
                function endWritable(stream, state2, cb) {
                  state2.ending = true;
                  finishMaybe(stream, state2);
                  if (cb) {
                    if (state2.finished)
                      processNextTick(cb);
                    else
                      stream.once("finish", cb);
                  }
                  state2.ended = true;
                  stream.writable = false;
                }
                function CorkedRequest(state2) {
                  var _this = this;
                  this.next = null;
                  this.entry = null;
                  this.finish = function(err2) {
                    var entry = _this.entry;
                    _this.entry = null;
                    while (entry) {
                      var cb = entry.callback;
                      state2.pendingcb--;
                      cb(err2);
                      entry = entry.next;
                    }
                    if (state2.corkedRequestsFree) {
                      state2.corkedRequestsFree.next = _this;
                    } else {
                      state2.corkedRequestsFree = _this;
                    }
                  };
                }
              }).call(exports2, __webpack_require__(6));
            },
            /* 23 */
            /***/
            function(module2, exports2) {
              (function(global) {
                module2.exports = deprecate;
                function deprecate(fn, msg) {
                  if (config("noDeprecation")) {
                    return fn;
                  }
                  var warned = false;
                  function deprecated() {
                    if (!warned) {
                      if (config("throwDeprecation")) {
                        throw new Error(msg);
                      } else if (config("traceDeprecation")) {
                        console.trace(msg);
                      } else {
                        console.warn(msg);
                      }
                      warned = true;
                    }
                    return fn.apply(this, arguments);
                  }
                  return deprecated;
                }
                function config(name) {
                  try {
                    if (!global.localStorage)
                      return false;
                  } catch (_2) {
                    return false;
                  }
                  var val = global.localStorage[name];
                  if (null == val)
                    return false;
                  return String(val).toLowerCase() === "true";
                }
              }).call(exports2, /* @__PURE__ */ function() {
                return this;
              }());
            },
            /* 24 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Buffer3 = __webpack_require__(2).Buffer;
              var isBufferEncoding = Buffer3.isEncoding || function(encoding) {
                switch (encoding && encoding.toLowerCase()) {
                  case "hex":
                  case "utf8":
                  case "utf-8":
                  case "ascii":
                  case "binary":
                  case "base64":
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                  case "raw":
                    return true;
                  default:
                    return false;
                }
              };
              function assertEncoding(encoding) {
                if (encoding && !isBufferEncoding(encoding)) {
                  throw new Error("Unknown encoding: " + encoding);
                }
              }
              var StringDecoder = exports2.StringDecoder = function(encoding) {
                this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
                assertEncoding(encoding);
                switch (this.encoding) {
                  case "utf8":
                    this.surrogateSize = 3;
                    break;
                  case "ucs2":
                  case "utf16le":
                    this.surrogateSize = 2;
                    this.detectIncompleteChar = utf16DetectIncompleteChar;
                    break;
                  case "base64":
                    this.surrogateSize = 3;
                    this.detectIncompleteChar = base64DetectIncompleteChar;
                    break;
                  default:
                    this.write = passThroughWrite;
                    return;
                }
                this.charBuffer = new Buffer3(6);
                this.charReceived = 0;
                this.charLength = 0;
              };
              StringDecoder.prototype.write = function(buffer) {
                var charStr = "";
                while (this.charLength) {
                  var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
                  buffer.copy(this.charBuffer, this.charReceived, 0, available);
                  this.charReceived += available;
                  if (this.charReceived < this.charLength) {
                    return "";
                  }
                  buffer = buffer.slice(available, buffer.length);
                  charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
                  var charCode = charStr.charCodeAt(charStr.length - 1);
                  if (charCode >= 55296 && charCode <= 56319) {
                    this.charLength += this.surrogateSize;
                    charStr = "";
                    continue;
                  }
                  this.charReceived = this.charLength = 0;
                  if (buffer.length === 0) {
                    return charStr;
                  }
                  break;
                }
                this.detectIncompleteChar(buffer);
                var end = buffer.length;
                if (this.charLength) {
                  buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                  end -= this.charReceived;
                }
                charStr += buffer.toString(this.encoding, 0, end);
                var end = charStr.length - 1;
                var charCode = charStr.charCodeAt(end);
                if (charCode >= 55296 && charCode <= 56319) {
                  var size = this.surrogateSize;
                  this.charLength += size;
                  this.charReceived += size;
                  this.charBuffer.copy(this.charBuffer, size, 0, size);
                  buffer.copy(this.charBuffer, 0, 0, size);
                  return charStr.substring(0, end);
                }
                return charStr;
              };
              StringDecoder.prototype.detectIncompleteChar = function(buffer) {
                var i2 = buffer.length >= 3 ? 3 : buffer.length;
                for (; i2 > 0; i2--) {
                  var c = buffer[buffer.length - i2];
                  if (i2 == 1 && c >> 5 == 6) {
                    this.charLength = 2;
                    break;
                  }
                  if (i2 <= 2 && c >> 4 == 14) {
                    this.charLength = 3;
                    break;
                  }
                  if (i2 <= 3 && c >> 3 == 30) {
                    this.charLength = 4;
                    break;
                  }
                }
                this.charReceived = i2;
              };
              StringDecoder.prototype.end = function(buffer) {
                var res = "";
                if (buffer && buffer.length)
                  res = this.write(buffer);
                if (this.charReceived) {
                  var cr = this.charReceived;
                  var buf = this.charBuffer;
                  var enc = this.encoding;
                  res += buf.slice(0, cr).toString(enc);
                }
                return res;
              };
              function passThroughWrite(buffer) {
                return buffer.toString(this.encoding);
              }
              function utf16DetectIncompleteChar(buffer) {
                this.charReceived = buffer.length % 2;
                this.charLength = this.charReceived ? 2 : 0;
              }
              function base64DetectIncompleteChar(buffer) {
                this.charReceived = buffer.length % 3;
                this.charLength = this.charReceived ? 3 : 0;
              }
            },
            /* 25 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              module2.exports = Transform;
              var Duplex = __webpack_require__(21);
              var util = __webpack_require__(18);
              util.inherits = __webpack_require__(12);
              util.inherits(Transform, Duplex);
              function TransformState(stream) {
                this.afterTransform = function(er, data) {
                  return afterTransform(stream, er, data);
                };
                this.needTransform = false;
                this.transforming = false;
                this.writecb = null;
                this.writechunk = null;
                this.writeencoding = null;
              }
              function afterTransform(stream, er, data) {
                var ts = stream._transformState;
                ts.transforming = false;
                var cb = ts.writecb;
                if (!cb)
                  return stream.emit("error", new Error("no writecb in Transform class"));
                ts.writechunk = null;
                ts.writecb = null;
                if (data !== null && data !== void 0)
                  stream.push(data);
                cb(er);
                var rs = stream._readableState;
                rs.reading = false;
                if (rs.needReadable || rs.length < rs.highWaterMark) {
                  stream._read(rs.highWaterMark);
                }
              }
              function Transform(options2) {
                if (!(this instanceof Transform))
                  return new Transform(options2);
                Duplex.call(this, options2);
                this._transformState = new TransformState(this);
                var stream = this;
                this._readableState.needReadable = true;
                this._readableState.sync = false;
                if (options2) {
                  if (typeof options2.transform === "function")
                    this._transform = options2.transform;
                  if (typeof options2.flush === "function")
                    this._flush = options2.flush;
                }
                this.once("prefinish", function() {
                  if (typeof this._flush === "function")
                    this._flush(function(er, data) {
                      done(stream, er, data);
                    });
                  else
                    done(stream);
                });
              }
              Transform.prototype.push = function(chunk, encoding) {
                this._transformState.needTransform = false;
                return Duplex.prototype.push.call(this, chunk, encoding);
              };
              Transform.prototype._transform = function(chunk, encoding, cb) {
                throw new Error("_transform() is not implemented");
              };
              Transform.prototype._write = function(chunk, encoding, cb) {
                var ts = this._transformState;
                ts.writecb = cb;
                ts.writechunk = chunk;
                ts.writeencoding = encoding;
                if (!ts.transforming) {
                  var rs = this._readableState;
                  if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
                    this._read(rs.highWaterMark);
                }
              };
              Transform.prototype._read = function(n) {
                var ts = this._transformState;
                if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                  ts.transforming = true;
                  this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                } else {
                  ts.needTransform = true;
                }
              };
              function done(stream, er, data) {
                if (er)
                  return stream.emit("error", er);
                if (data !== null && data !== void 0)
                  stream.push(data);
                var ws = stream._writableState;
                var ts = stream._transformState;
                if (ws.length)
                  throw new Error("Calling transform done when ws.length != 0");
                if (ts.transforming)
                  throw new Error("Calling transform done when still transforming");
                return stream.push(null);
              }
            },
            /* 26 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              module2.exports = PassThrough;
              var Transform = __webpack_require__(25);
              var util = __webpack_require__(18);
              util.inherits = __webpack_require__(12);
              util.inherits(PassThrough, Transform);
              function PassThrough(options2) {
                if (!(this instanceof PassThrough))
                  return new PassThrough(options2);
                Transform.call(this, options2);
              }
              PassThrough.prototype._transform = function(chunk, encoding, cb) {
                cb(null, chunk);
              };
            },
            /* 27 */
            /***/
            function(module2, exports2, __webpack_require__) {
              module2.exports = __webpack_require__(22);
            },
            /* 28 */
            /***/
            function(module2, exports2, __webpack_require__) {
              module2.exports = __webpack_require__(21);
            },
            /* 29 */
            /***/
            function(module2, exports2, __webpack_require__) {
              module2.exports = __webpack_require__(25);
            },
            /* 30 */
            /***/
            function(module2, exports2, __webpack_require__) {
              module2.exports = __webpack_require__(26);
            },
            /* 31 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var zlib_inflate = __webpack_require__(32);
              var utils = __webpack_require__(33);
              var strings = __webpack_require__(38);
              var c = __webpack_require__(39);
              var msg = __webpack_require__(40);
              var ZStream = __webpack_require__(41);
              var GZheader = __webpack_require__(42);
              var toString = Object.prototype.toString;
              function Inflate(options2) {
                if (!(this instanceof Inflate))
                  return new Inflate(options2);
                this.options = utils.assign({
                  chunkSize: 16384,
                  windowBits: 0,
                  to: ""
                }, options2 || {});
                var opt = this.options;
                if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
                  opt.windowBits = -opt.windowBits;
                  if (opt.windowBits === 0) {
                    opt.windowBits = -15;
                  }
                }
                if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options2 && options2.windowBits)) {
                  opt.windowBits += 32;
                }
                if (opt.windowBits > 15 && opt.windowBits < 48) {
                  if ((opt.windowBits & 15) === 0) {
                    opt.windowBits |= 15;
                  }
                }
                this.err = 0;
                this.msg = "";
                this.ended = false;
                this.chunks = [];
                this.strm = new ZStream();
                this.strm.avail_out = 0;
                var status = zlib_inflate.inflateInit2(
                  this.strm,
                  opt.windowBits
                );
                if (status !== c.Z_OK) {
                  throw new Error(msg[status]);
                }
                this.header = new GZheader();
                zlib_inflate.inflateGetHeader(this.strm, this.header);
              }
              Inflate.prototype.push = function(data, mode) {
                var strm = this.strm;
                var chunkSize = this.options.chunkSize;
                var dictionary = this.options.dictionary;
                var status, _mode;
                var next_out_utf8, tail, utf8str;
                var dict;
                var allowBufError = false;
                if (this.ended) {
                  return false;
                }
                _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;
                if (typeof data === "string") {
                  strm.input = strings.binstring2buf(data);
                } else if (toString.call(data) === "[object ArrayBuffer]") {
                  strm.input = new Uint8Array(data);
                } else {
                  strm.input = data;
                }
                strm.next_in = 0;
                strm.avail_in = strm.input.length;
                do {
                  if (strm.avail_out === 0) {
                    strm.output = new utils.Buf8(chunkSize);
                    strm.next_out = 0;
                    strm.avail_out = chunkSize;
                  }
                  status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
                  if (status === c.Z_NEED_DICT && dictionary) {
                    if (typeof dictionary === "string") {
                      dict = strings.string2buf(dictionary);
                    } else if (toString.call(dictionary) === "[object ArrayBuffer]") {
                      dict = new Uint8Array(dictionary);
                    } else {
                      dict = dictionary;
                    }
                    status = zlib_inflate.inflateSetDictionary(this.strm, dict);
                  }
                  if (status === c.Z_BUF_ERROR && allowBufError === true) {
                    status = c.Z_OK;
                    allowBufError = false;
                  }
                  if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
                    this.onEnd(status);
                    this.ended = true;
                    return false;
                  }
                  if (strm.next_out) {
                    if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {
                      if (this.options.to === "string") {
                        next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                        tail = strm.next_out - next_out_utf8;
                        utf8str = strings.buf2string(strm.output, next_out_utf8);
                        strm.next_out = tail;
                        strm.avail_out = chunkSize - tail;
                        if (tail) {
                          utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                        }
                        this.onData(utf8str);
                      } else {
                        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                      }
                    }
                  }
                  if (strm.avail_in === 0 && strm.avail_out === 0) {
                    allowBufError = true;
                  }
                } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
                if (status === c.Z_STREAM_END) {
                  _mode = c.Z_FINISH;
                }
                if (_mode === c.Z_FINISH) {
                  status = zlib_inflate.inflateEnd(this.strm);
                  this.onEnd(status);
                  this.ended = true;
                  return status === c.Z_OK;
                }
                if (_mode === c.Z_SYNC_FLUSH) {
                  this.onEnd(c.Z_OK);
                  strm.avail_out = 0;
                  return true;
                }
                return true;
              };
              Inflate.prototype.onData = function(chunk) {
                this.chunks.push(chunk);
              };
              Inflate.prototype.onEnd = function(status) {
                if (status === c.Z_OK) {
                  if (this.options.to === "string") {
                    this.result = this.chunks.join("");
                  } else {
                    this.result = utils.flattenChunks(this.chunks);
                  }
                }
                this.chunks = [];
                this.err = status;
                this.msg = this.strm.msg;
              };
              function inflate(input, options2) {
                var inflator = new Inflate(options2);
                inflator.push(input, true);
                if (inflator.err) {
                  throw inflator.msg || msg[inflator.err];
                }
                return inflator.result;
              }
              function inflateRaw(input, options2) {
                options2 = options2 || {};
                options2.raw = true;
                return inflate(input, options2);
              }
              exports2.Inflate = Inflate;
              exports2.inflate = inflate;
              exports2.inflateRaw = inflateRaw;
              exports2.ungzip = inflate;
            },
            /* 32 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var utils = __webpack_require__(33);
              var adler32 = __webpack_require__(34);
              var crc32 = __webpack_require__(35);
              var inflate_fast = __webpack_require__(36);
              var inflate_table = __webpack_require__(37);
              var CODES = 0;
              var LENS = 1;
              var DISTS = 2;
              var Z_FINISH = 4;
              var Z_BLOCK = 5;
              var Z_TREES = 6;
              var Z_OK = 0;
              var Z_STREAM_END = 1;
              var Z_NEED_DICT = 2;
              var Z_STREAM_ERROR = -2;
              var Z_DATA_ERROR = -3;
              var Z_MEM_ERROR = -4;
              var Z_BUF_ERROR = -5;
              var Z_DEFLATED = 8;
              var HEAD = 1;
              var FLAGS = 2;
              var TIME = 3;
              var OS = 4;
              var EXLEN = 5;
              var EXTRA = 6;
              var NAME = 7;
              var COMMENT = 8;
              var HCRC = 9;
              var DICTID = 10;
              var DICT = 11;
              var TYPE = 12;
              var TYPEDO = 13;
              var STORED = 14;
              var COPY_ = 15;
              var COPY = 16;
              var TABLE = 17;
              var LENLENS = 18;
              var CODELENS = 19;
              var LEN_ = 20;
              var LEN = 21;
              var LENEXT = 22;
              var DIST = 23;
              var DISTEXT = 24;
              var MATCH = 25;
              var LIT = 26;
              var CHECK = 27;
              var LENGTH = 28;
              var DONE = 29;
              var BAD = 30;
              var MEM = 31;
              var SYNC = 32;
              var ENOUGH_LENS = 852;
              var ENOUGH_DISTS = 592;
              var MAX_WBITS = 15;
              var DEF_WBITS = MAX_WBITS;
              function zswap32(q) {
                return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
              }
              function InflateState() {
                this.mode = 0;
                this.last = false;
                this.wrap = 0;
                this.havedict = false;
                this.flags = 0;
                this.dmax = 0;
                this.check = 0;
                this.total = 0;
                this.head = null;
                this.wbits = 0;
                this.wsize = 0;
                this.whave = 0;
                this.wnext = 0;
                this.window = null;
                this.hold = 0;
                this.bits = 0;
                this.length = 0;
                this.offset = 0;
                this.extra = 0;
                this.lencode = null;
                this.distcode = null;
                this.lenbits = 0;
                this.distbits = 0;
                this.ncode = 0;
                this.nlen = 0;
                this.ndist = 0;
                this.have = 0;
                this.next = null;
                this.lens = new utils.Buf16(320);
                this.work = new utils.Buf16(288);
                this.lendyn = null;
                this.distdyn = null;
                this.sane = 0;
                this.back = 0;
                this.was = 0;
              }
              function inflateResetKeep(strm) {
                var state2;
                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }
                state2 = strm.state;
                strm.total_in = strm.total_out = state2.total = 0;
                strm.msg = "";
                if (state2.wrap) {
                  strm.adler = state2.wrap & 1;
                }
                state2.mode = HEAD;
                state2.last = 0;
                state2.havedict = 0;
                state2.dmax = 32768;
                state2.head = null;
                state2.hold = 0;
                state2.bits = 0;
                state2.lencode = state2.lendyn = new utils.Buf32(ENOUGH_LENS);
                state2.distcode = state2.distdyn = new utils.Buf32(ENOUGH_DISTS);
                state2.sane = 1;
                state2.back = -1;
                return Z_OK;
              }
              function inflateReset(strm) {
                var state2;
                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }
                state2 = strm.state;
                state2.wsize = 0;
                state2.whave = 0;
                state2.wnext = 0;
                return inflateResetKeep(strm);
              }
              function inflateReset2(strm, windowBits) {
                var wrap;
                var state2;
                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }
                state2 = strm.state;
                if (windowBits < 0) {
                  wrap = 0;
                  windowBits = -windowBits;
                } else {
                  wrap = (windowBits >> 4) + 1;
                  if (windowBits < 48) {
                    windowBits &= 15;
                  }
                }
                if (windowBits && (windowBits < 8 || windowBits > 15)) {
                  return Z_STREAM_ERROR;
                }
                if (state2.window !== null && state2.wbits !== windowBits) {
                  state2.window = null;
                }
                state2.wrap = wrap;
                state2.wbits = windowBits;
                return inflateReset(strm);
              }
              function inflateInit2(strm, windowBits) {
                var ret;
                var state2;
                if (!strm) {
                  return Z_STREAM_ERROR;
                }
                state2 = new InflateState();
                strm.state = state2;
                state2.window = null;
                ret = inflateReset2(strm, windowBits);
                if (ret !== Z_OK) {
                  strm.state = null;
                }
                return ret;
              }
              function inflateInit(strm) {
                return inflateInit2(strm, DEF_WBITS);
              }
              var virgin = true;
              var lenfix, distfix;
              function fixedtables(state2) {
                if (virgin) {
                  var sym;
                  lenfix = new utils.Buf32(512);
                  distfix = new utils.Buf32(32);
                  sym = 0;
                  while (sym < 144) {
                    state2.lens[sym++] = 8;
                  }
                  while (sym < 256) {
                    state2.lens[sym++] = 9;
                  }
                  while (sym < 280) {
                    state2.lens[sym++] = 7;
                  }
                  while (sym < 288) {
                    state2.lens[sym++] = 8;
                  }
                  inflate_table(LENS, state2.lens, 0, 288, lenfix, 0, state2.work, { bits: 9 });
                  sym = 0;
                  while (sym < 32) {
                    state2.lens[sym++] = 5;
                  }
                  inflate_table(DISTS, state2.lens, 0, 32, distfix, 0, state2.work, { bits: 5 });
                  virgin = false;
                }
                state2.lencode = lenfix;
                state2.lenbits = 9;
                state2.distcode = distfix;
                state2.distbits = 5;
              }
              function updatewindow(strm, src, end, copy) {
                var dist;
                var state2 = strm.state;
                if (state2.window === null) {
                  state2.wsize = 1 << state2.wbits;
                  state2.wnext = 0;
                  state2.whave = 0;
                  state2.window = new utils.Buf8(state2.wsize);
                }
                if (copy >= state2.wsize) {
                  utils.arraySet(state2.window, src, end - state2.wsize, state2.wsize, 0);
                  state2.wnext = 0;
                  state2.whave = state2.wsize;
                } else {
                  dist = state2.wsize - state2.wnext;
                  if (dist > copy) {
                    dist = copy;
                  }
                  utils.arraySet(state2.window, src, end - copy, dist, state2.wnext);
                  copy -= dist;
                  if (copy) {
                    utils.arraySet(state2.window, src, end - copy, copy, 0);
                    state2.wnext = copy;
                    state2.whave = state2.wsize;
                  } else {
                    state2.wnext += dist;
                    if (state2.wnext === state2.wsize) {
                      state2.wnext = 0;
                    }
                    if (state2.whave < state2.wsize) {
                      state2.whave += dist;
                    }
                  }
                }
                return 0;
              }
              function inflate(strm, flush) {
                var state2;
                var input, output;
                var next;
                var put;
                var have, left;
                var hold;
                var bits;
                var _in, _out;
                var copy;
                var from;
                var from_source;
                var here = 0;
                var here_bits, here_op, here_val;
                var last_bits, last_op, last_val;
                var len;
                var ret;
                var hbuf = new utils.Buf8(4);
                var opts;
                var n;
                var order = (
                  /* permutation of code lengths */
                  [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
                );
                if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
                  return Z_STREAM_ERROR;
                }
                state2 = strm.state;
                if (state2.mode === TYPE) {
                  state2.mode = TYPEDO;
                }
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state2.hold;
                bits = state2.bits;
                _in = have;
                _out = left;
                ret = Z_OK;
                inf_leave:
                  for (; ; ) {
                    switch (state2.mode) {
                      case HEAD:
                        if (state2.wrap === 0) {
                          state2.mode = TYPEDO;
                          break;
                        }
                        while (bits < 16) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        if (state2.wrap & 2 && hold === 35615) {
                          state2.check = 0;
                          hbuf[0] = hold & 255;
                          hbuf[1] = hold >>> 8 & 255;
                          state2.check = crc32(state2.check, hbuf, 2, 0);
                          hold = 0;
                          bits = 0;
                          state2.mode = FLAGS;
                          break;
                        }
                        state2.flags = 0;
                        if (state2.head) {
                          state2.head.done = false;
                        }
                        if (!(state2.wrap & 1) || /* check if zlib header allowed */
                        (((hold & 255) << 8) + (hold >> 8)) % 31) {
                          strm.msg = "incorrect header check";
                          state2.mode = BAD;
                          break;
                        }
                        if ((hold & 15) !== Z_DEFLATED) {
                          strm.msg = "unknown compression method";
                          state2.mode = BAD;
                          break;
                        }
                        hold >>>= 4;
                        bits -= 4;
                        len = (hold & 15) + 8;
                        if (state2.wbits === 0) {
                          state2.wbits = len;
                        } else if (len > state2.wbits) {
                          strm.msg = "invalid window size";
                          state2.mode = BAD;
                          break;
                        }
                        state2.dmax = 1 << len;
                        strm.adler = state2.check = 1;
                        state2.mode = hold & 512 ? DICTID : TYPE;
                        hold = 0;
                        bits = 0;
                        break;
                      case FLAGS:
                        while (bits < 16) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        state2.flags = hold;
                        if ((state2.flags & 255) !== Z_DEFLATED) {
                          strm.msg = "unknown compression method";
                          state2.mode = BAD;
                          break;
                        }
                        if (state2.flags & 57344) {
                          strm.msg = "unknown header flags set";
                          state2.mode = BAD;
                          break;
                        }
                        if (state2.head) {
                          state2.head.text = hold >> 8 & 1;
                        }
                        if (state2.flags & 512) {
                          hbuf[0] = hold & 255;
                          hbuf[1] = hold >>> 8 & 255;
                          state2.check = crc32(state2.check, hbuf, 2, 0);
                        }
                        hold = 0;
                        bits = 0;
                        state2.mode = TIME;
                      case TIME:
                        while (bits < 32) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        if (state2.head) {
                          state2.head.time = hold;
                        }
                        if (state2.flags & 512) {
                          hbuf[0] = hold & 255;
                          hbuf[1] = hold >>> 8 & 255;
                          hbuf[2] = hold >>> 16 & 255;
                          hbuf[3] = hold >>> 24 & 255;
                          state2.check = crc32(state2.check, hbuf, 4, 0);
                        }
                        hold = 0;
                        bits = 0;
                        state2.mode = OS;
                      case OS:
                        while (bits < 16) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        if (state2.head) {
                          state2.head.xflags = hold & 255;
                          state2.head.os = hold >> 8;
                        }
                        if (state2.flags & 512) {
                          hbuf[0] = hold & 255;
                          hbuf[1] = hold >>> 8 & 255;
                          state2.check = crc32(state2.check, hbuf, 2, 0);
                        }
                        hold = 0;
                        bits = 0;
                        state2.mode = EXLEN;
                      case EXLEN:
                        if (state2.flags & 1024) {
                          while (bits < 16) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          state2.length = hold;
                          if (state2.head) {
                            state2.head.extra_len = hold;
                          }
                          if (state2.flags & 512) {
                            hbuf[0] = hold & 255;
                            hbuf[1] = hold >>> 8 & 255;
                            state2.check = crc32(state2.check, hbuf, 2, 0);
                          }
                          hold = 0;
                          bits = 0;
                        } else if (state2.head) {
                          state2.head.extra = null;
                        }
                        state2.mode = EXTRA;
                      case EXTRA:
                        if (state2.flags & 1024) {
                          copy = state2.length;
                          if (copy > have) {
                            copy = have;
                          }
                          if (copy) {
                            if (state2.head) {
                              len = state2.head.extra_len - state2.length;
                              if (!state2.head.extra) {
                                state2.head.extra = new Array(state2.head.extra_len);
                              }
                              utils.arraySet(
                                state2.head.extra,
                                input,
                                next,
                                // extra field is limited to 65536 bytes
                                // - no need for additional size check
                                copy,
                                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                                len
                              );
                            }
                            if (state2.flags & 512) {
                              state2.check = crc32(state2.check, input, copy, next);
                            }
                            have -= copy;
                            next += copy;
                            state2.length -= copy;
                          }
                          if (state2.length) {
                            break inf_leave;
                          }
                        }
                        state2.length = 0;
                        state2.mode = NAME;
                      case NAME:
                        if (state2.flags & 2048) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          copy = 0;
                          do {
                            len = input[next + copy++];
                            if (state2.head && len && state2.length < 65536) {
                              state2.head.name += String.fromCharCode(len);
                            }
                          } while (len && copy < have);
                          if (state2.flags & 512) {
                            state2.check = crc32(state2.check, input, copy, next);
                          }
                          have -= copy;
                          next += copy;
                          if (len) {
                            break inf_leave;
                          }
                        } else if (state2.head) {
                          state2.head.name = null;
                        }
                        state2.length = 0;
                        state2.mode = COMMENT;
                      case COMMENT:
                        if (state2.flags & 4096) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          copy = 0;
                          do {
                            len = input[next + copy++];
                            if (state2.head && len && state2.length < 65536) {
                              state2.head.comment += String.fromCharCode(len);
                            }
                          } while (len && copy < have);
                          if (state2.flags & 512) {
                            state2.check = crc32(state2.check, input, copy, next);
                          }
                          have -= copy;
                          next += copy;
                          if (len) {
                            break inf_leave;
                          }
                        } else if (state2.head) {
                          state2.head.comment = null;
                        }
                        state2.mode = HCRC;
                      case HCRC:
                        if (state2.flags & 512) {
                          while (bits < 16) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          if (hold !== (state2.check & 65535)) {
                            strm.msg = "header crc mismatch";
                            state2.mode = BAD;
                            break;
                          }
                          hold = 0;
                          bits = 0;
                        }
                        if (state2.head) {
                          state2.head.hcrc = state2.flags >> 9 & 1;
                          state2.head.done = true;
                        }
                        strm.adler = state2.check = 0;
                        state2.mode = TYPE;
                        break;
                      case DICTID:
                        while (bits < 32) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        strm.adler = state2.check = zswap32(hold);
                        hold = 0;
                        bits = 0;
                        state2.mode = DICT;
                      case DICT:
                        if (state2.havedict === 0) {
                          strm.next_out = put;
                          strm.avail_out = left;
                          strm.next_in = next;
                          strm.avail_in = have;
                          state2.hold = hold;
                          state2.bits = bits;
                          return Z_NEED_DICT;
                        }
                        strm.adler = state2.check = 1;
                        state2.mode = TYPE;
                      case TYPE:
                        if (flush === Z_BLOCK || flush === Z_TREES) {
                          break inf_leave;
                        }
                      case TYPEDO:
                        if (state2.last) {
                          hold >>>= bits & 7;
                          bits -= bits & 7;
                          state2.mode = CHECK;
                          break;
                        }
                        while (bits < 3) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        state2.last = hold & 1;
                        hold >>>= 1;
                        bits -= 1;
                        switch (hold & 3) {
                          case 0:
                            state2.mode = STORED;
                            break;
                          case 1:
                            fixedtables(state2);
                            state2.mode = LEN_;
                            if (flush === Z_TREES) {
                              hold >>>= 2;
                              bits -= 2;
                              break inf_leave;
                            }
                            break;
                          case 2:
                            state2.mode = TABLE;
                            break;
                          case 3:
                            strm.msg = "invalid block type";
                            state2.mode = BAD;
                        }
                        hold >>>= 2;
                        bits -= 2;
                        break;
                      case STORED:
                        hold >>>= bits & 7;
                        bits -= bits & 7;
                        while (bits < 32) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                          strm.msg = "invalid stored block lengths";
                          state2.mode = BAD;
                          break;
                        }
                        state2.length = hold & 65535;
                        hold = 0;
                        bits = 0;
                        state2.mode = COPY_;
                        if (flush === Z_TREES) {
                          break inf_leave;
                        }
                      case COPY_:
                        state2.mode = COPY;
                      case COPY:
                        copy = state2.length;
                        if (copy) {
                          if (copy > have) {
                            copy = have;
                          }
                          if (copy > left) {
                            copy = left;
                          }
                          if (copy === 0) {
                            break inf_leave;
                          }
                          utils.arraySet(output, input, next, copy, put);
                          have -= copy;
                          next += copy;
                          left -= copy;
                          put += copy;
                          state2.length -= copy;
                          break;
                        }
                        state2.mode = TYPE;
                        break;
                      case TABLE:
                        while (bits < 14) {
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        state2.nlen = (hold & 31) + 257;
                        hold >>>= 5;
                        bits -= 5;
                        state2.ndist = (hold & 31) + 1;
                        hold >>>= 5;
                        bits -= 5;
                        state2.ncode = (hold & 15) + 4;
                        hold >>>= 4;
                        bits -= 4;
                        if (state2.nlen > 286 || state2.ndist > 30) {
                          strm.msg = "too many length or distance symbols";
                          state2.mode = BAD;
                          break;
                        }
                        state2.have = 0;
                        state2.mode = LENLENS;
                      case LENLENS:
                        while (state2.have < state2.ncode) {
                          while (bits < 3) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          state2.lens[order[state2.have++]] = hold & 7;
                          hold >>>= 3;
                          bits -= 3;
                        }
                        while (state2.have < 19) {
                          state2.lens[order[state2.have++]] = 0;
                        }
                        state2.lencode = state2.lendyn;
                        state2.lenbits = 7;
                        opts = { bits: state2.lenbits };
                        ret = inflate_table(CODES, state2.lens, 0, 19, state2.lencode, 0, state2.work, opts);
                        state2.lenbits = opts.bits;
                        if (ret) {
                          strm.msg = "invalid code lengths set";
                          state2.mode = BAD;
                          break;
                        }
                        state2.have = 0;
                        state2.mode = CODELENS;
                      case CODELENS:
                        while (state2.have < state2.nlen + state2.ndist) {
                          for (; ; ) {
                            here = state2.lencode[hold & (1 << state2.lenbits) - 1];
                            here_bits = here >>> 24;
                            here_op = here >>> 16 & 255;
                            here_val = here & 65535;
                            if (here_bits <= bits) {
                              break;
                            }
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          if (here_val < 16) {
                            hold >>>= here_bits;
                            bits -= here_bits;
                            state2.lens[state2.have++] = here_val;
                          } else {
                            if (here_val === 16) {
                              n = here_bits + 2;
                              while (bits < n) {
                                if (have === 0) {
                                  break inf_leave;
                                }
                                have--;
                                hold += input[next++] << bits;
                                bits += 8;
                              }
                              hold >>>= here_bits;
                              bits -= here_bits;
                              if (state2.have === 0) {
                                strm.msg = "invalid bit length repeat";
                                state2.mode = BAD;
                                break;
                              }
                              len = state2.lens[state2.have - 1];
                              copy = 3 + (hold & 3);
                              hold >>>= 2;
                              bits -= 2;
                            } else if (here_val === 17) {
                              n = here_bits + 3;
                              while (bits < n) {
                                if (have === 0) {
                                  break inf_leave;
                                }
                                have--;
                                hold += input[next++] << bits;
                                bits += 8;
                              }
                              hold >>>= here_bits;
                              bits -= here_bits;
                              len = 0;
                              copy = 3 + (hold & 7);
                              hold >>>= 3;
                              bits -= 3;
                            } else {
                              n = here_bits + 7;
                              while (bits < n) {
                                if (have === 0) {
                                  break inf_leave;
                                }
                                have--;
                                hold += input[next++] << bits;
                                bits += 8;
                              }
                              hold >>>= here_bits;
                              bits -= here_bits;
                              len = 0;
                              copy = 11 + (hold & 127);
                              hold >>>= 7;
                              bits -= 7;
                            }
                            if (state2.have + copy > state2.nlen + state2.ndist) {
                              strm.msg = "invalid bit length repeat";
                              state2.mode = BAD;
                              break;
                            }
                            while (copy--) {
                              state2.lens[state2.have++] = len;
                            }
                          }
                        }
                        if (state2.mode === BAD) {
                          break;
                        }
                        if (state2.lens[256] === 0) {
                          strm.msg = "invalid code -- missing end-of-block";
                          state2.mode = BAD;
                          break;
                        }
                        state2.lenbits = 9;
                        opts = { bits: state2.lenbits };
                        ret = inflate_table(LENS, state2.lens, 0, state2.nlen, state2.lencode, 0, state2.work, opts);
                        state2.lenbits = opts.bits;
                        if (ret) {
                          strm.msg = "invalid literal/lengths set";
                          state2.mode = BAD;
                          break;
                        }
                        state2.distbits = 6;
                        state2.distcode = state2.distdyn;
                        opts = { bits: state2.distbits };
                        ret = inflate_table(DISTS, state2.lens, state2.nlen, state2.ndist, state2.distcode, 0, state2.work, opts);
                        state2.distbits = opts.bits;
                        if (ret) {
                          strm.msg = "invalid distances set";
                          state2.mode = BAD;
                          break;
                        }
                        state2.mode = LEN_;
                        if (flush === Z_TREES) {
                          break inf_leave;
                        }
                      case LEN_:
                        state2.mode = LEN;
                      case LEN:
                        if (have >= 6 && left >= 258) {
                          strm.next_out = put;
                          strm.avail_out = left;
                          strm.next_in = next;
                          strm.avail_in = have;
                          state2.hold = hold;
                          state2.bits = bits;
                          inflate_fast(strm, _out);
                          put = strm.next_out;
                          output = strm.output;
                          left = strm.avail_out;
                          next = strm.next_in;
                          input = strm.input;
                          have = strm.avail_in;
                          hold = state2.hold;
                          bits = state2.bits;
                          if (state2.mode === TYPE) {
                            state2.back = -1;
                          }
                          break;
                        }
                        state2.back = 0;
                        for (; ; ) {
                          here = state2.lencode[hold & (1 << state2.lenbits) - 1];
                          here_bits = here >>> 24;
                          here_op = here >>> 16 & 255;
                          here_val = here & 65535;
                          if (here_bits <= bits) {
                            break;
                          }
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        if (here_op && (here_op & 240) === 0) {
                          last_bits = here_bits;
                          last_op = here_op;
                          last_val = here_val;
                          for (; ; ) {
                            here = state2.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                            here_bits = here >>> 24;
                            here_op = here >>> 16 & 255;
                            here_val = here & 65535;
                            if (last_bits + here_bits <= bits) {
                              break;
                            }
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= last_bits;
                          bits -= last_bits;
                          state2.back += last_bits;
                        }
                        hold >>>= here_bits;
                        bits -= here_bits;
                        state2.back += here_bits;
                        state2.length = here_val;
                        if (here_op === 0) {
                          state2.mode = LIT;
                          break;
                        }
                        if (here_op & 32) {
                          state2.back = -1;
                          state2.mode = TYPE;
                          break;
                        }
                        if (here_op & 64) {
                          strm.msg = "invalid literal/length code";
                          state2.mode = BAD;
                          break;
                        }
                        state2.extra = here_op & 15;
                        state2.mode = LENEXT;
                      case LENEXT:
                        if (state2.extra) {
                          n = state2.extra;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          state2.length += hold & (1 << state2.extra) - 1;
                          hold >>>= state2.extra;
                          bits -= state2.extra;
                          state2.back += state2.extra;
                        }
                        state2.was = state2.length;
                        state2.mode = DIST;
                      case DIST:
                        for (; ; ) {
                          here = state2.distcode[hold & (1 << state2.distbits) - 1];
                          here_bits = here >>> 24;
                          here_op = here >>> 16 & 255;
                          here_val = here & 65535;
                          if (here_bits <= bits) {
                            break;
                          }
                          if (have === 0) {
                            break inf_leave;
                          }
                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        }
                        if ((here_op & 240) === 0) {
                          last_bits = here_bits;
                          last_op = here_op;
                          last_val = here_val;
                          for (; ; ) {
                            here = state2.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                            here_bits = here >>> 24;
                            here_op = here >>> 16 & 255;
                            here_val = here & 65535;
                            if (last_bits + here_bits <= bits) {
                              break;
                            }
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= last_bits;
                          bits -= last_bits;
                          state2.back += last_bits;
                        }
                        hold >>>= here_bits;
                        bits -= here_bits;
                        state2.back += here_bits;
                        if (here_op & 64) {
                          strm.msg = "invalid distance code";
                          state2.mode = BAD;
                          break;
                        }
                        state2.offset = here_val;
                        state2.extra = here_op & 15;
                        state2.mode = DISTEXT;
                      case DISTEXT:
                        if (state2.extra) {
                          n = state2.extra;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          state2.offset += hold & (1 << state2.extra) - 1;
                          hold >>>= state2.extra;
                          bits -= state2.extra;
                          state2.back += state2.extra;
                        }
                        if (state2.offset > state2.dmax) {
                          strm.msg = "invalid distance too far back";
                          state2.mode = BAD;
                          break;
                        }
                        state2.mode = MATCH;
                      case MATCH:
                        if (left === 0) {
                          break inf_leave;
                        }
                        copy = _out - left;
                        if (state2.offset > copy) {
                          copy = state2.offset - copy;
                          if (copy > state2.whave) {
                            if (state2.sane) {
                              strm.msg = "invalid distance too far back";
                              state2.mode = BAD;
                              break;
                            }
                          }
                          if (copy > state2.wnext) {
                            copy -= state2.wnext;
                            from = state2.wsize - copy;
                          } else {
                            from = state2.wnext - copy;
                          }
                          if (copy > state2.length) {
                            copy = state2.length;
                          }
                          from_source = state2.window;
                        } else {
                          from_source = output;
                          from = put - state2.offset;
                          copy = state2.length;
                        }
                        if (copy > left) {
                          copy = left;
                        }
                        left -= copy;
                        state2.length -= copy;
                        do {
                          output[put++] = from_source[from++];
                        } while (--copy);
                        if (state2.length === 0) {
                          state2.mode = LEN;
                        }
                        break;
                      case LIT:
                        if (left === 0) {
                          break inf_leave;
                        }
                        output[put++] = state2.length;
                        left--;
                        state2.mode = LEN;
                        break;
                      case CHECK:
                        if (state2.wrap) {
                          while (bits < 32) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold |= input[next++] << bits;
                            bits += 8;
                          }
                          _out -= left;
                          strm.total_out += _out;
                          state2.total += _out;
                          if (_out) {
                            strm.adler = state2.check = /*UPDATE(state.check, put - _out, _out);*/
                            state2.flags ? crc32(state2.check, output, _out, put - _out) : adler32(state2.check, output, _out, put - _out);
                          }
                          _out = left;
                          if ((state2.flags ? hold : zswap32(hold)) !== state2.check) {
                            strm.msg = "incorrect data check";
                            state2.mode = BAD;
                            break;
                          }
                          hold = 0;
                          bits = 0;
                        }
                        state2.mode = LENGTH;
                      case LENGTH:
                        if (state2.wrap && state2.flags) {
                          while (bits < 32) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          if (hold !== (state2.total & 4294967295)) {
                            strm.msg = "incorrect length check";
                            state2.mode = BAD;
                            break;
                          }
                          hold = 0;
                          bits = 0;
                        }
                        state2.mode = DONE;
                      case DONE:
                        ret = Z_STREAM_END;
                        break inf_leave;
                      case BAD:
                        ret = Z_DATA_ERROR;
                        break inf_leave;
                      case MEM:
                        return Z_MEM_ERROR;
                      case SYNC:
                      default:
                        return Z_STREAM_ERROR;
                    }
                  }
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state2.hold = hold;
                state2.bits = bits;
                if (state2.wsize || _out !== strm.avail_out && state2.mode < BAD && (state2.mode < CHECK || flush !== Z_FINISH)) {
                  if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
                    state2.mode = MEM;
                    return Z_MEM_ERROR;
                  }
                }
                _in -= strm.avail_in;
                _out -= strm.avail_out;
                strm.total_in += _in;
                strm.total_out += _out;
                state2.total += _out;
                if (state2.wrap && _out) {
                  strm.adler = state2.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
                  state2.flags ? crc32(state2.check, output, _out, strm.next_out - _out) : adler32(state2.check, output, _out, strm.next_out - _out);
                }
                strm.data_type = state2.bits + (state2.last ? 64 : 0) + (state2.mode === TYPE ? 128 : 0) + (state2.mode === LEN_ || state2.mode === COPY_ ? 256 : 0);
                if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
                  ret = Z_BUF_ERROR;
                }
                return ret;
              }
              function inflateEnd(strm) {
                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }
                var state2 = strm.state;
                if (state2.window) {
                  state2.window = null;
                }
                strm.state = null;
                return Z_OK;
              }
              function inflateGetHeader(strm, head) {
                var state2;
                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }
                state2 = strm.state;
                if ((state2.wrap & 2) === 0) {
                  return Z_STREAM_ERROR;
                }
                state2.head = head;
                head.done = false;
                return Z_OK;
              }
              function inflateSetDictionary(strm, dictionary) {
                var dictLength = dictionary.length;
                var state2;
                var dictid;
                var ret;
                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }
                state2 = strm.state;
                if (state2.wrap !== 0 && state2.mode !== DICT) {
                  return Z_STREAM_ERROR;
                }
                if (state2.mode === DICT) {
                  dictid = 1;
                  dictid = adler32(dictid, dictionary, dictLength, 0);
                  if (dictid !== state2.check) {
                    return Z_DATA_ERROR;
                  }
                }
                ret = updatewindow(strm, dictionary, dictLength, dictLength);
                if (ret) {
                  state2.mode = MEM;
                  return Z_MEM_ERROR;
                }
                state2.havedict = 1;
                return Z_OK;
              }
              exports2.inflateReset = inflateReset;
              exports2.inflateReset2 = inflateReset2;
              exports2.inflateResetKeep = inflateResetKeep;
              exports2.inflateInit = inflateInit;
              exports2.inflateInit2 = inflateInit2;
              exports2.inflate = inflate;
              exports2.inflateEnd = inflateEnd;
              exports2.inflateGetHeader = inflateGetHeader;
              exports2.inflateSetDictionary = inflateSetDictionary;
              exports2.inflateInfo = "pako inflate (from Nodeca project)";
            },
            /* 33 */
            /***/
            function(module2, exports2) {
              "use strict";
              var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
              exports2.assign = function(obj) {
                var sources = Array.prototype.slice.call(arguments, 1);
                while (sources.length) {
                  var source = sources.shift();
                  if (!source) {
                    continue;
                  }
                  if (typeof source !== "object") {
                    throw new TypeError(source + "must be non-object");
                  }
                  for (var p in source) {
                    if (source.hasOwnProperty(p)) {
                      obj[p] = source[p];
                    }
                  }
                }
                return obj;
              };
              exports2.shrinkBuf = function(buf, size) {
                if (buf.length === size) {
                  return buf;
                }
                if (buf.subarray) {
                  return buf.subarray(0, size);
                }
                buf.length = size;
                return buf;
              };
              var fnTyped = {
                arraySet: function(dest, src, src_offs, len, dest_offs) {
                  if (src.subarray && dest.subarray) {
                    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                    return;
                  }
                  for (var i2 = 0; i2 < len; i2++) {
                    dest[dest_offs + i2] = src[src_offs + i2];
                  }
                },
                // Join array of chunks to single array.
                flattenChunks: function(chunks) {
                  var i2, l, len, pos, chunk, result;
                  len = 0;
                  for (i2 = 0, l = chunks.length; i2 < l; i2++) {
                    len += chunks[i2].length;
                  }
                  result = new Uint8Array(len);
                  pos = 0;
                  for (i2 = 0, l = chunks.length; i2 < l; i2++) {
                    chunk = chunks[i2];
                    result.set(chunk, pos);
                    pos += chunk.length;
                  }
                  return result;
                }
              };
              var fnUntyped = {
                arraySet: function(dest, src, src_offs, len, dest_offs) {
                  for (var i2 = 0; i2 < len; i2++) {
                    dest[dest_offs + i2] = src[src_offs + i2];
                  }
                },
                // Join array of chunks to single array.
                flattenChunks: function(chunks) {
                  return [].concat.apply([], chunks);
                }
              };
              exports2.setTyped = function(on) {
                if (on) {
                  exports2.Buf8 = Uint8Array;
                  exports2.Buf16 = Uint16Array;
                  exports2.Buf32 = Int32Array;
                  exports2.assign(exports2, fnTyped);
                } else {
                  exports2.Buf8 = Array;
                  exports2.Buf16 = Array;
                  exports2.Buf32 = Array;
                  exports2.assign(exports2, fnUntyped);
                }
              };
              exports2.setTyped(TYPED_OK);
            },
            /* 34 */
            /***/
            function(module2, exports2) {
              "use strict";
              function adler32(adler, buf, len, pos) {
                var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
                while (len !== 0) {
                  n = len > 2e3 ? 2e3 : len;
                  len -= n;
                  do {
                    s1 = s1 + buf[pos++] | 0;
                    s2 = s2 + s1 | 0;
                  } while (--n);
                  s1 %= 65521;
                  s2 %= 65521;
                }
                return s1 | s2 << 16 | 0;
              }
              module2.exports = adler32;
            },
            /* 35 */
            /***/
            function(module2, exports2) {
              "use strict";
              function makeTable() {
                var c, table = [];
                for (var n = 0; n < 256; n++) {
                  c = n;
                  for (var k2 = 0; k2 < 8; k2++) {
                    c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
                  }
                  table[n] = c;
                }
                return table;
              }
              var crcTable = makeTable();
              function crc32(crc, buf, len, pos) {
                var t = crcTable, end = pos + len;
                crc ^= -1;
                for (var i2 = pos; i2 < end; i2++) {
                  crc = crc >>> 8 ^ t[(crc ^ buf[i2]) & 255];
                }
                return crc ^ -1;
              }
              module2.exports = crc32;
            },
            /* 36 */
            /***/
            function(module2, exports2) {
              "use strict";
              var BAD = 30;
              var TYPE = 12;
              module2.exports = function inflate_fast(strm, start) {
                var state2;
                var _in;
                var last;
                var _out;
                var beg;
                var end;
                var dmax;
                var wsize;
                var whave;
                var wnext;
                var s_window;
                var hold;
                var bits;
                var lcode;
                var dcode;
                var lmask;
                var dmask;
                var here;
                var op;
                var len;
                var dist;
                var from;
                var from_source;
                var input, output;
                state2 = strm.state;
                _in = strm.next_in;
                input = strm.input;
                last = _in + (strm.avail_in - 5);
                _out = strm.next_out;
                output = strm.output;
                beg = _out - (start - strm.avail_out);
                end = _out + (strm.avail_out - 257);
                dmax = state2.dmax;
                wsize = state2.wsize;
                whave = state2.whave;
                wnext = state2.wnext;
                s_window = state2.window;
                hold = state2.hold;
                bits = state2.bits;
                lcode = state2.lencode;
                dcode = state2.distcode;
                lmask = (1 << state2.lenbits) - 1;
                dmask = (1 << state2.distbits) - 1;
                top:
                  do {
                    if (bits < 15) {
                      hold += input[_in++] << bits;
                      bits += 8;
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                    here = lcode[hold & lmask];
                    dolen:
                      for (; ; ) {
                        op = here >>> 24;
                        hold >>>= op;
                        bits -= op;
                        op = here >>> 16 & 255;
                        if (op === 0) {
                          output[_out++] = here & 65535;
                        } else if (op & 16) {
                          len = here & 65535;
                          op &= 15;
                          if (op) {
                            if (bits < op) {
                              hold += input[_in++] << bits;
                              bits += 8;
                            }
                            len += hold & (1 << op) - 1;
                            hold >>>= op;
                            bits -= op;
                          }
                          if (bits < 15) {
                            hold += input[_in++] << bits;
                            bits += 8;
                            hold += input[_in++] << bits;
                            bits += 8;
                          }
                          here = dcode[hold & dmask];
                          dodist:
                            for (; ; ) {
                              op = here >>> 24;
                              hold >>>= op;
                              bits -= op;
                              op = here >>> 16 & 255;
                              if (op & 16) {
                                dist = here & 65535;
                                op &= 15;
                                if (bits < op) {
                                  hold += input[_in++] << bits;
                                  bits += 8;
                                  if (bits < op) {
                                    hold += input[_in++] << bits;
                                    bits += 8;
                                  }
                                }
                                dist += hold & (1 << op) - 1;
                                if (dist > dmax) {
                                  strm.msg = "invalid distance too far back";
                                  state2.mode = BAD;
                                  break top;
                                }
                                hold >>>= op;
                                bits -= op;
                                op = _out - beg;
                                if (dist > op) {
                                  op = dist - op;
                                  if (op > whave) {
                                    if (state2.sane) {
                                      strm.msg = "invalid distance too far back";
                                      state2.mode = BAD;
                                      break top;
                                    }
                                  }
                                  from = 0;
                                  from_source = s_window;
                                  if (wnext === 0) {
                                    from += wsize - op;
                                    if (op < len) {
                                      len -= op;
                                      do {
                                        output[_out++] = s_window[from++];
                                      } while (--op);
                                      from = _out - dist;
                                      from_source = output;
                                    }
                                  } else if (wnext < op) {
                                    from += wsize + wnext - op;
                                    op -= wnext;
                                    if (op < len) {
                                      len -= op;
                                      do {
                                        output[_out++] = s_window[from++];
                                      } while (--op);
                                      from = 0;
                                      if (wnext < len) {
                                        op = wnext;
                                        len -= op;
                                        do {
                                          output[_out++] = s_window[from++];
                                        } while (--op);
                                        from = _out - dist;
                                        from_source = output;
                                      }
                                    }
                                  } else {
                                    from += wnext - op;
                                    if (op < len) {
                                      len -= op;
                                      do {
                                        output[_out++] = s_window[from++];
                                      } while (--op);
                                      from = _out - dist;
                                      from_source = output;
                                    }
                                  }
                                  while (len > 2) {
                                    output[_out++] = from_source[from++];
                                    output[_out++] = from_source[from++];
                                    output[_out++] = from_source[from++];
                                    len -= 3;
                                  }
                                  if (len) {
                                    output[_out++] = from_source[from++];
                                    if (len > 1) {
                                      output[_out++] = from_source[from++];
                                    }
                                  }
                                } else {
                                  from = _out - dist;
                                  do {
                                    output[_out++] = output[from++];
                                    output[_out++] = output[from++];
                                    output[_out++] = output[from++];
                                    len -= 3;
                                  } while (len > 2);
                                  if (len) {
                                    output[_out++] = output[from++];
                                    if (len > 1) {
                                      output[_out++] = output[from++];
                                    }
                                  }
                                }
                              } else if ((op & 64) === 0) {
                                here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                                continue dodist;
                              } else {
                                strm.msg = "invalid distance code";
                                state2.mode = BAD;
                                break top;
                              }
                              break;
                            }
                        } else if ((op & 64) === 0) {
                          here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                          continue dolen;
                        } else if (op & 32) {
                          state2.mode = TYPE;
                          break top;
                        } else {
                          strm.msg = "invalid literal/length code";
                          state2.mode = BAD;
                          break top;
                        }
                        break;
                      }
                  } while (_in < last && _out < end);
                len = bits >> 3;
                _in -= len;
                bits -= len << 3;
                hold &= (1 << bits) - 1;
                strm.next_in = _in;
                strm.next_out = _out;
                strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
                strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
                state2.hold = hold;
                state2.bits = bits;
                return;
              };
            },
            /* 37 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var utils = __webpack_require__(33);
              var MAXBITS = 15;
              var ENOUGH_LENS = 852;
              var ENOUGH_DISTS = 592;
              var CODES = 0;
              var LENS = 1;
              var DISTS = 2;
              var lbase = [
                /* Length codes 257..285 base */
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                13,
                15,
                17,
                19,
                23,
                27,
                31,
                35,
                43,
                51,
                59,
                67,
                83,
                99,
                115,
                131,
                163,
                195,
                227,
                258,
                0,
                0
              ];
              var lext = [
                /* Length codes 257..285 extra */
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                17,
                17,
                17,
                17,
                18,
                18,
                18,
                18,
                19,
                19,
                19,
                19,
                20,
                20,
                20,
                20,
                21,
                21,
                21,
                21,
                16,
                72,
                78
              ];
              var dbase = [
                /* Distance codes 0..29 base */
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                13,
                17,
                25,
                33,
                49,
                65,
                97,
                129,
                193,
                257,
                385,
                513,
                769,
                1025,
                1537,
                2049,
                3073,
                4097,
                6145,
                8193,
                12289,
                16385,
                24577,
                0,
                0
              ];
              var dext = [
                /* Distance codes 0..29 extra */
                16,
                16,
                16,
                16,
                17,
                17,
                18,
                18,
                19,
                19,
                20,
                20,
                21,
                21,
                22,
                22,
                23,
                23,
                24,
                24,
                25,
                25,
                26,
                26,
                27,
                27,
                28,
                28,
                29,
                29,
                64,
                64
              ];
              module2.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
                var bits = opts.bits;
                var len = 0;
                var sym = 0;
                var min = 0, max = 0;
                var root = 0;
                var curr = 0;
                var drop = 0;
                var left = 0;
                var used = 0;
                var huff = 0;
                var incr;
                var fill;
                var low;
                var mask;
                var next;
                var base = null;
                var base_index = 0;
                var end;
                var count = new utils.Buf16(MAXBITS + 1);
                var offs = new utils.Buf16(MAXBITS + 1);
                var extra = null;
                var extra_index = 0;
                var here_bits, here_op, here_val;
                for (len = 0; len <= MAXBITS; len++) {
                  count[len] = 0;
                }
                for (sym = 0; sym < codes; sym++) {
                  count[lens[lens_index + sym]]++;
                }
                root = bits;
                for (max = MAXBITS; max >= 1; max--) {
                  if (count[max] !== 0) {
                    break;
                  }
                }
                if (root > max) {
                  root = max;
                }
                if (max === 0) {
                  table[table_index++] = 1 << 24 | 64 << 16 | 0;
                  table[table_index++] = 1 << 24 | 64 << 16 | 0;
                  opts.bits = 1;
                  return 0;
                }
                for (min = 1; min < max; min++) {
                  if (count[min] !== 0) {
                    break;
                  }
                }
                if (root < min) {
                  root = min;
                }
                left = 1;
                for (len = 1; len <= MAXBITS; len++) {
                  left <<= 1;
                  left -= count[len];
                  if (left < 0) {
                    return -1;
                  }
                }
                if (left > 0 && (type === CODES || max !== 1)) {
                  return -1;
                }
                offs[1] = 0;
                for (len = 1; len < MAXBITS; len++) {
                  offs[len + 1] = offs[len] + count[len];
                }
                for (sym = 0; sym < codes; sym++) {
                  if (lens[lens_index + sym] !== 0) {
                    work[offs[lens[lens_index + sym]]++] = sym;
                  }
                }
                if (type === CODES) {
                  base = extra = work;
                  end = 19;
                } else if (type === LENS) {
                  base = lbase;
                  base_index -= 257;
                  extra = lext;
                  extra_index -= 257;
                  end = 256;
                } else {
                  base = dbase;
                  extra = dext;
                  end = -1;
                }
                huff = 0;
                sym = 0;
                len = min;
                next = table_index;
                curr = root;
                drop = 0;
                low = -1;
                used = 1 << root;
                mask = used - 1;
                if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                  return 1;
                }
                for (; ; ) {
                  here_bits = len - drop;
                  if (work[sym] < end) {
                    here_op = 0;
                    here_val = work[sym];
                  } else if (work[sym] > end) {
                    here_op = extra[extra_index + work[sym]];
                    here_val = base[base_index + work[sym]];
                  } else {
                    here_op = 32 + 64;
                    here_val = 0;
                  }
                  incr = 1 << len - drop;
                  fill = 1 << curr;
                  min = fill;
                  do {
                    fill -= incr;
                    table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
                  } while (fill !== 0);
                  incr = 1 << len - 1;
                  while (huff & incr) {
                    incr >>= 1;
                  }
                  if (incr !== 0) {
                    huff &= incr - 1;
                    huff += incr;
                  } else {
                    huff = 0;
                  }
                  sym++;
                  if (--count[len] === 0) {
                    if (len === max) {
                      break;
                    }
                    len = lens[lens_index + work[sym]];
                  }
                  if (len > root && (huff & mask) !== low) {
                    if (drop === 0) {
                      drop = root;
                    }
                    next += min;
                    curr = len - drop;
                    left = 1 << curr;
                    while (curr + drop < max) {
                      left -= count[curr + drop];
                      if (left <= 0) {
                        break;
                      }
                      curr++;
                      left <<= 1;
                    }
                    used += 1 << curr;
                    if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                      return 1;
                    }
                    low = huff & mask;
                    table[low] = root << 24 | curr << 16 | next - table_index | 0;
                  }
                }
                if (huff !== 0) {
                  table[next + huff] = len - drop << 24 | 64 << 16 | 0;
                }
                opts.bits = root;
                return 0;
              };
            },
            /* 38 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var utils = __webpack_require__(33);
              var STR_APPLY_OK = true;
              var STR_APPLY_UIA_OK = true;
              try {
                String.fromCharCode.apply(null, [0]);
              } catch (__) {
                STR_APPLY_OK = false;
              }
              try {
                String.fromCharCode.apply(null, new Uint8Array(1));
              } catch (__) {
                STR_APPLY_UIA_OK = false;
              }
              var _utf8len = new utils.Buf8(256);
              for (var q = 0; q < 256; q++) {
                _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
              }
              _utf8len[254] = _utf8len[254] = 1;
              exports2.string2buf = function(str) {
                var buf, c, c2, m_pos, i2, str_len = str.length, buf_len = 0;
                for (m_pos = 0; m_pos < str_len; m_pos++) {
                  c = str.charCodeAt(m_pos);
                  if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                    c2 = str.charCodeAt(m_pos + 1);
                    if ((c2 & 64512) === 56320) {
                      c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                      m_pos++;
                    }
                  }
                  buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
                }
                buf = new utils.Buf8(buf_len);
                for (i2 = 0, m_pos = 0; i2 < buf_len; m_pos++) {
                  c = str.charCodeAt(m_pos);
                  if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                    c2 = str.charCodeAt(m_pos + 1);
                    if ((c2 & 64512) === 56320) {
                      c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                      m_pos++;
                    }
                  }
                  if (c < 128) {
                    buf[i2++] = c;
                  } else if (c < 2048) {
                    buf[i2++] = 192 | c >>> 6;
                    buf[i2++] = 128 | c & 63;
                  } else if (c < 65536) {
                    buf[i2++] = 224 | c >>> 12;
                    buf[i2++] = 128 | c >>> 6 & 63;
                    buf[i2++] = 128 | c & 63;
                  } else {
                    buf[i2++] = 240 | c >>> 18;
                    buf[i2++] = 128 | c >>> 12 & 63;
                    buf[i2++] = 128 | c >>> 6 & 63;
                    buf[i2++] = 128 | c & 63;
                  }
                }
                return buf;
              };
              function buf2binstring(buf, len) {
                if (len < 65537) {
                  if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
                    return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
                  }
                }
                var result = "";
                for (var i2 = 0; i2 < len; i2++) {
                  result += String.fromCharCode(buf[i2]);
                }
                return result;
              }
              exports2.buf2binstring = function(buf) {
                return buf2binstring(buf, buf.length);
              };
              exports2.binstring2buf = function(str) {
                var buf = new utils.Buf8(str.length);
                for (var i2 = 0, len = buf.length; i2 < len; i2++) {
                  buf[i2] = str.charCodeAt(i2);
                }
                return buf;
              };
              exports2.buf2string = function(buf, max) {
                var i2, out, c, c_len;
                var len = max || buf.length;
                var utf16buf = new Array(len * 2);
                for (out = 0, i2 = 0; i2 < len; ) {
                  c = buf[i2++];
                  if (c < 128) {
                    utf16buf[out++] = c;
                    continue;
                  }
                  c_len = _utf8len[c];
                  if (c_len > 4) {
                    utf16buf[out++] = 65533;
                    i2 += c_len - 1;
                    continue;
                  }
                  c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
                  while (c_len > 1 && i2 < len) {
                    c = c << 6 | buf[i2++] & 63;
                    c_len--;
                  }
                  if (c_len > 1) {
                    utf16buf[out++] = 65533;
                    continue;
                  }
                  if (c < 65536) {
                    utf16buf[out++] = c;
                  } else {
                    c -= 65536;
                    utf16buf[out++] = 55296 | c >> 10 & 1023;
                    utf16buf[out++] = 56320 | c & 1023;
                  }
                }
                return buf2binstring(utf16buf, out);
              };
              exports2.utf8border = function(buf, max) {
                var pos;
                max = max || buf.length;
                if (max > buf.length) {
                  max = buf.length;
                }
                pos = max - 1;
                while (pos >= 0 && (buf[pos] & 192) === 128) {
                  pos--;
                }
                if (pos < 0) {
                  return max;
                }
                if (pos === 0) {
                  return max;
                }
                return pos + _utf8len[buf[pos]] > max ? pos : max;
              };
            },
            /* 39 */
            /***/
            function(module2, exports2) {
              "use strict";
              module2.exports = {
                /* Allowed flush values; see deflate() and inflate() below for details */
                Z_NO_FLUSH: 0,
                Z_PARTIAL_FLUSH: 1,
                Z_SYNC_FLUSH: 2,
                Z_FULL_FLUSH: 3,
                Z_FINISH: 4,
                Z_BLOCK: 5,
                Z_TREES: 6,
                /* Return codes for the compression/decompression functions. Negative values
                * are errors, positive values are used for special but normal events.
                */
                Z_OK: 0,
                Z_STREAM_END: 1,
                Z_NEED_DICT: 2,
                Z_ERRNO: -1,
                Z_STREAM_ERROR: -2,
                Z_DATA_ERROR: -3,
                //Z_MEM_ERROR:     -4,
                Z_BUF_ERROR: -5,
                //Z_VERSION_ERROR: -6,
                /* compression levels */
                Z_NO_COMPRESSION: 0,
                Z_BEST_SPEED: 1,
                Z_BEST_COMPRESSION: 9,
                Z_DEFAULT_COMPRESSION: -1,
                Z_FILTERED: 1,
                Z_HUFFMAN_ONLY: 2,
                Z_RLE: 3,
                Z_FIXED: 4,
                Z_DEFAULT_STRATEGY: 0,
                /* Possible values of the data_type field (though see inflate()) */
                Z_BINARY: 0,
                Z_TEXT: 1,
                //Z_ASCII:                1, // = Z_TEXT (deprecated)
                Z_UNKNOWN: 2,
                /* The deflate compression method */
                Z_DEFLATED: 8
                //Z_NULL:                 null // Use -1 or null inline, depending on var type
              };
            },
            /* 40 */
            /***/
            function(module2, exports2) {
              "use strict";
              module2.exports = {
                2: "need dictionary",
                /* Z_NEED_DICT       2  */
                1: "stream end",
                /* Z_STREAM_END      1  */
                0: "",
                /* Z_OK              0  */
                "-1": "file error",
                /* Z_ERRNO         (-1) */
                "-2": "stream error",
                /* Z_STREAM_ERROR  (-2) */
                "-3": "data error",
                /* Z_DATA_ERROR    (-3) */
                "-4": "insufficient memory",
                /* Z_MEM_ERROR     (-4) */
                "-5": "buffer error",
                /* Z_BUF_ERROR     (-5) */
                "-6": "incompatible version"
                /* Z_VERSION_ERROR (-6) */
              };
            },
            /* 41 */
            /***/
            function(module2, exports2) {
              "use strict";
              function ZStream() {
                this.input = null;
                this.next_in = 0;
                this.avail_in = 0;
                this.total_in = 0;
                this.output = null;
                this.next_out = 0;
                this.avail_out = 0;
                this.total_out = 0;
                this.msg = "";
                this.state = null;
                this.data_type = 2;
                this.adler = 0;
              }
              module2.exports = ZStream;
            },
            /* 42 */
            /***/
            function(module2, exports2) {
              "use strict";
              function GZheader() {
                this.text = 0;
                this.time = 0;
                this.xflags = 0;
                this.os = 0;
                this.extra = null;
                this.extra_len = 0;
                this.name = "";
                this.comment = "";
                this.hcrc = 0;
                this.done = false;
              }
              module2.exports = GZheader;
            }
            /******/
          ])
        );
      });
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i2 = 0, len = code.length; i2 < len; ++i2) {
        lookup[i2] = code[i2];
        revLookup[code.charCodeAt(i2)] = i2;
      }
      var i2;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i3;
        for (i3 = 0; i3 < len2; i3 += 4) {
          tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i3 = start; i3 < end; i3 += 3) {
          tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m2;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i2 = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i2];
        i2 += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
        }
        m2 = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m2 = m2 * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m2 ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m2 = m2 + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m2 * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m2, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i2 = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m2 = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m2 = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m2 = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i2] = m2 & 255, i2 += d, m2 /= 256, mLen -= 8) {
        }
        e = e << mLen | m2;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i2 - d] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer3;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer3.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer3.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function Buffer3(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer3.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer3.from(valueOf, encodingOrOffset, length);
        }
        const b3 = fromObject(value);
        if (b3)
          return b3;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer3.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer3, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer3.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer3.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer3.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer3.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i2 = 0; i2 < length; i2 += 1) {
          buf[i2] = array[i2] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer3.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer3.alloc(+length);
      }
      Buffer3.isBuffer = function isBuffer(b3) {
        return b3 != null && b3._isBuffer === true && b3 !== Buffer3.prototype;
      };
      Buffer3.compare = function compare(a, b3) {
        if (isInstance(a, Uint8Array))
          a = Buffer3.from(a, a.offset, a.byteLength);
        if (isInstance(b3, Uint8Array))
          b3 = Buffer3.from(b3, b3.offset, b3.byteLength);
        if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b3)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b3)
          return 0;
        let x3 = a.length;
        let y2 = b3.length;
        for (let i2 = 0, len = Math.min(x3, y2); i2 < len; ++i2) {
          if (a[i2] !== b3[i2]) {
            x3 = a[i2];
            y2 = b3[i2];
            break;
          }
        }
        if (x3 < y2)
          return -1;
        if (y2 < x3)
          return 1;
        return 0;
      };
      Buffer3.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer3.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer3.alloc(0);
        }
        let i2;
        if (length === void 0) {
          length = 0;
          for (i2 = 0; i2 < list.length; ++i2) {
            length += list[i2].length;
          }
        }
        const buffer = Buffer3.allocUnsafe(length);
        let pos = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          let buf = list[i2];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer3.isBuffer(buf))
                buf = Buffer3.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer3.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer3.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.prototype._isBuffer = true;
      function swap(b3, n, m2) {
        const i2 = b3[n];
        b3[n] = b3[m2];
        b3[m2] = i2;
      }
      Buffer3.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i2 = 0; i2 < len; i2 += 2) {
          swap(this, i2, i2 + 1);
        }
        return this;
      };
      Buffer3.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i2 = 0; i2 < len; i2 += 4) {
          swap(this, i2, i2 + 3);
          swap(this, i2 + 1, i2 + 2);
        }
        return this;
      };
      Buffer3.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i2 = 0; i2 < len; i2 += 8) {
          swap(this, i2, i2 + 7);
          swap(this, i2 + 1, i2 + 6);
          swap(this, i2 + 2, i2 + 5);
          swap(this, i2 + 3, i2 + 4);
        }
        return this;
      };
      Buffer3.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
      Buffer3.prototype.equals = function equals(b3) {
        if (!Buffer3.isBuffer(b3))
          throw new TypeError("Argument must be a Buffer");
        if (this === b3)
          return true;
        return Buffer3.compare(this, b3) === 0;
      };
      Buffer3.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
      }
      Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer3.from(target, target.offset, target.byteLength);
        }
        if (!Buffer3.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x3 = thisEnd - thisStart;
        let y2 = end - start;
        const len = Math.min(x3, y2);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i2 = 0; i2 < len; ++i2) {
          if (thisCopy[i2] !== targetCopy[i2]) {
            x3 = thisCopy[i2];
            y2 = targetCopy[i2];
            break;
          }
        }
        if (x3 < y2)
          return -1;
        if (y2 < x3)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer3.from(val, encoding);
        }
        if (Buffer3.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i3) {
          if (indexSize === 1) {
            return buf[i3];
          } else {
            return buf.readUInt16BE(i3 * indexSize);
          }
        }
        let i2;
        if (dir) {
          let foundIndex = -1;
          for (i2 = byteOffset; i2 < arrLength; i2++) {
            if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i2;
              if (i2 - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i2 -= i2 - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i2 = byteOffset; i2 >= 0; i2--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i2 + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i2;
          }
        }
        return -1;
      }
      Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i2;
        for (i2 = 0; i2 < length; ++i2) {
          const parsed = parseInt(string.substr(i2 * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i2;
          buf[offset + i2] = parsed;
        }
        return i2;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer3.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer3.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i2 = start;
        while (i2 < end) {
          const firstByte = buf[i2];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i2 + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i2 + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i2 + 1];
                thirdByte = buf[i2 + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i2 + 1];
                thirdByte = buf[i2 + 2];
                fourthByte = buf[i2 + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i2 += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i2 = 0;
        while (i2 < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i2 = start; i2 < end; ++i2) {
          ret += String.fromCharCode(buf[i2] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i2 = start; i2 < end; ++i2) {
          ret += String.fromCharCode(buf[i2]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i2 = start; i2 < end; ++i2) {
          out += hexSliceLookupTable[buf[i2]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i2 = 0; i2 < bytes.length - 1; i2 += 2) {
          res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
        }
        return res;
      }
      Buffer3.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer3.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i2 = 0;
        while (++i2 < byteLength2 && (mul *= 256)) {
          val += this[offset + i2] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i2 = 0;
        while (++i2 < byteLength2 && (mul *= 256)) {
          val += this[offset + i2] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i2 = byteLength2;
        let mul = 1;
        let val = this[offset + --i2];
        while (i2 > 0 && (mul *= 256)) {
          val += this[offset + --i2] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer3.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i2 = 0;
        this[offset] = value & 255;
        while (++i2 < byteLength2 && (mul *= 256)) {
          this[offset + i2] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i2 = byteLength2 - 1;
        let mul = 1;
        this[offset + i2] = value & 255;
        while (--i2 >= 0 && (mul *= 256)) {
          this[offset + i2] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i2 = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i2 < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
            sub = 1;
          }
          this[offset + i2] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i2 = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i2] = value & 255;
        while (--i2 >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
            sub = 1;
          }
          this[offset + i2] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer3.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer3.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i2;
        if (typeof val === "number") {
          for (i2 = start; i2 < end; ++i2) {
            this[i2] = val;
          }
        } else {
          const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i2 = 0; i2 < end - start; ++i2) {
            this[i2 + start] = bytes[i2 % len];
          }
        }
        return this;
      };
      var errors = {};
      function E2(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E2(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E2(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E2(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i2 = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i2 >= start + 4; i2 -= 3) {
          res = `_${val.slice(i2 - 3, i2)}${res}`;
        }
        return `${val.slice(0, i2)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i2 = 0; i2 < length; ++i2) {
          codePoint = string.charCodeAt(i2);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i2 + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i2 = 0; i2 < str.length; ++i2) {
          byteArray.push(str.charCodeAt(i2) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i2 = 0; i2 < str.length; ++i2) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i2);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i2;
        for (i2 = 0; i2 < length; ++i2) {
          if (i2 + offset >= dst.length || i2 >= src.length)
            break;
          dst[i2 + offset] = src[i2];
        }
        return i2;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i2 = 0; i2 < 16; ++i2) {
          const i16 = i2 * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i2] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // src/components/acyclicgraph/graph.node.html
  var require_graph_node = __commonJS({
    "src/components/acyclicgraph/graph.node.html"(exports, module) {
      module.exports = "";
    }
  });

  // src/components/spectrometer/spectrometer.node.html
  var require_spectrometer_node = __commonJS({
    "src/components/spectrometer/spectrometer.node.html"(exports, module) {
      module.exports = `\r
\r
\r
<!--\r
\r
<ImageOrVid><Result watched image>\r
<Menu>\r
<Result Spectrogram> <Compared Spectrogram> (can overlay)\r
<Res2>               <Comp2>\r
    ...                 ...\r
\r
todo:\r
\r
Concise menu, finish file loading\r
Result list + comparison\r
Result saving/loading files\r
mediarecorder on canvas result too for vod\r
webworkers probably good idea for processing image on secondary canvases\r
\r
frame buffering stuff cuz graphs\r
\r
\r
-->\r
\r
        <div id="pickerDiv" style="position: relative; display:flex; align-items:center; justify-content:center;" title="Source Image or Video. Click in two places to create a snippet on the right then click Analyze when the spectrogram is in view."> <!-- We want the source canvas to maintain the source image/video's aspect ratio so it looks correct, the capture can be stretched otherwise-->\r
            <div id="sourcedeets" style="position:absolute; z-index:4; color:white; font-size:10px; top:0px; right:0px;"></div>\r
            <img src="" style="position: absolute; z-index:1;" ></img>\r
            <video src="" style="position: absolute; display:none; z-index:2;" ></video>\r
            <canvas id="picker" style="position: absolute; z-index:3;" ></canvas>\r
        </div>\r
        <div id="captureDiv" title="Capture View">\r
            <div style="position:absolute; z-index:5; color:white; font-size:10px;  right:0px;" id="capturedeets"></div>\r
            <canvas id="capture" style="position:absolute; width:100%; height:100%;" height="100%" width="100%"></canvas>\r
            <canvas id="capturegraph" style="position:absolute; z-index:10; width:100%; height:100%;" height="100%" width="100%"></canvas>\r
        </div>\r
        \r
        <button id="toggleMenu" style="display:none;">Toggle Menu</button>\r
\r
        <div id="menu" title="Source controls">\r
            <div style="color:white;">\u{1F4F8}\r
                <span id="labels"></span>\r
                <input type="text" id="labelinput" placeholder="e.g. Pollock, Sea Bass"></input>\r
                <button id="setlabel">Add Label</button>\r
            </div> <!-- Labels are replacing the Analyze Button -->   \r
            <br>      \r
            <button id="snip" title="Capture and Analyze Spectrogram?" style="display:none;">Analyze \u{1F4BB}</button>\r
            <span id="videomenu" style="display:none;">\r
                <select id="camsrc" title="Cam selector"></select>\r
                <button id="showgraph" title="Show live spectrogram? May cause slowdown.">\u{1F4C8}</button>\r
                <button id="record" title="Record MP4 of capture? (graph not included)">\u{1F534}</button>\r
            </span>\r
            <br>\r
            <button id="webcam">Use Camera \u{1F3A5}</button>\r
            <button id="fileinput">Upload File \u{1F4E5}</button>\r
            <button id="useurl">Use URL \u{1F310}</button>\r
            <span id="urlmenu">\r
                <br>\r
                <button id="image">Use Image \u{1F5BC}\uFE0F</button>\r
                <span id="imgmenu">\r
                    <span style="color:white;">Preloaded Images:</span>\r
                    <select id="imgselect"></select>\r
                </span>\r
                <input type="url" id="urlinput" placeholder="Image or Video File URL"></input>\r
                <span style="color:white;">File type:</span>\r
                <select id="urlselect">\r
                    <option value="img" selected>Image</option>\r
                    <option value="video">Video</option>\r
                </select>\r
                <button id="seturl">Set URL</button>\r
            </span>\r
            <div>\r
                <span style="color:white">\r
                    X0:<input id="x0" type="number" min="0" style="width:40px;">\r
                    X1:<input id="x1" type="number" min="0" style="width:40px;">\r
                </span>\r
                <span style="color:white">\r
                    Y0:<input id="y0" type="number" min="0" style="width:40px;">\r
                    Y1:<input id="y1" type="number" min="0" style="width:40px;">\r
                </span>\r
            </div>   \r
            <button style="float:right;" id="help" title="Help!">\u2753</button>\r
            <br>\r
            <div id="instructions" style="color:white; display:none;">\r
                Instructions: Click to draw a rectangle around the portion of the image or video you want to snip, \r
                then click a label to create a downloadable spectrogram you can compare with other results! Each click will continuously average that image for that label.\r
            </div>\r
            <br>\r
        <hr>\r
            </div>\r
        <div  id="compare" style="overflow-y:scroll;" title="Compare spectrogram results directly.">\r
            <span>Mix & Compare</span>\r
            <div id="comparelist">\r
                <table style="height:100%; width:100%; font-size:10px;">\r
                    <tr>\r
                        <td><span>Labeled <span id="labelcolors"></span> </span>\r
                            <canvas id="compareall" height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                    <tr>\r
                        <td><span>Sample 1<button id="sample1csv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="sample1" height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                    <!-- <tr>\r
                        <td><span>Sample 1 Averaged<button id="sample1acsv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="sample1a"height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr> -->\r
                    <tr>\r
                        <td><span>Sample 2<button id="sample2csv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="sample2"height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                    <!-- <tr>\r
                        <td><span>Sample 2 Averaged<button id="sample2acsv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="sample2a"height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr> -->\r
                    <tr>\r
                        <td colspan="2"><span>Difference: Sample 2 - Sample 1<button id="s2-s1csv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="s2-s1"height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                    <tr>\r
                        <td colspan="2"><span>Baseline<button id="baselinecsv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="baseline"height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                    <!-- <tr>\r
                        <td><span>Baseline Averaged<button id="baselineacsv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="baselinea"height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr> -->\r
                    <tr>\r
                        <td><span>A1: Baseline - Sample 1 (absorbance)<button id="a1csv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="b-s1" height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                    <tr>\r
                        <td><span>A2: Baseline - Sample 2 (absorbance)<button id="a2csv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="b-s2" height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                    <tr>\r
                        <td colspan="2"><span>Difference: A2 - A1<button id="d2-d1csv" title='Save CSV?'>\u{1F4C4}</button></span>\r
                            <canvas id="d2-d1" height="300px" width="800px"></canvas>\r
                        </td>\r
                    </tr>\r
                </table>\r
            </div>\r
        </div>\r
        <div id="captured" style="overflow-y:scroll;" title="All captures made this session.">\r
            <span>Captures</span>\r
            <div id="capturelist">\r
            </div>\r
        </div>\r
        <div id="saved" style="display:none; overflow-y:scroll; overflow-x:hidden;" title="Captures that can be restored from cache.">\r
            <span>Saved</span>\r
            <div id="savedlist">\r
            </div>\r
        </div>`;
    }
  });

  // src/utils/csv.js
  var CSV = class {
    //data=["1|2","11|22"], or data=[[1,2,"xyz"],[2,3,"abc"],etc]
    constructor(onOpen = this.onOpen, saveButtonId = null, openButtonId = null) {
      this.onOpen = onOpen;
      this.notes = [{ idx: 0, text: "comment" }];
      if (saveButtonId !== null) {
        document.getElementById(saveButtonId).addEventListener("click", this.saveCSV);
      }
      if (openButtonId !== null) {
        document.getElementById(openButtonId).addEventListener("click", this.openCSV);
      }
    }
    processArraysForCSV(data = ["1|2|3", "3|2|1"], delimiter = "|", header = "a,b,c", saveNotes = false) {
      let csvDat = header + "\n";
      let noteIdx = 0;
      data.forEach((line, i2) => {
        if (data[i2] === "string" && delimiter !== ",") {
          csvDat += line.split(delimiter).join(",");
        } else {
          csvData += line.join(",");
        }
        if (saveNotes === true) {
          if (this.notes[noteIdx].idx === i2) {
            line += this.notes[noteIdx].text;
            noteIdx++;
          }
        }
        if (line.indexOf("\n") < 0) {
          csvDat += "\n";
        }
      });
      return csvDat;
    }
    //Converts an array of strings (e.g. raw data stream text) or an array of arrays representing lines of data into CSVs
    static saveCSV(csvDat = "a,b,c\n1,2,3\n3,2,1\n", name = (/* @__PURE__ */ new Date()).toISOString()) {
      var hiddenElement = document.createElement("a");
      hiddenElement.href = "data:text/csv;charset=utf-8," + encodeURI(csvDat);
      hiddenElement.target = "_blank";
      if (name !== "") {
        hiddenElement.download = name + ".csv";
      } else {
        hiddenElement.download = Date().toISOString() + ".csv";
      }
      hiddenElement.click();
    }
    static openCSV(delimiter = ",", onOpen = (csvDat, header, path) => {
      return csvDat, header, path;
    }) {
      var input = document.createElement("input");
      input.accept = ".csv";
      input.type = "file";
      input.onchange = (e) => {
        var file = e.target.files[0];
        var reader = new FileReader();
        reader.onload = (event) => {
          var tempcsvData = event.target.result;
          var tempcsvArr = tempcsvData.split("\n");
          let header = [];
          var csvDat = [];
          tempcsvArr.pop();
          tempcsvArr.forEach((row, i2) => {
            if (i2 == 0) {
              header = row.split(delimiter);
            } else {
              var temp = row.split(delimiter);
              csvDat.push(temp);
            }
          });
          onOpen(csvDat, header, input.value);
          input.value = "";
        };
        reader.readAsText(file);
      };
      input.click();
    }
    //Dump CSV data without parsing it.
    static openCSVRaw(onOpen = (csvDat, path) => {
      return csvDat, path;
    }) {
      var input = document.createElement("input");
      input.accept = ".csv";
      input.type = "file";
      input.onchange = (e) => {
        var file = e.target.files[0];
        var reader = new FileReader();
        reader.onload = (event) => {
          var tempcsvData = event.target.result;
          onOpen(tempcsvData, input.value);
          input.value = "";
        };
        reader.readAsText(file);
      };
      input.click();
    }
    onOpen(csvDat = [], header = []) {
      console.log("CSV Opened!", header, csvDat);
    }
  };

  // src/utils/BFSUtils.js
  var BrowserFS = __toESM(require_browserfs());
  var fsInited = false;
  var fs2 = BrowserFS.BFSRequire("fs");
  var BFSBuffer = BrowserFS.BFSRequire("buffer").Buffer;
  var initFS = async (dirs = ["data", "projects", "extensions", "settings", "plugins"], oninit = () => {
  }, onerror = () => {
  }) => {
    if (fsInited)
      return true;
    else {
      return new Promise((resolve) => {
        let oldmfs = fs2.getRootFS();
        BrowserFS.FileSystem.IndexedDB.Create({}, (e, rootForMfs) => {
          if (e)
            throw e;
          if (!rootForMfs) {
            onerror();
            throw new Error(`Error creating BrowserFS`);
          }
          BrowserFS.initialize(rootForMfs);
          let promises = [];
          dirs.forEach(async (dir) => {
            promises.push(dirExists(fs2, dir));
          });
          Promise.all(promises).then((values) => {
            oninit();
            fsInited = true;
            resolve(true);
          });
        });
      });
    }
  };
  var getFilenames = (onload = (directory2) => {
  }, directory = "data") => {
    return new Promise((resolve) => {
      fs2.readdir("/" + directory, (e, dir) => {
        if (e)
          throw e;
        if (dir) {
          console.log("files", dir);
          onload(dir);
          resolve(dir);
        } else
          resolve(void 0);
      });
    });
  };
  var writeFile = async (filename, data, dir = "data", onwrite = (data2) => {
  }) => {
    return new Promise((resolve) => {
      fs2.writeFile("/" + dir + "/" + filename, data, (err2) => {
        if (err2)
          throw err2;
        onwrite(data);
        resolve(true);
      });
    });
  };
  var deleteFile = (filename = "sessionName", dir = "data", ondelete = listFiles) => {
    return new Promise((resolve) => {
      if (filename != "") {
        fs2.unlink("/" + dir + "/" + filename, (e) => {
          if (e)
            console.error(e);
          ondelete();
          resolve(true);
        });
      } else {
        console.error("Path name is not defined");
        resolve(false);
      }
    });
  };
  var readFileAsText = async (filename = "sessionName.csv", dir = "data", end = "end", begin = 0, onread = (data, filename2) => {
  }) => {
    return new Promise(async (resolve) => {
      let size = await getFileSize(filename, dir);
      if (end === "end") {
        end = size;
      } else if (typeof end === "number") {
        if (end > size)
          end = size;
      }
      fs2.open("/" + dir + "/" + filename, "r", (e, fd) => {
        if (e)
          throw e;
        fs2.read(fd, end, begin, "utf-8", (er, output, bytesRead) => {
          if (er)
            throw er;
          if (bytesRead !== 0) {
            let data = output.toString();
            fs2.close(fd, () => {
              onread(data, filename);
              resolve(data);
            });
          } else
            resolve(void 0);
        });
      });
    });
  };
  var getFileSize = async (filename, dir = "data", onread = (size) => {
    console.log(size);
  }) => {
    return new Promise((resolve) => {
      fs2.stat("/" + dir + "/" + filename, (e, stats) => {
        if (e)
          throw e;
        let filesize = stats.size;
        onread(filesize);
        resolve(filesize);
      });
    });
  };
  var listFiles = async (dir = "data", onload = (directory) => {
  }, fs_html_id = void 0) => {
    return new Promise((resolve) => {
      fs2.readdir("/" + dir, (e, directory) => {
        if (e)
          throw e;
        if (directory) {
          console.log("files", directory);
          onload(directory);
        }
        resolve(directory);
      });
    });
  };
  var directories = {};
  var dirExists = async (fs3, directory) => {
    return new Promise((resolve) => {
      if (directories[directory] === "exists" || directories[directory] === "created") {
        resolve();
      } else {
        fs3.exists(`/${directory}`, (exists) => {
          if (exists) {
            directories[directory] = "exists";
            console.log(`/${directory} exists!`);
            resolve();
          } else if (directories[directory] === "creating") {
            console.log(directory + " is still being created.");
            resolve();
          } else {
            console.log("creating " + directory);
            directories[directory] = "creating";
            fs3.mkdir(directory, (err2) => {
              if (err2)
                throw err2;
              directories[directory] = "created";
              setTimeout(resolve, 500);
            });
          }
        });
      }
    });
  };

  // src/utils/CanvasToBMP.js
  var import_buffer = __toESM(require_buffer());
  var CanvasToBMP = {
    /**
     * Convert a canvas element to ArrayBuffer containing a BMP file
     * with support for 32-bit (alpha).
     *
     * Note that CORS requirement must be fulfilled.
     *
     * @param {HTMLCanvasElement} canvas - the canvas element to convert
     * @return {ArrayBuffer}
     */
    getImageData: function(canvas2) {
      var w2 = canvas2.width, h = canvas2.height, imagedata = canvas2.getContext("2d").getImageData(0, 0, w2, h);
      return imagedata;
    },
    toArrayBuffer: function(imagedata) {
      var w2 = canvas.width, h = canvas.height, w4 = w2 * 4, data32 = new Uint32Array(imagedata.data.buffer), stride = Math.floor((32 * w2 + 31) / 32) * 4, pixelArraySize = stride * h, fileLength = 122 + pixelArraySize, file = new ArrayBuffer(fileLength), view = new DataView(file), pos = 0, x3, y2 = 0, p, s = 0, a, v2;
      setU16(19778);
      setU32(fileLength);
      pos += 4;
      setU32(122);
      setU32(108);
      setU32(w2);
      setU32(-h >>> 0);
      setU16(1);
      setU16(32);
      setU32(3);
      setU32(pixelArraySize);
      setU32(2835);
      setU32(2835);
      pos += 8;
      setU32(16711680);
      setU32(65280);
      setU32(255);
      setU32(4278190080);
      setU32(1466527264);
      while (y2 < h) {
        p = 122 + y2 * stride;
        x3 = 0;
        while (x3 < w4) {
          v2 = data32[s++];
          a = v2 >>> 24;
          view.setUint32(p + x3, v2 << 8 | a);
          x3 += 4;
        }
        y2++;
      }
      return file;
      function setU16(data) {
        view.setUint16(pos, data, true);
        pos += 2;
      }
      function setU32(data) {
        view.setUint32(pos, data, true);
        pos += 4;
      }
    },
    /**
     * Converts a canvas to BMP file, returns a Blob representing the
     * file. This can be used with URL.createObjectURL().
     * Note that CORS requirement must be fulfilled.
     *
     * @param {HTMLCanvasElement} canvas - the canvas element to convert
     * @return {Blob}
     */
    toBlob: function(canvas2) {
      return new Blob([this.toArrayBuffer(this.getImageData(canvas2))], {
        type: "image/bmp"
      });
    },
    ImageDatatoBlob: function(imagedata) {
      return new Blob([this.toArrayBuffer(imagedata)], {
        type: "image/bmp"
      });
    },
    /**
     * Converts the canvas to a data-URI representing a BMP file.
     * Note that CORS requirement must be fulfilled.
     *
     * @param canvas
     * @return {string}
     */
    toDataURL: function(canvas2) {
      var buffer = new Uint8Array(this.toArrayBuffer(this.getImageData(canvas2))), bs = "", i2 = 0, l = buffer.length;
      while (i2 < l)
        bs += String.fromCharCode(buffer[i2++]);
      return "data:image/bmp;base64," + import_buffer.Buffer.from(bs, "base64").toString("ascii");
    },
    ImageDatatoDataURL: function(imagedata) {
      var buffer = new Uint8Array(this.toArrayBuffer(imagedata)), bs = "", i2 = 0, l = buffer.length;
      while (i2 < l)
        bs += String.fromCharCode(buffer[i2++]);
      return "data:image/bmp;base64," + import_buffer.Buffer.from(bs, "base64").toString("ascii");
    }
  };

  // node_modules/brainsatplay-math/Math2.js
  var Math2 = class _Math2 {
    constructor() {
    }
    //----------------------------------------------------------------
    //-------------------- Static Variables---------------------------
    //----------------------------------------------------------------
    //Throwing a bunch in here for the hell of it
    static TWO_PI = Math.PI * 2;
    //2PI
    static C = 299792458;
    //speed of light m/s
    static G = 66743e-15;
    //Newton's gravitation constant N*m^2 / kg^2
    static h = 662607015e-42;
    //Planck constant J*s
    static R = 8314.32;
    //Universal gas constant J / kg*mol*K
    static Ra = 287;
    //Air gas constant J / kg*K
    static H = 69.3;
    //Hubble constant km/s/Mpc 
    static kbar = 1054571817e-43;
    //Dirac constant J*s
    static kB = 1380649e-29;
    //Boltzmann constant J/K
    static ke = 89875517923e-1;
    //Coulomb constant kg * m^3 * s^-2 * C^-2
    static me = 91093837015e-41;
    //electron mass kg
    static mp = 167262192369e-38;
    //proton mass kg
    static mn = 167492749804e-38;
    //neutron mass kg
    static P0 = 101325;
    //Sea level pressure N/m^2
    static T0 = 288.15;
    //Sea level room temperature K
    static p0 = 1.225;
    //Sea level air density kg/m^3
    static Na = 60220978e16;
    //Avogadro's number 1 / kg*mol
    static y = 1.405;
    //Adiabatic constant
    static M0 = 28.96643;
    //Sea level molecular weight
    static g0 = 9.80665;
    //Sea level gravity m/s^2
    static Re = 6378100;
    //Earth radius m
    static B = 1458e-9;
    //Thermal constant Kg / m*s*sqrt(kg)
    static S = 110.4;
    //Sutherland's constant K
    static Sigma = 365e-12;
    //Collision diameter of air m
    static imgkernels = {
      edgeDetection: [
        [-1, -1, -1],
        [-1, 8, -1],
        [-1, -1, -1]
      ],
      boxBlur: [
        [1 / 9, 1 / 9, 1 / 9],
        [1 / 9, 1 / 9, 1 / 9],
        [1 / 9, 1 / 9, 1 / 9]
      ],
      sobelLeft: [
        [1, 0, -1],
        [2, 0, -2],
        [1, 0, -1]
      ],
      sobelRight: [
        [-1, 0, 1],
        [-2, 0, 2],
        [-1, 0, 1]
      ],
      sobelTop: [
        [1, 2, 1],
        [0, 0, 0],
        [-1, -2, -1]
      ],
      sobelBottom: [
        [-1, 2, 1],
        [0, 0, 0],
        [1, 2, 1]
      ],
      identity: [
        [0, 0, 0],
        [0, 1, 0],
        [0, 0, 0]
      ],
      gaussian3x3: [
        [1, 2, 1],
        [2, 4, 2],
        [1, 2, 1]
      ],
      guassian7x7: [
        [0, 0, 0, 5, 0, 0, 0],
        [0, 5, 18, 32, 18, 5, 0],
        [0, 18, 64, 100, 64, 18, 0],
        [5, 32, 100, 100, 100, 32, 5],
        [0, 18, 64, 100, 64, 18, 0],
        [0, 5, 18, 32, 18, 5, 0],
        [0, 0, 0, 5, 0, 0, 0]
      ],
      emboss: [
        [-2, -1, 0],
        [-1, 1, 1],
        [0, 1, 2]
      ],
      sharpen: [
        [0, -1, 0],
        [-1, 5, -1],
        [0, -1, 0]
      ]
    };
    //----------------------------------------------------------------
    //-------------------- Static Functions --------------------------
    //----------------------------------------------------------------
    //Generate sinewave, you can add a noise frequency in too. Array length will be Math.ceil(fs*nSec)
    static genSineWave(freq = 20, peakAmp = 1, nSec = 1, fs3 = 512, freq2 = 0, peakAmp2 = 1) {
      var sineWave = [];
      var t = [];
      var increment = 1 / fs3;
      for (var ti = 0; ti < nSec; ti += increment) {
        var amplitude = Math.sin(2 * Math.PI * freq * ti) * peakAmp;
        amplitude += Math.sin(2 * Math.PI * freq2 * ti) * peakAmp2;
        sineWave.push(amplitude);
        t.push(ti);
      }
      return [t, sineWave];
    }
    //get the sine amplitude at a particular time (seconds)
    static getSineAmplitude(frequency = 20, peakAmplitude = 1, ti = 0, tOffset = 0) {
      return Math.sin(this.TWO_PI * frequency * ti + tOffset) * peakAmplitude;
    }
    //average value of array
    static mean(arr) {
      var sum = arr.reduce((prev, curr) => curr += prev);
      return sum / arr.length;
    }
    //array mode (most commonly occurring number)
    static mode(arr) {
      return arr.sort(
        (a, b3) => arr.filter((v2) => v2 === a).length - arr.filter((v2) => v2 === b3).length
      ).pop();
    }
    //standard deviation
    static std(arr, mean = void 0) {
      let avg = mean;
      if (!mean)
        avg = this.mean(arr);
      let summed = 0;
      for (let i2 = 0; i2 < arr.length; i2++) {
        let subbed = arr[i2] - avg;
        summed += subbed * subbed;
      }
      return Math.sqrt(summed / arr.length);
    }
    //find the relative error of predicted results
    static relError(actual = [], forecast = [], abs = true) {
      if (actual.length !== forecast.length)
        throw new Error("Input arrays of same length!");
      let i2 = actual.length;
      let d = new Array(actual.length);
      for (let j = 0; j < i2; j++) {
        let dd = (actual[j] - forecast[j]) / actual[j];
        if (abs)
          dd = Math.abs(dd);
        d[j] = dd;
      }
      return d;
    }
    //returns information entropy in natural units (base e)
    static informationEntropy(probabilities = []) {
      let len = probabilities.length;
      let entropy = new Array(len);
      for (let i2 = 0; i2 < len; i2++) {
        let ent = probabilities[i2] * Math.log(probabilities[i2]);
        if (isNaN(ent))
          ent = 0;
        entropy[i2] = ent;
      }
      return entropy;
    }
    //array zscore (probabilities)
    static zscore(arr) {
      let mean = this.mean(arr);
      let std = this.std(arr, mean);
      let z = new Array().length(arr.length);
      for (let i2 = 0; i2 < arr.length; i2++) {
        z[i2] = (arr[i2] - mean) / std;
      }
      return z;
    }
    static variance(arr) {
      var mean = this.mean(arr);
      return arr.reduce((a, b3) => a + (b3 - mean) ** 2, 0) / arr.length;
    }
    static dot(vec1, vec2) {
      var dot = 0;
      for (var i2 = 0; i2 < vec1.length; i2++) {
        dot += vec1[i2] * vec2[i2];
      }
      return dot;
    }
    static cross3D(vec1, vec2) {
      return [
        vec1[1] * vec2[2] - vec1[2] * vec2[1],
        //x
        vec1[2] * vec2[0] - vec1[0] * vec2[2],
        //y
        vec1[0] * vec2[1] - vec1[1] * vec2[0]
        //z
      ];
    }
    static magnitude(vec) {
      var sqrd = 0;
      vec.forEach((c) => {
        sqrd += c * c;
      });
      return Math.sqrt(sqrd);
    }
    static distance(point1, point2) {
      var dsqrd = 0;
      point1.forEach((c, i2) => {
        dsqrd += (point2[i2] - c) * (point2[i2] - c);
      });
      return Math.sqrt(dsqrd);
    }
    //n dimensional vector midpoint formula
    static midpoint(point1 = [1, 2, 3], point2 = [3, 4, 5]) {
      return point1.map((c, i2) => {
        return (c + point2[i2]) * 0.5;
      });
    }
    static normalize(vec) {
      var norm = 0;
      norm = this.magnitude(vec);
      var vecn = new Array(vec.length);
      vec.forEach((c, i2) => {
        vecn[i2] = c * norm;
      });
      return vecn;
    }
    static normalizeSeries(arr = [], fromZero = true) {
      let max = Math.max(...arr);
      let min = Math.min(...arr);
      if (fromZero == false) {
        max = Math.max(max, Math.abs(min));
        min = 0;
      }
      if (max - min === 0) {
        min = 0;
        if (max === 0)
          max = 1e-13;
      }
      return arr.map((v2) => (v2 - min) / (max - min));
    }
    //return the quadratic roots based on your input ax^2 + bx + c = 0
    static quadraticFormula(a, b3, c) {
      let bbmac4 = Math.sqrt(b3 * b3 - 4 * a * c);
      if (!isNaN(bbmac4))
        return ["complex", "complex"];
      let _a2 = 1 / (2 * a);
      if (bbmac4 === 0)
        return [b3 * _a2];
      let nb = -b3;
      return [(nb + bbmac4) * _a2, (nb - bbmac4) * _a2];
    }
    //approximation of function roots. Provide a function (1d), window, and precision and it will return approximate roots along that window
    static newtonsMethod(foo = (x3) => {
      return Math.pow(x3, 5) + x3 * x3 - x3 - 0.2;
    }, start = 0, end = 1, precision = 0.01, attempts = 10) {
      let roots = [];
      for (let i2 = 0; i2 < attempts; i2++) {
        let seedx = Math.random() * (end - start);
        let guess = foo(seedx);
        let guess2 = foo(seedx + precision);
        let slope = (guess2 - guess) / precision;
        let xn = seedx + precision;
        while (Math.abs(slope) > precision) {
          let step = -guess / slope2;
          let xn12 = xn + step;
          guess = guess2;
          guess2 = foo(xn12);
          let slope2 = (guess2 - guess) / (xn12 - xn);
        }
        let idx;
        let f = roots.find((root, i3) => {
          if (Math.abs(xn1 - root) < precision) {
            idx = i3;
            return true;
          }
        });
        if (f)
          roots[idx] = (xn1 + f) * 0.5;
        else
          roots.push(xn1);
      }
      return roots;
    }
    //2D integral approximation using rectangular area under the curve. If you need absolute values be sure to return that.
    static integral = (func = (x3) => {
      let y2 = x3;
      return y2;
    }, range = [], stepx = 0.01) => {
      let area = 0;
      for (let i2 = range[0]; i2 < range[1]; i2 += stepx) {
        let y2 = func(i2);
        area += y2 * stepx;
      }
      return area;
    };
    //3D double integral approximation
    static dintegral = (func = (x3, y2) => {
      let z = x3 + y2;
      return z;
    }, range = [[], []], stepx = 0.01, stepy = stepx) => {
      let volume = 0;
      for (let i2 = range[0][0] + stepx; i2 < range[0][1]; i2 += stepx) {
        for (let j = range[1][0] + stepy; j < range[1][1]; j += stepy) {
          let z = func(i2, j);
          volume += z * stepx * stepy;
        }
      }
      return volume;
    };
    //4D triple integral approximation
    static tintegral = (func = (x3, y2, z) => {
      let w2 = x3 + y2 + z;
      return w2;
    }, range = [[], [], []], stepx = 0.01, stepy = stepx, stepz = stepx) => {
      let volume = 0;
      for (let i2 = range[0][0] + stepx; i2 < range[0][1]; i2 += stepx) {
        for (let j = range[1][0] + stepy; j < range[1][1]; j += stepy) {
          for (let k2 = range[2][0] + stepz; k2 < range[2][1]; k2 += stepz) {
            let w2 = func(i2, j, k2);
            volume += w2 * stepx * stepy * stepz;
          }
        }
      }
      return volume;
    };
    //2D path integral approximation (the length of a curve)
    static pintegral = (func = (x3) => {
      let y2 = x3;
      return y2;
    }, range = [], stepx = 0.01) => {
      let length = 0;
      let y0 = void 0;
      let yi = void 0;
      for (let i2 = range[0]; i2 < range[1]; i2 += stepx) {
        y0 = yi;
        yi = func(i2);
        if (y0)
          length += this.distance([0, y0], [stepx, yi]);
      }
      return length;
    };
    static makeVec(point1, point2) {
      var vec = [];
      point1.forEach((c, i2) => {
        vec.push(point2[i2] - c);
      });
      return vec;
    }
    //simpler for for loop recursion for buffered matrices e.g. an srgb array we want to map by coordinates
    static forBufferedMat(vb = new Array(100).fill(1), dims = [10, 10], asIndex = (v2, i2, x3, y2) => {
      return v2 + x3 + y2;
    }) {
      let coordinate = [];
      let idx = 0;
      let recurseFor = (depth = 0, nextDepth = depth + 1) => {
        let result = new Array(vb.length);
        for (let di = 0; di < dims[depth]; di++) {
          coordinate[depth] = di;
          if (dims[nextDepth])
            recurseFor(nextDepth);
          else {
            result[idx] = asIndex(vb[idx], idx, ...coordinate);
            idx++;
          }
        }
        return result;
      };
      let recurseForArrFuncs = (depth, nextDepth = depth + 1) => {
        let result = new Array(vb.length);
        for (let di = 0; di < dims[depth]; di++) {
          coordinate[depth] = di;
          if (dims[nextDepth])
            recurseFor(nextDepth);
          else {
            for (let dj = 0; dj < dims.length; dj++) {
              result[idx] = asIndex[dj](vb[idx], idx, ...coordinate);
              idx++;
            }
          }
        }
        return result;
      };
      if (typeof asIndex === "function") {
        return recurseFor();
      } else if (Array.isArray(asIndex)) {
        return recurseForArrFuncs();
      }
    }
    //we work with 1D arraybuffers of n-dimensional matrices in most cases so this can recursively iterate the array
    static mapBufferedMat(buffer = new Array(100).fill(1), dimensions = [10, 10], asIndex = (v2, idx, i2, j) => {
      console.log(`value:${v2}, idx:${idx}, x:${i2},y:${j}`);
      return v2 + i2 + j;
    }) {
      let coordinate = new Array(dimensions.length).fill(0);
      const iterateCoordinate = (coord, idx = 0) => {
        if (coord[idx] >= dimensions[idx]) {
          coord[idx] = 0;
          idx++;
          if (idx === dimensions.length)
            return;
          iterateCoordinate(coord, idx);
        } else
          coord[idx]++;
      };
      let result = new Array(buffer.length);
      let i2 = 0;
      if (typeof asIndex === "function") {
        while (i2 < buffer.length) {
          result[i2] = asIndex(buffer[i2], i2, ...coordinate);
          i2 += dimensions.length;
          iterateCoordinate(coordinate);
        }
      } else if (Array.isArray(asIndex)) {
        while (i2 < buffer.length) {
          asIndex.forEach((func) => {
            func(buffer[i2], i2, ...coordinate);
            i2++;
            iterateCoordinate(coordinate);
          });
        }
      }
      return result;
    }
    //https://stackoverflow.com/questions/28655651/javascript-recursion-creating-n-level-for-loops
    static combinations(choices = ["a", "b", "c"], vecsize = 3) {
      var result = [];
      if (vecsize <= 0) {
        result.push([]);
      } else {
        _Math2.combinations(choices, vecsize - 1).forEach(function(previousComb) {
          choices.forEach(function(element) {
            result.push([element].concat(previousComb));
          });
        });
      }
      return result;
    }
    //n-level loops of the same size
    //create an n-dimensional vector/tensor field; (meshgrid from python/matlab)
    static generateCoordinateSpace(upperBounds = [10, 10, 10], lowerBounds = [-10, -10, -10], steps = [1, 1, 1], mutater = void 0) {
      for (let i2 = 0; i2 < upperBounds.length; i2++) {
        if (lowerBounds[i2] > upperBounds[i2]) {
          let temp = upperBounds[i2];
          upperBounds[i2] = lowerBounds[i2];
          lowerBounds[i2] = temp;
        }
      }
      let result = [];
      let copy = [...upperBounds];
      let lastindex = copy.length - 1;
      result.push([...copy]);
      while (copy[0] >= lowerBounds[0]) {
        let checkNextIndex = (decrIdx2) => {
          if (copy[decrIdx2] <= lowerBounds[decrIdx2]) {
            if (decrIdx2 === 0)
              return;
            copy[decrIdx2] = upperBounds[decrIdx2];
            decrIdx2--;
            if (decrIdx2 < 0)
              return;
            if (typeof steps[decrIdx2] == "function")
              copy[decrIdx2] -= steps[decrIdx2](copy[decrIdx2]);
            else
              copy[decrIdx2] -= steps[decrIdx2];
            checkNextIndex(decrIdx2);
          }
        };
        let decrIdx = lastindex;
        if (typeof steps[decrIdx] == "function")
          copy[decrIdx] -= steps[decrIdx](copy[decrIdx]);
        else
          copy[decrIdx] -= steps[decrIdx];
        result.push([...copy]);
        checkNextIndex(decrIdx);
        if (mutater)
          result[result.length - 1] = mutater(result[result.length - 1]);
      }
      return result;
    }
    static meshgrid = _Math2.generateCoordinateSpace;
    static calcVectorField(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], formula = (x3, y2) => {
      return [x3 * 10, y2 * 10];
    }) {
      return coordinates.map((vec) => formula(...vec));
    }
    static transpose(mat) {
      return mat[0].map((_2, colIndex) => mat.map((row) => row[colIndex]));
    }
    //2D Matrix multiplication from: https://stackoverflow.com/questions/27205018/multiply-2-matrices-in-javascript
    static matmul(a, b3) {
      var aNumRows = a.length, aNumCols = a[0].length, bNumRows = b3.length, bNumCols = b3[0].length, m2 = new Array(aNumRows);
      for (var r2 = 0; r2 < aNumRows; ++r2) {
        m2[r2] = new Array(bNumCols);
        for (var c = 0; c < bNumCols; ++c) {
          m2[r2][c] = 0;
          for (var i2 = 0; i2 < aNumCols; ++i2) {
            m2[r2][c] += a[r2][i2] * b3[i2][c];
          }
        }
      }
      return m2;
    }
    //Apply scalar to 2D matrix 
    static matscale(mat, scalar) {
      let m2 = [];
      for (var i2 = 0; i2 < mat.length; i2++) {
        m2[i2] = [];
        for (let j = 0; j < mat[0].length; j++) {
          m2[i2][j] = mat[i2][j] * scalar;
        }
      }
      return m2;
    }
    //2d matrix addition
    static matadd(a, b3) {
      let m2 = [];
      for (let i2 = 0; i2 < a.length; i2++) {
        m2[i2] = [];
        for (var j = 0; j < a[0].length; j++) {
          m2[i2][j] = a[i2][j] + b3[i2][j];
        }
      }
      return m2;
    }
    //2d matrix subtraction
    static matsub(a, b3) {
      let m2 = [];
      for (let i2 = 0; i2 < a.length; i2++) {
        m2[i2] = [];
        for (var j = 0; j < a[0].length; j++) {
          m2[i2][j] = a[i2][j] - b3[i2][j];
        }
      }
      return m2;
    }
    //return a histogram of the array, use nBins to override binSize
    static histogram(arr = [], binSize = 1, nBins = void 0) {
      let copy = [...arr];
      copy.sort(function(a, b3) {
        return a - b3;
      });
      let binStart = Math.min(...copy);
      if (typeof nBins === "number") {
        let binEnd = Math.max(...copy);
        binSize = Math.abs((binEnd - binStart) / (nBins - 1));
      }
      let j = binStart;
      let binx = [];
      let biny = [];
      for (let i2 = 0; i2 < copy.length; i2++) {
        let binidx = binSize * j;
        if (copy[i2] > binStart + binidx) {
          j++;
          binidx += binSize;
          let binmin = binStart + binidx;
          let binmid = binmin + binidx * 0.5;
          binx.push(binmid);
          biny.push(0);
        }
        biny[biny.length - 1]++;
      }
      return [binx, biny];
    }
    //Get probability densities for the samples, set a cutoff to avoid obscenely small numbers
    static normalDistribution(samples = [], normalize = true, cutoff = 1e-4) {
      let m2 = this.mean(samples);
      let vari = this.variance(samples);
      let nSamples = samples.length;
      let probabilities = [];
      let denom = 1 / (this.TWO_PI * vari);
      let _variance = 1 / vari;
      let sum = 0;
      for (let i2 = 0; i2 < nSamples; i2++) {
        let px = Math.exp(-0.5 * Math.pow((samples[i2] - m2) * _variance, 2)) * denom;
        if (px < cutoff)
          px = 0;
        probabilities.push(px);
        sum += px;
      }
      if (normalize) {
        let _sum = 1 / sum;
        probabilities = probabilities.map((x3) => x3 * _sum);
      }
      return probabilities;
    }
    static expectedValue(samples = [], probabilities = this.normalDistribution(samples)) {
      return samples.reduce((sum, item, idx) => sum + item * probabilities[idx]);
    }
    //moment about the origin (statistics)
    static originMoment(samples = [], probabilities = this.normalDistribution(samples), order = 1) {
      return samples.reduce((sum, item, idx) => sum + Math.pow(item, order) * probabilities[idx]);
    }
    //moment about the population mean (statistics)
    static centralMoment(samples = [], probabilities = this.normalDistribution(samples), order = 1) {
      let m2 = this.mean(samples);
      return samples.reduce((sum, item, idx) => sum + Math.pow(item - m2, order) * probabilities[idx] / samples.length);
    }
    static linearDiscriminantAnalysis(samples = [], classifier = []) {
      let mean = this.mean(samples);
      let meank = this.mean(classifier);
      let covariance = this.cov1d(samples, classifier);
      let probs = this.normalDistribution(samples);
      let dk = [];
      for (let i2 = 0; i2 < samples.length; i2++) {
        dk.push(x[i2] * covariance * meank - 0.5 * mean * covariance * meank + Math.log10(probs[i2]));
      }
      return dk;
    }
    //1D convolution (filtering)
    static conv1D(arr = [], kern = [1 / 3, 1 / 3, 1 / 3], pad = Math.floor(kern.length * 0.5)) {
      let result = [];
      let _n = 1 / kern.length;
      if (pad > 0) {
        let pads = new Array(pad).fill(0);
        arr = [...pads, ...arr, ...pads];
      }
      let start = Math.floor(kern.length * 0.5);
      let end = arr.length - kern.length + start;
      for (let i2 = start; i2 < end; i2++) {
        let acc = 0;
        for (let j = 0; j < kern.length; j++) {
          acc += arr[i2 - start] * kern[j];
        }
        result.push(acc * _n);
      }
      return result;
    }
    //2D convolution (filtering), input 2d mat and 2d kernel 
    static conv2D(mat = [[], [], []], kern = [[], [], []], pad = 0) {
      let result = new Array(mat.length - Math.ceil(kern.length * 0.5)).fill([]);
      let mat_t;
      let kern_t = _Math2.transpose(kern_t);
      if (pad > 0) {
        let pads = new Array(pad).fill(0);
        mat_t = _Math2.transpose(mat);
        for (let i3 = 0; i3 < mat_t.length; i3++) {
          mat_t[i3] = [...pads, ...mat_t[i3], ...pads];
        }
        mat = _Math2.transpose(mat_t);
        for (let j = 0; j < mat.length; j++) {
          mat[j] = [...pads, ...mat[j], ...pads];
        }
      }
      let startr = Math.floor(kern[0].length * 0.5);
      let startl = Math.floor(kern_t[0].length * 0.5);
      let endr = mat[0].length - kern[0].length + startr;
      let endl = mat_t[0].length - kern_t[0].length + startl;
      let _n = 1 / (kern[0].length * kern_t[0].length);
      let iters = endr * endl;
      let i2 = startr;
      let x3;
      let y2 = startl;
      while (i2 < iters) {
        let acc = 0;
        x3 = i2 % mat[0].length;
        if (x3 === 0) {
          y2++;
        }
        for (let j = 0; j < kern[0].length; j++) {
          for (let k2 = 0; k2 < kern_t[0].length; j++) {
            acc += mat[y2 - startl + k2][x3 - startr + j] * kern[k2][j];
          }
          result[y2].push(acc * _n);
        }
        i2++;
      }
      return result;
    }
    //2D matrix covariance (e.g. for lists of signals). Pretty fast!!!
    static cov2d(mat) {
      var mattransposed = this.transpose(mat);
      var matproducts = [];
      var rowmeans = [];
      var colmeans = [];
      mat.forEach((row, idx) => {
        rowmeans.push(this.mean(row));
      });
      mattransposed.forEach((col, idx) => {
        colmeans.push(this.mean(col));
      });
      mat.forEach((row, idx) => {
        matproducts.push([]);
        for (var col = 0; col < row.length; col++) {
          matproducts[idx].push((mat[idx][col] - rowmeans[idx]) * (mat[idx][col] - colmeans[col]) / (row.length - 1));
        }
      });
      var matproductstransposed = this.transpose(matproducts);
      var aNumRows = matproducts.length, aNumCols = matproducts[0].length, bNumRows = matproductstransposed.length, bNumCols = matproductstransposed[0].length, m2 = new Array(aNumRows);
      for (var r2 = 0; r2 < aNumRows; ++r2) {
        m2[r2] = new Array(bNumCols);
        for (var c = 0; c < bNumCols; ++c) {
          m2[r2][c] = 0;
          for (var i2 = 0; i2 < aNumCols; ++i2) {
            m2[r2][c] += matproducts[r2][i2] * matproductstransposed[i2][c] / (mat[0].length - 1);
          }
        }
      }
      return m2;
    }
    //Covariance between two 1D arrays
    static cov1d(arr1 = [], arr2 = []) {
      return this.cov2d([arr1, arr2]);
    }
    //3d covariance
    static cov3d(x3 = [], y2 = [], z = []) {
      return [
        [this.cov1d(x3, x3), this.cov1d(x3, y2), this.cov1d(x3, z)],
        [this.cov1d(y2, x3), this.cov1d(y2, y2), this.cov1d(y2, z)],
        [this.cov1d(z, x3), this.cov1d(z, y2), this.cov1d(z, z)]
      ];
    }
    //n-dimensional covariance matrix
    static covNd(dimensionalData = []) {
      let covariance = [];
      dimensionalData.forEach((arr, i2) => {
        covariance.push([]);
        dimensionalData.forEach((arr2, j) => {
          covariance[i2].push(this.cov1d(arr, arr2));
        });
      });
    }
    //fast 2x2 eigenvalue calculator: https://www.youtube.com/watch?v=e50Bj7jn9IQ
    static eigens2x2(mat = [[1, 2], [3, 4]]) {
      let det = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
      let mean = (mat[0][0] + mat[1][1]) * 0.5;
      let sqrt = Math.sqrt(mean * mean - det);
      let eig1 = mean + sqrt;
      let eig2 = mean - sqrt;
      return [eig1, eig2];
    }
    //http://math.colgate.edu/~wweckesser/math312Spring06/handouts/IMM_2x2linalg.pdf
    static eigenvectors2x2(mat = [[1, 2], [3, 4]], eigens = [1, 2]) {
      let v1 = [-mat[0][1], mat[0][0] - eigens[0]];
      if (v1[0] === 0 && v1[1] === 0) {
        v1[0] = mat[1][1] - eigens[0];
        v1[1] = -mat[1][0];
      }
      let v2 = [-mat[0][1], mat[0][0] - eigens[1]];
      if (v2[0] === 0 && v2[1] === 0) {
        v2[0] = mat[1][1] - eigens[1];
        v2[1] = -mat[1][0];
      }
      return [v1, v2];
    }
    //Fast PCA for 2D datasets https://towardsdatascience.com/a-one-stop-shop-for-principal-component-analysis-5582fb7e0a9c
    static fastpca2d(xarr, yarr) {
      let cov1d = this.cov1d(xarr, yarr);
      let eigs = this.eigens2x2(cov1d);
      if (eigs[1] > eigs[0])
        eigs.reverse();
      let evs = this.eigenvectors2x2(cov1d, eigs);
      console.log(eigs, evs);
      return [eigs, evs];
    }
    //Simple cross correlation.
    static crosscorrelation(arr1, arr2) {
      var arr2buf = [...arr2, ...Array(arr2.length).fill(0)];
      var mean1 = this.mean(arr1);
      var mean2 = this.mean(arr2);
      var arr1Est = arr1.reduce((sum, item) => sum += Math.pow(item - mean1, 2));
      arr1Est = Math.sqrt(arr1Est);
      var arr2Est = arr2.reduce((sum, item) => sum += Math.pow(item - mean1, 2));
      arr2Est = Math.sqrt(arr2Est);
      var _arrEstsMul = 1 / (arr1Est * arr2Est);
      var correlations = new Array(arr1.length).fill(0);
      for (var delay = 0; delay < arr1.length; delay++) {
        var r2 = arr1.reduce((sum, item, i2) => sum += (item - mean1) * (arr2buf[delay + i2] - mean2));
        correlations[delay] = r2 * _arrEstsMul;
      }
      return correlations;
    }
    //Simple autocorrelation. Better method for long series: FFT[x1] .* FFT[x2]
    static autocorrelation(arr1) {
      var delaybuf = [...arr1, ...Array(arr1.length).fill(0)];
      var mean1 = this.mean(arr1);
      var arr1Est = arr1.reduce((sum, item) => sum += Math.pow(item - mean1, 2));
      arr1Est = Math.sqrt(arr1Est);
      var _arr1estsqrd = 1 / (arr1Est * arr1Est);
      var correlations = new Array(arr1.length).fill(0);
      for (var delay = 0; delay < arr1.length; delay++) {
        var r2 = arr1.reduce((sum, item, i2) => sum += (item - mean1) * (delaybuf[delay + i2] - mean1));
        correlations[delay] = r2 * _arr1estsqrd;
      }
      return correlations;
    }
    //pass a 2D array e.g image intensity, https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3414238/
    static autocorrelation2d = (mat2d2) => {
      let result = [];
      for (let y2 = 0; y2 < mat2d2.length; y2++) {
        result.push([]);
        for (let x3 = 0; x3 < mat2d2[y2].length; x3++) {
          let G = 0;
          for (let b3 = 0; b3 < mat2d2.length; b3++) {
            for (let a = 0; a < mat2d2[b3].length; a++) {
              G += mat2d2[y2][x3] * mat2d2[mat2d2.length - 1 - b3][mat2d2[y2].length - 1 - a];
            }
          }
          result[y2][x3] = G;
        }
      }
      return result;
    };
    static autocorrelation2dNormalized(mat2d2) {
      let result = [];
      for (let y2 = 0; y2 < mat2d2.length; y2++) {
        result.push([]);
        for (let x3 = 0; x3 < mat2d2[y2].length; x3++) {
          let G = 0;
          let _G = 0;
          for (let b3 = 0; b3 < mat2d2.length; b3++) {
            for (let a = 0; a < mat2d2[b3].length; a++) {
              G += mat2d2[y2][x3] * mat2d2[mat2d2.length - 1 - b3][mat2d2[y2].length - 1 - a];
              _G += mat2d2[y2][x3] * mat2d2[mat2d2.length - 1][mat2d2[y2].length - 1];
            }
          }
          result[y2][x3] = G / _G - 1;
        }
      }
      return result;
    }
    //pass a 2D array e.g image intensity, https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3414238/
    static crosscorrelation2d(mat2d1, mat2d2) {
      let result = [];
      for (let y2 = 0; y2 < mat2d1.length; y2++) {
        result.push([]);
        for (let x3 = 0; x3 < mat2d1[y2].length; x3++) {
          let G = 0;
          for (let b3 = 0; b3 < mat2d2.length; b3++) {
            for (let a = 0; a < mat2d2[b3].length; a++) {
              G += mat2d1[y2][x3] * mat2d2[mat2d2.length - 1 - b3][mat2d2[y2].length - 1 - a];
            }
          }
          result[y2][x3] = G;
        }
      }
      return result;
    }
    static crosscorrelation2dNormalized(mat2d1, mat2d2) {
      let result = [];
      for (let y2 = 0; y2 < mat2d1.length; y2++) {
        result.push([]);
        for (let x3 = 0; x3 < mat2d1[y2].length; x3++) {
          let G = 0;
          let _G = 0;
          for (let b3 = 0; b3 < mat2d2.length; b3++) {
            for (let a = 0; a < mat2d2[b3].length; a++) {
              G += mat2d1[y2][x3] * mat2d2[mat2d.length - 1 - b3][mat2d2[y2].length - 1 - a];
              _G += mat2d1[y2][x3] * mat2d2[mat2d2.length - 1][mat2d2[y2].length - 1];
            }
          }
          result[y2][x3] = G / _G - 1;
        }
      }
      return result;
    }
    //Compute correlograms of the given array of arrays (of equal length). Input array of equal length arrays of latest raw data (use dat = eeg32instance.getTaggedRawData())
    static correlograms(dat = [[], []]) {
      var correlograms = [];
      dat.forEach((row1, i2) => {
        dat.forEach((row2, j) => {
          if (j >= i2) {
            correlograms.push(_Math2.crosscorrelation(row1, row2));
          }
        });
      });
      return correlograms;
    }
    //slow, only for example or really small sample sizes
    static dft(sineWave = []) {
      var TWOPI = 2 * 3.141592653589793;
      var real = [];
      var imag = [];
      var mags = [];
      for (var k2 = 0; k2 < sineWave.length; k2++) {
        real.push(0);
        imag.push(0);
        for (var j = 0; j < sineWave.length; j++) {
          var shared = TWOPI * k2 * j / sineWave.length;
          real[k2] = real[k2] + sineWave[j] * Math.cos(shared);
          imag[k2] = imag[k2] - sineWave[j] * Math.sin(shared);
        }
        mags.push(Math.sqrt(real[k2] * real[k2] + imag[k2] * imag[k2]));
      }
      function orderMagnitudes(unorderedMags) {
        return [...unorderedMags.slice(Math.ceil(unorderedMags.length * 0.5), unorderedMags.length), ...unorderedMags.slice(0, Math.ceil(unorderedMags.length * 0.5))];
      }
      mags = orderMagnitudes(mags);
      let halflen = mags.length * 0.5;
      let freqs = mags.map((m2, i2) => {
        return i2 - halflen;
      });
      return {
        real,
        imag,
        freqs,
        mags
      };
    }
    //Input data and averaging window, output array of moving averages (should be same size as input array, initial values not fully averaged due to window)
    static sma(arr = [], window2) {
      var smaArr = [];
      for (var i2 = 0; i2 < arr.length; i2++) {
        if (i2 == 0) {
          smaArr.push(arr[0]);
        } else if (i2 < window2) {
          var arrslice = arr.slice(0, i2 + 1);
          smaArr.push(arrslice.reduce((previous, current) => current += previous) / (i2 + 1));
        } else {
          var arrslice = arr.slice(i2 - window2, i2);
          smaArr.push(arrslice.reduce((previous, current) => current += previous) / window2);
        }
      }
      return smaArr;
    }
    static sum(arr = []) {
      if (arr.length > 0) {
        var sum = arr.reduce((prev, curr) => curr += prev);
        return sum;
      } else {
        return 0;
      }
    }
    static reduceArrByFactor(arr, factor = 2) {
      let x3 = arr.filter((element, index) => {
        return index % factor === 0;
      });
      return x3;
    }
    //Make an array of size n from a to b 
    static makeArr(startValue, stopValue, nSteps) {
      var arr = [];
      var step = (stopValue - startValue) / (nSteps - 1);
      for (var i2 = 0; i2 < nSteps; i2++) {
        arr.push(startValue + step * i2);
      }
      return arr;
    }
    //autoscale array between -1 and 1, can be used for stacking lines e.g. in webgl
    static autoscale(array, stackedLines = 1, stackPosition = 0, centerZero = false) {
      if (array?.length === 0)
        return array;
      let max = Math.max(...array);
      let min = Math.min(...array);
      let _lines = 1 / stackedLines;
      let scalar;
      if (centerZero) {
        let absmax = Math.max(Math.abs(min), Math.abs(max));
        scalar = _lines / absmax;
        return array.map((y2) => y2 * scalar + (_lines * (stackPosition + 1) * 2 - 1 - _lines));
      } else {
        scalar = _lines / (max - min);
        return array.map((y2) => 2 * ((y2 - min) * scalar - 1 / (2 * stackedLines)) + (_lines * (stackPosition + 1) * 2 - 1 - _lines));
      }
    }
    //absolute value maximum of array (for a +/- valued array)
    static absmax(array) {
      return Math.max(Math.abs(Math.min(...array)), Math.max(...array));
    }
    //averages values when downsampling.
    static downsample(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        let output = new Array(fitCount);
        let incr = array.length / fitCount;
        let lastIdx = array.length - 1;
        let last = 0;
        let counter = 0;
        for (let i2 = incr; i2 < array.length; i2 += incr) {
          let rounded = Math.round(i2);
          if (rounded > lastIdx)
            rounded = lastIdx;
          for (let j = last; j < rounded; j++) {
            output[counter] += array[j];
          }
          output[counter] /= (rounded - last) * scalar;
          counter++;
          last = rounded;
        }
        return output;
      } else
        return array;
    }
    //Linear interpolation from https://stackoverflow.com/questions/26941168/javascript-interpolate-an-array-of-numbers. Input array and number of samples to fit the data to
    static interpolateArray(data, fitCount, scalar = 1) {
      var linearInterpolate = function(before2, after2, atPoint2) {
        return (before2 + (after2 - before2) * atPoint2) * scalar;
      };
      var newData = new Array();
      var springFactor = new Number((data.length - 1) / (fitCount - 1));
      newData[0] = data[0];
      for (var i2 = 1; i2 < fitCount - 1; i2++) {
        var tmp = i2 * springFactor;
        var before = new Number(Math.floor(tmp)).toFixed();
        var after = new Number(Math.ceil(tmp)).toFixed();
        var atPoint = tmp - before;
        newData[i2] = linearInterpolate(data[before], data[after], atPoint);
      }
      newData[fitCount - 1] = data[data.length - 1];
      return newData;
    }
    static upsample = _Math2.interpolateArray;
    static isExtrema(arr, critical = "peak") {
      let ref = [...arr];
      if (ref.length % 2 === 0)
        ref.pop();
      if (arr.length > 1) {
        let pass = true;
        for (let i2 = 0; i2 < ref.length; i2++) {
          let val = ref[i2];
          if (critical === "peak") {
            if (i2 < Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i2 > Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          } else if (critical === "valley") {
            if (i2 < Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i2 > Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          } else {
            if (i2 < Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i2 > Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          }
        }
        if (critical !== "peak" && critical !== "valley" && pass === false) {
          pass = true;
          for (let i2 = 0; i2 < ref.length; i2++) {
            let val = ref[i2];
            if (i2 < Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i2 > Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          }
        }
        return pass;
      } else
        return void 0;
    }
    static isCriticalPoint(arr, critical = "peak") {
      let ref = [...arr];
      if (ref.length % 2 === 0)
        ref.pop();
      if (arr.length > 1) {
        let pass = true;
        for (let i2 = 0; i2 < ref.length; i2++) {
          let val = ref[i2];
          if (critical === "peak") {
            if (i2 < ref.length * 0.5 && val <= 0) {
              pass = false;
              break;
            } else if (i2 > ref.length * 0.5 && val > 0) {
              pass = false;
              break;
            }
          } else if (critical === "valley") {
            if (i2 < ref.length * 0.5 && val >= 0) {
              pass = false;
              break;
            } else if (i2 > ref.length * 0.5 && val < 0) {
              pass = false;
              break;
            }
          } else {
            if (i2 < ref.length * 0.5 && val >= 0) {
              pass = false;
              break;
            } else if (i2 > ref.length * 0.5 && val < 0) {
              pass = false;
              break;
            }
          }
        }
        if (critical !== "peak" && critical !== "valley" && pass === false) {
          pass = true;
          for (let i2 = 0; i2 < ref.length; i2++) {
            let val = ref[i2];
            if (i2 < ref.length * 0.5 && val <= 0) {
              pass = false;
              break;
            } else if (i2 > ref.length * 0.5 && val > 0) {
              pass = false;
              break;
            }
          }
        }
        return pass;
      } else
        return void 0;
    }
    //returns array of indices of detected peaks/valleys
    static peakDetect = (smoothedArray, type = "peak", window2 = 49) => {
      let mid = Math.floor(window2 * 0.5);
      let peaks = [];
      for (let i2 = 0; i2 < smoothedArray.length - window2; i2++) {
        let isPeak = this.isExtrema(smoothedArray.slice(i2, i2 + window2), type);
        if (isPeak) {
          peaks.push(i2 + mid - 1);
        }
      }
      return peaks;
    };
    //gets a mean threshold based on peaks in an array
    static getPeakThreshold(arr, peakIndices, thresholdVar) {
      let threshold;
      let filtered = arr.filter((o, i2) => {
        if (peakIndices.indexOf(i2) > -1)
          return true;
      });
      if (thresholdVar === 0) {
        threshold = this.mean(filtered);
      } else
        threshold = (thresholdVar + this.mean(filtered)) * 0.5;
      return threshold;
    }
    //-------------------------------------------------------------
    //The following n-dimensional Eigenvalue/PCA Math was adapted from: https://github.com/johnmihalik/eigenvector/blob/master/pca.js
    static column(mat, x3) {
      let col = new Array(mat.length).fill(0).map(() => new Array(1).fill(0));
      for (let i2 = 0; i2 < mat.length; i2++) {
        col[i2][0] = mat[i2][x3];
      }
      return col;
    }
    //flatten a vector of 1-value vectors
    static flatten_vector(v2) {
      let v_new = [];
      for (let i2 = 0; i2 < v2.length; i2++) {
        v_new[i2] = v2[i2][0];
      }
      return v_new;
    }
    static squared_difference(v1, v2) {
      let sum = 0;
      for (let i2 = 0; i2 < v1.length; i2++) {
        sum = sum + Math.pow(v1[i2] - v2[i2], 2);
      }
      return sum;
    }
    // See: https://math.stackexchange.com/questions/768882/power-method-for-finding-all-eigenvectors
    static shift_deflate(mat, eigenvalue, eigenvector) {
      let len = Math.sqrt(this.matmul(this.transpose(eigenvector), eigenvector));
      let U = this.matscale(eigenvector, 1 / len);
      let delta = this.matscale(this.matmul(U, this.transpose(U)), eigenvalue);
      let M_new = this.matsub(mat, delta);
      return M_new;
    }
    static eigenvalue_of_vector(mat, eigenvector) {
      ev = this.matmul(this.matmul(this.transpose(eigenvector), mat), eigenvector);
      return ev;
    }
    //Input square 2D matrix
    static power_iteration(mat, tolerance = 1e-5, max_iterations = 1e3) {
      let rank = mat.length;
      let eigenvector = new Array(rank).fill(0).map(() => new Array(1).fill(Math.sqrt(rank)));
      let eigenvalue = this.eigenvalue_of_vector(mat, eigenvector);
      let epsilon = 1;
      let iter = 0;
      while (epsilon > tolerance && iter < max_iterations) {
        let old_eigenvalue = JSON.parse(JSON.stringify(eigenvalue));
        let Mv = this.matmul(mat, eigenvector);
        eigenvector = this.normalize(Mv);
        eigenvalue = this.eigenvalue_of_vector(mat, eigenvector);
        epsilon = Math.abs(eigenvalue - old_eigenvalue);
        iter++;
      }
      ;
      return [eigenvalue, eigenvector];
    }
    //Input square 2D matrix
    static eigens(mat, tolerance = 1e-4, max_iterations = 1e3) {
      let eigenvalues = [];
      let eigenvectors = [];
      for (let i2 = 0; i2 < mat.length; i2++) {
        let result = this.power_iteration(mat, tolerance, max_iterations);
        let eigenvalue = result[0];
        let eigenvector = result[1];
        eigenvalues[i2] = eigenvalue;
        eigenvectors[i2] = this.flatten_vector(eigenvector);
        mat = this.shift_deflate(mat, eigenvalue, eigenvector);
      }
      return [eigenvalues, eigenvectors];
    }
    //Input square 2D matrix. For eeg data you input a square covariance matrix of the signal data (or the z-scores of the signal data)
    static pca(mat, tolerance = 1e-5) {
      let dims = mat.length;
      let t = new Array(dims);
      let p = new Array(dims);
      let mat_t = this.transpose(mat);
      t[0] = this.column(mat, 0);
      let epsilon = 1;
      let iter = 0;
      while (espilon > tolerance) {
        iter++;
        p[0] = this.matmul(mat_t, t[0]);
        let tp = this.matmul(this.transpose(t[0]), t[0]);
        p[0] = this.matscale(p[0], 1 / tp);
        let p_length = Math.sqrt(this.matmul(this.transpose(p[0]), p[0]));
        p[0] = this.matscale(p[0], 1 / p_length);
        let t_new = this.matmul(mat, p[0]);
        let pp = this.matmul(this.transpose(p[0]), p[0]);
        t_new = this.matscale(t_new, 1 / pp);
        epsilon = this.squared_difference(t[0], t_new);
        t[0] = JSON.parse(JSON.stringify(t_new));
      }
      let components = this.matmul(this.transpose(t[0]), t[0]);
      return components;
    }
    //-------------------------------------------------------------
    //pass in 1 second of raw data ish recommended, desired event timestamps and signals are ordered from least current to most current 
    static p300(event_timestamps = [], raw_signal = [], signal_timestamps = [], sps = 256) {
      let smoothingstep = Math.floor(sps / 10);
      let smoothed = this.sma(raw_signal, smoothingstep);
      let peaks = this.peakDetect(smoothed, "peak", smoothingstep);
      let mean = this.mean(smoothed);
      let std = this.std(smoothed, mean);
      let p_idx = 0;
      let candidates = [];
      if (peaks.length > 0) {
        event_timestamps.forEach((t, j) => {
          while (signal_timestamps[peaks[p_idx]] < t + 200) {
            p_idx++;
            if (!peaks[p_idx])
              break;
          }
          let tempi = 0;
          let tempcandidates = [];
          while (signal_timestamps[peaks[p_idx + tempi]] < t + 600) {
            tempcandidates.push(p_idx + tempi);
            tempi++;
            if (!peaks[p_idx + tempi])
              break;
          }
          if (tempcandidates.length > 1) {
            let peakvals = [];
            tempcandidates.forEach((tc) => {
              peakvals.push(smoothed[peaks[tc]]);
            });
            let max = Math.max(...peakvals);
            let maxi = tempcandidates[peakvals.indexOf(max)];
            candidates.push({
              event_timestamp: t,
              event_index: j,
              peak_timestamp: signal_timestamps[[peaks[maxi]]],
              signal_index: [peaks[maxi]],
              signal_amplitude: raw_signal[[peaks[maxi]]],
              zscore: (smoothed[peaks[maxi]] - mean) / std
              //significance measure
            });
          } else if (tempcandidates.length === 1)
            candidates.push({
              event_timestamp: t,
              event_index: j,
              peak_timestamp: signal_timestamps[peaks[tempcandidates[0]]],
              signal_index: peaks[tempcandidates[0]],
              signal_amplitude: raw_signal[[peaks[tempcandidates[0]]]],
              zscore: (smoothed[peaks[tempcandidates[0]]] - mean) / std
              //significance measure
            });
        });
      }
      return candidates;
    }
  };
  Object.assign(Math, Math2);

  // src/utils/canvasMapping.js
  function overlayToImgPicker(img2, canvasOverlay, canvasX, canvasY, imgOffsetX = 0, imgOffsetY = 0) {
    if (img2.naturalWidth) {
      return {
        x: Math.round(img2.naturalWidth * (canvasX - imgOffsetX) / canvasOverlay.width),
        y: Math.round(img2.naturalHeight * (canvasY - imgOffsetY) / canvasOverlay.height)
      };
    } else if (img2.videoWidth) {
      return {
        x: Math.round(img2.videoWidth * (canvasX - imgOffsetX) / canvasOverlay.width),
        y: Math.round(img2.videoHeight * (canvasY - imgOffsetY) / canvasOverlay.height)
      };
    } else if (img2.width) {
      return {
        x: Math.round(img2.width * (canvasX - imgOffsetX) / canvasOverlay.width),
        y: Math.round(img2.height * (canvasY - imgOffsetY) / canvasOverlay.height)
      };
    }
    return void 0;
  }
  function imgToOverlayPicker(img2, canvasOverlay, imgX, imgY, imgOffsetX = 0, imgOffsetY = 0) {
    if (img2.naturalWidth) {
      return {
        x: Math.round(canvasOverlay.width * (imgX - imgOffsetX) / img2.naturalWidth),
        y: Math.round(canvasOverlay.height * (imgY - imgOffsetY) / img2.naturalHeight)
      };
    } else if (img2.videoWidth) {
      return {
        x: Math.round(canvasOverlay.width * (imgX - imgOffsetX) / img2.videoWidth),
        y: Math.round(canvasOverlay.height * (imgY - imgOffsetY) / img2.videoHeight)
      };
    } else if (img2.width) {
      return {
        x: Math.round(canvasOverlay.width * (imgX - imgOffsetX) / img2.width),
        y: Math.round(canvasOverlay.height * (imgY - imgOffsetY) / img2.height)
      };
    }
    return void 0;
  }
  function mapBitmapXIntensities(bitmapImageData) {
    let bitarr = Array.from(bitmapImageData.data);
    let xrgbintensities = [];
    let i2 = [];
    let r2 = [];
    let g3 = [];
    let b3 = [];
    let x3 = 0;
    for (let j = 0; j < bitarr.length; j += 4) {
      if (j / 4 % bitmapImageData.width === 0)
        x3 = 0;
      if (!i2[x3]) {
        i2[x3] = parseFloat(bitarr[j] + bitarr[j + 1] + bitarr[j + 2]), r2[x3] = parseFloat(bitarr[j]), g3[x3] = parseFloat(bitarr[j + 1]), b3[x3] = parseFloat(bitarr[j + 2]);
      } else {
        i2[x3] += parseFloat(bitarr[j] + bitarr[j + 1] + bitarr[j + 2]);
        r2[x3] += parseFloat(bitarr[j]);
        g3[x3] += parseFloat(bitarr[j + 1]);
        b3[x3] += parseFloat(bitarr[j + 2]);
      }
      x3++;
    }
    function clamp(arr, max2 = Math.max(...arr)) {
      if (!max2)
        max2 = Math.max(...arr);
      return arr.map((v2) => v2 / max2);
    }
    let max = Math.max(...i2);
    i2 = clamp(i2, max);
    r2 = clamp(r2, max);
    g3 = clamp(g3, max);
    b3 = clamp(b3, max);
    xrgbintensities = i2.map((v2, j) => {
      return {
        i: i2[j],
        r: r2[j],
        g: g3[j],
        b: b3[j]
      };
    });
    let xintmax = Math.max(...xrgbintensities.map((x4) => {
      return x4.i;
    }));
    let xrintmax = Math.max(...xrgbintensities.map((x4) => {
      return x4.r;
    }));
    let xbintmax = Math.max(...xrgbintensities.map((x4) => {
      return x4.b;
    }));
    let xgintmax = Math.max(...xrgbintensities.map((x4) => {
      return x4.g;
    }));
    let xrgbmax = Math.max(xrintmax, xbintmax, xgintmax);
    return {
      bitmap: bitmapImageData,
      width: bitmapImageData.width,
      height: bitmapImageData.height,
      bitarr,
      //generic array you can read/write normally
      xrgbintensities,
      //rgb intensities summed for each component and together (rgbi)
      xintmax,
      //max of total intensities for scaling
      xrintmax,
      //max of r intensities
      xbintmax,
      //max of b intensities
      xgintmax,
      //max of g intensities
      xrgbmax
      //max of rgb intensities (not the i which is a much larger number)
    };
  }
  async function backupData(mapBitmapXIntensitiesResult, title) {
    let res = Object.assign({}, mapBitmapXIntensitiesResult);
    delete res.bitmap;
    let str = JSON.stringify(res);
    return await writeFile(title, str, "processed");
  }
  function reconstructImageData(array, width, height) {
    return new ImageData(Uint8ClampedArray.from(array), width, height);
  }
  function graphXIntensities(context, xrgbintensities, xintmax, xintmin, x0 = 0, y0 = 0, width = context.canvas.width, height = context.canvas.height) {
    context.fillStyle = "black";
    if (context.canvas.height)
      context.lineWidth = 2;
    if (!xintmax) {
      xintmax = Math.max(...xrgbintensities.map((y2) => y2.i));
    }
    if (!xintmin) {
      xintmin = Math.min(...xrgbintensities.map((y2) => y2.i));
    }
    if (xintmin > 0)
      xintmin = 0;
    context.strokeStyle = "gray";
    context.beginPath();
    let zeroHeight = height * (1 - (0 - xintmin) / (xintmax - xintmin));
    context.moveTo(0, zeroHeight);
    context.lineTo(width, zeroHeight);
    context.stroke();
    let mapped = {
      xrgbintensities,
      xintmax,
      xintmin
    };
    let npixels = mapped.xrgbintensities.length;
    let xscalar = width / npixels;
    context.strokeStyle = "ghostwhite";
    context.beginPath();
    mapped.xrgbintensities.forEach((yrgbi, i2) => {
      if (i2 === 0) {
        context.moveTo(x0, y0 + height * (1 - (yrgbi.i - xintmin) / (mapped.xintmax - mapped.xintmin)));
      } else {
        context.lineTo(x0 + i2 * xscalar, y0 + height * (1 - (yrgbi.i - xintmin) / (mapped.xintmax - mapped.xintmin)));
      }
    });
    context.stroke();
    context.strokeStyle = "tomato";
    context.lineWidth = 2;
    context.beginPath();
    mapped.xrgbintensities.forEach((yrgbi, i2) => {
      if (i2 === 0) {
        context.moveTo(x0, y0 + height * (1 - (yrgbi.r - xintmin) / (mapped.xintmax - mapped.xintmin)));
      } else {
        context.lineTo(x0 + i2 * xscalar, y0 + height * (1 - (yrgbi.r - xintmin) / (mapped.xintmax - mapped.xintmin)));
      }
    });
    context.stroke();
    context.strokeStyle = "#00b8f5";
    context.beginPath();
    mapped.xrgbintensities.forEach((yrgbi, i2) => {
      if (i2 === 0) {
        context.moveTo(x0, y0 + height * (1 - (yrgbi.b - xintmin) / (mapped.xintmax - mapped.xintmin)));
      } else {
        context.lineTo(x0 + i2 * xscalar, y0 + height * (1 - (yrgbi.b - xintmin) / (mapped.xintmax - mapped.xintmin)));
      }
    });
    context.stroke();
    context.strokeStyle = "chartreuse";
    context.beginPath();
    mapped.xrgbintensities.forEach((yrgbi, i2) => {
      if (i2 === 0) {
        context.moveTo(x0, y0 + height * (1 - (yrgbi.g - xintmin) / (mapped.xintmax - mapped.xintmin)));
      } else {
        context.lineTo(x0 + i2 * xscalar, y0 + height * (1 - (yrgbi.g - xintmin) / (mapped.xintmax - mapped.xintmin)));
      }
    });
    context.stroke();
    return mapped;
  }
  function drawImage(context, img2, sx0 = 0, sy0 = 0, sw = img2.width, sh = img2.height, dx0 = 0, dy0 = 0, dw = context.canvas.width, dh = context.canvas.height) {
    return context.drawImage(img2, sx0, sy0, sw, sh, dx0, dy0, dw, dh);
  }
  function recordCanvas(canvas2, fps = 30, withVideoURL = downloadMP4URL, nSec = null) {
    let videoSrc = canvas2.captureStream(fps);
    let mediaRecorder = new MediaRecorder(videoSrc);
    let chunks = [];
    mediaRecorder.ondataavailable = function(e) {
      chunks.push(e.data);
    };
    mediaRecorder.onstop = function(e) {
      let blob = new Blob(chunks, { "type": "video/mp4" });
      chunks = [];
      let videoURL = URL.createObjectURL(blob);
      withVideoURL(videoURL);
    };
    if (nSec) {
      mediaRecorder.onstart = (e) => {
        setTimeout(() => {
          try {
            mediaRecorder.stop();
          } catch (err2) {
          }
        }, nSec * 1e3);
      };
    }
    return mediaRecorder;
  }
  function downloadMP4URL(videoURL, title = (/* @__PURE__ */ new Date()).toISOString()) {
    var hiddenElement = document.createElement("a");
    hiddenElement.href = videoURL;
    hiddenElement.target = "_blank";
    if (title !== "") {
      hiddenElement.download = title + ".mp4";
    } else {
      hiddenElement.download = (/* @__PURE__ */ new Date()).toISOString() + ".mp4";
    }
    hiddenElement.click();
  }
  function getBMP(buffer) {
    var datav = new DataView(buffer);
    var bitmap = {};
    bitmap.fileheader = {};
    bitmap.fileheader.bfType = datav.getUint16(0, true);
    bitmap.fileheader.bfSize = datav.getUint32(2, true);
    bitmap.fileheader.bfReserved1 = datav.getUint16(6, true);
    bitmap.fileheader.bfReserved2 = datav.getUint16(8, true);
    bitmap.fileheader.bfOffBits = datav.getUint32(10, true);
    bitmap.infoheader = {};
    bitmap.infoheader.biSize = datav.getUint32(14, true);
    bitmap.infoheader.biWidth = datav.getUint32(18, true);
    bitmap.infoheader.biHeight = datav.getUint32(22, true);
    bitmap.infoheader.biPlanes = datav.getUint16(26, true);
    bitmap.infoheader.biBitCount = datav.getUint16(28, true);
    bitmap.infoheader.biCompression = datav.getUint32(30, true);
    bitmap.infoheader.biSizeImage = datav.getUint32(34, true);
    bitmap.infoheader.biXPelsPerMeter = datav.getUint32(38, true);
    bitmap.infoheader.biYPelsPerMeter = datav.getUint32(42, true);
    bitmap.infoheader.biClrUsed = datav.getUint32(46, true);
    bitmap.infoheader.biClrImportant = datav.getUint32(50, true);
    var start = bitmap.fileheader.bfOffBits;
    bitmap.stride = Math.floor((bitmap.infoheader.biBitCount * bitmap.infoheader.biWidth + 31) / 32) * 4;
    bitmap.pixels = new Uint8Array(buffer, start);
    return bitmap;
  }
  function convertBMPToPNG(bitmap) {
    canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    var Width = bitmap.infoheader.biWidth;
    var Height = bitmap.infoheader.biHeight;
    canvas.width = Width;
    canvas.height = Height;
    var imageData = ctx.createImageData(Width, Height);
    var data = imageData.data;
    var bmpdata = bitmap.pixels;
    var stride = bitmap.stride;
    for (var y2 = 0; y2 < Height; ++y2) {
      for (var x3 = 0; x3 < Width; ++x3) {
        var index1 = (x3 + Width * (Height - y2)) * 4;
        var index2 = x3 * 3 + stride * y2;
        data[index1] = bmpdata[index2 + 2];
        data[index1 + 1] = bmpdata[index2 + 1];
        data[index1 + 2] = bmpdata[index2];
        data[index1 + 3] = 255;
      }
    }
    ctx.putImageData(imageData, 0, 0);
    return canvas.toDataURL("image/png");
  }
  function dumpSpectrogramsToCSV(xrgbintensities, title) {
    let header = "x,r,g,b,i\n";
    let body = "";
    xrgbintensities.forEach((x3, i2) => {
      body += `${i2},${x3.r},${x3.g},${x3.b},${x3.i}
`;
    });
    let csv = header + body;
    CSV.saveCSV(
      csv,
      title + "_" + (/* @__PURE__ */ new Date()).toISOString()
    );
  }

  // node_modules/fragelement/DOMElement.js
  var DOMElement = class extends HTMLElement {
    template = (props) => {
      return `<div> Custom Fragment Props: ${JSON.stringify(props)} </div>`;
    };
    //override the default template string by extending the class, or use options.template if calling the base class
    props = { test: true };
    useShadow = false;
    //can set to attach a shadow DOM instead (local styles)
    styles = void 0;
    //can set a style sheet which will toggle the shadow dom by default
    oncreate = void 0;
    //(props) => {}  fires on element creation (e.g. to set up logic)
    onresize = void 0;
    //(props) => {} fires on window resize
    ondelete = void 0;
    //(props) => {} fires after element is deleted
    onchanged = void 0;
    //(props) => {} fires when props change
    renderonchanged = false;
    //(props) => {} fires after rerendering on props change
    FRAGMENT = void 0;
    attachedShadow = false;
    obsAttributes = ["props", "options", "onchanged", "onresize", "ondelete", "oncreate", "template"];
    get observedAttributes() {
      return this.obsAttributes;
    }
    get obsAttributes() {
      return this.obsAttributes;
    }
    set obsAttributes(att) {
      if (typeof att === "string") {
        this.obsAttributes.push(att);
      } else if (Array.isArray(att))
        this.obsAttributes = att;
    }
    static get tag() {
      return this.name.toLowerCase() + "-";
    }
    //tagName, default 'classname-'. Set as a static variable for the internal addElement to reference
    //add self or a specified class to the window which can be used via html like <custom-tag></custom-tag>
    //will default be the classname with a '-' at the end if no tag supplied
    static addElement(tag = this.tag, cls = this, extend = void 0) {
      addCustomElement(cls, tag, extend);
    }
    attributeChangedCallback(name, old, val) {
      if (name === "onchanged") {
        let onchanged = val;
        if (typeof onchanged === "string")
          onchanged = parseFunctionFromText(onchanged);
        if (typeof onchanged === "function") {
          this.onchanged = onchanged;
          this.state.data.props = this.props;
          this.state.unsubscribeTrigger("props");
          this.state.subscribeTrigger("props", this.onchanged);
          let changed = new CustomEvent("changed", { detail: { props: this.props } });
          this.state.subscribeTrigger("props", () => {
            this.dispatchEvent(changed);
          });
        }
      } else if (name === "onresize") {
        let onresize = val;
        if (typeof onresize === "string")
          onresize = parseFunctionFromText(onresize);
        if (typeof onresize === "function") {
          if (this.ONRESIZE) {
            try {
              window.removeEventListener("resize", this.ONRESIZE);
            } catch (err2) {
            }
          }
          this.ONRESIZE = (ev2) => {
            this.onresize(this.props);
          };
          this.onresize = onresize;
          window.addEventListener("resize", this.ONRESIZE);
        }
      } else if (name === "ondelete") {
        let ondelete = val;
        if (typeof ondelete === "string")
          ondelete = parseFunctionFromText(ondelete);
        if (typeof ondelete === "function") {
          this.ondelete = () => {
            if (this.ONRESIZE)
              window.removeEventListener("resize", this.ONRESIZE);
            this.state.unsubscribeTrigger("props");
            if (ondelete)
              ondelete(this.props);
          };
        }
      } else if (name === "oncreate") {
        let oncreate = val;
        if (typeof oncreate === "string")
          oncreate = parseFunctionFromText(oncreate);
        if (typeof oncreate === "function") {
          this.oncreate = oncreate;
        }
      } else if (name === "renderonchanged") {
        let rpc = val;
        if (typeof this.renderonchanged === "number")
          this.unsubscribeTrigger(this.renderonchanged);
        if (typeof rpc === "string")
          rpc = parseFunctionFromText(rpc);
        if (typeof rpc === "function") {
          this.renderonchanged = this.state.subscribeTrigger("props", (p) => {
            this.render(p);
            rpc(p);
          });
        } else if (rpc !== false)
          this.renderonchanged = this.state.subscribeTrigger("props", this.render);
      } else if (name === "props") {
        let newProps = val;
        if (typeof newProps === "string")
          newProps = JSON.parse(newProps);
        Object.assign(this.props, newProps);
        this.state.setState({ props: this.props });
      } else if (name === "template") {
        let template = val;
        this.template = options.template;
        if (typeof template === "function")
          this.templateString = this.template(this.props);
        else
          this.templateString = template;
        this.render(this.props);
        let created = new CustomEvent("created", { detail: { props: this.props } });
        this.dispatchEvent(created);
      } else {
        let parsed = val;
        if (name.includes("eval_")) {
          name = name.split("_");
          name.shift();
          name = name.join();
          parsed = parseFunctionFromText(val);
        } else if (typeof val === "string") {
          try {
            parsed = JSON.parse(val);
          } catch (err2) {
            parsed = val;
          }
        }
        this[name] = parsed;
        if (name !== "props")
          this.props[name] = parsed;
      }
    }
    connectedCallback() {
      let newProps = this.getAttribute("props");
      if (typeof newProps === "string")
        newProps = JSON.parse(newProps);
      Object.assign(this.props, newProps);
      this.state.setState({ props: this.props });
      Array.from(this.attributes).forEach((att) => {
        let name = att.name;
        let parsed = att.value;
        if (name.includes("eval_")) {
          name = name.split("_");
          name.shift();
          name = name.join();
          parsed = parseFunctionFromText(att.value);
        } else if (typeof att.value === "string") {
          try {
            parsed = JSON.parse(att.value);
          } catch (err2) {
            parsed = att.value;
          }
        }
        if (!this[name]) {
          Object.defineProperties(
            this,
            att,
            {
              value: parsed,
              writable: true,
              get() {
                return this[name];
              },
              set(val) {
                this.setAttribute(name, val);
              }
            }
          );
        }
        this[name] = parsed;
        if (name !== "props")
          this.props[name] = parsed;
        this.obsAttributes.push(name);
      });
      let resizeevent = new CustomEvent("resized", { detail: { props: this.props } });
      let changed = new CustomEvent("changed", { detail: { props: this.props } });
      let deleted = new CustomEvent("deleted", { detail: { props: this.props } });
      let created = new CustomEvent("created", { detail: { props: this.props } });
      if (this.styles) {
        let elm2 = `
            <style>
                ${templateStr}
            </style>
            `;
        if (this.template.indexOf("<style")) {
          this.template.splice(this.template.indexOf("<style7"), this.template.indexOf("</style"), templateStr);
        } else {
          if (this.template.indexOf("<head")) {
            this.template.splice(this.template.indexOf("<head6"), 0, elm2);
          } else
            this.template = elm2 + this.template;
        }
        this.useShadow = true;
      }
      this.render(this.props);
      this.dispatchEvent(created);
      this.state.subscribeTrigger("props", () => {
        this.dispatchEvent(changed);
      });
      if (typeof this.onresize === "function") {
        if (this.ONRESIZE) {
          try {
            window.removeEventListener("resize", this.ONRESIZE);
          } catch (err2) {
          }
        }
        this.ONRESIZE = (ev2) => {
          this.onresize(this.props);
          this.dispatchEvent(resizeevent);
        };
        window.addEventListener("resize", this.ONRESIZE);
      }
      if (typeof this.ondelete === "function") {
        let ondelete = this.ondelete;
        this.ondelete = (props = this.props) => {
          if (this.ONRESIZE)
            window.removeEventListener("resize", this.ONRESIZE);
          this.state.unsubscribeTrigger("props");
          this.dispatchEvent(deleted);
          ondelete(props);
        };
      }
      if (typeof this.onchanged === "function") {
        this.state.data.props = this.props;
        this.state.subscribeTrigger("props", this.onchanged);
      }
      if (this.renderonchanged) {
        let rpc = this.renderonchanged;
        if (typeof this.renderonchanged === "number")
          this.unsubscribeTrigger(this.renderonchanged);
        if (typeof rpc === "string")
          rpc = parseFunctionFromText(rpc);
        if (typeof rpc === "function") {
          this.renderonchanged = this.state.subscribeTrigger("props", (p) => {
            this.render(p);
            rpc(p);
          });
        } else if (rpc !== false)
          this.renderonchanged = this.state.subscribeTrigger("props", this.render);
      }
    }
    constructor() {
      super();
    }
    delete = () => {
      this.remove();
      if (typeof this.ondelete === "function")
        this.ondelete(this.props);
    };
    render = (props = this.props) => {
      if (typeof this.template === "function")
        this.templateString = this.template(props);
      else
        this.templateString = this.template;
      const t = document.createElement("template");
      t.innerHTML = this.templateString;
      const fragment = t.content;
      if (this.FRAGMENT) {
        if (this.useShadow) {
          this.shadowRoot.removeChild(this.FRAGMENT);
        } else
          this.removeChild(this.FRAGMENT);
      }
      if (this.useShadow) {
        if (!this.attachedShadow)
          this.attachShadow({ mode: "open" });
        this.shadowRoot.prepend(fragment);
        this.FRAGMENT = this.shadowRoot.childNodes[0];
      } else
        this.prepend(fragment);
      this.FRAGMENT = this.childNodes[0];
      let rendered = new CustomEvent("rendered", { detail: { props: this.props } });
      this.dispatchEvent("rendered");
      if (this.oncreate)
        this.oncreate(props);
    };
    state = {
      pushToState: {},
      data: {},
      triggers: {},
      setState(updateObj) {
        Object.assign(this.pushToState, updateObj);
        if (Object.keys(this.triggers).length > 0) {
          for (const prop of Object.getOwnPropertyNames(this.triggers)) {
            if (this.pushToState[prop]) {
              this.data[prop] = this.pushToState[prop];
              delete this.pushToState[prop];
              this.triggers[prop].forEach((obj) => {
                obj.onchanged(this.data[prop]);
              });
            }
          }
        }
        return this.pushToState;
      },
      subscribeTrigger(key, onchanged = (res) => {
      }) {
        if (key) {
          if (!this.triggers[key]) {
            this.triggers[key] = [];
          }
          let l = this.triggers[key].length;
          this.triggers[key].push({ idx: l, onchanged });
          return this.triggers[key].length - 1;
        } else
          return void 0;
      },
      unsubscribeTrigger(key, sub) {
        let idx = void 0;
        let triggers = this.triggers[key];
        if (triggers) {
          if (!sub)
            delete this.triggers[key];
          else {
            let obj = triggers.find((o) => {
              if (o.idx === sub) {
                return true;
              }
            });
            if (obj)
              triggers.splice(idx, 1);
            return true;
          }
        }
      },
      subscribeTriggerOnce(key = void 0, onchanged = (value) => {
      }) {
        let sub;
        let changed = (value) => {
          onchanged(value);
          this.unsubscribeTrigger(key, sub);
        };
        sub = this.subscribeTrigger(key, changed);
      }
    };
    get props() {
      return this.props;
    }
    set props(newProps = {}) {
      this.setAttribute("props", newProps);
    }
    get template() {
      return this.template;
    }
    set template(template) {
      this.setAttribute("template", template);
    }
    get render() {
      return this.render;
    }
    get delete() {
      return this.delete;
    }
    get state() {
      return this.state;
    }
    //past tense just so it can't conflict with onchange
    get onchanged() {
      return this.onchanged;
    }
    set onchanged(onchanged) {
      this.setAttribute("onchanged", onchanged);
    }
    get styles() {
      return this.styles;
    }
    set styles(templateStr2) {
      let elm2 = `
        <style>
            ${templateStr2}
        </style>
        `;
      if (this.template.indexOf("<style")) {
        this.template.splice(this.template.indexOf("<style7"), this.template.indexOf("</style"), templateStr2);
      } else {
        if (this.template.indexOf("<head")) {
          this.template.splice(this.template.indexOf("<head6"), 0, elm2);
        } else
          this.template = elm2 + this.template;
      }
      if (this.querySelector("style")) {
        if (!this.useShadow) {
          this.useShadow = true;
          this.render();
        } else
          this.querySelector("style").innerHTML = templateStr2;
      } else {
        this.useShadow = true;
        this.render();
      }
    }
    get renderonchanged() {
      return this.renderonchanged;
    }
    set renderonchanged(onchanged) {
      this.setAttribute("renderonchanged", onchanged);
    }
    get onresize() {
      return this.props;
    }
    set onresize(onresize) {
      this.setAttribute("onresize", onresize);
    }
    get ondelete() {
      return this.props;
    }
    set ondelete(ondelete) {
      this.setAttribute("ondelete", ondelete);
    }
    get oncreate() {
      return this.oncreate;
    }
    set oncreate(oncreate) {
      this.setAttribute("oncreated", oncreate);
    }
  };
  function addCustomElement(cls, tag, extend = null) {
    try {
      if (extend) {
        if (tag)
          window.customElements.define(tag, cls, { extends: extend });
        else
          window.customElements.define(cls.name.toLowerCase() + "-", cls, { extends: extend });
      } else {
        if (tag)
          window.customElements.define(tag, cls);
        else
          window.customElements.define(cls.name.toLowerCase() + "-", cls);
      }
    } catch (err2) {
    }
  }
  function randomId(tag = "") {
    return tag + Math.floor(Math.random() * 1e15);
  }
  function parseFunctionFromText(method) {
    let getFunctionBody = (methodString) => {
      return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
    };
    let getFunctionHead = (methodString) => {
      let startindex = methodString.indexOf(")");
      return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
    };
    let newFuncHead = getFunctionHead(method);
    let newFuncBody = getFunctionBody(method);
    let newFunc;
    try {
      if (newFuncHead.includes("function ")) {
        let varName = newFuncHead.split("(")[1].split(")")[0];
        newFunc = new Function(varName, newFuncBody);
      } else {
        if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
          let varName = newFuncHead.split("(")[1].split(")")[0];
          newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
        } else {
          try {
            newFunc = eval(newFuncHead + newFuncBody + "}");
          } catch (err) {
            newFunc = eval(method);
          }
        }
      }
    } catch (err2) {
    }
    return newFunc;
  }

  // node_modules/acyclicgraph/acyclicgraph.js
  var state = {
    pushToState: {},
    data: {},
    triggers: {},
    setState(updateObj) {
      Object.assign(this.data, updateObj);
      for (const prop of Object.getOwnPropertyNames(updateObj)) {
        if (this.triggers[prop])
          this.triggers[prop].forEach((obj) => obj.onchange(this.data[prop]));
      }
      return this.data;
    },
    subscribeTrigger(key, onchange = (res) => {
    }) {
      if (key) {
        if (!this.triggers[key]) {
          this.triggers[key] = [];
        }
        let l = this.triggers[key].length;
        this.triggers[key].push({ idx: l, onchange });
        return this.triggers[key].length - 1;
      } else
        return void 0;
    },
    unsubscribeTrigger(key, sub) {
      let idx = void 0;
      let triggers = this.triggers[key];
      if (triggers) {
        if (!sub)
          delete this.triggers[key];
        else {
          let obj = triggers.find((o) => {
            if (o.idx === sub) {
              return true;
            }
          });
          if (obj)
            triggers.splice(idx, 1);
          return true;
        }
      }
    },
    subscribeTriggerOnce(key = void 0, onchange = (value) => {
    }) {
      let sub;
      let changed = (value) => {
        onchange(value);
        this.unsubscribeTrigger(key, sub);
      };
      sub = this.subscribeTrigger(key, changed);
    }
  };
  var AcyclicGraph = class {
    state = state;
    nodes = /* @__PURE__ */ new Map();
    nNodes = 0;
    constructor() {
    }
    //convert child objects to nodes
    convertChildrenToNodes(n) {
      n.convertChildrenToNodes(n);
    }
    //converts all children nodes and tag references to graphnodes also
    addNode(node = {}) {
      let converted = new GraphNode(node, void 0, this);
      return converted;
    }
    getNode(tag) {
      return this.nodes.get(tag);
    }
    //Should create a sync version with no promises (will block but be faster)
    run(node, input, origin) {
      if (typeof node === "string")
        node = this.nodes.get(node);
      if (node)
        return node.run(input, node, origin);
      else
        return void 0;
    }
    //Should create a sync version with no promises (will block but be faster)
    runNode = this.run;
    removeTree(node) {
      if (typeof node === "string")
        node = this.nodes.get(node);
      if (node) {
        let recursivelyRemove = function(node2) {
          if (node2.children) {
            if (Array.isArray(node2.children)) {
              node2.children.forEach((c) => {
                if (c.stopNode)
                  c.stopNode();
                if (c.tag) {
                  if (this.nodes.get(c.tag))
                    this.nodes.delete(c.tag);
                }
                this.nodes.forEach((n) => {
                  if (n.nodes.get(c.tag))
                    n.nodes.delete(c.tag);
                });
                recursivelyRemove(c);
              });
            } else if (typeof node2.children === "object") {
              if (node2.stopNode)
                node2.stopNode();
              if (node2.tag) {
                if (this.nodes.get(node2.tag))
                  this.nodes.delete(node2.tag);
              }
              this.nodes.forEach((n) => {
                if (n.nodes.get(node2.tag))
                  n.nodes.delete(node2.tag);
              });
              recursivelyRemove(node2);
            }
          }
        };
        if (node.stopNode)
          node.stopNode();
        if (node.tag) {
          this.nodes.delete(node.tag);
          this.nodes.forEach((n) => {
            if (n.nodes.get(node.tag))
              n.nodes.delete(node.tag);
          });
          recursivelyRemove(node);
        }
      }
    }
    removeNode(node) {
      if (typeof node === "string")
        node = this.nodes.get(node);
      if (node?.tag)
        this.nodes.delete(node.tag);
      if (node?.tag) {
        if (this.nodes.get(node.tag)) {
          this.nodes.delete(node.tag);
          this.nodes.forEach((n) => {
            if (n.nodes.get(node.tag))
              n.nodes.delete(node.tag);
          });
        }
      }
    }
    appendNode(node = {}, parentNode) {
      parentNode.addChildren(node);
    }
    async callParent(node, input, origin = node, cmd) {
      if (node?.parent) {
        return await node.callParent(input, node.parent, origin, cmd);
      }
    }
    async callChildren(node, input, origin = node, cmd, idx) {
      if (node?.children) {
        return await node.callChildren(input, origin, cmd, idx);
      }
    }
    subscribe(tag, callback = (res) => {
    }) {
      return this.state.subscribeTrigger(tag, callback);
    }
    unsubscribe(tag, sub) {
      this.state.unsubscribeTrigger(tag, sub);
    }
    //subscribe a node to this node that isn't a child of this node
    subscribeNode(inputNode, outputNode) {
      return this.state.subscribeTrigger(inputNode.tag, (res) => {
        this.run(outputNode, res, this);
      });
    }
    create(operator = (input, node, origin, cmd) => {
    }, parentNode, props) {
      return createNode(operator, parentNode, props, this);
    }
    print(node, printChildren = true) {
      if (typeof node === "object" && node.operator)
        return node.print(node, printChildren);
    }
    //reconstruct a node hierarchy (incl. stringified functions) into a GraphNode set
    reconstruct(json = "{}") {
      let parsed = reconstructObject(json);
      if (parsed)
        this.addNode(parsed);
    }
  };
  var GraphNode = class _GraphNode {
    tag;
    parent;
    children;
    graph;
    state = state;
    //shared trigger state
    nodes = /* @__PURE__ */ new Map();
    ANIMATE = "animate";
    //operator is running on the animation loop (cmd = 'animate')
    LOOP = "loop";
    //operator is running on a setTimeout loop (cmd = 'loop')
    looper = void 0;
    //loop function, uses operator if undefined (with cmd 'loop');
    animation = void 0;
    //animation function, uses operator if undefined (with cmd 'animate')
    constructor(properties = {}, parentNode, graph) {
      if (!properties.tag && graph)
        properties.tag = `node${graph.nNodes}`;
      else if (!properties.tag)
        properties.tag = `node${Math.floor(Math.random() * 1e10)}`;
      Object.assign(this, properties);
      this.parent = parentNode;
      this.graph = graph;
      if (graph) {
        graph.nNodes++;
        graph.nodes.set(properties.tag, this);
      }
      if (this.children)
        this.convertChildrenToNodes(this);
    }
    //I/O scheme for this node
    operator(input, node = this, origin, cmd) {
      return input;
    }
    //run the operator
    runOp(input, node = this, origin, cmd) {
      let result = node.operator(input, node, origin, cmd);
      if (result instanceof Promise) {
        result.then((res) => {
          this.state.setState({ [node.tag]: res });
          return res;
        });
      } else {
        this.state.setState({ [node.tag]: result });
      }
      return result;
    }
    //Should create a sync version with no promises (will block but be faster)
    runNode(node, input, origin) {
      if (typeof node === "string")
        node = this.nodes.get(node);
      if (node)
        return node.run(input, node, origin);
      else
        return void 0;
    }
    //runs the node sequence
    run(input, node = this, origin) {
      if (typeof node === "string") {
        let fnd;
        if (this.graph)
          fnd = this.graph.nodes.get(node);
        if (!fnd)
          fnd = this.nodes.get(node);
        node = fnd;
        if (!node)
          return void 0;
      }
      if (!(node.children && node.forward || node.parent && node.backward || node.repeat || node.delay || node.frame || node.recursive || node.operator.constructor.name === "AsyncFunction")) {
        let res = node.runOp(node, input, origin);
        if (node.animate && !node.isAnimating) {
          this.runAnimation(this.animation, input, node, origin);
        }
        if (typeof node.loop === "number" && !node.isLooping) {
          this.runLoop(this.looper, input, node, origin);
        }
        return res;
      }
      return new Promise(async (resolve) => {
        if (node) {
          let run = (node2, inp, tick = 0) => {
            return new Promise(async (r2) => {
              tick++;
              let res = await node2.runOp(inp, node2, origin, tick);
              if (typeof node2.repeat === "number") {
                while (tick < node2.repeat) {
                  if (node2.delay) {
                    setTimeout(async () => {
                      r2(await run(node2, inp, tick));
                    }, node2.delay);
                    break;
                  } else if (node2.frame && requestAnimationFrame) {
                    requestAnimationFrame(async () => {
                      r2(await run(node2, inp, tick));
                    });
                    break;
                  } else
                    res = await node2.runOp(inp, node2, origin, tick);
                  tick++;
                }
                if (tick === node2.repeat) {
                  r2(res);
                  return;
                }
              } else if (typeof node2.recursive === "number") {
                while (tick < node2.recursive) {
                  if (node2.delay) {
                    setTimeout(async () => {
                      r2(await run(node2, res, tick));
                    }, node2.delay);
                    break;
                  } else if (node2.frame && requestAnimationFrame) {
                    requestAnimationFrame(async () => {
                      r2(await run(node2, res, tick));
                    });
                    break;
                  } else
                    res = await node2.runOp(res, node2, origin, tick);
                  tick++;
                }
                if (tick === node2.recursive) {
                  r2(res);
                  return;
                }
              } else {
                r2(res);
                return;
              }
            });
          };
          let runnode = async () => {
            let res = await run(node, input);
            if (node.backward && node.parent) {
              await this.runNode(node.parent, res, node);
            }
            if (node.children && node.forward) {
              if (Array.isArray(node.children)) {
                for (let i2 = 0; i2 < node.children.length; i2++) {
                  await this.runNode(node.children[i2], res, node);
                }
              } else
                await this.runNode(node.children, res, node);
            }
            if (node.animate && !node.isAnimating) {
              this.runAnimation(this.animation, input, node, origin);
            }
            if (typeof node.loop === "number" && !node.isLooping) {
              this.runLoop(this.looper, input, node, origin);
            }
            return res;
          };
          if (node.delay) {
            setTimeout(async () => {
              resolve(await runnode());
            }, node.delay);
          } else if (node.frame && requestAnimationFrame) {
            requestAnimationFrame(async () => {
              resolve(await runnode());
            });
          } else {
            resolve(await runnode());
          }
        } else
          resolve(void 0);
      });
    }
    runAnimation(animation = this.animation, input, node = this, origin) {
      this.animation = animation;
      if (!animation)
        this.animation = this.operator;
      if (node.animate && !node.isAnimating) {
        node.isAnimating = true;
        let anim = async () => {
          if (node.isAnimating) {
            let result = await this.animation(
              input,
              node,
              origin,
              this.ANIMATE
            );
            if (this.tag && typeof result !== "undefined") {
              this.state.setState({ [this.tag]: result });
              if (node.backward && node.parent) {
                await this.runNode(node.parent, result, node);
              }
              if (node.children && node.forward) {
                if (Array.isArray(node.children)) {
                  for (let i2 = 0; i2 < node.children.length; i2++) {
                    await this.runNode(node.children[i2], result, node);
                  }
                } else
                  await this.runNode(node.children, result, node);
              }
            }
            requestAnimationFrame(async () => {
              await anim();
            });
          }
        };
        requestAnimationFrame(anim);
      }
    }
    runLoop(loop = this.looper, input, node = this, origin) {
      this.looper = loop;
      if (!loop)
        this.looper = this.operator;
      if (typeof node.loop === "number" && !node.isLooping) {
        node.isLooping = true;
        let looping = async () => {
          if (node.looping) {
            let result = await this.looper(input, node, origin);
            if (this.tag && typeof result !== "undefined") {
              this.state.setState({ [this.tag]: result });
              if (node.backward && node.parent) {
                await this.runNode(node.parent, result, node);
              }
              if (node.children && node.forward) {
                if (Array.isArray(node.children)) {
                  for (let i2 = 0; i2 < node.children.length; i2++) {
                    await this.runNode(node.children[i2], result, node);
                  }
                } else
                  await this.runNode(node.children, result, node);
              }
            }
            setTimeout(async () => {
              await looping();
            }, node.loop);
          }
        };
      }
    }
    //this is the i/o handler, or the 'main' function for this node to propagate results. The origin is the node the data was propagated from
    setOperator(operator = function operator2(input, node = this, origin, cmd) {
      return input;
    }) {
      this.operator = operator;
    }
    setParent(parent) {
      this.parent = parent;
    }
    setChildren(children) {
      this.children = children;
    }
    removeTree(node) {
      if (typeof node === "string")
        node = this.nodes.get(node);
      if (node) {
        let recursivelyRemove = function(node2) {
          if (node2.children) {
            if (Array.isArray(node2.children)) {
              node2.children.forEach((c) => {
                if (c.stopNode)
                  c.stopNode();
                if (c.tag) {
                  if (this.nodes.get(c.tag))
                    this.nodes.delete(c.tag);
                }
                this.nodes.forEach((n) => {
                  if (n.nodes.get(c.tag))
                    n.nodes.delete(c.tag);
                });
                recursivelyRemove(c);
              });
            } else if (typeof node2.children === "object") {
              if (node2.stopNode)
                node2.stopNode();
              if (node2.tag) {
                if (this.nodes.get(node2.tag))
                  this.nodes.delete(node2.tag);
              }
              this.nodes.forEach((n) => {
                if (n.nodes.get(node2.tag))
                  n.nodes.delete(node2.tag);
              });
              recursivelyRemove(node2);
            }
          }
        };
        if (node.stopNode)
          node.stopNode();
        if (node.tag) {
          this.nodes.delete(node.tag);
          this.nodes.forEach((n) => {
            if (n.nodes.get(node.tag))
              n.nodes.delete(node.tag);
          });
          recursivelyRemove(node);
          if (this.graph)
            this.graph.nodes.removeTree(node);
        }
      }
    }
    //converts all children nodes and tag references to graphnodes also
    addNode(node = {}) {
      let converted = new _GraphNode(node, this, this.graph);
      this.nodes.set(convertedtag, converted);
      if (this.graph)
        this.graph.nodes.set(converted.tag, converted);
      return converted;
    }
    removeNode(node) {
      if (typeof node === "string")
        node = this.nodes.get(node);
      if (node?.tag)
        this.nodes.delete(node.tag);
      if (node?.tag) {
        if (this.nodes.get(node.tag)) {
          this.nodes.delete(node.tag);
          if (this.graph)
            this.graph.nodes.delete(node.tag);
          this.nodes.forEach((n) => {
            if (n.nodes.get(node.tag))
              n.nodes.delete(node.tag);
          });
        }
      }
    }
    appendNode(node, parentNode = this) {
      if (typeof node === "string")
        node = this.nodes.get(node);
      if (node)
        parentNode.addChildren(node);
    }
    getNode(tag) {
      return this.nodes.get(tag);
    }
    //stop any loops
    stopLooping(node = this) {
      node.isLooping = false;
    }
    stopAnimating(node = this) {
      node.isAnimating = false;
    }
    stopNode(node = this) {
      node.stopAnimating(node);
      node.stopLooping(node);
    }
    //append child
    addChildren(children) {
      if (!this.children)
        this.children = [];
      if (!Array.isArray(this.children)) {
        this.children = [children];
        if (typeof children === "object" && children.tag) {
          this.nodes.set(children.tag, children);
          if (this.graph)
            this.graph.nodes.set(children.tag, children);
        }
      } else if (Array.isArray(children)) {
        this.children.push(...children);
        children.forEach((c) => {
          if (typeof c === "object" && c.tag) {
            this.nodes.set(c.tag, c);
            if (this.graph)
              this.graph.nodes.set(c.tag, c);
          }
        });
      } else {
        this.children.push(children);
        if (typeof children === "object" && children.tag) {
          this.nodes.set(children.tag, children);
          if (this.graph)
            this.graph.nodes.set(children.tag, children);
        }
      }
    }
    convertChildrenToNodes(n = this) {
      if (n.children?.name === "GraphNode") {
        if (!this.graph?.nodes.get(n.tag))
          this.graph.nodes.set(n.tag, n);
        if (!this.nodes.get(n.tag))
          this.nodes.set(n.tag, n);
      } else if (Array.isArray(n.children)) {
        for (let i2 = 0; i2 < n.children.length; i2++) {
          if (n.children[i2].name === "GraphNode") {
            if (!this.graph?.nodes.get(n.children[i2].tag))
              this.graph.nodes.set(n.children[i2].tag, n.children[i2]);
            if (!this.nodes.get(n.children[i2].tag))
              this.nodes.set(n.children[i2].tag, n.children[i2]);
            continue;
          } else if (typeof n.children[i2] === "object") {
            n.children[i2] = new _GraphNode(n.children[i2], n, this.graph);
            this.nodes.set(n.children[i2].tag, n.children[i2]);
            this.convertChildrenToNodes(n.children[i2]);
          } else if (typeof n.children[i2] === "string") {
            if (this.graph) {
              n.children[i2] = this.graph.getNode(n.children[i2]);
              if (!this.nodes.get(n.children[i2].tag))
                this.nodes.set(n.children[i2].tag, n.children[i2]);
            }
            if (!n.children[i2])
              n.children[i2] = this.nodes.get(n.children[i2]);
          }
        }
      } else if (typeof n.children === "object") {
        n.children = new _GraphNode(n.children, n, this.graph);
        this.nodes.set(n.children.tag, n.children);
        this.convertChildrenToNodes(n.children);
      } else if (typeof n.children === "string") {
        if (this.graph) {
          n.children = this.graph.getNode(n.children);
          if (!this.nodes.get(n.children.tag))
            this.nodes.set(n.children.tag, n.children);
        }
        if (!n.children)
          n.children = this.nodes.get(n.children);
      }
      return n.children;
    }
    //Call parent node operator directly
    async callParent(input, origin = this, cmd) {
      if (typeof this.parent?.operator === "function")
        return await this.parent.runOp(input, this.parent, origin, cmd);
    }
    async callChildren(input, origin = this, cmd, idx) {
      let result;
      if (Array.isArray(this.children)) {
        if (idx)
          result = await this.children[idx]?.runOp(input, this.children[idx], origin, cmd);
        else {
          result = [];
          for (let i2 = 0; i2 < this.children.length; i2++) {
            result.push(await this.children[i2]?.runOp(input, this.children[i2], origin, cmd));
          }
        }
      } else if (this.children) {
        result = await this.children.runOp(input, this.children, origin, cmd);
      }
      return result;
    }
    setProps(props = {}) {
      Object.assign(this, props);
    }
    subscribe(callback = (res) => {
    }, tag = this.tag) {
      if (typeof callback === "object")
        return this.subscribeNode(callback);
      return this.state.subscribeTrigger(tag, callback);
    }
    unsubscribe(sub, tag = this.tag) {
      this.state.unsubscribeTrigger(tag, sub);
    }
    //subscribe a node to this node that isn't a child of this node
    subscribeNode(node, tag = this.tag) {
      return this.state.subscribeTrigger(tag, (res) => {
        this.runNode(node, res, this);
      });
    }
    //recursively print a reconstructible json hierarchy of the node and the children. 
    // Start at the top/initially called nodes to print the whole hierarchy in one go
    print(node = this, printChildren = true, nodesPrinted = []) {
      let dummyNode = new _GraphNode();
      nodesPrinted.push(node.tag);
      let jsonToPrint = {
        tag: node.tag,
        operator: node.operator.toString()
      };
      if (node.parent)
        jsonToPrint.parent = node.parent.tag;
      if (node.children) {
        if (Array.isArray(node.children)) {
          node.children = node.children.map((c) => {
            if (typeof c === "string")
              return c;
            if (nodesPrinted.includes(c.tag))
              return c.tag;
            else if (!printChildren) {
              return c.tag;
            } else
              return c.print(c, printChildren, nodesPrinted);
          });
        } else if (typeof node.children === "object") {
          if (!printChildren) {
            jsonToPrint.children = [node.children.tag];
          }
          if (nodesPrinted.includes(node.children.tag))
            jsonToPrint.children = [node.children.tag];
          else
            jsonToPrint.children = [node.children.print(node.children, printChildren, nodesPrinted)];
        } else if (typeof node.children === "string")
          jsonToPrint.children = [node.children];
      }
      for (const prop in node) {
        if (prop === "parent" || prop === "children")
          continue;
        if (typeof dummyNode[prop] === "undefined") {
          if (typeof node[prop] === "function") {
            jsonToPrint[prop] = node[prop].toString();
          } else if (typeof node[prop] === "object") {
            jsonToPrint[prop] = JSON.stringifyWithCircularRefs(node[prop]);
          } else {
            jsonToPrint[prop] = node[prop];
          }
        }
      }
      return JSON.stringify(jsonToPrint);
    }
    //reconstruct a node hierarchy (incl. stringified functions) into a GraphNode set
    reconstruct(json = "{}") {
      let parsed = reconstructObject(json);
      if (parsed)
        this.addNode(parsed);
    }
  };
  function createNode(operator, parentNode, props, graph) {
    if (typeof props === "object") {
      props.operator = operator;
      return new GraphNode(props, parentNode, graph);
    }
    return new GraphNode({ operator }, parentNode, graph);
  }
  function reconstructNode(json = "{}", parentNode, graph) {
    let reconstructed = reconstructObject(json);
    if (reconstructed)
      return new GraphNode(reconstructed, parentNode, graph);
    else
      return void 0;
  }
  function reconstructObject(json = "{}") {
    try {
      let parseObj = function(obj) {
        for (const prop in obj) {
          if (typeof obj[prop] === "string") {
            let funcParsed = parseFunctionFromText2(obj[prop]);
            if (typeof funcParsed === "function") {
              obj[prop] = funcParsed;
            }
          } else if (typeof obj[prop] === "object") {
            parseObj(obj[prop]);
          }
        }
        return obj;
      };
      let parsed = JSON.parse(json);
      return parseObj(parsed);
    } catch (err2) {
      console.error(err2);
      return void 0;
    }
  }
  if (JSON.stringifyWithCircularRefs === void 0) {
    JSON.stringifyWithCircularRefs = /* @__PURE__ */ function() {
      const refs = /* @__PURE__ */ new Map();
      const parents = [];
      const path = ["this"];
      function clear() {
        refs.clear();
        parents.length = 0;
        path.length = 1;
      }
      function updateParents(key, value) {
        var idx = parents.length - 1;
        var prev = parents[idx];
        if (typeof prev === "object") {
          if (prev[key] === value || idx === 0) {
            path.push(key);
            parents.push(value.pushed);
          } else {
            while (idx-- >= 0) {
              prev = parents[idx];
              if (typeof prev === "object") {
                if (prev[key] === value) {
                  idx += 2;
                  parents.length = idx;
                  path.length = idx;
                  --idx;
                  parents[idx] = value;
                  path[idx] = key;
                  break;
                }
              }
              idx--;
            }
          }
        }
      }
      function checkCircular(key, value) {
        if (value != null) {
          if (typeof value === "object") {
            if (key) {
              updateParents(key, value);
            }
            let other = refs.get(value);
            if (other) {
              return "[Circular Reference]" + other;
            } else {
              refs.set(value, path.join("."));
            }
          }
        }
        return value;
      }
      return function stringifyWithCircularRefs(obj, space) {
        try {
          parents.push(obj);
          return JSON.stringify(obj, checkCircular, space);
        } finally {
          clear();
        }
      };
    }();
  }
  function parseFunctionFromText2(method = "") {
    let getFunctionBody = (methodString) => {
      return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
    };
    let getFunctionHead = (methodString) => {
      let startindex = methodString.indexOf(")");
      return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
    };
    let newFuncHead = getFunctionHead(method);
    let newFuncBody = getFunctionBody(method);
    let newFunc;
    if (newFuncHead.includes("function ")) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody);
    } else {
      if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
        let varName = newFuncHead.split("(")[1].split(")")[0];
        newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
      } else
        newFunc = eval(newFuncHead + newFuncBody + "}");
    }
    return newFunc;
  }

  // src/components/acyclicgraph/graph.node.js
  var component = require_graph_node();
  var NodeDiv = class extends DOMElement {
    props = {
      operator: (input, node, origin, cmd) => {
        console.log(input);
        return input;
      },
      //Operator to handle I/O on this node. Returned inputs can propagate according to below settings
      forward: true,
      //pass output to child nodes
      backward: false,
      //pass output to parent node
      children: void 0,
      //child node(s), can be tags of other nodes, properties objects like this, or graphnodes, or null
      parent: void 0,
      //parent graph node
      delay: false,
      //ms delay to fire the node
      repeat: false,
      // set repeat as an integer to repeat the input n times
      recursive: false,
      //or set recursive with an integer to pass the output back in as the next input n times
      animate: false,
      //true or false
      loop: void 0,
      //milliseconds or false
      tag: void 0,
      //generated if not specified, or use to get another node by tag instead of generating a new one
      input: void 0,
      // can set on the attribute etc
      graph: void 0,
      //parent AcyclicGraph instance, can set manually or via enclosing acyclic-graph div
      node: void 0
      //GraphNode instance, can set manually or as a string to grab a node by tag (or use tag)
    };
    //can specify properties of the element which can be subscribed to for changes.
    input_delay = 1;
    //onload runNode delay for graph nodes to run operations on inputs, they will not recognize their children otherwise as the DOM loads
    //set the template string or function (which can input props to return a modified string)
    template = component;
    //gotta customize this a little from the default DOMElement
    render = (props = this.props) => {
      if (typeof this.template === "function")
        this.templateString = this.template(props);
      else
        this.templateString = this.template;
      const t = document.createElement("template");
      t.innerHTML = this.templateString;
      const fragment = t.content;
      if (this.fragment) {
        this.removeChild(this.fragment);
      }
      this.fragment = fragment;
      this.appendChild(fragment);
      this.setupNode(this.props);
      if (this.props.input) {
        setTimeout(
          async () => {
            this.props.node.runNode(this.props.node, this.props.input, this.props.graph);
          },
          this.input_delay
          //makes sure children are loaded (e.g. on a DOM with a lot of loading, should add some execution delay to anticipate it as initial nodes are not aware of later-rendered nodes on the DOM)
        );
      }
      if (this.oncreate)
        this.oncreate(props);
    };
    setupNode(props) {
      let parent = this.parentNode;
      if (parent.props?.operator) {
        if (parent.props?.node)
          props.parent = parent.props.node;
      }
      if (!props.graph) {
        while (!parent.props?.nodes) {
          if (parent.constructor.name === "HTMLBodyElement" || parent.constructor.name === "HTMLHeadElement" || parent.constructor.name === "HTMLHtmlElement" || parent.constructor.name === "HTMLDocument") {
            break;
          }
          parent = parent.parentNode;
        }
        if (parent.props?.nodes) {
          props.graph = parent.props.graph;
          props.input_delay = parent.props.input_delay;
        }
      }
      if (this.id && !props.tag)
        props.tag = this.id;
      if (props.graph && !props.node && props.tag)
        props.node = props.graph.nodes.get(props.tag);
      else if (props.graph && typeof props.node === "string")
        props.node = props.graph.nodes.get(props.node);
      if (!props.node)
        props.node = new GraphNode(props, props.parent, props.graph);
      props.tag = props.node.tag;
      if (!this.id)
        this.id = props.tag;
      if (props.parent) {
        props.parent.addChildren(props.node);
      }
    }
    //DOMElement custom callbacks:
    //oncreate=(props)=>{} //after rendering
    //onresize=(props)=>{} //on window resize
    //onchanged=(props)=>{} //on props changed
    //ondelete=(props)=>{} //on element deleted. Can remove with this.delete() which runs cleanup functions
  };
  NodeDiv.addElement("graph-node");

  // node_modules/magicworker/dist/magicworker.esm.js
  var import_meta = {};
  var D = URL.createObjectURL(new Blob([String('(()=>{var mi=Object.create;var ht=Object.defineProperty;var gi=Object.getOwnPropertyDescriptor;var xi=Object.getOwnPropertyNames;var yi=Object.getPrototypeOf,bi=Object.prototype.hasOwnProperty;var Ti=(D,s,l)=>s in D?ht(D,s,{enumerable:!0,configurable:!0,writable:!0,value:l}):D[s]=l;var ze=(D=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(D,{get:(s,l)=>(typeof require!="undefined"?require:s)[l]}):D)(function(D){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+D+\'" is not supported\')});var vi=(D,s)=>()=>(s||D((s={exports:{}}).exports,s),s.exports);var Si=(D,s,l,i)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of xi(s))!bi.call(D,o)&&o!==l&&ht(D,o,{get:()=>s[o],enumerable:!(i=gi(s,o))||i.enumerable});return D};var _i=(D,s,l)=>(l=D!=null?mi(yi(D)):{},Si(s||!D||!D.__esModule?ht(l,"default",{value:D,enumerable:!0}):l,D));var oe=(D,s,l)=>(Ti(D,typeof s!="symbol"?s+"":s,l),l);var Gt=vi((Kt,ft)=>{(function(D){if(typeof Kt=="object"&&typeof ft<"u")ft.exports=D();else if(typeof define=="function"&&define.amd)define([],D);else{var s;typeof window<"u"?s=window:typeof global<"u"?s=global:typeof self<"u"?s=self:s=this,D()}})(function(){var D,s,l;return function(){function i(o,m,u){function c(r,a){if(!m[r]){if(!o[r]){var t=typeof ze=="function"&&ze;if(!a&&t)return t(r,!0);if(d)return d(r,!0);var n=new Error("Cannot find module \'"+r+"\'");throw n.code="MODULE_NOT_FOUND",n}var g=m[r]={exports:{}};o[r][0].call(g.exports,function(v){var k=o[r][1][v];return c(k||v)},g,g.exports,i,o,m,u)}return m[r].exports}for(var d=typeof ze=="function"&&ze,f=0;f<u.length;f++)c(u[f]);return c}return i}()({1:[function(i,o,m){(function(u,c){typeof m=="object"&&typeof o<"u"?c(m):typeof D=="function"&&D.amd?D(["exports"],c):(u=u||self,c(u.acorn={}))})(this,function(u){"use strict";var c={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},d="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",f={5:d,"5module":d+" export import",6:d+" const class extends export import super"},r=/^in(stanceof)?$/,a="\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC",t="\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F",n=new RegExp("["+a+"]"),g=new RegExp("["+a+t+"]");a=t=null;var v=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541],k=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];function T(e,h){for(var S=65536,I=0;I<h.length;I+=2){if(S+=h[I],S>e)return!1;if(S+=h[I+1],S>=e)return!0}}function A(e,h){return e<65?e===36:e<91?!0:e<97?e===95:e<123?!0:e<=65535?e>=170&&n.test(String.fromCharCode(e)):h===!1?!1:T(e,v)}function E(e,h){return e<48?e===36:e<58?!0:e<65?!1:e<91?!0:e<97?e===95:e<123?!0:e<=65535?e>=170&&g.test(String.fromCharCode(e)):h===!1?!1:T(e,v)||T(e,k)}var y=function(h,S){S===void 0&&(S={}),this.label=h,this.keyword=S.keyword,this.beforeExpr=!!S.beforeExpr,this.startsExpr=!!S.startsExpr,this.isLoop=!!S.isLoop,this.isAssign=!!S.isAssign,this.prefix=!!S.prefix,this.postfix=!!S.postfix,this.binop=S.binop||null,this.updateContext=null};function _(e,h){return new y(e,{beforeExpr:!0,binop:h})}var w={beforeExpr:!0},M={startsExpr:!0},N={};function b(e,h){return h===void 0&&(h={}),h.keyword=e,N[e]=new y(e,h)}var p={num:new y("num",M),regexp:new y("regexp",M),string:new y("string",M),name:new y("name",M),eof:new y("eof"),bracketL:new y("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new y("]"),braceL:new y("{",{beforeExpr:!0,startsExpr:!0}),braceR:new y("}"),parenL:new y("(",{beforeExpr:!0,startsExpr:!0}),parenR:new y(")"),comma:new y(",",w),semi:new y(";",w),colon:new y(":",w),dot:new y("."),question:new y("?",w),arrow:new y("=>",w),template:new y("template"),invalidTemplate:new y("invalidTemplate"),ellipsis:new y("...",w),backQuote:new y("`",M),dollarBraceL:new y("${",{beforeExpr:!0,startsExpr:!0}),eq:new y("=",{beforeExpr:!0,isAssign:!0}),assign:new y("_=",{beforeExpr:!0,isAssign:!0}),incDec:new y("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new y("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:_("||",1),logicalAND:_("&&",2),bitwiseOR:_("|",3),bitwiseXOR:_("^",4),bitwiseAND:_("&",5),equality:_("==/!=/===/!==",6),relational:_("</>/<=/>=",7),bitShift:_("<</>>/>>>",8),plusMin:new y("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:_("%",10),star:_("*",10),slash:_("/",10),starstar:new y("**",{beforeExpr:!0}),_break:b("break"),_case:b("case",w),_catch:b("catch"),_continue:b("continue"),_debugger:b("debugger"),_default:b("default",w),_do:b("do",{isLoop:!0,beforeExpr:!0}),_else:b("else",w),_finally:b("finally"),_for:b("for",{isLoop:!0}),_function:b("function",M),_if:b("if"),_return:b("return",w),_switch:b("switch"),_throw:b("throw",w),_try:b("try"),_var:b("var"),_const:b("const"),_while:b("while",{isLoop:!0}),_with:b("with"),_new:b("new",{beforeExpr:!0,startsExpr:!0}),_this:b("this",M),_super:b("super",M),_class:b("class",M),_extends:b("extends",w),_export:b("export"),_import:b("import",M),_null:b("null",M),_true:b("true",M),_false:b("false",M),_in:b("in",{beforeExpr:!0,binop:7}),_instanceof:b("instanceof",{beforeExpr:!0,binop:7}),_typeof:b("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:b("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:b("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},C=/\\r\\n?|\\n|\\u2028|\\u2029/,F=new RegExp(C.source,"g");function P(e,h){return e===10||e===13||!h&&(e===8232||e===8233)}var L=/[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/,$=/(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g,G=Object.prototype,O=G.hasOwnProperty,Y=G.toString;function W(e,h){return O.call(e,h)}var K=Array.isArray||function(e){return Y.call(e)==="[object Array]"};function J(e){return new RegExp("^(?:"+e.replace(/ /g,"|")+")$")}var Q=function(h,S){this.line=h,this.column=S};Q.prototype.offset=function(h){return new Q(this.line,this.column+h)};var te=function(h,S,I){this.start=S,this.end=I,h.sourceFile!==null&&(this.source=h.sourceFile)};function H(e,h){for(var S=1,I=0;;){F.lastIndex=I;var R=F.exec(e);if(R&&R.index<h)++S,I=R.index+R[0].length;else return new Q(S,h-I)}}var B={ecmaVersion:10,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1};function he(e){var h={};for(var S in B)h[S]=e&&W(e,S)?e[S]:B[S];if(h.ecmaVersion>=2015&&(h.ecmaVersion-=2009),h.allowReserved==null&&(h.allowReserved=h.ecmaVersion<5),K(h.onToken)){var I=h.onToken;h.onToken=function(R){return I.push(R)}}return K(h.onComment)&&(h.onComment=Z(h,h.onComment)),h}function Z(e,h){return function(S,I,R,V,z,U){var X={type:S?"Block":"Line",value:I,start:R,end:V};e.locations&&(X.loc=new te(this,z,U)),e.ranges&&(X.range=[R,V]),h.push(X)}}var ie=1,Se=2,ee=ie|Se,ce=4,fe=8,me=16,ne=32,ue=64,xe=128;function _e(e,h){return Se|(e?ce:0)|(h?fe:0)}var ke=0,$e=1,Ie=2,Tt=3,vt=4,St=5,pe=function(h,S,I){this.options=h=he(h),this.sourceFile=h.sourceFile,this.keywords=J(f[h.ecmaVersion>=6?6:h.sourceType==="module"?"5module":5]);var R="";if(h.allowReserved!==!0){for(var V=h.ecmaVersion;!(R=c[V]);V--);h.sourceType==="module"&&(R+=" await")}this.reservedWords=J(R);var z=(R?R+" ":"")+c.strict;this.reservedWordsStrict=J(z),this.reservedWordsStrictBind=J(z+" "+c.strictBind),this.input=String(S),this.containsEsc=!1,I?(this.pos=I,this.lineStart=this.input.lastIndexOf(`\n`,I-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(C).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=p.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule=h.sourceType==="module",this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports={},this.pos===0&&h.allowHashBang&&this.input.slice(0,2)==="#!"&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(ie),this.regexpState=null},Me={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0}};pe.prototype.parse=function(){var h=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(h)},Me.inFunction.get=function(){return(this.currentVarScope().flags&Se)>0},Me.inGenerator.get=function(){return(this.currentVarScope().flags&fe)>0},Me.inAsync.get=function(){return(this.currentVarScope().flags&ce)>0},Me.allowSuper.get=function(){return(this.currentThisScope().flags&ue)>0},Me.allowDirectSuper.get=function(){return(this.currentThisScope().flags&xe)>0},Me.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},pe.prototype.inNonArrowFunction=function(){return(this.currentThisScope().flags&Se)>0},pe.extend=function(){for(var h=[],S=arguments.length;S--;)h[S]=arguments[S];for(var I=this,R=0;R<h.length;R++)I=h[R](I);return I},pe.parse=function(h,S){return new this(S,h).parse()},pe.parseExpressionAt=function(h,S,I){var R=new this(I,h,S);return R.nextToken(),R.parseExpression()},pe.tokenizer=function(h,S){return new this(S,h)},Object.defineProperties(pe.prototype,Me);var Te=pe.prototype,Jt=/^(?:\'((?:\\\\.|[^\'])*?)\'|"((?:\\\\.|[^"])*?)")/;Te.strictDirective=function(e){for(;;){$.lastIndex=e,e+=$.exec(this.input)[0].length;var h=Jt.exec(this.input.slice(e));if(!h)return!1;if((h[1]||h[2])==="use strict")return!0;e+=h[0].length,$.lastIndex=e,e+=$.exec(this.input)[0].length,this.input[e]===";"&&e++}},Te.eat=function(e){return this.type===e?(this.next(),!0):!1},Te.isContextual=function(e){return this.type===p.name&&this.value===e&&!this.containsEsc},Te.eatContextual=function(e){return this.isContextual(e)?(this.next(),!0):!1},Te.expectContextual=function(e){this.eatContextual(e)||this.unexpected()},Te.canInsertSemicolon=function(){return this.type===p.eof||this.type===p.braceR||C.test(this.input.slice(this.lastTokEnd,this.start))},Te.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},Te.semicolon=function(){!this.eat(p.semi)&&!this.insertSemicolon()&&this.unexpected()},Te.afterTrailingComma=function(e,h){if(this.type===e)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),h||this.next(),!0},Te.expect=function(e){this.eat(e)||this.unexpected()},Te.unexpected=function(e){this.raise(e??this.start,"Unexpected token")};function Be(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}Te.checkPatternErrors=function(e,h){if(!!e){e.trailingComma>-1&&this.raiseRecoverable(e.trailingComma,"Comma is not permitted after the rest element");var S=h?e.parenthesizedAssign:e.parenthesizedBind;S>-1&&this.raiseRecoverable(S,"Parenthesized pattern")}},Te.checkExpressionErrors=function(e,h){if(!e)return!1;var S=e.shorthandAssign,I=e.doubleProto;if(!h)return S>=0||I>=0;S>=0&&this.raise(S,"Shorthand property assignments are valid only in destructuring patterns"),I>=0&&this.raiseRecoverable(I,"Redefinition of __proto__ property")},Te.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},Te.isSimpleAssignTarget=function(e){return e.type==="ParenthesizedExpression"?this.isSimpleAssignTarget(e.expression):e.type==="Identifier"||e.type==="MemberExpression"};var se=pe.prototype;se.parseTopLevel=function(e){var h={};for(e.body||(e.body=[]);this.type!==p.eof;){var S=this.parseStatement(null,!0,h);e.body.push(S)}if(this.inModule)for(var I=0,R=Object.keys(this.undefinedExports);I<R.length;I+=1){var V=R[I];this.raiseRecoverable(this.undefinedExports[V].start,"Export \'"+V+"\' is not defined")}return this.adaptDirectivePrologue(e.body),this.next(),e.sourceType=this.options.sourceType,this.finishNode(e,"Program")};var at={kind:"loop"},Zt={kind:"switch"};se.isLet=function(e){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;$.lastIndex=this.pos;var h=$.exec(this.input),S=this.pos+h[0].length,I=this.input.charCodeAt(S);if(I===91)return!0;if(e)return!1;if(I===123)return!0;if(A(I,!0)){for(var R=S+1;E(this.input.charCodeAt(R),!0);)++R;var V=this.input.slice(S,R);if(!r.test(V))return!0}return!1},se.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;$.lastIndex=this.pos;var e=$.exec(this.input),h=this.pos+e[0].length;return!C.test(this.input.slice(this.pos,h))&&this.input.slice(h,h+8)==="function"&&(h+8===this.input.length||!E(this.input.charAt(h+8)))},se.parseStatement=function(e,h,S){var I=this.type,R=this.startNode(),V;switch(this.isLet(e)&&(I=p._var,V="let"),I){case p._break:case p._continue:return this.parseBreakContinueStatement(R,I.keyword);case p._debugger:return this.parseDebuggerStatement(R);case p._do:return this.parseDoStatement(R);case p._for:return this.parseForStatement(R);case p._function:return e&&(this.strict||e!=="if"&&e!=="label")&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(R,!1,!e);case p._class:return e&&this.unexpected(),this.parseClass(R,!0);case p._if:return this.parseIfStatement(R);case p._return:return this.parseReturnStatement(R);case p._switch:return this.parseSwitchStatement(R);case p._throw:return this.parseThrowStatement(R);case p._try:return this.parseTryStatement(R);case p._const:case p._var:return V=V||this.value,e&&V!=="var"&&this.unexpected(),this.parseVarStatement(R,V);case p._while:return this.parseWhileStatement(R);case p._with:return this.parseWithStatement(R);case p.braceL:return this.parseBlock(!0,R);case p.semi:return this.parseEmptyStatement(R);case p._export:case p._import:if(this.options.ecmaVersion>10&&I===p._import){$.lastIndex=this.pos;var z=$.exec(this.input),U=this.pos+z[0].length,X=this.input.charCodeAt(U);if(X===40)return this.parseExpressionStatement(R,this.parseExpression())}return this.options.allowImportExportEverywhere||(h||this.raise(this.start,"\'import\' and \'export\' may only appear at the top level"),this.inModule||this.raise(this.start,"\'import\' and \'export\' may appear only with \'sourceType: module\'")),I===p._import?this.parseImport(R):this.parseExport(R,S);default:if(this.isAsyncFunction())return e&&this.unexpected(),this.next(),this.parseFunctionStatement(R,!0,!e);var le=this.value,ve=this.parseExpression();return I===p.name&&ve.type==="Identifier"&&this.eat(p.colon)?this.parseLabeledStatement(R,le,ve,e):this.parseExpressionStatement(R,ve)}},se.parseBreakContinueStatement=function(e,h){var S=h==="break";this.next(),this.eat(p.semi)||this.insertSemicolon()?e.label=null:this.type!==p.name?this.unexpected():(e.label=this.parseIdent(),this.semicolon());for(var I=0;I<this.labels.length;++I){var R=this.labels[I];if((e.label==null||R.name===e.label.name)&&(R.kind!=null&&(S||R.kind==="loop")||e.label&&S))break}return I===this.labels.length&&this.raise(e.start,"Unsyntactic "+h),this.finishNode(e,S?"BreakStatement":"ContinueStatement")},se.parseDebuggerStatement=function(e){return this.next(),this.semicolon(),this.finishNode(e,"DebuggerStatement")},se.parseDoStatement=function(e){return this.next(),this.labels.push(at),e.body=this.parseStatement("do"),this.labels.pop(),this.expect(p._while),e.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(p.semi):this.semicolon(),this.finishNode(e,"DoWhileStatement")},se.parseForStatement=function(e){this.next();var h=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(at),this.enterScope(0),this.expect(p.parenL),this.type===p.semi)return h>-1&&this.unexpected(h),this.parseFor(e,null);var S=this.isLet();if(this.type===p._var||this.type===p._const||S){var I=this.startNode(),R=S?"let":this.value;return this.next(),this.parseVar(I,!0,R),this.finishNode(I,"VariableDeclaration"),(this.type===p._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&I.declarations.length===1?(this.options.ecmaVersion>=9&&(this.type===p._in?h>-1&&this.unexpected(h):e.await=h>-1),this.parseForIn(e,I)):(h>-1&&this.unexpected(h),this.parseFor(e,I))}var V=new Be,z=this.parseExpression(!0,V);return this.type===p._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===p._in?h>-1&&this.unexpected(h):e.await=h>-1),this.toAssignable(z,!1,V),this.checkLVal(z),this.parseForIn(e,z)):(this.checkExpressionErrors(V,!0),h>-1&&this.unexpected(h),this.parseFor(e,z))},se.parseFunctionStatement=function(e,h,S){return this.next(),this.parseFunction(e,Oe|(S?0:ot),!1,h)},se.parseIfStatement=function(e){return this.next(),e.test=this.parseParenExpression(),e.consequent=this.parseStatement("if"),e.alternate=this.eat(p._else)?this.parseStatement("if"):null,this.finishNode(e,"IfStatement")},se.parseReturnStatement=function(e){return!this.inFunction&&!this.options.allowReturnOutsideFunction&&this.raise(this.start,"\'return\' outside of function"),this.next(),this.eat(p.semi)||this.insertSemicolon()?e.argument=null:(e.argument=this.parseExpression(),this.semicolon()),this.finishNode(e,"ReturnStatement")},se.parseSwitchStatement=function(e){this.next(),e.discriminant=this.parseParenExpression(),e.cases=[],this.expect(p.braceL),this.labels.push(Zt),this.enterScope(0);for(var h,S=!1;this.type!==p.braceR;)if(this.type===p._case||this.type===p._default){var I=this.type===p._case;h&&this.finishNode(h,"SwitchCase"),e.cases.push(h=this.startNode()),h.consequent=[],this.next(),I?h.test=this.parseExpression():(S&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),S=!0,h.test=null),this.expect(p.colon)}else h||this.unexpected(),h.consequent.push(this.parseStatement(null));return this.exitScope(),h&&this.finishNode(h,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(e,"SwitchStatement")},se.parseThrowStatement=function(e){return this.next(),C.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),e.argument=this.parseExpression(),this.semicolon(),this.finishNode(e,"ThrowStatement")};var Qt=[];se.parseTryStatement=function(e){if(this.next(),e.block=this.parseBlock(),e.handler=null,this.type===p._catch){var h=this.startNode();if(this.next(),this.eat(p.parenL)){h.param=this.parseBindingAtom();var S=h.param.type==="Identifier";this.enterScope(S?ne:0),this.checkLVal(h.param,S?vt:Ie),this.expect(p.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),h.param=null,this.enterScope(0);h.body=this.parseBlock(!1),this.exitScope(),e.handler=this.finishNode(h,"CatchClause")}return e.finalizer=this.eat(p._finally)?this.parseBlock():null,!e.handler&&!e.finalizer&&this.raise(e.start,"Missing catch or finally clause"),this.finishNode(e,"TryStatement")},se.parseVarStatement=function(e,h){return this.next(),this.parseVar(e,!1,h),this.semicolon(),this.finishNode(e,"VariableDeclaration")},se.parseWhileStatement=function(e){return this.next(),e.test=this.parseParenExpression(),this.labels.push(at),e.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(e,"WhileStatement")},se.parseWithStatement=function(e){return this.strict&&this.raise(this.start,"\'with\' in strict mode"),this.next(),e.object=this.parseParenExpression(),e.body=this.parseStatement("with"),this.finishNode(e,"WithStatement")},se.parseEmptyStatement=function(e){return this.next(),this.finishNode(e,"EmptyStatement")},se.parseLabeledStatement=function(e,h,S,I){for(var R=0,V=this.labels;R<V.length;R+=1){var z=V[R];z.name===h&&this.raise(S.start,"Label \'"+h+"\' is already declared")}for(var U=this.type.isLoop?"loop":this.type===p._switch?"switch":null,X=this.labels.length-1;X>=0;X--){var le=this.labels[X];if(le.statementStart===e.start)le.statementStart=this.start,le.kind=U;else break}return this.labels.push({name:h,kind:U,statementStart:this.start}),e.body=this.parseStatement(I?I.indexOf("label")===-1?I+"label":I:"label"),this.labels.pop(),e.label=S,this.finishNode(e,"LabeledStatement")},se.parseExpressionStatement=function(e,h){return e.expression=h,this.semicolon(),this.finishNode(e,"ExpressionStatement")},se.parseBlock=function(e,h){for(e===void 0&&(e=!0),h===void 0&&(h=this.startNode()),h.body=[],this.expect(p.braceL),e&&this.enterScope(0);!this.eat(p.braceR);){var S=this.parseStatement(null);h.body.push(S)}return e&&this.exitScope(),this.finishNode(h,"BlockStatement")},se.parseFor=function(e,h){return e.init=h,this.expect(p.semi),e.test=this.type===p.semi?null:this.parseExpression(),this.expect(p.semi),e.update=this.type===p.parenR?null:this.parseExpression(),this.expect(p.parenR),e.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(e,"ForStatement")},se.parseForIn=function(e,h){var S=this.type===p._in;return this.next(),h.type==="VariableDeclaration"&&h.declarations[0].init!=null&&(!S||this.options.ecmaVersion<8||this.strict||h.kind!=="var"||h.declarations[0].id.type!=="Identifier")?this.raise(h.start,(S?"for-in":"for-of")+" loop variable declaration may not have an initializer"):h.type==="AssignmentPattern"&&this.raise(h.start,"Invalid left-hand side in for-loop"),e.left=h,e.right=S?this.parseExpression():this.parseMaybeAssign(),this.expect(p.parenR),e.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(e,S?"ForInStatement":"ForOfStatement")},se.parseVar=function(e,h,S){for(e.declarations=[],e.kind=S;;){var I=this.startNode();if(this.parseVarId(I,S),this.eat(p.eq)?I.init=this.parseMaybeAssign(h):S==="const"&&!(this.type===p._in||this.options.ecmaVersion>=6&&this.isContextual("of"))?this.unexpected():I.id.type!=="Identifier"&&!(h&&(this.type===p._in||this.isContextual("of")))?this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):I.init=null,e.declarations.push(this.finishNode(I,"VariableDeclarator")),!this.eat(p.comma))break}return e},se.parseVarId=function(e,h){e.id=this.parseBindingAtom(),this.checkLVal(e.id,h==="var"?$e:Ie,!1)};var Oe=1,ot=2,_t=4;se.parseFunction=function(e,h,S,I){this.initFunction(e),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!I)&&(this.type===p.star&&h&ot&&this.unexpected(),e.generator=this.eat(p.star)),this.options.ecmaVersion>=8&&(e.async=!!I),h&Oe&&(e.id=h&_t&&this.type!==p.name?null:this.parseIdent(),e.id&&!(h&ot)&&this.checkLVal(e.id,this.strict||e.generator||e.async?this.treatFunctionsAsVar?$e:Ie:Tt));var R=this.yieldPos,V=this.awaitPos,z=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(_e(e.async,e.generator)),h&Oe||(e.id=this.type===p.name?this.parseIdent():null),this.parseFunctionParams(e),this.parseFunctionBody(e,S,!1),this.yieldPos=R,this.awaitPos=V,this.awaitIdentPos=z,this.finishNode(e,h&Oe?"FunctionDeclaration":"FunctionExpression")},se.parseFunctionParams=function(e){this.expect(p.parenL),e.params=this.parseBindingList(p.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},se.parseClass=function(e,h){this.next();var S=this.strict;this.strict=!0,this.parseClassId(e,h),this.parseClassSuper(e);var I=this.startNode(),R=!1;for(I.body=[],this.expect(p.braceL);!this.eat(p.braceR);){var V=this.parseClassElement(e.superClass!==null);V&&(I.body.push(V),V.type==="MethodDefinition"&&V.kind==="constructor"&&(R&&this.raise(V.start,"Duplicate constructor in the same class"),R=!0))}return e.body=this.finishNode(I,"ClassBody"),this.strict=S,this.finishNode(e,h?"ClassDeclaration":"ClassExpression")},se.parseClassElement=function(e){var h=this;if(this.eat(p.semi))return null;var S=this.startNode(),I=function(X,le){le===void 0&&(le=!1);var ve=h.start,Fe=h.startLoc;return h.eatContextual(X)?h.type!==p.parenL&&(!le||!h.canInsertSemicolon())?!0:(S.key&&h.unexpected(),S.computed=!1,S.key=h.startNodeAt(ve,Fe),S.key.name=X,h.finishNode(S.key,"Identifier"),!1):!1};S.kind="method",S.static=I("static");var R=this.eat(p.star),V=!1;R||(this.options.ecmaVersion>=8&&I("async",!0)?(V=!0,R=this.options.ecmaVersion>=9&&this.eat(p.star)):I("get")?S.kind="get":I("set")&&(S.kind="set")),S.key||this.parsePropertyName(S);var z=S.key,U=!1;return!S.computed&&!S.static&&(z.type==="Identifier"&&z.name==="constructor"||z.type==="Literal"&&z.value==="constructor")?(S.kind!=="method"&&this.raise(z.start,"Constructor can\'t have get/set modifier"),R&&this.raise(z.start,"Constructor can\'t be a generator"),V&&this.raise(z.start,"Constructor can\'t be an async method"),S.kind="constructor",U=e):S.static&&z.type==="Identifier"&&z.name==="prototype"&&this.raise(z.start,"Classes may not have a static property named prototype"),this.parseClassMethod(S,R,V,U),S.kind==="get"&&S.value.params.length!==0&&this.raiseRecoverable(S.value.start,"getter should have no params"),S.kind==="set"&&S.value.params.length!==1&&this.raiseRecoverable(S.value.start,"setter should have exactly one param"),S.kind==="set"&&S.value.params[0].type==="RestElement"&&this.raiseRecoverable(S.value.params[0].start,"Setter cannot use rest params"),S},se.parseClassMethod=function(e,h,S,I){return e.value=this.parseMethod(h,S,I),this.finishNode(e,"MethodDefinition")},se.parseClassId=function(e,h){this.type===p.name?(e.id=this.parseIdent(),h&&this.checkLVal(e.id,Ie,!1)):(h===!0&&this.unexpected(),e.id=null)},se.parseClassSuper=function(e){e.superClass=this.eat(p._extends)?this.parseExprSubscripts():null},se.parseExport=function(e,h){if(this.next(),this.eat(p.star))return this.expectContextual("from"),this.type!==p.string&&this.unexpected(),e.source=this.parseExprAtom(),this.semicolon(),this.finishNode(e,"ExportAllDeclaration");if(this.eat(p._default)){this.checkExport(h,"default",this.lastTokStart);var S;if(this.type===p._function||(S=this.isAsyncFunction())){var I=this.startNode();this.next(),S&&this.next(),e.declaration=this.parseFunction(I,Oe|_t,!1,S)}else if(this.type===p._class){var R=this.startNode();e.declaration=this.parseClass(R,"nullableID")}else e.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(e,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())e.declaration=this.parseStatement(null),e.declaration.type==="VariableDeclaration"?this.checkVariableExport(h,e.declaration.declarations):this.checkExport(h,e.declaration.id.name,e.declaration.id.start),e.specifiers=[],e.source=null;else{if(e.declaration=null,e.specifiers=this.parseExportSpecifiers(h),this.eatContextual("from"))this.type!==p.string&&this.unexpected(),e.source=this.parseExprAtom();else{for(var V=0,z=e.specifiers;V<z.length;V+=1){var U=z[V];this.checkUnreserved(U.local),this.checkLocalExport(U.local)}e.source=null}this.semicolon()}return this.finishNode(e,"ExportNamedDeclaration")},se.checkExport=function(e,h,S){!e||(W(e,h)&&this.raiseRecoverable(S,"Duplicate export \'"+h+"\'"),e[h]=!0)},se.checkPatternExport=function(e,h){var S=h.type;if(S==="Identifier")this.checkExport(e,h.name,h.start);else if(S==="ObjectPattern")for(var I=0,R=h.properties;I<R.length;I+=1){var V=R[I];this.checkPatternExport(e,V)}else if(S==="ArrayPattern")for(var z=0,U=h.elements;z<U.length;z+=1){var X=U[z];X&&this.checkPatternExport(e,X)}else S==="Property"?this.checkPatternExport(e,h.value):S==="AssignmentPattern"?this.checkPatternExport(e,h.left):S==="RestElement"?this.checkPatternExport(e,h.argument):S==="ParenthesizedExpression"&&this.checkPatternExport(e,h.expression)},se.checkVariableExport=function(e,h){if(!!e)for(var S=0,I=h;S<I.length;S+=1){var R=I[S];this.checkPatternExport(e,R.id)}},se.shouldParseExportStatement=function(){return this.type.keyword==="var"||this.type.keyword==="const"||this.type.keyword==="class"||this.type.keyword==="function"||this.isLet()||this.isAsyncFunction()},se.parseExportSpecifiers=function(e){var h=[],S=!0;for(this.expect(p.braceL);!this.eat(p.braceR);){if(S)S=!1;else if(this.expect(p.comma),this.afterTrailingComma(p.braceR))break;var I=this.startNode();I.local=this.parseIdent(!0),I.exported=this.eatContextual("as")?this.parseIdent(!0):I.local,this.checkExport(e,I.exported.name,I.exported.start),h.push(this.finishNode(I,"ExportSpecifier"))}return h},se.parseImport=function(e){return this.next(),this.type===p.string?(e.specifiers=Qt,e.source=this.parseExprAtom()):(e.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),e.source=this.type===p.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(e,"ImportDeclaration")},se.parseImportSpecifiers=function(){var e=[],h=!0;if(this.type===p.name){var S=this.startNode();if(S.local=this.parseIdent(),this.checkLVal(S.local,Ie),e.push(this.finishNode(S,"ImportDefaultSpecifier")),!this.eat(p.comma))return e}if(this.type===p.star){var I=this.startNode();return this.next(),this.expectContextual("as"),I.local=this.parseIdent(),this.checkLVal(I.local,Ie),e.push(this.finishNode(I,"ImportNamespaceSpecifier")),e}for(this.expect(p.braceL);!this.eat(p.braceR);){if(h)h=!1;else if(this.expect(p.comma),this.afterTrailingComma(p.braceR))break;var R=this.startNode();R.imported=this.parseIdent(!0),this.eatContextual("as")?R.local=this.parseIdent():(this.checkUnreserved(R.imported),R.local=R.imported),this.checkLVal(R.local,Ie),e.push(this.finishNode(R,"ImportSpecifier"))}return e},se.adaptDirectivePrologue=function(e){for(var h=0;h<e.length&&this.isDirectiveCandidate(e[h]);++h)e[h].directive=e[h].expression.raw.slice(1,-1)},se.isDirectiveCandidate=function(e){return e.type==="ExpressionStatement"&&e.expression.type==="Literal"&&typeof e.expression.value=="string"&&(this.input[e.start]===\'"\'||this.input[e.start]==="\'")};var De=pe.prototype;De.toAssignable=function(e,h,S){if(this.options.ecmaVersion>=6&&e)switch(e.type){case"Identifier":this.inAsync&&e.name==="await"&&this.raise(e.start,"Cannot use \'await\' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":e.type="ObjectPattern",S&&this.checkPatternErrors(S,!0);for(var I=0,R=e.properties;I<R.length;I+=1){var V=R[I];this.toAssignable(V,h),V.type==="RestElement"&&(V.argument.type==="ArrayPattern"||V.argument.type==="ObjectPattern")&&this.raise(V.argument.start,"Unexpected token")}break;case"Property":e.kind!=="init"&&this.raise(e.key.start,"Object pattern can\'t contain getter or setter"),this.toAssignable(e.value,h);break;case"ArrayExpression":e.type="ArrayPattern",S&&this.checkPatternErrors(S,!0),this.toAssignableList(e.elements,h);break;case"SpreadElement":e.type="RestElement",this.toAssignable(e.argument,h),e.argument.type==="AssignmentPattern"&&this.raise(e.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":e.operator!=="="&&this.raise(e.left.end,"Only \'=\' operator can be used for specifying default value."),e.type="AssignmentPattern",delete e.operator,this.toAssignable(e.left,h);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(e.expression,h,S);break;case"MemberExpression":if(!h)break;default:this.raise(e.start,"Assigning to rvalue")}else S&&this.checkPatternErrors(S,!0);return e},De.toAssignableList=function(e,h){for(var S=e.length,I=0;I<S;I++){var R=e[I];R&&this.toAssignable(R,h)}if(S){var V=e[S-1];this.options.ecmaVersion===6&&h&&V&&V.type==="RestElement"&&V.argument.type!=="Identifier"&&this.unexpected(V.argument.start)}return e},De.parseSpread=function(e){var h=this.startNode();return this.next(),h.argument=this.parseMaybeAssign(!1,e),this.finishNode(h,"SpreadElement")},De.parseRestBinding=function(){var e=this.startNode();return this.next(),this.options.ecmaVersion===6&&this.type!==p.name&&this.unexpected(),e.argument=this.parseBindingAtom(),this.finishNode(e,"RestElement")},De.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case p.bracketL:var e=this.startNode();return this.next(),e.elements=this.parseBindingList(p.bracketR,!0,!0),this.finishNode(e,"ArrayPattern");case p.braceL:return this.parseObj(!0)}return this.parseIdent()},De.parseBindingList=function(e,h,S){for(var I=[],R=!0;!this.eat(e);)if(R?R=!1:this.expect(p.comma),h&&this.type===p.comma)I.push(null);else{if(S&&this.afterTrailingComma(e))break;if(this.type===p.ellipsis){var V=this.parseRestBinding();this.parseBindingListItem(V),I.push(V),this.type===p.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(e);break}else{var z=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(z),I.push(z)}}return I},De.parseBindingListItem=function(e){return e},De.parseMaybeDefault=function(e,h,S){if(S=S||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(p.eq))return S;var I=this.startNodeAt(e,h);return I.left=S,I.right=this.parseMaybeAssign(),this.finishNode(I,"AssignmentPattern")},De.checkLVal=function(e,h,S){switch(h===void 0&&(h=ke),e.type){case"Identifier":h===Ie&&e.name==="let"&&this.raiseRecoverable(e.start,"let is disallowed as a lexically bound name"),this.strict&&this.reservedWordsStrictBind.test(e.name)&&this.raiseRecoverable(e.start,(h?"Binding ":"Assigning to ")+e.name+" in strict mode"),S&&(W(S,e.name)&&this.raiseRecoverable(e.start,"Argument name clash"),S[e.name]=!0),h!==ke&&h!==St&&this.declareName(e.name,h,e.start);break;case"MemberExpression":h&&this.raiseRecoverable(e.start,"Binding member expression");break;case"ObjectPattern":for(var I=0,R=e.properties;I<R.length;I+=1){var V=R[I];this.checkLVal(V,h,S)}break;case"Property":this.checkLVal(e.value,h,S);break;case"ArrayPattern":for(var z=0,U=e.elements;z<U.length;z+=1){var X=U[z];X&&this.checkLVal(X,h,S)}break;case"AssignmentPattern":this.checkLVal(e.left,h,S);break;case"RestElement":this.checkLVal(e.argument,h,S);break;case"ParenthesizedExpression":this.checkLVal(e.expression,h,S);break;default:this.raise(e.start,(h?"Binding":"Assigning to")+" rvalue")}};var re=pe.prototype;re.checkPropClash=function(e,h,S){if(!(this.options.ecmaVersion>=9&&e.type==="SpreadElement")&&!(this.options.ecmaVersion>=6&&(e.computed||e.method||e.shorthand))){var I=e.key,R;switch(I.type){case"Identifier":R=I.name;break;case"Literal":R=String(I.value);break;default:return}var V=e.kind;if(this.options.ecmaVersion>=6){R==="__proto__"&&V==="init"&&(h.proto&&(S?S.doubleProto<0&&(S.doubleProto=I.start):this.raiseRecoverable(I.start,"Redefinition of __proto__ property")),h.proto=!0);return}R="$"+R;var z=h[R];if(z){var U;V==="init"?U=this.strict&&z.init||z.get||z.set:U=z.init||z[V],U&&this.raiseRecoverable(I.start,"Redefinition of property")}else z=h[R]={init:!1,get:!1,set:!1};z[V]=!0}},re.parseExpression=function(e,h){var S=this.start,I=this.startLoc,R=this.parseMaybeAssign(e,h);if(this.type===p.comma){var V=this.startNodeAt(S,I);for(V.expressions=[R];this.eat(p.comma);)V.expressions.push(this.parseMaybeAssign(e,h));return this.finishNode(V,"SequenceExpression")}return R},re.parseMaybeAssign=function(e,h,S){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(e);this.exprAllowed=!1}var I=!1,R=-1,V=-1;h?(R=h.parenthesizedAssign,V=h.trailingComma,h.parenthesizedAssign=h.trailingComma=-1):(h=new Be,I=!0);var z=this.start,U=this.startLoc;(this.type===p.parenL||this.type===p.name)&&(this.potentialArrowAt=this.start);var X=this.parseMaybeConditional(e,h);if(S&&(X=S.call(this,X,z,U)),this.type.isAssign){var le=this.startNodeAt(z,U);return le.operator=this.value,le.left=this.type===p.eq?this.toAssignable(X,!1,h):X,I||(h.parenthesizedAssign=h.trailingComma=h.doubleProto=-1),h.shorthandAssign>=le.left.start&&(h.shorthandAssign=-1),this.checkLVal(X),this.next(),le.right=this.parseMaybeAssign(e),this.finishNode(le,"AssignmentExpression")}else I&&this.checkExpressionErrors(h,!0);return R>-1&&(h.parenthesizedAssign=R),V>-1&&(h.trailingComma=V),X},re.parseMaybeConditional=function(e,h){var S=this.start,I=this.startLoc,R=this.parseExprOps(e,h);if(this.checkExpressionErrors(h))return R;if(this.eat(p.question)){var V=this.startNodeAt(S,I);return V.test=R,V.consequent=this.parseMaybeAssign(),this.expect(p.colon),V.alternate=this.parseMaybeAssign(e),this.finishNode(V,"ConditionalExpression")}return R},re.parseExprOps=function(e,h){var S=this.start,I=this.startLoc,R=this.parseMaybeUnary(h,!1);return this.checkExpressionErrors(h)||R.start===S&&R.type==="ArrowFunctionExpression"?R:this.parseExprOp(R,S,I,-1,e)},re.parseExprOp=function(e,h,S,I,R){var V=this.type.binop;if(V!=null&&(!R||this.type!==p._in)&&V>I){var z=this.type===p.logicalOR||this.type===p.logicalAND,U=this.value;this.next();var X=this.start,le=this.startLoc,ve=this.parseExprOp(this.parseMaybeUnary(null,!1),X,le,V,R),Fe=this.buildBinary(h,S,e,ve,U,z);return this.parseExprOp(Fe,h,S,I,R)}return e},re.buildBinary=function(e,h,S,I,R,V){var z=this.startNodeAt(e,h);return z.left=S,z.operator=R,z.right=I,this.finishNode(z,V?"LogicalExpression":"BinaryExpression")},re.parseMaybeUnary=function(e,h){var S=this.start,I=this.startLoc,R;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))R=this.parseAwait(),h=!0;else if(this.type.prefix){var V=this.startNode(),z=this.type===p.incDec;V.operator=this.value,V.prefix=!0,this.next(),V.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(e,!0),z?this.checkLVal(V.argument):this.strict&&V.operator==="delete"&&V.argument.type==="Identifier"?this.raiseRecoverable(V.start,"Deleting local variable in strict mode"):h=!0,R=this.finishNode(V,z?"UpdateExpression":"UnaryExpression")}else{if(R=this.parseExprSubscripts(e),this.checkExpressionErrors(e))return R;for(;this.type.postfix&&!this.canInsertSemicolon();){var U=this.startNodeAt(S,I);U.operator=this.value,U.prefix=!1,U.argument=R,this.checkLVal(R),this.next(),R=this.finishNode(U,"UpdateExpression")}}return!h&&this.eat(p.starstar)?this.buildBinary(S,I,R,this.parseMaybeUnary(null,!1),"**",!1):R},re.parseExprSubscripts=function(e){var h=this.start,S=this.startLoc,I=this.parseExprAtom(e);if(I.type==="ArrowFunctionExpression"&&this.input.slice(this.lastTokStart,this.lastTokEnd)!==")")return I;var R=this.parseSubscripts(I,h,S);return e&&R.type==="MemberExpression"&&(e.parenthesizedAssign>=R.start&&(e.parenthesizedAssign=-1),e.parenthesizedBind>=R.start&&(e.parenthesizedBind=-1)),R},re.parseSubscripts=function(e,h,S,I){for(var R=this.options.ecmaVersion>=8&&e.type==="Identifier"&&e.name==="async"&&this.lastTokEnd===e.end&&!this.canInsertSemicolon()&&this.input.slice(e.start,e.end)==="async";;){var V=this.parseSubscript(e,h,S,I,R);if(V===e||V.type==="ArrowFunctionExpression")return V;e=V}},re.parseSubscript=function(e,h,S,I,R){var V=this.eat(p.bracketL);if(V||this.eat(p.dot)){var z=this.startNodeAt(h,S);z.object=e,z.property=V?this.parseExpression():this.parseIdent(this.options.allowReserved!=="never"),z.computed=!!V,V&&this.expect(p.bracketR),e=this.finishNode(z,"MemberExpression")}else if(!I&&this.eat(p.parenL)){var U=new Be,X=this.yieldPos,le=this.awaitPos,ve=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var Fe=this.parseExprList(p.parenR,this.options.ecmaVersion>=8,!1,U);if(R&&!this.canInsertSemicolon()&&this.eat(p.arrow))return this.checkPatternErrors(U,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use \'await\' as identifier inside an async function"),this.yieldPos=X,this.awaitPos=le,this.awaitIdentPos=ve,this.parseArrowExpression(this.startNodeAt(h,S),Fe,!0);this.checkExpressionErrors(U,!0),this.yieldPos=X||this.yieldPos,this.awaitPos=le||this.awaitPos,this.awaitIdentPos=ve||this.awaitIdentPos;var Ve=this.startNodeAt(h,S);Ve.callee=e,Ve.arguments=Fe,e=this.finishNode(Ve,"CallExpression")}else if(this.type===p.backQuote){var Le=this.startNodeAt(h,S);Le.tag=e,Le.quasi=this.parseTemplate({isTagged:!0}),e=this.finishNode(Le,"TaggedTemplateExpression")}return e},re.parseExprAtom=function(e){this.type===p.slash&&this.readRegexp();var h,S=this.potentialArrowAt===this.start;switch(this.type){case p._super:return this.allowSuper||this.raise(this.start,"\'super\' keyword outside a method"),h=this.startNode(),this.next(),this.type===p.parenL&&!this.allowDirectSuper&&this.raise(h.start,"super() call outside constructor of a subclass"),this.type!==p.dot&&this.type!==p.bracketL&&this.type!==p.parenL&&this.unexpected(),this.finishNode(h,"Super");case p._this:return h=this.startNode(),this.next(),this.finishNode(h,"ThisExpression");case p.name:var I=this.start,R=this.startLoc,V=this.containsEsc,z=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!V&&z.name==="async"&&!this.canInsertSemicolon()&&this.eat(p._function))return this.parseFunction(this.startNodeAt(I,R),0,!1,!0);if(S&&!this.canInsertSemicolon()){if(this.eat(p.arrow))return this.parseArrowExpression(this.startNodeAt(I,R),[z],!1);if(this.options.ecmaVersion>=8&&z.name==="async"&&this.type===p.name&&!V)return z=this.parseIdent(!1),(this.canInsertSemicolon()||!this.eat(p.arrow))&&this.unexpected(),this.parseArrowExpression(this.startNodeAt(I,R),[z],!0)}return z;case p.regexp:var U=this.value;return h=this.parseLiteral(U.value),h.regex={pattern:U.pattern,flags:U.flags},h;case p.num:case p.string:return this.parseLiteral(this.value);case p._null:case p._true:case p._false:return h=this.startNode(),h.value=this.type===p._null?null:this.type===p._true,h.raw=this.type.keyword,this.next(),this.finishNode(h,"Literal");case p.parenL:var X=this.start,le=this.parseParenAndDistinguishExpression(S);return e&&(e.parenthesizedAssign<0&&!this.isSimpleAssignTarget(le)&&(e.parenthesizedAssign=X),e.parenthesizedBind<0&&(e.parenthesizedBind=X)),le;case p.bracketL:return h=this.startNode(),this.next(),h.elements=this.parseExprList(p.bracketR,!0,!0,e),this.finishNode(h,"ArrayExpression");case p.braceL:return this.parseObj(!1,e);case p._function:return h=this.startNode(),this.next(),this.parseFunction(h,0);case p._class:return this.parseClass(this.startNode(),!1);case p._new:return this.parseNew();case p.backQuote:return this.parseTemplate();case p._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected()}},re.parseExprImport=function(){var e=this.startNode();switch(this.next(),this.type){case p.parenL:return this.parseDynamicImport(e);default:this.unexpected()}},re.parseDynamicImport=function(e){if(this.next(),e.source=this.parseMaybeAssign(),!this.eat(p.parenR)){var h=this.start;this.eat(p.comma)&&this.eat(p.parenR)?this.raiseRecoverable(h,"Trailing comma is not allowed in import()"):this.unexpected(h)}return this.finishNode(e,"ImportExpression")},re.parseLiteral=function(e){var h=this.startNode();return h.value=e,h.raw=this.input.slice(this.start,this.end),h.raw.charCodeAt(h.raw.length-1)===110&&(h.bigint=h.raw.slice(0,-1)),this.next(),this.finishNode(h,"Literal")},re.parseParenExpression=function(){this.expect(p.parenL);var e=this.parseExpression();return this.expect(p.parenR),e},re.parseParenAndDistinguishExpression=function(e){var h=this.start,S=this.startLoc,I,R=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var V=this.start,z=this.startLoc,U=[],X=!0,le=!1,ve=new Be,Fe=this.yieldPos,Ve=this.awaitPos,Le;for(this.yieldPos=0,this.awaitPos=0;this.type!==p.parenR;)if(X?X=!1:this.expect(p.comma),R&&this.afterTrailingComma(p.parenR,!0)){le=!0;break}else if(this.type===p.ellipsis){Le=this.start,U.push(this.parseParenItem(this.parseRestBinding())),this.type===p.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}else U.push(this.parseMaybeAssign(!1,ve,this.parseParenItem));var fi=this.start,di=this.startLoc;if(this.expect(p.parenR),e&&!this.canInsertSemicolon()&&this.eat(p.arrow))return this.checkPatternErrors(ve,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=Fe,this.awaitPos=Ve,this.parseParenArrowList(h,S,U);(!U.length||le)&&this.unexpected(this.lastTokStart),Le&&this.unexpected(Le),this.checkExpressionErrors(ve,!0),this.yieldPos=Fe||this.yieldPos,this.awaitPos=Ve||this.awaitPos,U.length>1?(I=this.startNodeAt(V,z),I.expressions=U,this.finishNodeAt(I,"SequenceExpression",fi,di)):I=U[0]}else I=this.parseParenExpression();if(this.options.preserveParens){var zt=this.startNodeAt(h,S);return zt.expression=I,this.finishNode(zt,"ParenthesizedExpression")}else return I},re.parseParenItem=function(e){return e},re.parseParenArrowList=function(e,h,S){return this.parseArrowExpression(this.startNodeAt(e,h),S)};var qt=[];re.parseNew=function(){this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword new");var e=this.startNode(),h=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(p.dot)){e.meta=h;var S=this.containsEsc;return e.property=this.parseIdent(!0),(e.property.name!=="target"||S)&&this.raiseRecoverable(e.property.start,"The only valid meta property for new is new.target"),this.inNonArrowFunction()||this.raiseRecoverable(e.start,"new.target can only be used in functions"),this.finishNode(e,"MetaProperty")}var I=this.start,R=this.startLoc,V=this.type===p._import;return e.callee=this.parseSubscripts(this.parseExprAtom(),I,R,!0),V&&e.callee.type==="ImportExpression"&&this.raise(I,"Cannot use new with import()"),this.eat(p.parenL)?e.arguments=this.parseExprList(p.parenR,this.options.ecmaVersion>=8,!1):e.arguments=qt,this.finishNode(e,"NewExpression")},re.parseTemplateElement=function(e){var h=e.isTagged,S=this.startNode();return this.type===p.invalidTemplate?(h||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),S.value={raw:this.value,cooked:null}):S.value={raw:this.input.slice(this.start,this.end).replace(/\\r\\n?/g,`\n`),cooked:this.value},this.next(),S.tail=this.type===p.backQuote,this.finishNode(S,"TemplateElement")},re.parseTemplate=function(e){e===void 0&&(e={});var h=e.isTagged;h===void 0&&(h=!1);var S=this.startNode();this.next(),S.expressions=[];var I=this.parseTemplateElement({isTagged:h});for(S.quasis=[I];!I.tail;)this.type===p.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(p.dollarBraceL),S.expressions.push(this.parseExpression()),this.expect(p.braceR),S.quasis.push(I=this.parseTemplateElement({isTagged:h}));return this.next(),this.finishNode(S,"TemplateLiteral")},re.isAsyncProp=function(e){return!e.computed&&e.key.type==="Identifier"&&e.key.name==="async"&&(this.type===p.name||this.type===p.num||this.type===p.string||this.type===p.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===p.star)&&!C.test(this.input.slice(this.lastTokEnd,this.start))},re.parseObj=function(e,h){var S=this.startNode(),I=!0,R={};for(S.properties=[],this.next();!this.eat(p.braceR);){if(I)I=!1;else if(this.expect(p.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(p.braceR))break;var V=this.parseProperty(e,h);e||this.checkPropClash(V,R,h),S.properties.push(V)}return this.finishNode(S,e?"ObjectPattern":"ObjectExpression")},re.parseProperty=function(e,h){var S=this.startNode(),I,R,V,z;if(this.options.ecmaVersion>=9&&this.eat(p.ellipsis))return e?(S.argument=this.parseIdent(!1),this.type===p.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(S,"RestElement")):(this.type===p.parenL&&h&&(h.parenthesizedAssign<0&&(h.parenthesizedAssign=this.start),h.parenthesizedBind<0&&(h.parenthesizedBind=this.start)),S.argument=this.parseMaybeAssign(!1,h),this.type===p.comma&&h&&h.trailingComma<0&&(h.trailingComma=this.start),this.finishNode(S,"SpreadElement"));this.options.ecmaVersion>=6&&(S.method=!1,S.shorthand=!1,(e||h)&&(V=this.start,z=this.startLoc),e||(I=this.eat(p.star)));var U=this.containsEsc;return this.parsePropertyName(S),!e&&!U&&this.options.ecmaVersion>=8&&!I&&this.isAsyncProp(S)?(R=!0,I=this.options.ecmaVersion>=9&&this.eat(p.star),this.parsePropertyName(S,h)):R=!1,this.parsePropertyValue(S,e,I,R,V,z,h,U),this.finishNode(S,"Property")},re.parsePropertyValue=function(e,h,S,I,R,V,z,U){if((S||I)&&this.type===p.colon&&this.unexpected(),this.eat(p.colon))e.value=h?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,z),e.kind="init";else if(this.options.ecmaVersion>=6&&this.type===p.parenL)h&&this.unexpected(),e.kind="init",e.method=!0,e.value=this.parseMethod(S,I);else if(!h&&!U&&this.options.ecmaVersion>=5&&!e.computed&&e.key.type==="Identifier"&&(e.key.name==="get"||e.key.name==="set")&&this.type!==p.comma&&this.type!==p.braceR){(S||I)&&this.unexpected(),e.kind=e.key.name,this.parsePropertyName(e),e.value=this.parseMethod(!1);var X=e.kind==="get"?0:1;if(e.value.params.length!==X){var le=e.value.start;e.kind==="get"?this.raiseRecoverable(le,"getter should have no params"):this.raiseRecoverable(le,"setter should have exactly one param")}else e.kind==="set"&&e.value.params[0].type==="RestElement"&&this.raiseRecoverable(e.value.params[0].start,"Setter cannot use rest params")}else this.options.ecmaVersion>=6&&!e.computed&&e.key.type==="Identifier"?((S||I)&&this.unexpected(),this.checkUnreserved(e.key),e.key.name==="await"&&!this.awaitIdentPos&&(this.awaitIdentPos=R),e.kind="init",h?e.value=this.parseMaybeDefault(R,V,e.key):this.type===p.eq&&z?(z.shorthandAssign<0&&(z.shorthandAssign=this.start),e.value=this.parseMaybeDefault(R,V,e.key)):e.value=e.key,e.shorthand=!0):this.unexpected()},re.parsePropertyName=function(e){if(this.options.ecmaVersion>=6){if(this.eat(p.bracketL))return e.computed=!0,e.key=this.parseMaybeAssign(),this.expect(p.bracketR),e.key;e.computed=!1}return e.key=this.type===p.num||this.type===p.string?this.parseExprAtom():this.parseIdent(this.options.allowReserved!=="never")},re.initFunction=function(e){e.id=null,this.options.ecmaVersion>=6&&(e.generator=e.expression=!1),this.options.ecmaVersion>=8&&(e.async=!1)},re.parseMethod=function(e,h,S){var I=this.startNode(),R=this.yieldPos,V=this.awaitPos,z=this.awaitIdentPos;return this.initFunction(I),this.options.ecmaVersion>=6&&(I.generator=e),this.options.ecmaVersion>=8&&(I.async=!!h),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(_e(h,I.generator)|ue|(S?xe:0)),this.expect(p.parenL),I.params=this.parseBindingList(p.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(I,!1,!0),this.yieldPos=R,this.awaitPos=V,this.awaitIdentPos=z,this.finishNode(I,"FunctionExpression")},re.parseArrowExpression=function(e,h,S){var I=this.yieldPos,R=this.awaitPos,V=this.awaitIdentPos;return this.enterScope(_e(S,!1)|me),this.initFunction(e),this.options.ecmaVersion>=8&&(e.async=!!S),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,e.params=this.toAssignableList(h,!0),this.parseFunctionBody(e,!0,!1),this.yieldPos=I,this.awaitPos=R,this.awaitIdentPos=V,this.finishNode(e,"ArrowFunctionExpression")},re.parseFunctionBody=function(e,h,S){var I=h&&this.type!==p.braceL,R=this.strict,V=!1;if(I)e.body=this.parseMaybeAssign(),e.expression=!0,this.checkParams(e,!1);else{var z=this.options.ecmaVersion>=7&&!this.isSimpleParamList(e.params);(!R||z)&&(V=this.strictDirective(this.end),V&&z&&this.raiseRecoverable(e.start,"Illegal \'use strict\' directive in function with non-simple parameter list"));var U=this.labels;this.labels=[],V&&(this.strict=!0),this.checkParams(e,!R&&!V&&!h&&!S&&this.isSimpleParamList(e.params)),e.body=this.parseBlock(!1),e.expression=!1,this.adaptDirectivePrologue(e.body.body),this.labels=U}this.exitScope(),this.strict&&e.id&&this.checkLVal(e.id,St),this.strict=R},re.isSimpleParamList=function(e){for(var h=0,S=e;h<S.length;h+=1){var I=S[h];if(I.type!=="Identifier")return!1}return!0},re.checkParams=function(e,h){for(var S={},I=0,R=e.params;I<R.length;I+=1){var V=R[I];this.checkLVal(V,$e,h?null:S)}},re.parseExprList=function(e,h,S,I){for(var R=[],V=!0;!this.eat(e);){if(V)V=!1;else if(this.expect(p.comma),h&&this.afterTrailingComma(e))break;var z=void 0;S&&this.type===p.comma?z=null:this.type===p.ellipsis?(z=this.parseSpread(I),I&&this.type===p.comma&&I.trailingComma<0&&(I.trailingComma=this.start)):z=this.parseMaybeAssign(!1,I),R.push(z)}return R},re.checkUnreserved=function(e){var h=e.start,S=e.end,I=e.name;if(this.inGenerator&&I==="yield"&&this.raiseRecoverable(h,"Cannot use \'yield\' as identifier inside a generator"),this.inAsync&&I==="await"&&this.raiseRecoverable(h,"Cannot use \'await\' as identifier inside an async function"),this.keywords.test(I)&&this.raise(h,"Unexpected keyword \'"+I+"\'"),!(this.options.ecmaVersion<6&&this.input.slice(h,S).indexOf("\\\\")!==-1)){var R=this.strict?this.reservedWordsStrict:this.reservedWords;R.test(I)&&(!this.inAsync&&I==="await"&&this.raiseRecoverable(h,"Cannot use keyword \'await\' outside an async function"),this.raiseRecoverable(h,"The keyword \'"+I+"\' is reserved"))}},re.parseIdent=function(e,h){var S=this.startNode();return this.type===p.name?S.name=this.value:this.type.keyword?(S.name=this.type.keyword,(S.name==="class"||S.name==="function")&&(this.lastTokEnd!==this.lastTokStart+1||this.input.charCodeAt(this.lastTokStart)!==46)&&this.context.pop()):this.unexpected(),this.next(!!e),this.finishNode(S,"Identifier"),e||(this.checkUnreserved(S),S.name==="await"&&!this.awaitIdentPos&&(this.awaitIdentPos=S.start)),S},re.parseYield=function(e){this.yieldPos||(this.yieldPos=this.start);var h=this.startNode();return this.next(),this.type===p.semi||this.canInsertSemicolon()||this.type!==p.star&&!this.type.startsExpr?(h.delegate=!1,h.argument=null):(h.delegate=this.eat(p.star),h.argument=this.parseMaybeAssign(e)),this.finishNode(h,"YieldExpression")},re.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var e=this.startNode();return this.next(),e.argument=this.parseMaybeUnary(null,!1),this.finishNode(e,"AwaitExpression")};var We=pe.prototype;We.raise=function(e,h){var S=H(this.input,e);h+=" ("+S.line+":"+S.column+")";var I=new SyntaxError(h);throw I.pos=e,I.loc=S,I.raisedAt=this.pos,I},We.raiseRecoverable=We.raise,We.curPosition=function(){if(this.options.locations)return new Q(this.curLine,this.pos-this.lineStart)};var Re=pe.prototype,ei=function(h){this.flags=h,this.var=[],this.lexical=[],this.functions=[]};Re.enterScope=function(e){this.scopeStack.push(new ei(e))},Re.exitScope=function(){this.scopeStack.pop()},Re.treatFunctionsAsVarInScope=function(e){return e.flags&Se||!this.inModule&&e.flags&ie},Re.declareName=function(e,h,S){var I=!1;if(h===Ie){var R=this.currentScope();I=R.lexical.indexOf(e)>-1||R.functions.indexOf(e)>-1||R.var.indexOf(e)>-1,R.lexical.push(e),this.inModule&&R.flags&ie&&delete this.undefinedExports[e]}else if(h===vt){var V=this.currentScope();V.lexical.push(e)}else if(h===Tt){var z=this.currentScope();this.treatFunctionsAsVar?I=z.lexical.indexOf(e)>-1:I=z.lexical.indexOf(e)>-1||z.var.indexOf(e)>-1,z.functions.push(e)}else for(var U=this.scopeStack.length-1;U>=0;--U){var X=this.scopeStack[U];if(X.lexical.indexOf(e)>-1&&!(X.flags&ne&&X.lexical[0]===e)||!this.treatFunctionsAsVarInScope(X)&&X.functions.indexOf(e)>-1){I=!0;break}if(X.var.push(e),this.inModule&&X.flags&ie&&delete this.undefinedExports[e],X.flags&ee)break}I&&this.raiseRecoverable(S,"Identifier \'"+e+"\' has already been declared")},Re.checkLocalExport=function(e){this.scopeStack[0].lexical.indexOf(e.name)===-1&&this.scopeStack[0].var.indexOf(e.name)===-1&&(this.undefinedExports[e.name]=e)},Re.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},Re.currentVarScope=function(){for(var e=this.scopeStack.length-1;;e--){var h=this.scopeStack[e];if(h.flags&ee)return h}},Re.currentThisScope=function(){for(var e=this.scopeStack.length-1;;e--){var h=this.scopeStack[e];if(h.flags&ee&&!(h.flags&me))return h}};var je=function(h,S,I){this.type="",this.start=S,this.end=0,h.options.locations&&(this.loc=new te(h,I)),h.options.directSourceFile&&(this.sourceFile=h.options.directSourceFile),h.options.ranges&&(this.range=[S,0])},He=pe.prototype;He.startNode=function(){return new je(this,this.start,this.startLoc)},He.startNodeAt=function(e,h){return new je(this,e,h)};function wt(e,h,S,I){return e.type=h,e.end=S,this.options.locations&&(e.loc.end=I),this.options.ranges&&(e.range[1]=S),e}He.finishNode=function(e,h){return wt.call(this,e,h,this.lastTokEnd,this.lastTokEndLoc)},He.finishNodeAt=function(e,h,S,I){return wt.call(this,e,h,S,I)};var we=function(h,S,I,R,V){this.token=h,this.isExpr=!!S,this.preserveSpace=!!I,this.override=R,this.generator=!!V},de={b_stat:new we("{",!1),b_expr:new we("{",!0),b_tmpl:new we("${",!1),p_stat:new we("(",!1),p_expr:new we("(",!0),q_tmpl:new we("`",!0,!0,function(e){return e.tryReadTemplateToken()}),f_stat:new we("function",!1),f_expr:new we("function",!0),f_expr_gen:new we("function",!0,!1,null,!0),f_gen:new we("function",!1,!1,null,!0)},Xe=pe.prototype;Xe.initialContext=function(){return[de.b_stat]},Xe.braceIsBlock=function(e){var h=this.curContext();return h===de.f_expr||h===de.f_stat?!0:e===p.colon&&(h===de.b_stat||h===de.b_expr)?!h.isExpr:e===p._return||e===p.name&&this.exprAllowed?C.test(this.input.slice(this.lastTokEnd,this.start)):e===p._else||e===p.semi||e===p.eof||e===p.parenR||e===p.arrow?!0:e===p.braceL?h===de.b_stat:e===p._var||e===p._const||e===p.name?!1:!this.exprAllowed},Xe.inGeneratorContext=function(){for(var e=this.context.length-1;e>=1;e--){var h=this.context[e];if(h.token==="function")return h.generator}return!1},Xe.updateContext=function(e){var h,S=this.type;S.keyword&&e===p.dot?this.exprAllowed=!1:(h=S.updateContext)?h.call(this,e):this.exprAllowed=S.beforeExpr},p.parenR.updateContext=p.braceR.updateContext=function(){if(this.context.length===1){this.exprAllowed=!0;return}var e=this.context.pop();e===de.b_stat&&this.curContext().token==="function"&&(e=this.context.pop()),this.exprAllowed=!e.isExpr},p.braceL.updateContext=function(e){this.context.push(this.braceIsBlock(e)?de.b_stat:de.b_expr),this.exprAllowed=!0},p.dollarBraceL.updateContext=function(){this.context.push(de.b_tmpl),this.exprAllowed=!0},p.parenL.updateContext=function(e){var h=e===p._if||e===p._for||e===p._with||e===p._while;this.context.push(h?de.p_stat:de.p_expr),this.exprAllowed=!0},p.incDec.updateContext=function(){},p._function.updateContext=p._class.updateContext=function(e){e.beforeExpr&&e!==p.semi&&e!==p._else&&!(e===p._return&&C.test(this.input.slice(this.lastTokEnd,this.start)))&&!((e===p.colon||e===p.braceL)&&this.curContext()===de.b_stat)?this.context.push(de.f_expr):this.context.push(de.f_stat),this.exprAllowed=!1},p.backQuote.updateContext=function(){this.curContext()===de.q_tmpl?this.context.pop():this.context.push(de.q_tmpl),this.exprAllowed=!1},p.star.updateContext=function(e){if(e===p._function){var h=this.context.length-1;this.context[h]===de.f_expr?this.context[h]=de.f_expr_gen:this.context[h]=de.f_gen}this.exprAllowed=!0},p.name.updateContext=function(e){var h=!1;this.options.ecmaVersion>=6&&e!==p.dot&&(this.value==="of"&&!this.exprAllowed||this.value==="yield"&&this.inGeneratorContext())&&(h=!0),this.exprAllowed=h};var Et="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",At=Et+" Extended_Pictographic",ti=At,ii={9:Et,10:At,11:ti},kt="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",It="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",Dt=It+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",ni=Dt+" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho",si={9:It,10:Dt,11:ni},Ct={};function ut(e){var h=Ct[e]={binary:J(ii[e]+" "+kt),nonBinary:{General_Category:J(kt),Script:J(si[e])}};h.nonBinary.Script_Extensions=h.nonBinary.Script,h.nonBinary.gc=h.nonBinary.General_Category,h.nonBinary.sc=h.nonBinary.Script,h.nonBinary.scx=h.nonBinary.Script_Extensions}ut(9),ut(10),ut(11);var j=pe.prototype,Ce=function(h){this.parser=h,this.validFlags="gim"+(h.options.ecmaVersion>=6?"uy":"")+(h.options.ecmaVersion>=9?"s":""),this.unicodeProperties=Ct[h.options.ecmaVersion>=11?11:h.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};Ce.prototype.reset=function(h,S,I){var R=I.indexOf("u")!==-1;this.start=h|0,this.source=S+"",this.flags=I,this.switchU=R&&this.parser.options.ecmaVersion>=6,this.switchN=R&&this.parser.options.ecmaVersion>=9},Ce.prototype.raise=function(h){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+h)},Ce.prototype.at=function(h){var S=this.source,I=S.length;if(h>=I)return-1;var R=S.charCodeAt(h);if(!this.switchU||R<=55295||R>=57344||h+1>=I)return R;var V=S.charCodeAt(h+1);return V>=56320&&V<=57343?(R<<10)+V-56613888:R},Ce.prototype.nextIndex=function(h){var S=this.source,I=S.length;if(h>=I)return I;var R=S.charCodeAt(h),V;return!this.switchU||R<=55295||R>=57344||h+1>=I||(V=S.charCodeAt(h+1))<56320||V>57343?h+1:h+2},Ce.prototype.current=function(){return this.at(this.pos)},Ce.prototype.lookahead=function(){return this.at(this.nextIndex(this.pos))},Ce.prototype.advance=function(){this.pos=this.nextIndex(this.pos)},Ce.prototype.eat=function(h){return this.current()===h?(this.advance(),!0):!1};function Ye(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode((e>>10)+55296,(e&1023)+56320))}j.validateRegExpFlags=function(e){for(var h=e.validFlags,S=e.flags,I=0;I<S.length;I++){var R=S.charAt(I);h.indexOf(R)===-1&&this.raise(e.start,"Invalid regular expression flag"),S.indexOf(R,I+1)>-1&&this.raise(e.start,"Duplicate regular expression flag")}},j.validateRegExpPattern=function(e){this.regexp_pattern(e),!e.switchN&&this.options.ecmaVersion>=9&&e.groupNames.length>0&&(e.switchN=!0,this.regexp_pattern(e))},j.regexp_pattern=function(e){e.pos=0,e.lastIntValue=0,e.lastStringValue="",e.lastAssertionIsQuantifiable=!1,e.numCapturingParens=0,e.maxBackReference=0,e.groupNames.length=0,e.backReferenceNames.length=0,this.regexp_disjunction(e),e.pos!==e.source.length&&(e.eat(41)&&e.raise("Unmatched \')\'"),(e.eat(93)||e.eat(125))&&e.raise("Lone quantifier brackets")),e.maxBackReference>e.numCapturingParens&&e.raise("Invalid escape");for(var h=0,S=e.backReferenceNames;h<S.length;h+=1){var I=S[h];e.groupNames.indexOf(I)===-1&&e.raise("Invalid named capture referenced")}},j.regexp_disjunction=function(e){for(this.regexp_alternative(e);e.eat(124);)this.regexp_alternative(e);this.regexp_eatQuantifier(e,!0)&&e.raise("Nothing to repeat"),e.eat(123)&&e.raise("Lone quantifier brackets")},j.regexp_alternative=function(e){for(;e.pos<e.source.length&&this.regexp_eatTerm(e););},j.regexp_eatTerm=function(e){return this.regexp_eatAssertion(e)?(e.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(e)&&e.switchU&&e.raise("Invalid quantifier"),!0):(e.switchU?this.regexp_eatAtom(e):this.regexp_eatExtendedAtom(e))?(this.regexp_eatQuantifier(e),!0):!1},j.regexp_eatAssertion=function(e){var h=e.pos;if(e.lastAssertionIsQuantifiable=!1,e.eat(94)||e.eat(36))return!0;if(e.eat(92)){if(e.eat(66)||e.eat(98))return!0;e.pos=h}if(e.eat(40)&&e.eat(63)){var S=!1;if(this.options.ecmaVersion>=9&&(S=e.eat(60)),e.eat(61)||e.eat(33))return this.regexp_disjunction(e),e.eat(41)||e.raise("Unterminated group"),e.lastAssertionIsQuantifiable=!S,!0}return e.pos=h,!1},j.regexp_eatQuantifier=function(e,h){return h===void 0&&(h=!1),this.regexp_eatQuantifierPrefix(e,h)?(e.eat(63),!0):!1},j.regexp_eatQuantifierPrefix=function(e,h){return e.eat(42)||e.eat(43)||e.eat(63)||this.regexp_eatBracedQuantifier(e,h)},j.regexp_eatBracedQuantifier=function(e,h){var S=e.pos;if(e.eat(123)){var I=0,R=-1;if(this.regexp_eatDecimalDigits(e)&&(I=e.lastIntValue,e.eat(44)&&this.regexp_eatDecimalDigits(e)&&(R=e.lastIntValue),e.eat(125)))return R!==-1&&R<I&&!h&&e.raise("numbers out of order in {} quantifier"),!0;e.switchU&&!h&&e.raise("Incomplete quantifier"),e.pos=S}return!1},j.regexp_eatAtom=function(e){return this.regexp_eatPatternCharacters(e)||e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)},j.regexp_eatReverseSolidusAtomEscape=function(e){var h=e.pos;if(e.eat(92)){if(this.regexp_eatAtomEscape(e))return!0;e.pos=h}return!1},j.regexp_eatUncapturingGroup=function(e){var h=e.pos;if(e.eat(40)){if(e.eat(63)&&e.eat(58)){if(this.regexp_disjunction(e),e.eat(41))return!0;e.raise("Unterminated group")}e.pos=h}return!1},j.regexp_eatCapturingGroup=function(e){if(e.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(e):e.current()===63&&e.raise("Invalid group"),this.regexp_disjunction(e),e.eat(41))return e.numCapturingParens+=1,!0;e.raise("Unterminated group")}return!1},j.regexp_eatExtendedAtom=function(e){return e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)||this.regexp_eatInvalidBracedQuantifier(e)||this.regexp_eatExtendedPatternCharacter(e)},j.regexp_eatInvalidBracedQuantifier=function(e){return this.regexp_eatBracedQuantifier(e,!0)&&e.raise("Nothing to repeat"),!1},j.regexp_eatSyntaxCharacter=function(e){var h=e.current();return Ft(h)?(e.lastIntValue=h,e.advance(),!0):!1};function Ft(e){return e===36||e>=40&&e<=43||e===46||e===63||e>=91&&e<=94||e>=123&&e<=125}j.regexp_eatPatternCharacters=function(e){for(var h=e.pos,S=0;(S=e.current())!==-1&&!Ft(S);)e.advance();return e.pos!==h},j.regexp_eatExtendedPatternCharacter=function(e){var h=e.current();return h!==-1&&h!==36&&!(h>=40&&h<=43)&&h!==46&&h!==63&&h!==91&&h!==94&&h!==124?(e.advance(),!0):!1},j.regexp_groupSpecifier=function(e){if(e.eat(63)){if(this.regexp_eatGroupName(e)){e.groupNames.indexOf(e.lastStringValue)!==-1&&e.raise("Duplicate capture group name"),e.groupNames.push(e.lastStringValue);return}e.raise("Invalid group")}},j.regexp_eatGroupName=function(e){if(e.lastStringValue="",e.eat(60)){if(this.regexp_eatRegExpIdentifierName(e)&&e.eat(62))return!0;e.raise("Invalid capture group name")}return!1},j.regexp_eatRegExpIdentifierName=function(e){if(e.lastStringValue="",this.regexp_eatRegExpIdentifierStart(e)){for(e.lastStringValue+=Ye(e.lastIntValue);this.regexp_eatRegExpIdentifierPart(e);)e.lastStringValue+=Ye(e.lastIntValue);return!0}return!1},j.regexp_eatRegExpIdentifierStart=function(e){var h=e.pos,S=e.current();return e.advance(),S===92&&this.regexp_eatRegExpUnicodeEscapeSequence(e)&&(S=e.lastIntValue),ri(S)?(e.lastIntValue=S,!0):(e.pos=h,!1)};function ri(e){return A(e,!0)||e===36||e===95}j.regexp_eatRegExpIdentifierPart=function(e){var h=e.pos,S=e.current();return e.advance(),S===92&&this.regexp_eatRegExpUnicodeEscapeSequence(e)&&(S=e.lastIntValue),ai(S)?(e.lastIntValue=S,!0):(e.pos=h,!1)};function ai(e){return E(e,!0)||e===36||e===95||e===8204||e===8205}j.regexp_eatAtomEscape=function(e){return this.regexp_eatBackReference(e)||this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)||e.switchN&&this.regexp_eatKGroupName(e)?!0:(e.switchU&&(e.current()===99&&e.raise("Invalid unicode escape"),e.raise("Invalid escape")),!1)},j.regexp_eatBackReference=function(e){var h=e.pos;if(this.regexp_eatDecimalEscape(e)){var S=e.lastIntValue;if(e.switchU)return S>e.maxBackReference&&(e.maxBackReference=S),!0;if(S<=e.numCapturingParens)return!0;e.pos=h}return!1},j.regexp_eatKGroupName=function(e){if(e.eat(107)){if(this.regexp_eatGroupName(e))return e.backReferenceNames.push(e.lastStringValue),!0;e.raise("Invalid named reference")}return!1},j.regexp_eatCharacterEscape=function(e){return this.regexp_eatControlEscape(e)||this.regexp_eatCControlLetter(e)||this.regexp_eatZero(e)||this.regexp_eatHexEscapeSequence(e)||this.regexp_eatRegExpUnicodeEscapeSequence(e)||!e.switchU&&this.regexp_eatLegacyOctalEscapeSequence(e)||this.regexp_eatIdentityEscape(e)},j.regexp_eatCControlLetter=function(e){var h=e.pos;if(e.eat(99)){if(this.regexp_eatControlLetter(e))return!0;e.pos=h}return!1},j.regexp_eatZero=function(e){return e.current()===48&&!Je(e.lookahead())?(e.lastIntValue=0,e.advance(),!0):!1},j.regexp_eatControlEscape=function(e){var h=e.current();return h===116?(e.lastIntValue=9,e.advance(),!0):h===110?(e.lastIntValue=10,e.advance(),!0):h===118?(e.lastIntValue=11,e.advance(),!0):h===102?(e.lastIntValue=12,e.advance(),!0):h===114?(e.lastIntValue=13,e.advance(),!0):!1},j.regexp_eatControlLetter=function(e){var h=e.current();return Rt(h)?(e.lastIntValue=h%32,e.advance(),!0):!1};function Rt(e){return e>=65&&e<=90||e>=97&&e<=122}j.regexp_eatRegExpUnicodeEscapeSequence=function(e){var h=e.pos;if(e.eat(117)){if(this.regexp_eatFixedHexDigits(e,4)){var S=e.lastIntValue;if(e.switchU&&S>=55296&&S<=56319){var I=e.pos;if(e.eat(92)&&e.eat(117)&&this.regexp_eatFixedHexDigits(e,4)){var R=e.lastIntValue;if(R>=56320&&R<=57343)return e.lastIntValue=(S-55296)*1024+(R-56320)+65536,!0}e.pos=I,e.lastIntValue=S}return!0}if(e.switchU&&e.eat(123)&&this.regexp_eatHexDigits(e)&&e.eat(125)&&oi(e.lastIntValue))return!0;e.switchU&&e.raise("Invalid unicode escape"),e.pos=h}return!1};function oi(e){return e>=0&&e<=1114111}j.regexp_eatIdentityEscape=function(e){if(e.switchU)return this.regexp_eatSyntaxCharacter(e)?!0:e.eat(47)?(e.lastIntValue=47,!0):!1;var h=e.current();return h!==99&&(!e.switchN||h!==107)?(e.lastIntValue=h,e.advance(),!0):!1},j.regexp_eatDecimalEscape=function(e){e.lastIntValue=0;var h=e.current();if(h>=49&&h<=57){do e.lastIntValue=10*e.lastIntValue+(h-48),e.advance();while((h=e.current())>=48&&h<=57);return!0}return!1},j.regexp_eatCharacterClassEscape=function(e){var h=e.current();if(ui(h))return e.lastIntValue=-1,e.advance(),!0;if(e.switchU&&this.options.ecmaVersion>=9&&(h===80||h===112)){if(e.lastIntValue=-1,e.advance(),e.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(e)&&e.eat(125))return!0;e.raise("Invalid property name")}return!1};function ui(e){return e===100||e===68||e===115||e===83||e===119||e===87}j.regexp_eatUnicodePropertyValueExpression=function(e){var h=e.pos;if(this.regexp_eatUnicodePropertyName(e)&&e.eat(61)){var S=e.lastStringValue;if(this.regexp_eatUnicodePropertyValue(e)){var I=e.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(e,S,I),!0}}if(e.pos=h,this.regexp_eatLoneUnicodePropertyNameOrValue(e)){var R=e.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(e,R),!0}return!1},j.regexp_validateUnicodePropertyNameAndValue=function(e,h,S){W(e.unicodeProperties.nonBinary,h)||e.raise("Invalid property name"),e.unicodeProperties.nonBinary[h].test(S)||e.raise("Invalid property value")},j.regexp_validateUnicodePropertyNameOrValue=function(e,h){e.unicodeProperties.binary.test(h)||e.raise("Invalid property name")},j.regexp_eatUnicodePropertyName=function(e){var h=0;for(e.lastStringValue="";Mt(h=e.current());)e.lastStringValue+=Ye(h),e.advance();return e.lastStringValue!==""};function Mt(e){return Rt(e)||e===95}j.regexp_eatUnicodePropertyValue=function(e){var h=0;for(e.lastStringValue="";li(h=e.current());)e.lastStringValue+=Ye(h),e.advance();return e.lastStringValue!==""};function li(e){return Mt(e)||Je(e)}j.regexp_eatLoneUnicodePropertyNameOrValue=function(e){return this.regexp_eatUnicodePropertyValue(e)},j.regexp_eatCharacterClass=function(e){if(e.eat(91)){if(e.eat(94),this.regexp_classRanges(e),e.eat(93))return!0;e.raise("Unterminated character class")}return!1},j.regexp_classRanges=function(e){for(;this.regexp_eatClassAtom(e);){var h=e.lastIntValue;if(e.eat(45)&&this.regexp_eatClassAtom(e)){var S=e.lastIntValue;e.switchU&&(h===-1||S===-1)&&e.raise("Invalid character class"),h!==-1&&S!==-1&&h>S&&e.raise("Range out of order in character class")}}},j.regexp_eatClassAtom=function(e){var h=e.pos;if(e.eat(92)){if(this.regexp_eatClassEscape(e))return!0;if(e.switchU){var S=e.current();(S===99||Vt(S))&&e.raise("Invalid class escape"),e.raise("Invalid escape")}e.pos=h}var I=e.current();return I!==93?(e.lastIntValue=I,e.advance(),!0):!1},j.regexp_eatClassEscape=function(e){var h=e.pos;if(e.eat(98))return e.lastIntValue=8,!0;if(e.switchU&&e.eat(45))return e.lastIntValue=45,!0;if(!e.switchU&&e.eat(99)){if(this.regexp_eatClassControlLetter(e))return!0;e.pos=h}return this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)},j.regexp_eatClassControlLetter=function(e){var h=e.current();return Je(h)||h===95?(e.lastIntValue=h%32,e.advance(),!0):!1},j.regexp_eatHexEscapeSequence=function(e){var h=e.pos;if(e.eat(120)){if(this.regexp_eatFixedHexDigits(e,2))return!0;e.switchU&&e.raise("Invalid escape"),e.pos=h}return!1},j.regexp_eatDecimalDigits=function(e){var h=e.pos,S=0;for(e.lastIntValue=0;Je(S=e.current());)e.lastIntValue=10*e.lastIntValue+(S-48),e.advance();return e.pos!==h};function Je(e){return e>=48&&e<=57}j.regexp_eatHexDigits=function(e){var h=e.pos,S=0;for(e.lastIntValue=0;Lt(S=e.current());)e.lastIntValue=16*e.lastIntValue+$t(S),e.advance();return e.pos!==h};function Lt(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102}function $t(e){return e>=65&&e<=70?10+(e-65):e>=97&&e<=102?10+(e-97):e-48}j.regexp_eatLegacyOctalEscapeSequence=function(e){if(this.regexp_eatOctalDigit(e)){var h=e.lastIntValue;if(this.regexp_eatOctalDigit(e)){var S=e.lastIntValue;h<=3&&this.regexp_eatOctalDigit(e)?e.lastIntValue=h*64+S*8+e.lastIntValue:e.lastIntValue=h*8+S}else e.lastIntValue=h;return!0}return!1},j.regexp_eatOctalDigit=function(e){var h=e.current();return Vt(h)?(e.lastIntValue=h-48,e.advance(),!0):(e.lastIntValue=0,!1)};function Vt(e){return e>=48&&e<=55}j.regexp_eatFixedHexDigits=function(e,h){var S=e.pos;e.lastIntValue=0;for(var I=0;I<h;++I){var R=e.current();if(!Lt(R))return e.pos=S,!1;e.lastIntValue=16*e.lastIntValue+$t(R),e.advance()}return!0};var Ze=function(h){this.type=h.type,this.value=h.value,this.start=h.start,this.end=h.end,h.options.locations&&(this.loc=new te(h,h.startLoc,h.endLoc)),h.options.ranges&&(this.range=[h.start,h.end])},ae=pe.prototype;ae.next=function(e){!e&&this.type.keyword&&this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+this.type.keyword),this.options.onToken&&this.options.onToken(new Ze(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},ae.getToken=function(){return this.next(),new Ze(this)},typeof Symbol<"u"&&(ae[Symbol.iterator]=function(){var e=this;return{next:function(){var h=e.getToken();return{done:h.type===p.eof,value:h}}}}),ae.curContext=function(){return this.context[this.context.length-1]},ae.nextToken=function(){var e=this.curContext();if((!e||!e.preserveSpace)&&this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length)return this.finishToken(p.eof);if(e.override)return e.override(this);this.readToken(this.fullCharCodeAtPos())},ae.readToken=function(e){return A(e,this.options.ecmaVersion>=6)||e===92?this.readWord():this.getTokenFromCode(e)},ae.fullCharCodeAtPos=function(){var e=this.input.charCodeAt(this.pos);if(e<=55295||e>=57344)return e;var h=this.input.charCodeAt(this.pos+1);return(e<<10)+h-56613888},ae.skipBlockComment=function(){var e=this.options.onComment&&this.curPosition(),h=this.pos,S=this.input.indexOf("*/",this.pos+=2);if(S===-1&&this.raise(this.pos-2,"Unterminated comment"),this.pos=S+2,this.options.locations){F.lastIndex=h;for(var I;(I=F.exec(this.input))&&I.index<this.pos;)++this.curLine,this.lineStart=I.index+I[0].length}this.options.onComment&&this.options.onComment(!0,this.input.slice(h+2,S),h,this.pos,e,this.curPosition())},ae.skipLineComment=function(e){for(var h=this.pos,S=this.options.onComment&&this.curPosition(),I=this.input.charCodeAt(this.pos+=e);this.pos<this.input.length&&!P(I);)I=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(h+e,this.pos),h,this.pos,S,this.curPosition())},ae.skipSpace=function(){e:for(;this.pos<this.input.length;){var e=this.input.charCodeAt(this.pos);switch(e){case 32:case 160:++this.pos;break;case 13:this.input.charCodeAt(this.pos+1)===10&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break e}break;default:if(e>8&&e<14||e>=5760&&L.test(String.fromCharCode(e)))++this.pos;else break e}}},ae.finishToken=function(e,h){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var S=this.type;this.type=e,this.value=h,this.updateContext(S)},ae.readToken_dot=function(){var e=this.input.charCodeAt(this.pos+1);if(e>=48&&e<=57)return this.readNumber(!0);var h=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&e===46&&h===46?(this.pos+=3,this.finishToken(p.ellipsis)):(++this.pos,this.finishToken(p.dot))},ae.readToken_slash=function(){var e=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):e===61?this.finishOp(p.assign,2):this.finishOp(p.slash,1)},ae.readToken_mult_modulo_exp=function(e){var h=this.input.charCodeAt(this.pos+1),S=1,I=e===42?p.star:p.modulo;return this.options.ecmaVersion>=7&&e===42&&h===42&&(++S,I=p.starstar,h=this.input.charCodeAt(this.pos+2)),h===61?this.finishOp(p.assign,S+1):this.finishOp(I,S)},ae.readToken_pipe_amp=function(e){var h=this.input.charCodeAt(this.pos+1);return h===e?this.finishOp(e===124?p.logicalOR:p.logicalAND,2):h===61?this.finishOp(p.assign,2):this.finishOp(e===124?p.bitwiseOR:p.bitwiseAND,1)},ae.readToken_caret=function(){var e=this.input.charCodeAt(this.pos+1);return e===61?this.finishOp(p.assign,2):this.finishOp(p.bitwiseXOR,1)},ae.readToken_plus_min=function(e){var h=this.input.charCodeAt(this.pos+1);return h===e?h===45&&!this.inModule&&this.input.charCodeAt(this.pos+2)===62&&(this.lastTokEnd===0||C.test(this.input.slice(this.lastTokEnd,this.pos)))?(this.skipLineComment(3),this.skipSpace(),this.nextToken()):this.finishOp(p.incDec,2):h===61?this.finishOp(p.assign,2):this.finishOp(p.plusMin,1)},ae.readToken_lt_gt=function(e){var h=this.input.charCodeAt(this.pos+1),S=1;return h===e?(S=e===62&&this.input.charCodeAt(this.pos+2)===62?3:2,this.input.charCodeAt(this.pos+S)===61?this.finishOp(p.assign,S+1):this.finishOp(p.bitShift,S)):h===33&&e===60&&!this.inModule&&this.input.charCodeAt(this.pos+2)===45&&this.input.charCodeAt(this.pos+3)===45?(this.skipLineComment(4),this.skipSpace(),this.nextToken()):(h===61&&(S=2),this.finishOp(p.relational,S))},ae.readToken_eq_excl=function(e){var h=this.input.charCodeAt(this.pos+1);return h===61?this.finishOp(p.equality,this.input.charCodeAt(this.pos+2)===61?3:2):e===61&&h===62&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(p.arrow)):this.finishOp(e===61?p.eq:p.prefix,1)},ae.getTokenFromCode=function(e){switch(e){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(p.parenL);case 41:return++this.pos,this.finishToken(p.parenR);case 59:return++this.pos,this.finishToken(p.semi);case 44:return++this.pos,this.finishToken(p.comma);case 91:return++this.pos,this.finishToken(p.bracketL);case 93:return++this.pos,this.finishToken(p.bracketR);case 123:return++this.pos,this.finishToken(p.braceL);case 125:return++this.pos,this.finishToken(p.braceR);case 58:return++this.pos,this.finishToken(p.colon);case 63:return++this.pos,this.finishToken(p.question);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(p.backQuote);case 48:var h=this.input.charCodeAt(this.pos+1);if(h===120||h===88)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(h===111||h===79)return this.readRadixNumber(8);if(h===98||h===66)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(e);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(e);case 124:case 38:return this.readToken_pipe_amp(e);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(e);case 60:case 62:return this.readToken_lt_gt(e);case 61:case 33:return this.readToken_eq_excl(e);case 126:return this.finishOp(p.prefix,1)}this.raise(this.pos,"Unexpected character \'"+lt(e)+"\'")},ae.finishOp=function(e,h){var S=this.input.slice(this.pos,this.pos+h);return this.pos+=h,this.finishToken(e,S)},ae.readRegexp=function(){for(var e,h,S=this.pos;;){this.pos>=this.input.length&&this.raise(S,"Unterminated regular expression");var I=this.input.charAt(this.pos);if(C.test(I)&&this.raise(S,"Unterminated regular expression"),e)e=!1;else{if(I==="[")h=!0;else if(I==="]"&&h)h=!1;else if(I==="/"&&!h)break;e=I==="\\\\"}++this.pos}var R=this.input.slice(S,this.pos);++this.pos;var V=this.pos,z=this.readWord1();this.containsEsc&&this.unexpected(V);var U=this.regexpState||(this.regexpState=new Ce(this));U.reset(S,R,z),this.validateRegExpFlags(U),this.validateRegExpPattern(U);var X=null;try{X=new RegExp(R,z)}catch{}return this.finishToken(p.regexp,{pattern:R,flags:z,value:X})},ae.readInt=function(e,h){for(var S=this.pos,I=0,R=0,V=h??1/0;R<V;++R){var z=this.input.charCodeAt(this.pos),U=void 0;if(z>=97?U=z-97+10:z>=65?U=z-65+10:z>=48&&z<=57?U=z-48:U=1/0,U>=e)break;++this.pos,I=I*e+U}return this.pos===S||h!=null&&this.pos-S!==h?null:I},ae.readRadixNumber=function(e){var h=this.pos;this.pos+=2;var S=this.readInt(e);return S==null&&this.raise(this.start+2,"Expected number in radix "+e),this.options.ecmaVersion>=11&&this.input.charCodeAt(this.pos)===110?(S=typeof BigInt<"u"?BigInt(this.input.slice(h,this.pos)):null,++this.pos):A(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(p.num,S)},ae.readNumber=function(e){var h=this.pos;!e&&this.readInt(10)===null&&this.raise(h,"Invalid number");var S=this.pos-h>=2&&this.input.charCodeAt(h)===48;S&&this.strict&&this.raise(h,"Invalid number");var I=this.input.charCodeAt(this.pos);if(!S&&!e&&this.options.ecmaVersion>=11&&I===110){var R=this.input.slice(h,this.pos),V=typeof BigInt<"u"?BigInt(R):null;return++this.pos,A(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(p.num,V)}S&&/[89]/.test(this.input.slice(h,this.pos))&&(S=!1),I===46&&!S&&(++this.pos,this.readInt(10),I=this.input.charCodeAt(this.pos)),(I===69||I===101)&&!S&&(I=this.input.charCodeAt(++this.pos),(I===43||I===45)&&++this.pos,this.readInt(10)===null&&this.raise(h,"Invalid number")),A(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var z=this.input.slice(h,this.pos),U=S?parseInt(z,8):parseFloat(z);return this.finishToken(p.num,U)},ae.readCodePoint=function(){var e=this.input.charCodeAt(this.pos),h;if(e===123){this.options.ecmaVersion<6&&this.unexpected();var S=++this.pos;h=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,h>1114111&&this.invalidStringToken(S,"Code point out of bounds")}else h=this.readHexChar(4);return h};function lt(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode((e>>10)+55296,(e&1023)+56320))}ae.readString=function(e){for(var h="",S=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var I=this.input.charCodeAt(this.pos);if(I===e)break;I===92?(h+=this.input.slice(S,this.pos),h+=this.readEscapedChar(!1),S=this.pos):(P(I,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return h+=this.input.slice(S,this.pos++),this.finishToken(p.string,h)};var Nt={};ae.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(e){if(e===Nt)this.readInvalidTemplateToken();else throw e}this.inTemplateElement=!1},ae.invalidStringToken=function(e,h){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Nt;this.raise(e,h)},ae.readTmplToken=function(){for(var e="",h=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var S=this.input.charCodeAt(this.pos);if(S===96||S===36&&this.input.charCodeAt(this.pos+1)===123)return this.pos===this.start&&(this.type===p.template||this.type===p.invalidTemplate)?S===36?(this.pos+=2,this.finishToken(p.dollarBraceL)):(++this.pos,this.finishToken(p.backQuote)):(e+=this.input.slice(h,this.pos),this.finishToken(p.template,e));if(S===92)e+=this.input.slice(h,this.pos),e+=this.readEscapedChar(!0),h=this.pos;else if(P(S)){switch(e+=this.input.slice(h,this.pos),++this.pos,S){case 13:this.input.charCodeAt(this.pos)===10&&++this.pos;case 10:e+=`\n`;break;default:e+=String.fromCharCode(S);break}this.options.locations&&(++this.curLine,this.lineStart=this.pos),h=this.pos}else++this.pos}},ae.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\\\":++this.pos;break;case"$":if(this.input[this.pos+1]!=="{")break;case"`":return this.finishToken(p.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},ae.readEscapedChar=function(e){var h=this.input.charCodeAt(++this.pos);switch(++this.pos,h){case 110:return`\n`;case 114:return"\\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return lt(this.readCodePoint());case 116:return"	";case 98:return"\\b";case 118:return"\\v";case 102:return"\\f";case 13:this.input.charCodeAt(this.pos)===10&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";case 56:case 57:if(e){var S=this.pos-1;return this.invalidStringToken(S,"Invalid escape sequence in template string"),null}default:if(h>=48&&h<=55){var I=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],R=parseInt(I,8);return R>255&&(I=I.slice(0,-1),R=parseInt(I,8)),this.pos+=I.length-1,h=this.input.charCodeAt(this.pos),(I!=="0"||h===56||h===57)&&(this.strict||e)&&this.invalidStringToken(this.pos-1-I.length,e?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(R)}return P(h)?"":String.fromCharCode(h)}},ae.readHexChar=function(e){var h=this.pos,S=this.readInt(16,e);return S===null&&this.invalidStringToken(h,"Bad character escape sequence"),S},ae.readWord1=function(){this.containsEsc=!1;for(var e="",h=!0,S=this.pos,I=this.options.ecmaVersion>=6;this.pos<this.input.length;){var R=this.fullCharCodeAtPos();if(E(R,I))this.pos+=R<=65535?1:2;else if(R===92){this.containsEsc=!0,e+=this.input.slice(S,this.pos);var V=this.pos;this.input.charCodeAt(++this.pos)!==117&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\\\uXXXX"),++this.pos;var z=this.readCodePoint();(h?A:E)(z,I)||this.invalidStringToken(V,"Invalid Unicode escape"),e+=lt(z),S=this.pos}else break;h=!1}return e+this.input.slice(S,this.pos)},ae.readWord=function(){var e=this.readWord1(),h=p.name;return this.keywords.test(e)&&(h=N[e]),this.finishToken(h,e)};var Ot="7.1.0";pe.acorn={Parser:pe,version:Ot,defaultOptions:B,Position:Q,SourceLocation:te,getLineInfo:H,Node:je,TokenType:y,tokTypes:p,keywordTypes:N,TokContext:we,tokContexts:de,isIdentifierChar:E,isIdentifierStart:A,Token:Ze,isNewLine:P,lineBreak:C,lineBreakG:F,nonASCIIwhitespace:L};function hi(e,h){return pe.parse(e,h)}function ci(e,h,S){return pe.parseExpressionAt(e,h,S)}function pi(e,h){return pe.tokenizer(e,h)}u.Node=je,u.Parser=pe,u.Position=Q,u.SourceLocation=te,u.TokContext=we,u.Token=Ze,u.TokenType=y,u.defaultOptions=B,u.getLineInfo=H,u.isIdentifierChar=E,u.isIdentifierStart=A,u.isNewLine=P,u.keywordTypes=N,u.lineBreak=C,u.lineBreakG=F,u.nonASCIIwhitespace=L,u.parse=hi,u.parseExpressionAt=ci,u.tokContexts=de,u.tokTypes=p,u.tokenizer=pi,u.version=Ot,Object.defineProperty(u,"__esModule",{value:!0})})},{}],2:[function(i,o,m){},{}],3:[function(i,o,m){function u(a,t={}){let{contextName:n="gl",throwGetError:g,useTrackablePrimitives:v,readPixelsFile:k,recording:T=[],variables:A={},onReadPixels:E,onUnrecognizedArgumentLookup:y}=t,_=new Proxy(a,{get:C}),w=[],M={},N=0,b="",p;return _;function C(H,B){switch(B){case"addComment":return W;case"checkThrowError":return K;case"getReadPixelsVariableName":return p;case"insertVariable":return L;case"reset":return P;case"setIndent":return G;case"toString":return F;case"getContextVariableName":return te}return typeof a[B]=="function"?function(){switch(B){case"getError":return g?T.push(`${b}if (${n}.getError() !== ${n}.NONE) throw new Error(\'error\');`):T.push(`${b}${n}.getError();`),a.getError();case"getExtension":{let ee=`${n}Variables${w.length}`;T.push(`${b}const ${ee} = ${n}.getExtension(\'${arguments[0]}\');`);let ce=a.getExtension(arguments[0]);if(ce&&typeof ce=="object"){let fe=c(ce,{getEntity:$,useTrackablePrimitives:v,recording:T,contextName:ee,contextVariables:w,variables:A,indent:b,onUnrecognizedArgumentLookup:y});return w.push(fe),fe}else w.push(null);return ce}case"readPixels":let Z=w.indexOf(arguments[6]),ie;if(Z===-1){let ee=Q(arguments[6]);ee?(ie=ee,T.push(`${b}${ee}`)):(ie=`${n}Variable${w.length}`,w.push(arguments[6]),T.push(`${b}const ${ie} = new ${arguments[6].constructor.name}(${arguments[6].length});`))}else ie=`${n}Variable${Z}`;p=ie;let Se=[arguments[0],arguments[1],arguments[2],arguments[3],$(arguments[4]),$(arguments[5]),ie];return T.push(`${b}${n}.readPixels(${Se.join(", ")});`),k&&Y(arguments[2],arguments[3]),E&&E(ie,Se),a.readPixels.apply(a,arguments);case"drawBuffers":return T.push(`${b}${n}.drawBuffers([${d(arguments[0],{contextName:n,contextVariables:w,getEntity:$,addVariable:O,variables:A,onUnrecognizedArgumentLookup:y})}]);`),a.drawBuffers(arguments[0])}let he=a[B].apply(a,arguments);switch(typeof he){case"undefined":T.push(`${b}${J(B,arguments)};`);return;case"number":case"boolean":if(v&&w.indexOf(r(he))===-1){T.push(`${b}const ${n}Variable${w.length} = ${J(B,arguments)};`),w.push(he=r(he));break}default:he===null?T.push(`${J(B,arguments)};`):T.push(`${b}const ${n}Variable${w.length} = ${J(B,arguments)};`),w.push(he)}return he}:(M[a[B]]=B,a[B])}function F(){return T.join(`\n`)}function P(){for(;T.length>0;)T.pop()}function L(H,B){A[H]=B}function $(H){let B=M[H];return B?n+"."+B:H}function G(H){b=" ".repeat(H)}function O(H,B){let he=`${n}Variable${w.length}`;return T.push(`${b}const ${he} = ${B};`),w.push(H),he}function Y(H,B){let he=`${n}Variable${w.length}`,Z=`imageDatum${N}`;T.push(`${b}let ${Z} = ["P3\\\\n# ${k}.ppm\\\\n", ${H}, \' \', ${B}, "\\\\n255\\\\n"].join("");`),T.push(`${b}for (let i = 0; i < ${Z}.length; i += 4) {`),T.push(`${b}  ${Z} += ${he}[i] + \' \' + ${he}[i + 1] + \' \' + ${he}[i + 2] + \' \';`),T.push(`${b}}`),T.push(`${b}if (typeof require !== "undefined") {`),T.push(`${b}  require(\'fs\').writeFileSync(\'./${k}.ppm\', ${Z});`),T.push(`${b}}`),N++}function W(H){T.push(`${b}// ${H}`)}function K(){T.push(`${b}(() => {\n      ${b}const error = ${n}.getError();\n      ${b}if (error !== ${n}.NONE) {\n      ${b}  const names = Object.getOwnPropertyNames(gl);\n      ${b}  for (let i = 0; i < names.length; i++) {\n      ${b}    const name = names[i];\n      ${b}    if (${n}[name] === error) {\n      ${b}      throw new Error(\'${n} threw \' + name);\n      ${b}    }\n      ${b}  }\n      ${b}}\n      ${b}})();`)}function J(H,B){return`${n}.${H}(${d(B,{contextName:n,contextVariables:w,getEntity:$,addVariable:O,variables:A,onUnrecognizedArgumentLookup:y})})`}function Q(H){if(A){for(let B in A)if(A[B]===H)return B}return null}function te(H){let B=w.indexOf(H);return B!==-1?`${n}Variable${B}`:null}}function c(a,t){let n=new Proxy(a,{get:M}),g={},{contextName:v,contextVariables:k,getEntity:T,useTrackablePrimitives:A,recording:E,variables:y,indent:_,onUnrecognizedArgumentLookup:w}=t;return n;function M(C,F){return typeof C[F]=="function"?function(){switch(F){case"drawBuffersWEBGL":return E.push(`${_}${v}.drawBuffersWEBGL([${d(arguments[0],{contextName:v,contextVariables:k,getEntity:N,addVariable:p,variables:y,onUnrecognizedArgumentLookup:w})}]);`),a.drawBuffersWEBGL(arguments[0])}let P=a[F].apply(a,arguments);switch(typeof P){case"undefined":E.push(`${_}${b(F,arguments)};`);return;case"number":case"boolean":A&&k.indexOf(r(P))===-1?(E.push(`${_}const ${v}Variable${k.length} = ${b(F,arguments)};`),k.push(P=r(P))):(E.push(`${_}const ${v}Variable${k.length} = ${b(F,arguments)};`),k.push(P));break;default:P===null?E.push(`${b(F,arguments)};`):E.push(`${_}const ${v}Variable${k.length} = ${b(F,arguments)};`),k.push(P)}return P}:(g[a[F]]=F,a[F])}function N(C){return g.hasOwnProperty(C)?`${v}.${g[C]}`:T(C)}function b(C,F){return`${v}.${C}(${d(F,{contextName:v,contextVariables:k,getEntity:N,addVariable:p,variables:y,onUnrecognizedArgumentLookup:w})})`}function p(C,F){let P=`${v}Variable${k.length}`;return k.push(C),E.push(`${_}const ${P} = ${F};`),P}}function d(a,t){let{variables:n,onUnrecognizedArgumentLookup:g}=t;return Array.from(a).map(k=>{let T=v(k);return T||f(k,t)}).join(", ");function v(k){if(n){for(let T in n)if(!!n.hasOwnProperty(T)&&n[T]===k)return T}return g?g(k):null}}function f(a,t){let{contextName:n,contextVariables:g,getEntity:v,addVariable:k,onUnrecognizedArgumentLookup:T}=t;if(typeof a>"u")return"undefined";if(a===null)return"null";let A=g.indexOf(a);if(A>-1)return`${n}Variable${A}`;switch(a.constructor.name){case"String":let E=/\\n/.test(a),y=/\'/.test(a),_=/"/.test(a);return E?"`"+a+"`":y&&!_?\'"\'+a+\'"\':"\'"+a+"\'";case"Number":return v(a);case"Boolean":return v(a);case"Array":return k(a,`new ${a.constructor.name}([${Array.from(a).join(",")}])`);case"Float32Array":case"Uint8Array":case"Uint16Array":case"Int32Array":return k(a,`new ${a.constructor.name}(${JSON.stringify(Array.from(a))})`);default:if(T){let w=T(a);if(w)return w}throw new Error(`unrecognized argument type ${a.constructor.name}`)}}function r(a){return new a.constructor(a)}typeof o<"u"&&(o.exports={glWiretap:u,glExtensionWiretap:c}),typeof window<"u"&&(u.glExtensionWiretap=c,window.glWiretap=u)},{}],4:[function(i,o,m){function u(k){let T=new Array(k.length);for(let A=0;A<k.length;A++){let E=k[A];E.toArray?T[A]=E.toArray():T[A]=E}return T}function c(){let k=u(arguments),T=new Float32Array(this.output.x);for(let A=0;A<this.output.x;A++)this.thread.x=A,this.thread.y=0,this.thread.z=0,T[A]=this._fn.apply(this,k);return T}function d(){let k=u(arguments),T=new Array(this.output.y);for(let A=0;A<this.output.y;A++){let E=new Float32Array(this.output.x);for(let y=0;y<this.output.x;y++)this.thread.x=y,this.thread.y=A,this.thread.z=0,E[y]=this._fn.apply(this,k);T[A]=E}return T}function f(){let k=u(arguments);for(let T=0;T<this.output.y;T++)for(let A=0;A<this.output.x;A++)this.thread.x=A,this.thread.y=T,this.thread.z=0,this._fn.apply(this,k)}function r(){let k=u(arguments),T=new Array(this.output.z);for(let A=0;A<this.output.z;A++){let E=new Array(this.output.y);for(let y=0;y<this.output.y;y++){let _=new Float32Array(this.output.x);for(let w=0;w<this.output.x;w++)this.thread.x=w,this.thread.y=y,this.thread.z=A,_[w]=this._fn.apply(this,k);E[y]=_}T[A]=E}return T}function a(k){k.setOutput=E=>{k.output=n(E),k.graphical&&t(k)},k.toJSON=()=>{throw new Error("Not usable with gpuMock")},k.setConstants=E=>(k.constants=E,k),k.setGraphical=E=>(k.graphical=E,k),k.setCanvas=E=>(k.canvas=E,k),k.setContext=E=>(k.context=E,k),k.destroy=()=>{},k.validateSettings=()=>{},k.graphical&&k.output&&t(k),k.exec=function(){return new Promise((E,y)=>{try{E(k.apply(k,arguments))}catch(_){y(_)}})},k.getPixels=E=>{let{x:y,y:_}=k.output;return E?v(k._imageData.data,y,_):k._imageData.data.slice(0)},k.color=function(E,y,_,w){typeof w>"u"&&(w=1),E=Math.floor(E*255),y=Math.floor(y*255),_=Math.floor(_*255),w=Math.floor(w*255);let M=k.output.x,N=k.output.y,b=k.thread.x,p=N-k.thread.y-1,C=b+p*M;k._colorData[C*4+0]=E,k._colorData[C*4+1]=y,k._colorData[C*4+2]=_,k._colorData[C*4+3]=w};let T=()=>k,A=["setWarnVarUsage","setArgumentTypes","setTactic","setOptimizeFloatMemory","setDebug","setLoopMaxIterations","setConstantTypes","setFunctions","setNativeFunctions","setInjectedNative","setPipeline","setPrecision","setOutputToTexture","setImmutable","setStrictIntegers","setDynamicOutput","setHardcodeConstants","setDynamicArguments","setUseLegacyEncoder","setWarnVarUsage","addSubKernel"];for(let E=0;E<A.length;E++)k[A[E]]=T;return k}function t(k){let{x:T,y:A}=k.output;if(k.context&&k.context.createImageData){let E=new Uint8ClampedArray(T*A*4);k._imageData=k.context.createImageData(T,A),k._colorData=E}else{let E=new Uint8ClampedArray(T*A*4);k._imageData={data:E},k._colorData=E}}function n(k){let T=null;if(k.length)if(k.length===3){let[A,E,y]=k;T={x:A,y:E,z:y}}else if(k.length===2){let[A,E]=k;T={x:A,y:E}}else{let[A]=k;T={x:A}}else T=k;return T}function g(k,T={}){let A=T.output?n(T.output):null;function E(){return E.output.z?r.apply(E,arguments):E.output.y?E.graphical?f.apply(E,arguments):d.apply(E,arguments):c.apply(E,arguments)}return E._fn=k,E.constants=T.constants||null,E.context=T.context||null,E.canvas=T.canvas||null,E.graphical=T.graphical||!1,E._imageData=null,E._colorData=null,E.output=A,E.thread={x:0,y:0,z:0},a(E)}function v(k,T,A){let E=A/2|0,y=T*4,_=new Uint8ClampedArray(T*4),w=k.slice(0);for(let M=0;M<E;++M){let N=M*y,b=(A-M-1)*y;_.set(w.subarray(N,N+y)),w.copyWithin(N,b,b+y),w.set(_,b)}return w}o.exports={gpuMock:g}},{}],5:[function(i,o,m){let{utils:u}=i("./utils");function c(d,f){let r=f.toString();return new Function(`return function ${d} (${u.getArgumentNamesFromString(r).join(", ")}) {\n        ${u.getFunctionBodyFromString(r)}\n      }`)()}o.exports={alias:c}},{"./utils":114}],6:[function(i,o,m){let{FunctionNode:u}=i("../function-node");class c extends u{astFunction(f,r){if(!this.isRootKernel){r.push("function"),r.push(" "),r.push(this.name),r.push("(");for(let a=0;a<this.argumentNames.length;++a){let t=this.argumentNames[a];a>0&&r.push(", "),r.push("user_"),r.push(t)}r.push(`) {\n`)}for(let a=0;a<f.body.body.length;++a)this.astGeneric(f.body.body[a],r),r.push(`\n`);return this.isRootKernel||r.push(`}\n`),r}astReturnStatement(f,r){let a=this.returnType||this.getType(f.argument);return this.returnType||(this.returnType=a),this.isRootKernel?(r.push(this.leadingReturnStatement),this.astGeneric(f.argument,r),r.push(`;\n`),r.push(this.followingReturnStatement),r.push(`continue;\n`)):this.isSubKernel?(r.push(`subKernelResult_${this.name} = `),this.astGeneric(f.argument,r),r.push(";"),r.push(`return subKernelResult_${this.name};`)):(r.push("return "),this.astGeneric(f.argument,r),r.push(";")),r}astLiteral(f,r){if(isNaN(f.value))throw this.astErrorOutput("Non-numeric literal not supported : "+f.value,f);return r.push(f.value),r}astBinaryExpression(f,r){return r.push("("),this.astGeneric(f.left,r),r.push(f.operator),this.astGeneric(f.right,r),r.push(")"),r}astIdentifierExpression(f,r){if(f.type!=="Identifier")throw this.astErrorOutput("IdentifierExpression - not an Identifier",f);switch(f.name){case"Infinity":r.push("Infinity");break;default:this.constants&&this.constants.hasOwnProperty(f.name)?r.push("constants_"+f.name):r.push("user_"+f.name)}return r}astForStatement(f,r){if(f.type!=="ForStatement")throw this.astErrorOutput("Invalid for statement",f);let a=[],t=[],n=[],g=[],v=null;if(f.init){this.pushState("in-for-loop-init"),this.astGeneric(f.init,a);for(let k=0;k<a.length;k++)a[k].includes&&a[k].includes(",")&&(v=!1);this.popState("in-for-loop-init")}else v=!1;if(f.test?this.astGeneric(f.test,t):v=!1,f.update?this.astGeneric(f.update,n):v=!1,f.body&&(this.pushState("loop-body"),this.astGeneric(f.body,g),this.popState("loop-body")),v===null&&(v=this.isSafe(f.init)&&this.isSafe(f.test)),v)r.push(`for (${a.join("")};${t.join("")};${n.join("")}){\n`),r.push(g.join("")),r.push(`}\n`);else{let k=this.getInternalVariableName("safeI");a.length>0&&r.push(a.join(""),`;\n`),r.push(`for (let ${k}=0;${k}<LOOP_MAX;${k}++){\n`),t.length>0&&r.push(`if (!${t.join("")}) break;\n`),r.push(g.join("")),r.push(`\n${n.join("")};`),r.push(`}\n`)}return r}astWhileStatement(f,r){if(f.type!=="WhileStatement")throw this.astErrorOutput("Invalid while statement",f);return r.push("for (let i = 0; i < LOOP_MAX; i++) {"),r.push("if ("),this.astGeneric(f.test,r),r.push(`) {\n`),this.astGeneric(f.body,r),r.push(`} else {\n`),r.push(`break;\n`),r.push(`}\n`),r.push(`}\n`),r}astDoWhileStatement(f,r){if(f.type!=="DoWhileStatement")throw this.astErrorOutput("Invalid while statement",f);return r.push("for (let i = 0; i < LOOP_MAX; i++) {"),this.astGeneric(f.body,r),r.push("if (!"),this.astGeneric(f.test,r),r.push(`) {\n`),r.push(`break;\n`),r.push(`}\n`),r.push(`}\n`),r}astAssignmentExpression(f,r){let a=this.getDeclaration(f.left);if(a&&!a.assignable)throw this.astErrorOutput(`Variable ${f.left.name} is not assignable here`,f);return this.astGeneric(f.left,r),r.push(f.operator),this.astGeneric(f.right,r),r}astBlockStatement(f,r){if(this.isState("loop-body")){this.pushState("block-body");for(let a=0;a<f.body.length;a++)this.astGeneric(f.body[a],r);this.popState("block-body")}else{r.push(`{\n`);for(let a=0;a<f.body.length;a++)this.astGeneric(f.body[a],r);r.push(`}\n`)}return r}astVariableDeclaration(f,r){r.push(`${f.kind} `);let{declarations:a}=f;for(let t=0;t<a.length;t++){t>0&&r.push(",");let n=a[t],g=this.getDeclaration(n.id);g.valueType||(g.valueType=this.getType(n.init)),this.astGeneric(n,r)}return this.isState("in-for-loop-init")||r.push(";"),r}astIfStatement(f,r){return r.push("if ("),this.astGeneric(f.test,r),r.push(")"),f.consequent.type==="BlockStatement"?this.astGeneric(f.consequent,r):(r.push(` {\n`),this.astGeneric(f.consequent,r),r.push(`\n}\n`)),f.alternate&&(r.push("else "),f.alternate.type==="BlockStatement"||f.alternate.type==="IfStatement"?this.astGeneric(f.alternate,r):(r.push(` {\n`),this.astGeneric(f.alternate,r),r.push(`\n}\n`))),r}astSwitchStatement(f,r){let{discriminant:a,cases:t}=f;r.push("switch ("),this.astGeneric(a,r),r.push(`) {\n`);for(let n=0;n<t.length;n++){if(t[n].test===null){r.push(`default:\n`),this.astGeneric(t[n].consequent,r),t[n].consequent&&t[n].consequent.length>0&&r.push(`break;\n`);continue}r.push("case "),this.astGeneric(t[n].test,r),r.push(`:\n`),t[n].consequent&&t[n].consequent.length>0&&(this.astGeneric(t[n].consequent,r),r.push(`break;\n`))}r.push(`\n}`)}astThisExpression(f,r){return r.push("_this"),r}astMemberExpression(f,r){let{signature:a,type:t,property:n,xProperty:g,yProperty:v,zProperty:k,name:T,origin:A}=this.getMemberExpressionDetails(f);switch(a){case"this.thread.value":return r.push(`_this.thread.${T}`),r;case"this.output.value":switch(T){case"x":r.push("outputX");break;case"y":r.push("outputY");break;case"z":r.push("outputZ");break;default:throw this.astErrorOutput("Unexpected expression",f)}return r;case"value":throw this.astErrorOutput("Unexpected expression",f);case"value[]":case"value[][]":case"value[][][]":case"value.value":if(A==="Math")return r.push(Math[T]),r;switch(n){case"r":return r.push(`user_${T}[0]`),r;case"g":return r.push(`user_${T}[1]`),r;case"b":return r.push(`user_${T}[2]`),r;case"a":return r.push(`user_${T}[3]`),r}break;case"this.constants.value":case"this.constants.value[]":case"this.constants.value[][]":case"this.constants.value[][][]":break;case"fn()[]":return this.astGeneric(f.object,r),r.push("["),this.astGeneric(f.property,r),r.push("]"),r;case"fn()[][]":return this.astGeneric(f.object.object,r),r.push("["),this.astGeneric(f.object.property,r),r.push("]"),r.push("["),this.astGeneric(f.property,r),r.push("]"),r;default:throw this.astErrorOutput("Unexpected expression",f)}if(!f.computed)switch(t){case"Number":case"Integer":case"Float":case"Boolean":return r.push(`${A}_${T}`),r}let E=`${A}_${T}`;switch(t){case"Array(2)":case"Array(3)":case"Array(4)":case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":case"HTMLImageArray":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"HTMLImage":default:let y,_;if(A==="constants"){let w=this.constants[T];_=this.constantTypes[T]==="Input",y=_?w.size:null}else _=this.isInput(T),y=_?this.argumentSizes[this.argumentNames.indexOf(T)]:null;r.push(`${E}`),k&&v?_?(r.push("[("),this.astGeneric(k,r),r.push(`*${this.dynamicArguments?"(outputY * outputX)":y[1]*y[0]})+(`),this.astGeneric(v,r),r.push(`*${this.dynamicArguments?"outputX":y[0]})+`),this.astGeneric(g,r),r.push("]")):(r.push("["),this.astGeneric(k,r),r.push("]"),r.push("["),this.astGeneric(v,r),r.push("]"),r.push("["),this.astGeneric(g,r),r.push("]")):v?_?(r.push("[("),this.astGeneric(v,r),r.push(`*${this.dynamicArguments?"outputX":y[0]})+`),this.astGeneric(g,r),r.push("]")):(r.push("["),this.astGeneric(v,r),r.push("]"),r.push("["),this.astGeneric(g,r),r.push("]")):typeof g<"u"&&(r.push("["),this.astGeneric(g,r),r.push("]"))}return r}astCallExpression(f,r){if(f.type!=="CallExpression")throw this.astErrorOutput("Unknown CallExpression",f);let a=this.astMemberExpressionUnroll(f.callee);this.calledFunctions.indexOf(a)<0&&this.calledFunctions.push(a);let t=this.isAstMathFunction(f);this.onFunctionCall&&this.onFunctionCall(this.name,a,f.arguments),r.push(a),r.push("(");let n=this.lookupFunctionArgumentTypes(a)||[];for(let g=0;g<f.arguments.length;++g){let v=f.arguments[g],k=this.getType(v);n[g]||this.triggerImplyArgumentType(a,g,k,this),g>0&&r.push(", "),this.astGeneric(v,r)}return r.push(")"),r}astArrayExpression(f,r){let a=this.getType(f),t=f.elements.length,n=[];for(let g=0;g<t;++g){let v=[];this.astGeneric(f.elements[g],v),n.push(v.join(""))}switch(a){case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":r.push(`[${n.join(", ")}]`);break;default:r.push(`new Float32Array([${n.join(", ")}])`)}return r}astDebuggerStatement(f,r){return r.push("debugger;"),r}}o.exports={CPUFunctionNode:c}},{"../function-node":10}],7:[function(i,o,m){let{utils:u}=i("../../utils");function c(f,r){let a=[];for(let t in r){if(!r.hasOwnProperty(t))continue;let n=r[t],g=f[t];switch(n){case"Number":case"Integer":case"Float":case"Boolean":a.push(`${t}:${g}`);break;case"Array(2)":case"Array(3)":case"Array(4)":case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":a.push(`${t}:new ${g.constructor.name}(${JSON.stringify(Array.from(g))})`);break}}return`{ ${a.join()} }`}function d(f,r){let a=[],t=[],n=[],g=!/^function/.test(f.color.toString());if(a.push("  const { context, canvas, constants: incomingConstants } = settings;",`  const output = new Int32Array(${JSON.stringify(Array.from(f.output))});`,`  const _constantTypes = ${JSON.stringify(f.constantTypes)};`,`  const _constants = ${c(f.constants,f.constantTypes)};`),t.push("    constants: _constants,","    context,","    output,","    thread: {x: 0, y: 0, z: 0},"),f.graphical){a.push(`  const _imageData = context.createImageData(${f.output[0]}, ${f.output[1]});`),a.push(`  const _colorData = new Uint8ClampedArray(${f.output[0]} * ${f.output[1]} * 4);`);let T=u.flattenFunctionToString((g?"function ":"")+f.color.toString(),{thisLookup:E=>{switch(E){case"_colorData":return"_colorData";case"_imageData":return"_imageData";case"output":return"output";case"thread":return"this.thread"}return JSON.stringify(f[E])},findDependency:(E,y)=>null}),A=u.flattenFunctionToString((g?"function ":"")+f.getPixels.toString(),{thisLookup:E=>{switch(E){case"_colorData":return"_colorData";case"_imageData":return"_imageData";case"output":return"output";case"thread":return"this.thread"}return JSON.stringify(f[E])},findDependency:()=>null});t.push("    _imageData,","    _colorData,",`    color: ${T},`),n.push(`  kernel.getPixels = ${A};`)}let v=[],k=Object.keys(f.constantTypes);for(let T=0;T<k.length;T++)v.push(f.constantTypes[k]);if(f.argumentTypes.indexOf("HTMLImageArray")!==-1||v.indexOf("HTMLImageArray")!==-1){let T=u.flattenFunctionToString((g?"function ":"")+f._imageTo3DArray.toString(),{doNotDefine:["canvas"],findDependency:(A,E)=>A==="this"?(g?"function ":"")+f[E].toString():null,thisLookup:A=>{switch(A){case"canvas":return;case"context":return"context"}}});n.push(T),t.push("    _mediaTo2DArray,"),t.push("    _imageTo3DArray,")}else if(f.argumentTypes.indexOf("HTMLImage")!==-1||v.indexOf("HTMLImage")!==-1){let T=u.flattenFunctionToString((g?"function ":"")+f._mediaTo2DArray.toString(),{findDependency:(A,E)=>null,thisLookup:A=>{switch(A){case"canvas":return"settings.canvas";case"context":return"settings.context"}throw new Error("unhandled thisLookup")}});n.push(T),t.push("    _mediaTo2DArray,")}return`function(settings) {\n      ${a.join(`\n`)}\n        for (const p in _constantTypes) {\n          if (!_constantTypes.hasOwnProperty(p)) continue;\n          const type = _constantTypes[p];\n          switch (type) {\n            case \'Number\':\n            case \'Integer\':\n            case \'Float\':\n            case \'Boolean\':\n            case \'Array(2)\':\n            case \'Array(3)\':\n            case \'Array(4)\':\n            case \'Matrix(2)\':\n            case \'Matrix(3)\':\n            case \'Matrix(4)\':\n              if (incomingConstants.hasOwnProperty(p)) {\n                console.warn(\'constant \' + p + \' of type \' + type + \' cannot be resigned\');\n              }\n              continue;\n          }\n          if (!incomingConstants.hasOwnProperty(p)) {\n            throw new Error(\'constant \' + p + \' not found\');\n          }\n          _constants[p] = incomingConstants[p];\n        }\n        const kernel = (function() {\n      ${f._kernelString}\n        })\n          .apply({ ${t.join(`\n`)} });\n        ${n.join(`\n`)}\n        return kernel;\n      }`}o.exports={cpuKernelString:d}},{"../../utils":114}],8:[function(i,o,m){let{Kernel:u}=i("../kernel"),{FunctionBuilder:c}=i("../function-builder"),{CPUFunctionNode:d}=i("./function-node"),{utils:f}=i("../../utils"),{cpuKernelString:r}=i("./kernel-string");class a extends u{static getFeatures(){return this.features}static get features(){return Object.freeze({kernelMap:!0,isIntegerDivisionAccurate:!0})}static get isSupported(){return!0}static isContextMatch(n){return!1}static get mode(){return"cpu"}static nativeFunctionArguments(){return null}static nativeFunctionReturnType(){throw new Error(`Looking up native function return type not supported on ${this.name}`)}static combineKernels(n){return n}static getSignature(n,g){return"cpu"+(g.length>0?":"+g.join(","):"")}constructor(n,g){super(n,g),this.mergeSettings(n.settings||g),this._imageData=null,this._colorData=null,this._kernelString=null,this._prependedString=[],this.thread={x:0,y:0,z:0},this.translatedSources=null}initCanvas(){if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(0,0)}initContext(){return this.canvas?this.canvas.getContext("2d"):null}initPlugins(n){return[]}validateSettings(n){if(!this.output||this.output.length===0){if(n.length!==1)throw new Error("Auto output only supported for kernels with only one input");let g=f.getVariableType(n[0],this.strictIntegers);if(g==="Array")this.output=f.getDimensions(g);else if(g==="NumberTexture"||g==="ArrayTexture(4)")this.output=n[0].output;else throw new Error("Auto output not supported for input type: "+g)}if(this.graphical&&this.output.length!==2)throw new Error("Output must have 2 dimensions on graphical mode");this.checkOutput()}translateSource(){if(this.leadingReturnStatement=this.output.length>1?"resultX[x] = ":"result[x] = ",this.subKernels){let g=[];for(let v=0;v<this.subKernels.length;v++){let{name:k}=this.subKernels[v];g.push(this.output.length>1?`resultX_${k}[x] = subKernelResult_${k};\n`:`result_${k}[x] = subKernelResult_${k};\n`)}this.followingReturnStatement=g.join("")}let n=c.fromKernel(this,d);this.translatedSources=n.getPrototypes("kernel"),!this.graphical&&!this.returnType&&(this.returnType=n.getKernelResultType())}build(){if(this.built)return;if(this.setupConstants(),this.setupArguments(arguments),this.validateSettings(arguments),this.translateSource(),this.graphical){let{canvas:g,output:v}=this;if(!g)throw new Error("no canvas available for using graphical output");let k=v[0],T=v[1]||1;g.width=k,g.height=T,this._imageData=this.context.createImageData(k,T),this._colorData=new Uint8ClampedArray(k*T*4)}let n=this.getKernelString();this.kernelString=n,this.debug&&(console.log("Function output:"),console.log(n));try{this.run=new Function([],n).bind(this)()}catch(g){console.error("An error occurred compiling the javascript: ",g)}this.buildSignature(arguments),this.built=!0}color(n,g,v,k){typeof k>"u"&&(k=1),n=Math.floor(n*255),g=Math.floor(g*255),v=Math.floor(v*255),k=Math.floor(k*255);let T=this.output[0],A=this.output[1],E=this.thread.x,y=A-this.thread.y-1,_=E+y*T;this._colorData[_*4+0]=n,this._colorData[_*4+1]=g,this._colorData[_*4+2]=v,this._colorData[_*4+3]=k}getKernelString(){if(this._kernelString!==null)return this._kernelString;let n=null,{translatedSources:g}=this;return g.length>1?g=g.filter(v=>/^function/.test(v)?v:(n=v,!1)):n=g.shift(),this._kernelString=`  const LOOP_MAX = ${this._getLoopMaxString()};\n        ${this.injectedNative||""}\n        const _this = this;\n        ${this._resultKernelHeader()}\n        ${this._processConstants()}\n        return (${this.argumentNames.map(v=>"user_"+v).join(", ")}) => {\n          ${this._prependedString.join("")}\n          ${this._earlyThrows()}\n          ${this._processArguments()}\n          ${this.graphical?this._graphicalKernelBody(n):this._resultKernelBody(n)}\n          ${g.length>0?g.join(`\n`):""}\n        };`}toString(){return r(this)}_getLoopMaxString(){return this.loopMaxIterations?` ${parseInt(this.loopMaxIterations)};`:" 1000;"}_processConstants(){if(!this.constants)return"";let n=[];for(let g in this.constants)switch(this.constantTypes[g]){case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":n.push(`    const constants_${g} = this._mediaTo2DArray(this.constants.${g});\n`);break;case"HTMLImageArray":n.push(`    const constants_${g} = this._imageTo3DArray(this.constants.${g});\n`);break;case"Input":n.push(`    const constants_${g} = this.constants.${g}.value;\n`);break;default:n.push(`    const constants_${g} = this.constants.${g};\n`)}return n.join("")}_earlyThrows(){if(this.graphical||this.immutable||!this.pipeline)return"";let n=[];for(let v=0;v<this.argumentTypes.length;v++)this.argumentTypes[v]==="Array"&&n.push(this.argumentNames[v]);if(n.length===0)return"";let g=[];for(let v=0;v<n.length;v++){let k=n[v],T=this._mapSubKernels(A=>`user_${k} === result_${A.name}`).join(" || ");g.push(`user_${k} === result${T?` || ${T}`:""}`)}return`if (${g.join(" || ")}) throw new Error(\'Source and destination arrays are the same.  Use immutable = true\');`}_processArguments(){let n=[];for(let g=0;g<this.argumentTypes.length;g++){let v=`user_${this.argumentNames[g]}`;switch(this.argumentTypes[g]){case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":n.push(`    ${v} = this._mediaTo2DArray(${v});\n`);break;case"HTMLImageArray":n.push(`    ${v} = this._imageTo3DArray(${v});\n`);break;case"Input":n.push(`    ${v} = ${v}.value;\n`);break;case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"NumberTexture":case"MemoryOptimizedNumberTexture":n.push(`\n          if (${v}.toArray) {\n            if (!_this.textureCache) {\n              _this.textureCache = [];\n              _this.arrayCache = [];\n            }\n            const textureIndex = _this.textureCache.indexOf(${v});\n            if (textureIndex !== -1) {\n              ${v} = _this.arrayCache[textureIndex];\n            } else {\n              _this.textureCache.push(${v});\n              ${v} = ${v}.toArray();\n              _this.arrayCache.push(${v});\n            }\n          }`);break}}return n.join("")}_mediaTo2DArray(n){let g=this.canvas,v=n.width>0?n.width:n.videoWidth,k=n.height>0?n.height:n.videoHeight;g.width<v&&(g.width=v),g.height<k&&(g.height=k);let T=this.context;T.drawImage(n,0,0,v,k);let A=T.getImageData(0,0,v,k).data,E=new Array(k),y=0;for(let _=k-1;_>=0;_--){let w=E[_]=new Array(v);for(let M=0;M<v;M++){let N=new Float32Array(4);N[0]=A[y++]/255,N[1]=A[y++]/255,N[2]=A[y++]/255,N[3]=A[y++]/255,w[M]=N}}return E}getPixels(n){let[g,v]=this.output;return n?f.flipPixels(this._imageData.data,g,v):this._imageData.data.slice(0)}_imageTo3DArray(n){let g=new Array(n.length);for(let v=0;v<n.length;v++)g[v]=this._mediaTo2DArray(n[v]);return g}_resultKernelHeader(){if(this.graphical||this.immutable||!this.pipeline)return"";switch(this.output.length){case 1:return this._mutableKernel1DResults();case 2:return this._mutableKernel2DResults();case 3:return this._mutableKernel3DResults()}}_resultKernelBody(n){switch(this.output.length){case 1:return(!this.immutable&&this.pipeline?this._resultMutableKernel1DLoop(n):this._resultImmutableKernel1DLoop(n))+this._kernelOutput();case 2:return(!this.immutable&&this.pipeline?this._resultMutableKernel2DLoop(n):this._resultImmutableKernel2DLoop(n))+this._kernelOutput();case 3:return(!this.immutable&&this.pipeline?this._resultMutableKernel3DLoop(n):this._resultImmutableKernel3DLoop(n))+this._kernelOutput();default:throw new Error("unsupported size kernel")}}_graphicalKernelBody(n){switch(this.output.length){case 2:return this._graphicalKernel2DLoop(n)+this._graphicalOutput();default:throw new Error("unsupported size kernel")}}_graphicalOutput(){return`\n          this._imageData.data.set(this._colorData);\n          this.context.putImageData(this._imageData, 0, 0);\n          return;`}_getKernelResultTypeConstructorString(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return"Float32Array";case"Array(2)":case"Array(3)":case"Array(4)":return"Array";default:if(this.graphical)return"Float32Array";throw new Error(`unhandled returnType ${this.returnType}`)}}_resultImmutableKernel1DLoop(n){let g=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n          const result = new ${g}(outputX);\n          ${this._mapSubKernels(v=>`const result_${v.name} = new ${g}(outputX);\n`).join("    ")}\n          ${this._mapSubKernels(v=>`let subKernelResult_${v.name};\n`).join("    ")}\n          for (let x = 0; x < outputX; x++) {\n            this.thread.x = x;\n            this.thread.y = 0;\n            this.thread.z = 0;\n            ${n}\n          }`}_mutableKernel1DResults(){let n=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n          const result = new ${n}(outputX);\n          ${this._mapSubKernels(g=>`const result_${g.name} = new ${n}(outputX);\n`).join("    ")}\n          ${this._mapSubKernels(g=>`let subKernelResult_${g.name};\n`).join("    ")}`}_resultMutableKernel1DLoop(n){return`  const outputX = _this.output[0];\n          for (let x = 0; x < outputX; x++) {\n            this.thread.x = x;\n            this.thread.y = 0;\n            this.thread.z = 0;\n            ${n}\n          }`}_resultImmutableKernel2DLoop(n){let g=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n          const outputY = _this.output[1];\n          const result = new Array(outputY);\n          ${this._mapSubKernels(v=>`const result_${v.name} = new Array(outputY);\n`).join("    ")}\n          ${this._mapSubKernels(v=>`let subKernelResult_${v.name};\n`).join("    ")}\n          for (let y = 0; y < outputY; y++) {\n            this.thread.z = 0;\n            this.thread.y = y;\n            const resultX = result[y] = new ${g}(outputX);\n            ${this._mapSubKernels(v=>`const resultX_${v.name} = result_${v.name}[y] = new ${g}(outputX);\n`).join("")}\n            for (let x = 0; x < outputX; x++) {\n              this.thread.x = x;\n              ${n}\n            }\n          }`}_mutableKernel2DResults(){let n=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n          const outputY = _this.output[1];\n          const result = new Array(outputY);\n          ${this._mapSubKernels(g=>`const result_${g.name} = new Array(outputY);\n`).join("    ")}\n          ${this._mapSubKernels(g=>`let subKernelResult_${g.name};\n`).join("    ")}\n          for (let y = 0; y < outputY; y++) {\n            const resultX = result[y] = new ${n}(outputX);\n            ${this._mapSubKernels(g=>`const resultX_${g.name} = result_${g.name}[y] = new ${n}(outputX);\n`).join("")}\n          }`}_resultMutableKernel2DLoop(n){let g=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n          const outputY = _this.output[1];\n          for (let y = 0; y < outputY; y++) {\n            this.thread.z = 0;\n            this.thread.y = y;\n            const resultX = result[y];\n            ${this._mapSubKernels(v=>`const resultX_${v.name} = result_${v.name}[y] = new ${g}(outputX);\n`).join("")}\n            for (let x = 0; x < outputX; x++) {\n              this.thread.x = x;\n              ${n}\n            }\n          }`}_graphicalKernel2DLoop(n){return`  const outputX = _this.output[0];\n          const outputY = _this.output[1];\n          for (let y = 0; y < outputY; y++) {\n            this.thread.z = 0;\n            this.thread.y = y;\n            for (let x = 0; x < outputX; x++) {\n              this.thread.x = x;\n              ${n}\n            }\n          }`}_resultImmutableKernel3DLoop(n){let g=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n          const outputY = _this.output[1];\n          const outputZ = _this.output[2];\n          const result = new Array(outputZ);\n          ${this._mapSubKernels(v=>`const result_${v.name} = new Array(outputZ);\n`).join("    ")}\n          ${this._mapSubKernels(v=>`let subKernelResult_${v.name};\n`).join("    ")}\n          for (let z = 0; z < outputZ; z++) {\n            this.thread.z = z;\n            const resultY = result[z] = new Array(outputY);\n            ${this._mapSubKernels(v=>`const resultY_${v.name} = result_${v.name}[z] = new Array(outputY);\n`).join("      ")}\n            for (let y = 0; y < outputY; y++) {\n              this.thread.y = y;\n              const resultX = resultY[y] = new ${g}(outputX);\n              ${this._mapSubKernels(v=>`const resultX_${v.name} = resultY_${v.name}[y] = new ${g}(outputX);\n`).join("        ")}\n              for (let x = 0; x < outputX; x++) {\n                this.thread.x = x;\n                ${n}\n              }\n            }\n          }`}_mutableKernel3DResults(){let n=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n          const outputY = _this.output[1];\n          const outputZ = _this.output[2];\n          const result = new Array(outputZ);\n          ${this._mapSubKernels(g=>`const result_${g.name} = new Array(outputZ);\n`).join("    ")}\n          ${this._mapSubKernels(g=>`let subKernelResult_${g.name};\n`).join("    ")}\n          for (let z = 0; z < outputZ; z++) {\n            const resultY = result[z] = new Array(outputY);\n            ${this._mapSubKernels(g=>`const resultY_${g.name} = result_${g.name}[z] = new Array(outputY);\n`).join("      ")}\n            for (let y = 0; y < outputY; y++) {\n              const resultX = resultY[y] = new ${n}(outputX);\n              ${this._mapSubKernels(g=>`const resultX_${g.name} = resultY_${g.name}[y] = new ${n}(outputX);\n`).join("        ")}\n            }\n          }`}_resultMutableKernel3DLoop(n){return`  const outputX = _this.output[0];\n          const outputY = _this.output[1];\n          const outputZ = _this.output[2];\n          for (let z = 0; z < outputZ; z++) {\n            this.thread.z = z;\n            const resultY = result[z];\n            for (let y = 0; y < outputY; y++) {\n              this.thread.y = y;\n              const resultX = resultY[y];\n              for (let x = 0; x < outputX; x++) {\n                this.thread.x = x;\n                ${n}\n              }\n            }\n          }`}_kernelOutput(){return this.subKernels?`\n    return {\n            result: result,\n            ${this.subKernels.map(n=>`${n.property}: result_${n.name}`).join(`,\n      `)}\n          };`:`\n    return result;`}_mapSubKernels(n){return this.subKernels===null?[""]:this.subKernels.map(n)}destroy(n){n&&delete this.canvas}static destroyContext(n){}toJSON(){let n=super.toJSON();return n.functionNodes=c.fromKernel(this,d).toJSON(),n}setOutput(n){super.setOutput(n);let[g,v]=this.output;this.graphical&&(this._imageData=this.context.createImageData(g,v),this._colorData=new Uint8ClampedArray(g*v*4))}prependString(n){if(this._kernelString)throw new Error("Kernel already built");this._prependedString.push(n)}hasPrependString(n){return this._prependedString.indexOf(n)>-1}}o.exports={CPUKernel:a}},{"../../utils":114,"../function-builder":9,"../kernel":36,"./function-node":6,"./kernel-string":7}],9:[function(i,o,m){class u{static fromKernel(d,f,r){let{kernelArguments:a,kernelConstants:t,argumentNames:n,argumentSizes:g,argumentBitRatios:v,constants:k,constantBitRatios:T,debug:A,loopMaxIterations:E,nativeFunctions:y,output:_,optimizeFloatMemory:w,precision:M,plugins:N,source:b,subKernels:p,functions:C,leadingReturnStatement:F,followingReturnStatement:P,dynamicArguments:L,dynamicOutput:$}=d,G=new Array(a.length),O={};for(let ne=0;ne<a.length;ne++)G[ne]=a[ne].type;for(let ne=0;ne<t.length;ne++){let ue=t[ne];O[ue.name]=ue.type}let Y=(ne,ue)=>me.needsArgumentType(ne,ue),W=(ne,ue,xe)=>{me.assignArgumentType(ne,ue,xe)},K=(ne,ue,xe)=>me.lookupReturnType(ne,ue,xe),J=ne=>me.lookupFunctionArgumentTypes(ne),Q=(ne,ue)=>me.lookupFunctionArgumentName(ne,ue),te=(ne,ue)=>me.lookupFunctionArgumentBitRatio(ne,ue),H=(ne,ue,xe,_e)=>{me.assignArgumentType(ne,ue,xe,_e)},B=(ne,ue,xe,_e)=>{me.assignArgumentBitRatio(ne,ue,xe,_e)},he=(ne,ue,xe)=>{me.trackFunctionCall(ne,ue,xe)},Z=(ne,ue)=>{let xe=[];for(let ke=0;ke<ne.params.length;ke++)xe.push(ne.params[ke].name);let _e=new f(ue,Object.assign({},ie,{returnType:null,ast:ne,name:ne.id.name,argumentNames:xe,lookupReturnType:K,lookupFunctionArgumentTypes:J,lookupFunctionArgumentName:Q,lookupFunctionArgumentBitRatio:te,needsArgumentType:Y,assignArgumentType:W,triggerImplyArgumentType:H,triggerImplyArgumentBitRatio:B,onFunctionCall:he}));_e.traceFunctionAST(ne),me.addFunctionNode(_e)},ie=Object.assign({isRootKernel:!1,onNestedFunction:Z,lookupReturnType:K,lookupFunctionArgumentTypes:J,lookupFunctionArgumentName:Q,lookupFunctionArgumentBitRatio:te,needsArgumentType:Y,assignArgumentType:W,triggerImplyArgumentType:H,triggerImplyArgumentBitRatio:B,onFunctionCall:he,optimizeFloatMemory:w,precision:M,constants:k,constantTypes:O,constantBitRatios:T,debug:A,loopMaxIterations:E,output:_,plugins:N,dynamicArguments:L,dynamicOutput:$},r||{}),Se=Object.assign({},ie,{isRootKernel:!0,name:"kernel",argumentNames:n,argumentTypes:G,argumentSizes:g,argumentBitRatios:v,leadingReturnStatement:F,followingReturnStatement:P});if(typeof b=="object"&&b.functionNodes)return new u().fromJSON(b.functionNodes,f);let ee=new f(b,Se),ce=null;C&&(ce=C.map(ne=>new f(ne.source,{returnType:ne.returnType,argumentTypes:ne.argumentTypes,output:_,plugins:N,constants:k,constantTypes:O,constantBitRatios:T,optimizeFloatMemory:w,precision:M,lookupReturnType:K,lookupFunctionArgumentTypes:J,lookupFunctionArgumentName:Q,lookupFunctionArgumentBitRatio:te,needsArgumentType:Y,assignArgumentType:W,triggerImplyArgumentType:H,triggerImplyArgumentBitRatio:B,onFunctionCall:he,onNestedFunction:Z})));let fe=null;p&&(fe=p.map(ne=>{let{name:ue,source:xe}=ne;return new f(xe,Object.assign({},ie,{name:ue,isSubKernel:!0,isRootKernel:!1}))}));let me=new u({kernel:d,rootNode:ee,functionNodes:ce,nativeFunctions:y,subKernelNodes:fe});return me}constructor(d){if(d=d||{},this.kernel=d.kernel,this.rootNode=d.rootNode,this.functionNodes=d.functionNodes||[],this.subKernelNodes=d.subKernelNodes||[],this.nativeFunctions=d.nativeFunctions||[],this.functionMap={},this.nativeFunctionNames=[],this.lookupChain=[],this.functionNodeDependencies={},this.functionCalls={},this.rootNode&&(this.functionMap.kernel=this.rootNode),this.functionNodes)for(let f=0;f<this.functionNodes.length;f++)this.functionMap[this.functionNodes[f].name]=this.functionNodes[f];if(this.subKernelNodes)for(let f=0;f<this.subKernelNodes.length;f++)this.functionMap[this.subKernelNodes[f].name]=this.subKernelNodes[f];if(this.nativeFunctions)for(let f=0;f<this.nativeFunctions.length;f++){let r=this.nativeFunctions[f];this.nativeFunctionNames.push(r.name)}}addFunctionNode(d){if(!d.name)throw new Error("functionNode.name needs set");this.functionMap[d.name]=d,d.isRootKernel&&(this.rootNode=d)}traceFunctionCalls(d,f){if(d=d||"kernel",f=f||[],this.nativeFunctionNames.indexOf(d)>-1){let a=f.indexOf(d);if(a===-1)f.push(d);else{let t=f.splice(a,1)[0];f.push(t)}return f}let r=this.functionMap[d];if(r){let a=f.indexOf(d);if(a===-1){f.push(d),r.toString();for(let t=0;t<r.calledFunctions.length;++t)this.traceFunctionCalls(r.calledFunctions[t],f)}else{let t=f.splice(a,1)[0];f.push(t)}}return f}getPrototypeString(d){return this.getPrototypes(d).join(`\n`)}getPrototypes(d){return this.rootNode&&this.rootNode.toString(),d?this.getPrototypesFromFunctionNames(this.traceFunctionCalls(d,[]).reverse()):this.getPrototypesFromFunctionNames(Object.keys(this.functionMap))}getStringFromFunctionNames(d){let f=[];for(let r=0;r<d.length;++r)this.functionMap[d[r]]&&f.push(this.functionMap[d[r]].toString());return f.join(`\n`)}getPrototypesFromFunctionNames(d){let f=[];for(let r=0;r<d.length;++r){let a=d[r],t=this.nativeFunctionNames.indexOf(a);if(t>-1){f.push(this.nativeFunctions[t].source);continue}let n=this.functionMap[a];n&&f.push(n.toString())}return f}toJSON(){return this.traceFunctionCalls(this.rootNode.name).reverse().map(d=>{let f=this.nativeFunctions.indexOf(d);if(f>-1)return{name:d,source:this.nativeFunctions[f].source};if(this.functionMap[d])return this.functionMap[d].toJSON();throw new Error(`function ${d} not found`)})}fromJSON(d,f){this.functionMap={};for(let r=0;r<d.length;r++){let a=d[r];this.functionMap[a.settings.name]=new f(a.ast,a.settings)}return this}getString(d){return d?this.getStringFromFunctionNames(this.traceFunctionCalls(d).reverse()):this.getStringFromFunctionNames(Object.keys(this.functionMap))}lookupReturnType(d,f,r){if(f.type!=="CallExpression")throw new Error(`expected ast type of "CallExpression", but is ${f.type}`);if(this._isNativeFunction(d))return this._lookupNativeFunctionReturnType(d);if(this._isFunction(d)){let a=this._getFunction(d);if(a.returnType)return a.returnType;{for(let n=0;n<this.lookupChain.length;n++)if(this.lookupChain[n].ast===f){if(a.argumentTypes.length===0&&f.arguments.length>0){let g=f.arguments;for(let v=0;v<g.length;v++)this.lookupChain.push({name:r.name,ast:g[n],requestingNode:r}),a.argumentTypes[v]=r.getType(g[v]),this.lookupChain.pop();return a.returnType=a.getType(a.getJsAST())}throw new Error("circlical logic detected!")}this.lookupChain.push({name:r.name,ast:f,requestingNode:r});let t=a.getType(a.getJsAST());return this.lookupChain.pop(),a.returnType=t}}return null}_getFunction(d){return this._isFunction(d)||new Error(`Function ${d} not found`),this.functionMap[d]}_isFunction(d){return Boolean(this.functionMap[d])}_getNativeFunction(d){for(let f=0;f<this.nativeFunctions.length;f++)if(this.nativeFunctions[f].name===d)return this.nativeFunctions[f];return null}_isNativeFunction(d){return Boolean(this._getNativeFunction(d))}_lookupNativeFunctionReturnType(d){let f=this._getNativeFunction(d);if(f)return f.returnType;throw new Error(`Native function ${d} not found`)}lookupFunctionArgumentTypes(d){return this._isNativeFunction(d)?this._getNativeFunction(d).argumentTypes:this._isFunction(d)?this._getFunction(d).argumentTypes:null}lookupFunctionArgumentName(d,f){return this._getFunction(d).argumentNames[f]}lookupFunctionArgumentBitRatio(d,f){if(!this._isFunction(d))throw new Error("function not found");if(this.rootNode.name===d){let n=this.rootNode.argumentNames.indexOf(f);if(n!==-1)return this.rootNode.argumentBitRatios[n]}let r=this._getFunction(d),a=r.argumentNames.indexOf(f);if(a===-1)throw new Error("argument not found");let t=r.argumentBitRatios[a];if(typeof t!="number")throw new Error("argument bit ratio not found");return t}needsArgumentType(d,f){return this._isFunction(d)?!this._getFunction(d).argumentTypes[f]:!1}assignArgumentType(d,f,r,a){if(!this._isFunction(d))return;let t=this._getFunction(d);t.argumentTypes[f]||(t.argumentTypes[f]=r)}assignArgumentBitRatio(d,f,r,a){let t=this._getFunction(d);if(this._isNativeFunction(r))return null;let n=this._getFunction(r),g=t.argumentNames.indexOf(f);if(g===-1)throw new Error(`Argument ${f} not found in arguments from function ${d}`);let v=t.argumentBitRatios[g];if(typeof v!="number")throw new Error(`Bit ratio for argument ${f} not found in function ${d}`);n.argumentBitRatios||(n.argumentBitRatios=new Array(n.argumentNames.length));let k=n.argumentBitRatios[g];if(typeof k=="number"){if(k!==v)throw new Error(`Incompatible bit ratio found at function ${d} at argument ${f}`);return k}return n.argumentBitRatios[g]=v,v}trackFunctionCall(d,f,r){this.functionNodeDependencies[d]||(this.functionNodeDependencies[d]=new Set,this.functionCalls[d]=[]),this.functionNodeDependencies[d].add(f),this.functionCalls[d].push(r)}getKernelResultType(){return this.rootNode.returnType||this.rootNode.getType(this.rootNode.ast)}getSubKernelResultType(d){let f=this.subKernelNodes[d],r=!1;for(let a=0;a<this.rootNode.functionCalls.length;a++)this.rootNode.functionCalls[a].ast.callee.name===f.name&&(r=!0);if(!r)throw new Error(`SubKernel ${f.name} never called by kernel`);return f.returnType||f.getType(f.getJsAST())}getReturnTypes(){let d={[this.rootNode.name]:this.rootNode.getType(this.rootNode.ast)},f=this.traceFunctionCalls(this.rootNode.name);for(let r=0;r<f.length;r++){let a=f[r],t=this.functionMap[a];d[a]=t.getType(t.ast)}return d}}o.exports={FunctionBuilder:u}},{}],10:[function(i,o,m){let u=i("acorn"),{utils:c}=i("../utils"),{FunctionTracer:d}=i("./function-tracer");class f{constructor(t,n){if(!t&&!n.ast)throw new Error("source parameter is missing");if(n=n||{},this.source=t,this.ast=null,this.name=typeof t=="string"?n.isRootKernel?"kernel":n.name||c.getFunctionNameFromString(t):null,this.calledFunctions=[],this.constants={},this.constantTypes={},this.constantBitRatios={},this.isRootKernel=!1,this.isSubKernel=!1,this.debug=null,this.functions=null,this.identifiers=null,this.contexts=null,this.functionCalls=null,this.states=[],this.needsArgumentType=null,this.assignArgumentType=null,this.lookupReturnType=null,this.lookupFunctionArgumentTypes=null,this.lookupFunctionArgumentBitRatio=null,this.triggerImplyArgumentType=null,this.triggerImplyArgumentBitRatio=null,this.onNestedFunction=null,this.onFunctionCall=null,this.optimizeFloatMemory=null,this.precision=null,this.loopMaxIterations=null,this.argumentNames=typeof this.source=="string"?c.getArgumentNamesFromString(this.source):null,this.argumentTypes=[],this.argumentSizes=[],this.argumentBitRatios=null,this.returnType=null,this.output=[],this.plugins=null,this.leadingReturnStatement=null,this.followingReturnStatement=null,this.dynamicOutput=null,this.dynamicArguments=null,this.strictTypingChecking=!1,this.fixIntegerDivisionAccuracy=null,n)for(let g in n)!n.hasOwnProperty(g)||!this.hasOwnProperty(g)||(this[g]=n[g]);this.literalTypes={},this.validate(),this._string=null,this._internalVariableNames={}}validate(){if(typeof this.source!="string"&&!this.ast)throw new Error("this.source not a string");if(!this.ast&&!c.isFunctionString(this.source))throw new Error("this.source not a function string");if(!this.name)throw new Error("this.name could not be set");if(this.argumentTypes.length>0&&this.argumentTypes.length!==this.argumentNames.length)throw new Error(`argumentTypes count of ${this.argumentTypes.length} exceeds ${this.argumentNames.length}`);if(this.output.length<1)throw new Error("this.output is not big enough")}isIdentifierConstant(t){return this.constants?this.constants.hasOwnProperty(t):!1}isInput(t){return this.argumentTypes[this.argumentNames.indexOf(t)]==="Input"}pushState(t){this.states.push(t)}popState(t){if(this.state!==t)throw new Error(`Cannot popState ${t} when in ${this.state}`);this.states.pop()}isState(t){return this.state===t}get state(){return this.states[this.states.length-1]}astMemberExpressionUnroll(t){if(t.type==="Identifier")return t.name;if(t.type==="ThisExpression")return"this";if(t.type==="MemberExpression"&&t.object&&t.property)return t.object.hasOwnProperty("name")&&t.object.name!=="Math"?this.astMemberExpressionUnroll(t.property):this.astMemberExpressionUnroll(t.object)+"."+this.astMemberExpressionUnroll(t.property);if(t.hasOwnProperty("expressions")){let n=t.expressions[0];if(n.type==="Literal"&&n.value===0&&t.expressions.length===2)return this.astMemberExpressionUnroll(t.expressions[1])}throw this.astErrorOutput("Unknown astMemberExpressionUnroll",t)}getJsAST(t){if(this.ast)return this.ast;if(typeof this.source=="object")return this.traceFunctionAST(this.source),this.ast=this.source;if(t=t||u,t===null)throw new Error("Missing JS to AST parser");let n=Object.freeze(t.parse(`const parser_${this.name} = ${this.source};`,{locations:!0})),g=n.body[0].declarations[0].init;if(this.traceFunctionAST(g),!n)throw new Error("Failed to parse JS code");return this.ast=g}traceFunctionAST(t){let{contexts:n,declarations:g,functions:v,identifiers:k,functionCalls:T}=new d(t);this.contexts=n,this.identifiers=k,this.functionCalls=T,this.functions=v;for(let A=0;A<g.length;A++){let E=g[A],{ast:y,inForLoopInit:_,inForLoopTest:w}=E,{init:M}=y,N=this.getDependencies(M),b=null;if(_&&w)b="Integer";else if(M){let p=this.getType(M);switch(p){case"Integer":case"Float":case"Number":M.type==="MemberExpression"?b=p:b="Number";break;case"LiteralInteger":b="Number";break;default:b=p}}E.valueType=b,E.dependencies=N,E.isSafe=this.isSafeDependencies(N)}for(let A=0;A<v.length;A++)this.onNestedFunction(v[A],this.source)}getDeclaration(t){for(let n=0;n<this.identifiers.length;n++){let g=this.identifiers[n];if(t===g.ast)return g.declaration}return null}getVariableType(t){if(t.type!=="Identifier")throw new Error(`ast of ${t.type} not "Identifier"`);let n=null,g=this.argumentNames.indexOf(t.name);if(g===-1){let v=this.getDeclaration(t);if(v)return v.valueType}else{let v=this.argumentTypes[g];v&&(n=v)}if(!n&&this.strictTypingChecking)throw new Error(`Declaration of ${name} not found`);return n}getLookupType(t){if(!r.hasOwnProperty(t))throw new Error(`unknown typeLookupMap ${t}`);return r[t]}getConstantType(t){if(this.constantTypes[t]){let n=this.constantTypes[t];return n==="Float"?"Number":n}throw new Error(`Type for constant "${t}" not declared`)}toString(){return this._string?this._string:this._string=this.astGeneric(this.getJsAST(),[]).join("").trim()}toJSON(){let t={source:this.source,name:this.name,constants:this.constants,constantTypes:this.constantTypes,isRootKernel:this.isRootKernel,isSubKernel:this.isSubKernel,debug:this.debug,output:this.output,loopMaxIterations:this.loopMaxIterations,argumentNames:this.argumentNames,argumentTypes:this.argumentTypes,argumentSizes:this.argumentSizes,returnType:this.returnType,leadingReturnStatement:this.leadingReturnStatement,followingReturnStatement:this.followingReturnStatement};return{ast:this.ast,settings:t}}getType(t){if(Array.isArray(t))return this.getType(t[t.length-1]);switch(t.type){case"BlockStatement":return this.getType(t.body);case"ArrayExpression":switch(this.getType(t.elements[0])){case"Array(2)":case"Array(3)":case"Array(4)":return`Matrix(${t.elements.length})`}return`Array(${t.elements.length})`;case"Literal":let g=this.astKey(t);return this.literalTypes[g]?this.literalTypes[g]:Number.isInteger(t.value)?"LiteralInteger":t.value===!0||t.value===!1?"Boolean":"Number";case"AssignmentExpression":return this.getType(t.left);case"CallExpression":if(this.isAstMathFunction(t))return"Number";if(!t.callee||!t.callee.name){if(t.callee.type==="SequenceExpression"&&t.callee.expressions[t.callee.expressions.length-1].property.name){let E=t.callee.expressions[t.callee.expressions.length-1].property.name;return this.inferArgumentTypesIfNeeded(E,t.arguments),this.lookupReturnType(E,t,this)}if(this.getVariableSignature(t.callee,!0)==="this.color")return null;if(t.callee.type==="MemberExpression"&&t.callee.object&&t.callee.property&&t.callee.property.name&&t.arguments){let E=t.callee.property.name;return this.inferArgumentTypesIfNeeded(E,t.arguments),this.lookupReturnType(E,t,this)}throw this.astErrorOutput("Unknown call expression",t)}if(t.callee&&t.callee.name){let E=t.callee.name;return this.inferArgumentTypesIfNeeded(E,t.arguments),this.lookupReturnType(E,t,this)}throw this.astErrorOutput(`Unhandled getType Type "${t.type}"`,t);case"LogicalExpression":return"Boolean";case"BinaryExpression":switch(t.operator){case"%":case"/":if(this.fixIntegerDivisionAccuracy)return"Number";break;case">":case"<":return"Boolean";case"&":case"|":case"^":case"<<":case">>":case">>>":return"Integer"}let v=this.getType(t.left);if(this.isState("skip-literal-correction"))return v;if(v==="LiteralInteger"){let E=this.getType(t.right);return E==="LiteralInteger"?t.left.value%1===0?"Integer":"Float":E}return r[v]||v;case"UpdateExpression":return this.getType(t.argument);case"UnaryExpression":return t.operator==="~"?"Integer":this.getType(t.argument);case"VariableDeclaration":{let E=t.declarations,y;for(let _=0;_<E.length;_++){let w=E[_];y=this.getType(w)}if(!y)throw this.astErrorOutput("Unable to find type for declaration",t);return y}case"VariableDeclarator":let k=this.getDeclaration(t.id);if(!k)throw this.astErrorOutput("Unable to find declarator",t);if(!k.valueType)throw this.astErrorOutput("Unable to find declarator valueType",t);return k.valueType;case"Identifier":if(t.name==="Infinity")return"Number";if(this.isAstVariable(t)&&this.getVariableSignature(t)==="value")return this.getCheckVariableType(t);let T=this.findIdentifierOrigin(t);return T&&T.init?this.getType(T.init):null;case"ReturnStatement":return this.getType(t.argument);case"MemberExpression":if(this.isAstMathFunction(t)){switch(t.property.name){case"ceil":return"Integer";case"floor":return"Integer";case"round":return"Integer"}return"Number"}if(this.isAstVariable(t)){switch(this.getVariableSignature(t)){case"value[]":return this.getLookupType(this.getCheckVariableType(t.object));case"value[][]":return this.getLookupType(this.getCheckVariableType(t.object.object));case"value[][][]":return this.getLookupType(this.getCheckVariableType(t.object.object.object));case"value[][][][]":return this.getLookupType(this.getCheckVariableType(t.object.object.object.object));case"value.thread.value":case"this.thread.value":return"Integer";case"this.output.value":return this.dynamicOutput?"Integer":"LiteralInteger";case"this.constants.value":return this.getConstantType(t.property.name);case"this.constants.value[]":return this.getLookupType(this.getConstantType(t.object.property.name));case"this.constants.value[][]":return this.getLookupType(this.getConstantType(t.object.object.property.name));case"this.constants.value[][][]":return this.getLookupType(this.getConstantType(t.object.object.object.property.name));case"this.constants.value[][][][]":return this.getLookupType(this.getConstantType(t.object.object.object.object.property.name));case"fn()[]":case"fn()[][]":case"fn()[][][]":return this.getLookupType(this.getType(t.object));case"value.value":if(this.isAstMathVariable(t))return"Number";switch(t.property.name){case"r":case"g":case"b":case"a":return this.getLookupType(this.getCheckVariableType(t.object))}case"[][]":return"Number"}throw this.astErrorOutput("Unhandled getType MemberExpression",t)}throw this.astErrorOutput("Unhandled getType MemberExpression",t);case"ConditionalExpression":return this.getType(t.consequent);case"FunctionDeclaration":case"FunctionExpression":let A=this.findLastReturn(t.body);return A?this.getType(A):null;case"IfStatement":return this.getType(t.consequent);case"SequenceExpression":return this.getType(t.expressions[t.expressions.length-1]);default:throw this.astErrorOutput(`Unhandled getType Type "${t.type}"`,t)}}getCheckVariableType(t){let n=this.getVariableType(t);if(!n)throw this.astErrorOutput(`${t.type} is not defined`,t);return n}inferArgumentTypesIfNeeded(t,n){for(let g=0;g<n.length;g++){if(!this.needsArgumentType(t,g))continue;let v=this.getType(n[g]);if(!v)throw this.astErrorOutput(`Unable to infer argument ${g}`,n[g]);this.assignArgumentType(t,g,v)}}isAstMathVariable(t){let n=["E","PI","SQRT2","SQRT1_2","LN2","LN10","LOG2E","LOG10E"];return t.type==="MemberExpression"&&t.object&&t.object.type==="Identifier"&&t.object.name==="Math"&&t.property&&t.property.type==="Identifier"&&n.indexOf(t.property.name)>-1}isAstMathFunction(t){let n=["abs","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","clz32","cos","cosh","expm1","exp","floor","fround","imul","log","log2","log10","log1p","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc"];return t.type==="CallExpression"&&t.callee&&t.callee.type==="MemberExpression"&&t.callee.object&&t.callee.object.type==="Identifier"&&t.callee.object.name==="Math"&&t.callee.property&&t.callee.property.type==="Identifier"&&n.indexOf(t.callee.property.name)>-1}isAstVariable(t){return t.type==="Identifier"||t.type==="MemberExpression"}isSafe(t){return this.isSafeDependencies(this.getDependencies(t))}isSafeDependencies(t){return t&&t.every?t.every(n=>n.isSafe):!0}getDependencies(t,n,g){if(n||(n=[]),!t)return null;if(Array.isArray(t)){for(let v=0;v<t.length;v++)this.getDependencies(t[v],n,g);return n}switch(t.type){case"AssignmentExpression":return this.getDependencies(t.left,n,g),this.getDependencies(t.right,n,g),n;case"ConditionalExpression":return this.getDependencies(t.test,n,g),this.getDependencies(t.alternate,n,g),this.getDependencies(t.consequent,n,g),n;case"Literal":n.push({origin:"literal",value:t.value,isSafe:g===!0?!1:t.value>-1/0&&t.value<1/0&&!isNaN(t.value)});break;case"VariableDeclarator":return this.getDependencies(t.init,n,g);case"Identifier":let v=this.getDeclaration(t);if(v)n.push({name:t.name,origin:"declaration",isSafe:g?!1:this.isSafeDependencies(v.dependencies)});else if(this.argumentNames.indexOf(t.name)>-1)n.push({name:t.name,origin:"argument",isSafe:!1});else if(this.strictTypingChecking)throw new Error(`Cannot find identifier origin "${t.name}"`);break;case"FunctionDeclaration":return this.getDependencies(t.body.body[t.body.body.length-1],n,g);case"ReturnStatement":return this.getDependencies(t.argument,n);case"BinaryExpression":case"LogicalExpression":return g=t.operator==="/"||t.operator==="*",this.getDependencies(t.left,n,g),this.getDependencies(t.right,n,g),n;case"UnaryExpression":case"UpdateExpression":return this.getDependencies(t.argument,n,g);case"VariableDeclaration":return this.getDependencies(t.declarations,n,g);case"ArrayExpression":return n.push({origin:"declaration",isSafe:!0}),n;case"CallExpression":return n.push({origin:"function",isSafe:!0}),n;case"MemberExpression":let k=this.getMemberExpressionDetails(t);switch(k.signature){case"value[]":this.getDependencies(t.object,n,g);break;case"value[][]":this.getDependencies(t.object.object,n,g);break;case"value[][][]":this.getDependencies(t.object.object.object,n,g);break;case"this.output.value":this.dynamicOutput&&n.push({name:k.name,origin:"output",isSafe:!1});break}if(k)return k.property&&this.getDependencies(k.property,n,g),k.xProperty&&this.getDependencies(k.xProperty,n,g),k.yProperty&&this.getDependencies(k.yProperty,n,g),k.zProperty&&this.getDependencies(k.zProperty,n,g),n;case"SequenceExpression":return this.getDependencies(t.expressions,n,g);default:throw this.astErrorOutput(`Unhandled type ${t.type} in getDependencies`,t)}return n}getVariableSignature(t,n){if(!this.isAstVariable(t))throw new Error(`ast of type "${t.type}" is not a variable signature`);if(t.type==="Identifier")return"value";let g=[];for(;t;)t.computed?g.push("[]"):t.type==="ThisExpression"?g.unshift("this"):t.property&&t.property.name?t.property.name==="x"||t.property.name==="y"||t.property.name==="z"?g.unshift(n?"."+t.property.name:".value"):t.property.name==="constants"||t.property.name==="thread"||t.property.name==="output"?g.unshift("."+t.property.name):g.unshift(n?"."+t.property.name:".value"):t.name?g.unshift(n?t.name:"value"):t.callee&&t.callee.name?g.unshift(n?t.callee.name+"()":"fn()"):t.elements?g.unshift("[]"):g.unshift("unknown"),t=t.object;let v=g.join("");return n||["value","value[]","value[][]","value[][][]","value[][][][]","value.value","value.thread.value","this.thread.value","this.output.value","this.constants.value","this.constants.value[]","this.constants.value[][]","this.constants.value[][][]","this.constants.value[][][][]","fn()[]","fn()[][]","fn()[][][]","[][]"].indexOf(v)>-1?v:null}build(){return this.toString().length>0}astGeneric(t,n){if(t===null)throw this.astErrorOutput("NULL ast",t);if(Array.isArray(t)){for(let g=0;g<t.length;g++)this.astGeneric(t[g],n);return n}switch(t.type){case"FunctionDeclaration":return this.astFunctionDeclaration(t,n);case"FunctionExpression":return this.astFunctionExpression(t,n);case"ReturnStatement":return this.astReturnStatement(t,n);case"Literal":return this.astLiteral(t,n);case"BinaryExpression":return this.astBinaryExpression(t,n);case"Identifier":return this.astIdentifierExpression(t,n);case"AssignmentExpression":return this.astAssignmentExpression(t,n);case"ExpressionStatement":return this.astExpressionStatement(t,n);case"EmptyStatement":return this.astEmptyStatement(t,n);case"BlockStatement":return this.astBlockStatement(t,n);case"IfStatement":return this.astIfStatement(t,n);case"SwitchStatement":return this.astSwitchStatement(t,n);case"BreakStatement":return this.astBreakStatement(t,n);case"ContinueStatement":return this.astContinueStatement(t,n);case"ForStatement":return this.astForStatement(t,n);case"WhileStatement":return this.astWhileStatement(t,n);case"DoWhileStatement":return this.astDoWhileStatement(t,n);case"VariableDeclaration":return this.astVariableDeclaration(t,n);case"VariableDeclarator":return this.astVariableDeclarator(t,n);case"ThisExpression":return this.astThisExpression(t,n);case"SequenceExpression":return this.astSequenceExpression(t,n);case"UnaryExpression":return this.astUnaryExpression(t,n);case"UpdateExpression":return this.astUpdateExpression(t,n);case"LogicalExpression":return this.astLogicalExpression(t,n);case"MemberExpression":return this.astMemberExpression(t,n);case"CallExpression":return this.astCallExpression(t,n);case"ArrayExpression":return this.astArrayExpression(t,n);case"DebuggerStatement":return this.astDebuggerStatement(t,n);case"ConditionalExpression":return this.astConditionalExpression(t,n)}throw this.astErrorOutput("Unknown ast type : "+t.type,t)}astErrorOutput(t,n){if(typeof this.source!="string")return new Error(t);let g=c.getAstString(this.source,n),k=this.source.substr(n.start).split(/\\n/),T=k.length>0?k[k.length-1]:0;return new Error(`${t} on line ${k.length}, position ${T.length}:\n ${g}`)}astDebuggerStatement(t,n){return n}astConditionalExpression(t,n){if(t.type!=="ConditionalExpression")throw this.astErrorOutput("Not a conditional expression",t);return n.push("("),this.astGeneric(t.test,n),n.push("?"),this.astGeneric(t.consequent,n),n.push(":"),this.astGeneric(t.alternate,n),n.push(")"),n}astFunction(t,n){throw new Error(`"astFunction" not defined on ${this.constructor.name}`)}astFunctionDeclaration(t,n){return this.isChildFunction(t)?n:this.astFunction(t,n)}astFunctionExpression(t,n){return this.isChildFunction(t)?n:this.astFunction(t,n)}isChildFunction(t){for(let n=0;n<this.functions.length;n++)if(this.functions[n]===t)return!0;return!1}astReturnStatement(t,n){return n}astLiteral(t,n){return this.literalTypes[this.astKey(t)]="Number",n}astBinaryExpression(t,n){return n}astIdentifierExpression(t,n){return n}astAssignmentExpression(t,n){return n}astExpressionStatement(t,n){return this.astGeneric(t.expression,n),n.push(";"),n}astEmptyStatement(t,n){return n}astBlockStatement(t,n){return n}astIfStatement(t,n){return n}astSwitchStatement(t,n){return n}astBreakStatement(t,n){return n.push("break;"),n}astContinueStatement(t,n){return n.push(`continue;\n`),n}astForStatement(t,n){return n}astWhileStatement(t,n){return n}astDoWhileStatement(t,n){return n}astVariableDeclarator(t,n){return this.astGeneric(t.id,n),t.init!==null&&(n.push("="),this.astGeneric(t.init,n)),n}astThisExpression(t,n){return n}astSequenceExpression(t,n){let{expressions:g}=t,v=[];for(let k=0;k<g.length;k++){let T=g[k],A=[];this.astGeneric(T,A),v.push(A.join(""))}return v.length>1?n.push("(",v.join(","),")"):n.push(v[0]),n}astUnaryExpression(t,n){return this.checkAndUpconvertBitwiseUnary(t,n)||(t.prefix?(n.push(t.operator),this.astGeneric(t.argument,n)):(this.astGeneric(t.argument,n),n.push(t.operator))),n}checkAndUpconvertBitwiseUnary(t,n){}astUpdateExpression(t,n){return t.prefix?(n.push(t.operator),this.astGeneric(t.argument,n)):(this.astGeneric(t.argument,n),n.push(t.operator)),n}astLogicalExpression(t,n){return n.push("("),this.astGeneric(t.left,n),n.push(t.operator),this.astGeneric(t.right,n),n.push(")"),n}astMemberExpression(t,n){return n}astCallExpression(t,n){return n}astArrayExpression(t,n){return n}getMemberExpressionDetails(t){if(t.type!=="MemberExpression")throw this.astErrorOutput(`Expression ${t.type} not a MemberExpression`,t);let n=null,g=null,v=this.getVariableSignature(t);switch(v){case"value":return null;case"value.thread.value":case"this.thread.value":case"this.output.value":return{signature:v,type:"Integer",name:t.property.name};case"value[]":if(typeof t.object.name!="string")throw this.astErrorOutput("Unexpected expression",t);return n=t.object.name,{name:n,origin:"user",signature:v,type:this.getVariableType(t.object),xProperty:t.property};case"value[][]":if(typeof t.object.object.name!="string")throw this.astErrorOutput("Unexpected expression",t);return n=t.object.object.name,{name:n,origin:"user",signature:v,type:this.getVariableType(t.object.object),yProperty:t.object.property,xProperty:t.property};case"value[][][]":if(typeof t.object.object.object.name!="string")throw this.astErrorOutput("Unexpected expression",t);return n=t.object.object.object.name,{name:n,origin:"user",signature:v,type:this.getVariableType(t.object.object.object),zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"value[][][][]":if(typeof t.object.object.object.object.name!="string")throw this.astErrorOutput("Unexpected expression",t);return n=t.object.object.object.object.name,{name:n,origin:"user",signature:v,type:this.getVariableType(t.object.object.object.object),zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"value.value":if(typeof t.property.name!="string")throw this.astErrorOutput("Unexpected expression",t);if(this.isAstMathVariable(t))return n=t.property.name,{name:n,origin:"Math",type:"Number",signature:v};switch(t.property.name){case"r":case"g":case"b":case"a":return n=t.object.name,{name:n,property:t.property.name,origin:"user",signature:v,type:"Number"};default:throw this.astErrorOutput("Unexpected expression",t)}case"this.constants.value":if(typeof t.property.name!="string")throw this.astErrorOutput("Unexpected expression",t);if(n=t.property.name,g=this.getConstantType(n),!g)throw this.astErrorOutput("Constant has no type",t);return{name:n,type:g,origin:"constants",signature:v};case"this.constants.value[]":if(typeof t.object.property.name!="string")throw this.astErrorOutput("Unexpected expression",t);if(n=t.object.property.name,g=this.getConstantType(n),!g)throw this.astErrorOutput("Constant has no type",t);return{name:n,type:g,origin:"constants",signature:v,xProperty:t.property};case"this.constants.value[][]":{if(typeof t.object.object.property.name!="string")throw this.astErrorOutput("Unexpected expression",t);if(n=t.object.object.property.name,g=this.getConstantType(n),!g)throw this.astErrorOutput("Constant has no type",t);return{name:n,type:g,origin:"constants",signature:v,yProperty:t.object.property,xProperty:t.property}}case"this.constants.value[][][]":{if(typeof t.object.object.object.property.name!="string")throw this.astErrorOutput("Unexpected expression",t);if(n=t.object.object.object.property.name,g=this.getConstantType(n),!g)throw this.astErrorOutput("Constant has no type",t);return{name:n,type:g,origin:"constants",signature:v,zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property}}case"fn()[]":case"fn()[][]":case"[][]":return{signature:v,property:t.property};default:throw this.astErrorOutput("Unexpected expression",t)}}findIdentifierOrigin(t){let n=[this.ast];for(;n.length>0;){let g=n[0];if(g.type==="VariableDeclarator"&&g.id&&g.id.name&&g.id.name===t.name)return g;if(n.shift(),g.argument)n.push(g.argument);else if(g.body)n.push(g.body);else if(g.declarations)n.push(g.declarations);else if(Array.isArray(g))for(let v=0;v<g.length;v++)n.push(g[v])}return null}findLastReturn(t){let n=[t||this.ast];for(;n.length>0;){let g=n.pop();if(g.type==="ReturnStatement")return g;if(g.type!=="FunctionDeclaration")if(g.argument)n.push(g.argument);else if(g.body)n.push(g.body);else if(g.declarations)n.push(g.declarations);else if(Array.isArray(g))for(let v=0;v<g.length;v++)n.push(g[v]);else g.consequent?n.push(g.consequent):g.cases&&n.push(g.cases)}return null}getInternalVariableName(t){return this._internalVariableNames.hasOwnProperty(t)||(this._internalVariableNames[t]=0),this._internalVariableNames[t]++,this._internalVariableNames[t]===1?t:t+this._internalVariableNames[t]}astKey(t,n=","){if(!t.start||!t.end)throw new Error("AST start and end needed");return`${t.start}${n}${t.end}`}}let r={Number:"Number",Float:"Float",Integer:"Integer",Array:"Number","Array(2)":"Number","Array(3)":"Number","Array(4)":"Number","Matrix(2)":"Number","Matrix(3)":"Number","Matrix(4)":"Number",Array2D:"Number",Array3D:"Number",Input:"Number",HTMLCanvas:"Array(4)",HTMLImage:"Array(4)",HTMLVideo:"Array(4)",HTMLImageArray:"Array(4)",NumberTexture:"Number",MemoryOptimizedNumberTexture:"Number","Array1D(2)":"Array(2)","Array1D(3)":"Array(3)","Array1D(4)":"Array(4)","Array2D(2)":"Array(2)","Array2D(3)":"Array(3)","Array2D(4)":"Array(4)","Array3D(2)":"Array(2)","Array3D(3)":"Array(3)","Array3D(4)":"Array(4)","ArrayTexture(1)":"Number","ArrayTexture(2)":"Array(2)","ArrayTexture(3)":"Array(3)","ArrayTexture(4)":"Array(4)"};o.exports={FunctionNode:f}},{"../utils":114,"./function-tracer":11,acorn:1}],11:[function(i,o,m){let{utils:u}=i("../utils");function c(r){return r.length>0?r[r.length-1]:null}let d={trackIdentifiers:"trackIdentifiers",memberExpression:"memberExpression",inForLoopInit:"inForLoopInit"};class f{constructor(a){this.runningContexts=[],this.functionContexts=[],this.contexts=[],this.functionCalls=[],this.declarations=[],this.identifiers=[],this.functions=[],this.returnStatements=[],this.trackedIdentifiers=null,this.states=[],this.newFunctionContext(),this.scan(a)}isState(a){return this.states[this.states.length-1]===a}hasState(a){return this.states.indexOf(a)>-1}pushState(a){this.states.push(a)}popState(a){if(this.isState(a))this.states.pop();else throw new Error(`Cannot pop the non-active state "${a}"`)}get currentFunctionContext(){return c(this.functionContexts)}get currentContext(){return c(this.runningContexts)}newFunctionContext(){let a={"@contextType":"function"};this.contexts.push(a),this.functionContexts.push(a)}newContext(a){let t=Object.assign({"@contextType":"const/let"},this.currentContext);this.contexts.push(t),this.runningContexts.push(t),a();let{currentFunctionContext:n}=this;for(let g in n)!n.hasOwnProperty(g)||t.hasOwnProperty(g)||(t[g]=n[g]);return this.runningContexts.pop(),t}useFunctionContext(a){let t=c(this.functionContexts);this.runningContexts.push(t),a(),this.runningContexts.pop()}getIdentifiers(a){let t=this.trackedIdentifiers=[];return this.pushState(d.trackIdentifiers),a(),this.trackedIdentifiers=null,this.popState(d.trackIdentifiers),t}getDeclaration(a){let{currentContext:t,currentFunctionContext:n,runningContexts:g}=this,v=t[a]||n[a]||null;if(!v&&t===n&&g.length>0){let k=g[g.length-2];if(k[a])return k[a]}return v}scan(a){if(!!a){if(Array.isArray(a)){for(let t=0;t<a.length;t++)this.scan(a[t]);return}switch(a.type){case"Program":this.useFunctionContext(()=>{this.scan(a.body)});break;case"BlockStatement":this.newContext(()=>{this.scan(a.body)});break;case"AssignmentExpression":case"LogicalExpression":this.scan(a.left),this.scan(a.right);break;case"BinaryExpression":this.scan(a.left),this.scan(a.right);break;case"UpdateExpression":if(a.operator==="++"){let t=this.getDeclaration(a.argument.name);t&&(t.suggestedType="Integer")}this.scan(a.argument);break;case"UnaryExpression":this.scan(a.argument);break;case"VariableDeclaration":a.kind==="var"?this.useFunctionContext(()=>{a.declarations=u.normalizeDeclarations(a),this.scan(a.declarations)}):(a.declarations=u.normalizeDeclarations(a),this.scan(a.declarations));break;case"VariableDeclarator":{let{currentContext:t}=this,n=this.hasState(d.inForLoopInit),g={ast:a,context:t,name:a.id.name,origin:"declaration",inForLoopInit:n,inForLoopTest:null,assignable:t===this.currentFunctionContext||!n&&!t.hasOwnProperty(a.id.name),suggestedType:null,valueType:null,dependencies:null,isSafe:null};t[a.id.name]||(t[a.id.name]=g),this.declarations.push(g),this.scan(a.id),this.scan(a.init);break}case"FunctionExpression":case"FunctionDeclaration":this.runningContexts.length===0?this.scan(a.body):this.functions.push(a);break;case"IfStatement":this.scan(a.test),this.scan(a.consequent),a.alternate&&this.scan(a.alternate);break;case"ForStatement":{let t,n=this.newContext(()=>{this.pushState(d.inForLoopInit),this.scan(a.init),this.popState(d.inForLoopInit),t=this.getIdentifiers(()=>{this.scan(a.test)}),this.scan(a.update),this.newContext(()=>{this.scan(a.body)})});if(t)for(let g in n)g!=="@contextType"&&t.indexOf(g)>-1&&(n[g].inForLoopTest=!0);break}case"DoWhileStatement":case"WhileStatement":this.newContext(()=>{this.scan(a.body),this.scan(a.test)});break;case"Identifier":{this.isState(d.trackIdentifiers)&&this.trackedIdentifiers.push(a.name),this.identifiers.push({context:this.currentContext,declaration:this.getDeclaration(a.name),ast:a});break}case"ReturnStatement":this.returnStatements.push(a),this.scan(a.argument);break;case"MemberExpression":this.pushState(d.memberExpression),this.scan(a.object),this.scan(a.property),this.popState(d.memberExpression);break;case"ExpressionStatement":this.scan(a.expression);break;case"SequenceExpression":this.scan(a.expressions);break;case"CallExpression":this.functionCalls.push({context:this.currentContext,ast:a}),this.scan(a.arguments);break;case"ArrayExpression":this.scan(a.elements);break;case"ConditionalExpression":this.scan(a.test),this.scan(a.alternate),this.scan(a.consequent);break;case"SwitchStatement":this.scan(a.discriminant),this.scan(a.cases);break;case"SwitchCase":this.scan(a.test),this.scan(a.consequent);break;case"ThisExpression":case"Literal":case"DebuggerStatement":case"EmptyStatement":case"BreakStatement":case"ContinueStatement":break;default:throw new Error(`unhandled type "${a.type}"`)}}}}o.exports={FunctionTracer:f}},{"../utils":114}],12:[function(i,o,m){let{glWiretap:u}=i("gl-wiretap"),{utils:c}=i("../../utils");function d(g){return g.toString().replace("=>","").replace(/^function /,"").replace(/utils[.]/g,"/*utils.*/")}function f(g,v,k,T,A){k.built||k.build.apply(k,v),v=v?Array.from(v).map(ee=>{switch(typeof ee){case"boolean":return new Boolean(ee);case"number":return new Number(ee);default:return ee}}):null;let E=[],y=[],_=u(k.context,{useTrackablePrimitives:!0,onReadPixels:ee=>{if(Z.subKernels){if(!w)y.push(`    const result = { result: ${r(ee,Z)} };`),w=!0;else{let ce=Z.subKernels[M++].property;y.push(`    result${isNaN(ce)?"."+ce:`[${ce}]`} = ${r(ee,Z)};`)}M===Z.subKernels.length&&y.push("    return result;");return}ee?y.push(`    return ${r(ee,Z)};`):y.push("    return null;")},onUnrecognizedArgumentLookup:ee=>{let ce=n(ee,Z.kernelArguments,[],_,E);if(ce)return ce;let fe=n(ee,Z.kernelConstants,L?Object.keys(L).map(me=>L[me]):[],_,E);return fe||null}}),w=!1,M=0,{source:N,canvas:b,output:p,pipeline:C,graphical:F,loopMaxIterations:P,constants:L,optimizeFloatMemory:$,precision:G,fixIntegerDivisionAccuracy:O,functions:Y,nativeFunctions:W,subKernels:K,immutable:J,argumentTypes:Q,constantTypes:te,kernelArguments:H,kernelConstants:B,tactic:he}=k,Z=new g(N,{canvas:b,context:_,checkContext:!1,output:p,pipeline:C,graphical:F,loopMaxIterations:P,constants:L,optimizeFloatMemory:$,precision:G,fixIntegerDivisionAccuracy:O,functions:Y,nativeFunctions:W,subKernels:K,immutable:J,argumentTypes:Q,constantTypes:te,tactic:he}),ie=[];if(_.setIndent(2),Z.build.apply(Z,v),ie.push(_.toString()),_.reset(),Z.kernelArguments.forEach((ee,ce)=>{switch(ee.type){case"Integer":case"Boolean":case"Number":case"Float":case"Array":case"Array(2)":case"Array(3)":case"Array(4)":case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":_.insertVariable(`uploadValue_${ee.name}`,ee.uploadValue);break;case"HTMLImageArray":for(let fe=0;fe<v[ce].length;fe++){let me=v[ce];_.insertVariable(`uploadValue_${ee.name}[${fe}]`,me[fe])}break;case"Input":_.insertVariable(`uploadValue_${ee.name}`,ee.uploadValue);break;case"MemoryOptimizedNumberTexture":case"NumberTexture":case"Array1D(2)":case"Array1D(3)":case"Array1D(4)":case"Array2D(2)":case"Array2D(3)":case"Array2D(4)":case"Array3D(2)":case"Array3D(3)":case"Array3D(4)":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":_.insertVariable(`uploadValue_${ee.name}`,v[ce].texture);break;default:throw new Error(`unhandled kernelArgumentType insertion for glWiretap of type ${ee.type}`)}}),ie.push("/** start of injected functions **/"),ie.push(`function ${d(c.flattenTo)}`),ie.push(`function ${d(c.flatten2dArrayTo)}`),ie.push(`function ${d(c.flatten3dArrayTo)}`),ie.push(`function ${d(c.flatten4dArrayTo)}`),ie.push(`function ${d(c.isArray)}`),Z.renderOutput!==Z.renderTexture&&Z.formatValues&&ie.push(`  const renderOutput = function ${d(Z.formatValues)};`),ie.push("/** end of injected functions **/"),ie.push(`  const innerKernel = function (${Z.kernelArguments.map(ee=>ee.varName).join(", ")}) {`),_.setIndent(4),Z.run.apply(Z,v),Z.renderKernels?Z.renderKernels():Z.renderOutput&&Z.renderOutput(),ie.push("    /** start setup uploads for kernel values **/"),Z.kernelArguments.forEach(ee=>{ie.push("    "+ee.getStringValueHandler().split(`\n`).join(`\n    `))}),ie.push("    /** end setup uploads for kernel values **/"),ie.push(_.toString()),Z.renderOutput===Z.renderTexture){_.reset();let ee=_.getContextVariableName(Z.framebuffer);if(Z.renderKernels){let ce=Z.renderKernels(),fe=_.getContextVariableName(Z.texture.texture);ie.push(`    return {\n            result: {\n              texture: ${fe},\n              type: \'${ce.result.type}\',\n              toArray: ${t(ce.result,fe,ee)}\n            },`);let{subKernels:me,mappedTextures:ne}=Z;for(let ue=0;ue<me.length;ue++){let xe=ne[ue],_e=me[ue],ke=ce[_e.property],$e=_.getContextVariableName(xe.texture);ie.push(`\n            ${_e.property}: {\n              texture: ${$e},\n              type: \'${ke.type}\',\n              toArray: ${t(ke,$e,ee)}\n            },`)}ie.push("    };")}else{let ce=Z.renderOutput(),fe=_.getContextVariableName(Z.texture.texture);ie.push(`    return {\n              texture: ${fe},\n              type: \'${ce.type}\',\n              toArray: ${t(ce,fe,ee)}\n            };`)}}ie.push(`    ${A?`\n`+A+"    ":""}`),ie.push(y.join(`\n`)),ie.push("  };"),Z.graphical&&(ie.push(a(Z)),ie.push("  innerKernel.getPixels = getPixels;")),ie.push("  return innerKernel;");let Se=[];return B.forEach(ee=>{Se.push(`${ee.getStringValueHandler()}`)}),`function kernel(settings) {\n        const { context, constants } = settings;\n        ${Se.join("")}\n        ${T||""}\n      ${ie.join(`\n`)}\n      }`}function r(g,v){let k=v.precision==="single"?g:`new Float32Array(${g}.buffer)`;return v.output[2]?`renderOutput(${k}, ${v.output[0]}, ${v.output[1]}, ${v.output[2]})`:v.output[1]?`renderOutput(${k}, ${v.output[0]}, ${v.output[1]})`:`renderOutput(${k}, ${v.output[0]})`}function a(g){let v=g.getPixels.toString(),k=!/^function/.test(v);return c.flattenFunctionToString(`${k?"function ":""}${v}`,{findDependency:(T,A)=>T==="utils"?`const ${A} = ${c[A].toString()};`:null,thisLookup:T=>{if(T==="context")return null;if(g.hasOwnProperty(T))return JSON.stringify(g[T]);throw new Error(`unhandled thisLookup ${T}`)}})}function t(g,v,k){let T=g.toArray.toString(),A=!/^function/.test(T),E=c.flattenFunctionToString(`${A?"function ":""}${T}`,{findDependency:(y,_)=>{if(y==="utils")return`const ${_} = ${c[_].toString()};`;if(y==="this")return _==="framebuffer"?"":`${A?"function ":""}${g[_].toString()}`;throw new Error("unhandled fromObject")},thisLookup:(y,_)=>{if(y==="texture")return v;if(y==="context")return _?null:"gl";if(g.hasOwnProperty(y))return JSON.stringify(g[y]);throw new Error(`unhandled thisLookup ${y}`)}});return`() => {\n        function framebuffer() { return ${k}; };\n        ${E}\n        return toArray();\n        }`}function n(g,v,k,T,A){if(g===null||v===null)return null;switch(typeof g){case"boolean":case"number":return null}if(typeof HTMLImageElement<"u"&&g instanceof HTMLImageElement)for(let E=0;E<v.length;E++){let y=v[E];if(y.type!=="HTMLImageArray"&&y||y.uploadValue!==g)continue;let _=k[E].indexOf(g);if(_===-1)continue;let w=`uploadValue_${y.name}[${_}]`;return T.insertVariable(w,g),w}for(let E=0;E<v.length;E++){let y=v[E];if(g!==y.uploadValue)continue;let _=`uploadValue_${y.name}`;return T.insertVariable(_,y),_}return null}o.exports={glKernelString:f}},{"../../utils":114,"gl-wiretap":3}],13:[function(i,o,m){let{Kernel:u}=i("../kernel"),{utils:c}=i("../../utils"),{GLTextureArray2Float:d}=i("./texture/array-2-float"),{GLTextureArray2Float2D:f}=i("./texture/array-2-float-2d"),{GLTextureArray2Float3D:r}=i("./texture/array-2-float-3d"),{GLTextureArray3Float:a}=i("./texture/array-3-float"),{GLTextureArray3Float2D:t}=i("./texture/array-3-float-2d"),{GLTextureArray3Float3D:n}=i("./texture/array-3-float-3d"),{GLTextureArray4Float:g}=i("./texture/array-4-float"),{GLTextureArray4Float2D:v}=i("./texture/array-4-float-2d"),{GLTextureArray4Float3D:k}=i("./texture/array-4-float-3d"),{GLTextureFloat:T}=i("./texture/float"),{GLTextureFloat2D:A}=i("./texture/float-2d"),{GLTextureFloat3D:E}=i("./texture/float-3d"),{GLTextureMemoryOptimized:y}=i("./texture/memory-optimized"),{GLTextureMemoryOptimized2D:_}=i("./texture/memory-optimized-2d"),{GLTextureMemoryOptimized3D:w}=i("./texture/memory-optimized-3d"),{GLTextureUnsigned:M}=i("./texture/unsigned"),{GLTextureUnsigned2D:N}=i("./texture/unsigned-2d"),{GLTextureUnsigned3D:b}=i("./texture/unsigned-3d"),{GLTextureGraphical:p}=i("./texture/graphical");class C extends u{static get mode(){return"gpu"}static getIsFloatRead(){let L=`function kernelFunction() {\n            return 1;\n          }`,$=new this(L,{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[1],precision:"single",returnType:"Number",tactic:"speed"});$.build(),$.run();let G=$.renderOutput();return $.destroy(!0),G[0]===1}static getIsIntegerDivisionAccurate(){function L(Y,W){return Y[this.thread.x]/W[this.thread.x]}let $=new this(L.toString(),{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[2],returnType:"Number",precision:"unsigned",tactic:"speed"}),G=[[6,6030401],[3,3991]];$.build.apply($,G),$.run.apply($,G);let O=$.renderOutput();return $.destroy(!0),O[0]===2&&O[1]===1511}static getIsSpeedTacticSupported(){function L(Y){return Y[this.thread.x]}let $=new this(L.toString(),{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[4],returnType:"Number",precision:"unsigned",tactic:"speed"}),G=[[0,1,2,3]];$.build.apply($,G),$.run.apply($,G);let O=$.renderOutput();return $.destroy(!0),Math.round(O[0])===0&&Math.round(O[1])===1&&Math.round(O[2])===2&&Math.round(O[3])===3}static get testCanvas(){throw new Error(`"testCanvas" not defined on ${this.name}`)}static get testContext(){throw new Error(`"testContext" not defined on ${this.name}`)}static getFeatures(){let L=this.testContext,$=this.getIsDrawBuffers();return Object.freeze({isFloatRead:this.getIsFloatRead(),isIntegerDivisionAccurate:this.getIsIntegerDivisionAccurate(),isSpeedTacticSupported:this.getIsSpeedTacticSupported(),isTextureFloat:this.getIsTextureFloat(),isDrawBuffers:$,kernelMap:$,channelCount:this.getChannelCount(),maxTextureSize:this.getMaxTextureSize(),lowIntPrecision:L.getShaderPrecisionFormat(L.FRAGMENT_SHADER,L.LOW_INT),lowFloatPrecision:L.getShaderPrecisionFormat(L.FRAGMENT_SHADER,L.LOW_FLOAT),mediumIntPrecision:L.getShaderPrecisionFormat(L.FRAGMENT_SHADER,L.MEDIUM_INT),mediumFloatPrecision:L.getShaderPrecisionFormat(L.FRAGMENT_SHADER,L.MEDIUM_FLOAT),highIntPrecision:L.getShaderPrecisionFormat(L.FRAGMENT_SHADER,L.HIGH_INT),highFloatPrecision:L.getShaderPrecisionFormat(L.FRAGMENT_SHADER,L.HIGH_FLOAT)})}static setupFeatureChecks(){throw new Error(`"setupFeatureChecks" not defined on ${this.name}`)}static getSignature(L,$){return L.getVariablePrecisionString()+($.length>0?":"+$.join(","):"")}setFixIntegerDivisionAccuracy(L){return this.fixIntegerDivisionAccuracy=L,this}setPrecision(L){return this.precision=L,this}setFloatTextures(L){return c.warnDeprecated("method","setFloatTextures","setOptimizeFloatMemory"),this.floatTextures=L,this}static nativeFunctionArguments(L){let $=[],G=[],O=[],Y=/^[a-zA-Z_]/,W=/[a-zA-Z_0-9]/,K=0,J=null,Q=null;for(;K<L.length;){let te=L[K],H=L[K+1],B=O.length>0?O[O.length-1]:null;if(B==="FUNCTION_ARGUMENTS"&&te==="/"&&H==="*"){O.push("MULTI_LINE_COMMENT"),K+=2;continue}else if(B==="MULTI_LINE_COMMENT"&&te==="*"&&H==="/"){O.pop(),K+=2;continue}else if(B==="FUNCTION_ARGUMENTS"&&te==="/"&&H==="/"){O.push("COMMENT"),K+=2;continue}else if(B==="COMMENT"&&te===`\n`){O.pop(),K++;continue}else if(B===null&&te==="("){O.push("FUNCTION_ARGUMENTS"),K++;continue}else if(B==="FUNCTION_ARGUMENTS"){if(te===")"){O.pop();break}if(te==="f"&&H==="l"&&L[K+2]==="o"&&L[K+3]==="a"&&L[K+4]==="t"&&L[K+5]===" "){O.push("DECLARE_VARIABLE"),Q="float",J="",K+=6;continue}else if(te==="i"&&H==="n"&&L[K+2]==="t"&&L[K+3]===" "){O.push("DECLARE_VARIABLE"),Q="int",J="",K+=4;continue}else if(te==="v"&&H==="e"&&L[K+2]==="c"&&L[K+3]==="2"&&L[K+4]===" "){O.push("DECLARE_VARIABLE"),Q="vec2",J="",K+=5;continue}else if(te==="v"&&H==="e"&&L[K+2]==="c"&&L[K+3]==="3"&&L[K+4]===" "){O.push("DECLARE_VARIABLE"),Q="vec3",J="",K+=5;continue}else if(te==="v"&&H==="e"&&L[K+2]==="c"&&L[K+3]==="4"&&L[K+4]===" "){O.push("DECLARE_VARIABLE"),Q="vec4",J="",K+=5;continue}}else if(B==="DECLARE_VARIABLE"){if(J===""){if(te===" "){K++;continue}if(!Y.test(te))throw new Error("variable name is not expected string")}J+=te,W.test(H)||(O.pop(),G.push(J),$.push(F[Q]))}K++}if(O.length>0)throw new Error("GLSL function was not parsable");return{argumentNames:G,argumentTypes:$}}static nativeFunctionReturnType(L){return F[L.match(/int|float|vec[2-4]/)[0]]}static combineKernels(L,$){L.apply(null,arguments);let{texSize:G,context:O,threadDim:Y}=$.texSize,W;if($.precision==="single"){let K=G[0],J=Math.ceil(G[1]/4);W=new Float32Array(K*J*4*4),O.readPixels(0,0,K,J*4,O.RGBA,O.FLOAT,W)}else{let K=new Uint8Array(G[0]*G[1]*4);O.readPixels(0,0,G[0],G[1],O.RGBA,O.UNSIGNED_BYTE,K),W=new Float32Array(K.buffer)}if(W=W.subarray(0,Y[0]*Y[1]*Y[2]),$.output.length===1)return W;if($.output.length===2)return c.splitArray(W,$.output[0]);if($.output.length===3)return c.splitArray(W,$.output[0]*$.output[1]).map(function(J){return c.splitArray(J,$.output[0])})}constructor(L,$){super(L,$),this.transferValues=null,this.formatValues=null,this.TextureConstructor=null,this.renderOutput=null,this.renderRawOutput=null,this.texSize=null,this.translatedSource=null,this.compiledFragmentShader=null,this.compiledVertexShader=null,this.switchingKernels=null,this._textureSwitched=null,this._mappedTextureSwitched=null}checkTextureSize(){let{features:L}=this.constructor;if(this.texSize[0]>L.maxTextureSize||this.texSize[1]>L.maxTextureSize)throw new Error(`Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${L.maxTextureSize},${L.maxTextureSize}]`)}translateSource(){throw new Error(`"translateSource" not defined on ${this.constructor.name}`)}pickRenderStrategy(L){if(this.graphical)return this.renderRawOutput=this.readPackedPixelsToUint8Array,this.transferValues=$=>$,this.TextureConstructor=p,null;if(this.precision==="unsigned")if(this.renderRawOutput=this.readPackedPixelsToUint8Array,this.transferValues=this.readPackedPixelsToFloat32Array,this.pipeline)switch(this.renderOutput=this.renderTexture,this.subKernels!==null&&(this.renderKernels=this.renderKernelsToTextures),this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.output[2]>0?(this.TextureConstructor=b,null):this.output[1]>0?(this.TextureConstructor=N,null):(this.TextureConstructor=M,null);case"Array(2)":case"Array(3)":case"Array(4)":return this.requestFallback(L)}else switch(this.subKernels!==null&&(this.renderKernels=this.renderKernelsToArrays),this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.renderOutput=this.renderValues,this.output[2]>0?(this.TextureConstructor=b,this.formatValues=c.erect3DPackedFloat,null):this.output[1]>0?(this.TextureConstructor=N,this.formatValues=c.erect2DPackedFloat,null):(this.TextureConstructor=M,this.formatValues=c.erectPackedFloat,null);case"Array(2)":case"Array(3)":case"Array(4)":return this.requestFallback(L)}else if(this.precision==="single"){if(this.renderRawOutput=this.readFloatPixelsToFloat32Array,this.transferValues=this.readFloatPixelsToFloat32Array,this.pipeline)switch(this.renderOutput=this.renderTexture,this.subKernels!==null&&(this.renderKernels=this.renderKernelsToTextures),this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.optimizeFloatMemory?this.output[2]>0?(this.TextureConstructor=w,null):this.output[1]>0?(this.TextureConstructor=_,null):(this.TextureConstructor=y,null):this.output[2]>0?(this.TextureConstructor=E,null):this.output[1]>0?(this.TextureConstructor=A,null):(this.TextureConstructor=T,null);case"Array(2)":return this.output[2]>0?(this.TextureConstructor=r,null):this.output[1]>0?(this.TextureConstructor=f,null):(this.TextureConstructor=d,null);case"Array(3)":return this.output[2]>0?(this.TextureConstructor=n,null):this.output[1]>0?(this.TextureConstructor=t,null):(this.TextureConstructor=a,null);case"Array(4)":return this.output[2]>0?(this.TextureConstructor=k,null):this.output[1]>0?(this.TextureConstructor=v,null):(this.TextureConstructor=g,null)}if(this.renderOutput=this.renderValues,this.subKernels!==null&&(this.renderKernels=this.renderKernelsToArrays),this.optimizeFloatMemory)switch(this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.output[2]>0?(this.TextureConstructor=w,this.formatValues=c.erectMemoryOptimized3DFloat,null):this.output[1]>0?(this.TextureConstructor=_,this.formatValues=c.erectMemoryOptimized2DFloat,null):(this.TextureConstructor=y,this.formatValues=c.erectMemoryOptimizedFloat,null);case"Array(2)":return this.output[2]>0?(this.TextureConstructor=r,this.formatValues=c.erect3DArray2,null):this.output[1]>0?(this.TextureConstructor=f,this.formatValues=c.erect2DArray2,null):(this.TextureConstructor=d,this.formatValues=c.erectArray2,null);case"Array(3)":return this.output[2]>0?(this.TextureConstructor=n,this.formatValues=c.erect3DArray3,null):this.output[1]>0?(this.TextureConstructor=t,this.formatValues=c.erect2DArray3,null):(this.TextureConstructor=a,this.formatValues=c.erectArray3,null);case"Array(4)":return this.output[2]>0?(this.TextureConstructor=k,this.formatValues=c.erect3DArray4,null):this.output[1]>0?(this.TextureConstructor=v,this.formatValues=c.erect2DArray4,null):(this.TextureConstructor=g,this.formatValues=c.erectArray4,null)}else switch(this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.output[2]>0?(this.TextureConstructor=E,this.formatValues=c.erect3DFloat,null):this.output[1]>0?(this.TextureConstructor=A,this.formatValues=c.erect2DFloat,null):(this.TextureConstructor=T,this.formatValues=c.erectFloat,null);case"Array(2)":return this.output[2]>0?(this.TextureConstructor=r,this.formatValues=c.erect3DArray2,null):this.output[1]>0?(this.TextureConstructor=f,this.formatValues=c.erect2DArray2,null):(this.TextureConstructor=d,this.formatValues=c.erectArray2,null);case"Array(3)":return this.output[2]>0?(this.TextureConstructor=n,this.formatValues=c.erect3DArray3,null):this.output[1]>0?(this.TextureConstructor=t,this.formatValues=c.erect2DArray3,null):(this.TextureConstructor=a,this.formatValues=c.erectArray3,null);case"Array(4)":return this.output[2]>0?(this.TextureConstructor=k,this.formatValues=c.erect3DArray4,null):this.output[1]>0?(this.TextureConstructor=v,this.formatValues=c.erect2DArray4,null):(this.TextureConstructor=g,this.formatValues=c.erectArray4,null)}}else throw new Error(`unhandled precision of "${this.precision}"`);throw new Error(`unhandled return type "${this.returnType}"`)}getKernelString(){throw new Error("abstract method call")}getMainResultTexture(){switch(this.returnType){case"LiteralInteger":case"Float":case"Integer":case"Number":return this.getMainResultNumberTexture();case"Array(2)":return this.getMainResultArray2Texture();case"Array(3)":return this.getMainResultArray3Texture();case"Array(4)":return this.getMainResultArray4Texture();default:throw new Error(`unhandled returnType type ${this.returnType}`)}}getMainResultKernelNumberTexture(){throw new Error("abstract method call")}getMainResultSubKernelNumberTexture(){throw new Error("abstract method call")}getMainResultKernelArray2Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray2Texture(){throw new Error("abstract method call")}getMainResultKernelArray3Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray3Texture(){throw new Error("abstract method call")}getMainResultKernelArray4Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray4Texture(){throw new Error("abstract method call")}getMainResultGraphical(){throw new Error("abstract method call")}getMainResultMemoryOptimizedFloats(){throw new Error("abstract method call")}getMainResultPackedPixels(){throw new Error("abstract method call")}getMainResultString(){return this.graphical?this.getMainResultGraphical():this.precision==="single"?this.optimizeFloatMemory?this.getMainResultMemoryOptimizedFloats():this.getMainResultTexture():this.getMainResultPackedPixels()}getMainResultNumberTexture(){return c.linesToString(this.getMainResultKernelNumberTexture())+c.linesToString(this.getMainResultSubKernelNumberTexture())}getMainResultArray2Texture(){return c.linesToString(this.getMainResultKernelArray2Texture())+c.linesToString(this.getMainResultSubKernelArray2Texture())}getMainResultArray3Texture(){return c.linesToString(this.getMainResultKernelArray3Texture())+c.linesToString(this.getMainResultSubKernelArray3Texture())}getMainResultArray4Texture(){return c.linesToString(this.getMainResultKernelArray4Texture())+c.linesToString(this.getMainResultSubKernelArray4Texture())}getFloatTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} float;\n`}getIntTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic,!0)} int;\n`}getSampler2DTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} sampler2D;\n`}getSampler2DArrayTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} sampler2DArray;\n`}renderTexture(){return this.immutable?this.texture.clone():this.texture}readPackedPixelsToUint8Array(){if(this.precision!=="unsigned")throw new Error(\'Requires this.precision to be "unsigned"\');let{texSize:L,context:$}=this,G=new Uint8Array(L[0]*L[1]*4);return $.readPixels(0,0,L[0],L[1],$.RGBA,$.UNSIGNED_BYTE,G),G}readPackedPixelsToFloat32Array(){return new Float32Array(this.readPackedPixelsToUint8Array().buffer)}readFloatPixelsToFloat32Array(){if(this.precision!=="single")throw new Error(\'Requires this.precision to be "single"\');let{texSize:L,context:$}=this,G=L[0],O=L[1],Y=new Float32Array(G*O*4);return $.readPixels(0,0,G,O,$.RGBA,$.FLOAT,Y),Y}getPixels(L){let{context:$,output:G}=this,[O,Y]=G,W=new Uint8Array(O*Y*4);return $.readPixels(0,0,O,Y,$.RGBA,$.UNSIGNED_BYTE,W),new Uint8ClampedArray((L?W:c.flipPixels(W,O,Y)).buffer)}renderKernelsToArrays(){let L={result:this.renderOutput()};for(let $=0;$<this.subKernels.length;$++)L[this.subKernels[$].property]=this.mappedTextures[$].toArray();return L}renderKernelsToTextures(){let L={result:this.renderOutput()};if(this.immutable)for(let $=0;$<this.subKernels.length;$++)L[this.subKernels[$].property]=this.mappedTextures[$].clone();else for(let $=0;$<this.subKernels.length;$++)L[this.subKernels[$].property]=this.mappedTextures[$];return L}resetSwitchingKernels(){let L=this.switchingKernels;return this.switchingKernels=null,L}setOutput(L){let $=this.toKernelOutput(L);if(this.program){if(!this.dynamicOutput)throw new Error("Resizing a kernel with dynamicOutput: false is not possible");let G=[$[0],$[1]||1,$[2]||1],O=c.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},G),Y=this.texSize;if(Y){let K=this.getVariablePrecisionString(Y,this.tactic),J=this.getVariablePrecisionString(O,this.tactic);if(K!==J){this.debug&&console.warn("Precision requirement changed, asking GPU instance to recompile"),this.switchKernels({type:"outputPrecisionMismatch",precision:J,needed:L});return}}this.output=$,this.threadDim=G,this.texSize=O;let{context:W}=this;if(W.bindFramebuffer(W.FRAMEBUFFER,this.framebuffer),this.updateMaxTexSize(),this.framebuffer.width=this.texSize[0],this.framebuffer.height=this.texSize[1],W.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]),this.canvas.width=this.maxTexSize[0],this.canvas.height=this.maxTexSize[1],this.texture&&this.texture.delete(),this.texture=null,this._setupOutputTexture(),this.mappedTextures&&this.mappedTextures.length>0){for(let K=0;K<this.mappedTextures.length;K++)this.mappedTextures[K].delete();this.mappedTextures=null,this._setupSubOutputTextures()}}else this.output=$;return this}renderValues(){return this.formatValues(this.transferValues(),this.output[0],this.output[1],this.output[2])}switchKernels(L){this.switchingKernels?this.switchingKernels.push(L):this.switchingKernels=[L]}getVariablePrecisionString(L=this.texSize,$=this.tactic,G=!1){if(!$){if(!this.constructor.features.isSpeedTacticSupported)return"highp";let O=this.constructor.features[G?"lowIntPrecision":"lowFloatPrecision"],Y=this.constructor.features[G?"mediumIntPrecision":"mediumFloatPrecision"],W=this.constructor.features[G?"highIntPrecision":"highFloatPrecision"],K=Math.log2(L[0]*L[1]);if(K<=O.rangeMax)return"lowp";if(K<=Y.rangeMax)return"mediump";if(K<=W.rangeMax)return"highp";throw new Error("The required size exceeds that of the ability of your system")}switch($){case"speed":return"lowp";case"balanced":return"mediump";case"precision":return"highp";default:throw new Error(`Unknown tactic "${$}" use "speed", "balanced", "precision", or empty for auto`)}}updateTextureArgumentRefs(L,$){if(!!this.immutable){if(this.texture.texture===$.texture){let{prevArg:G}=L;G&&(G.texture._refs===1&&(this.texture.delete(),this.texture=G.clone(),this._textureSwitched=!0),G.delete()),L.prevArg=$.clone()}else if(this.mappedTextures&&this.mappedTextures.length>0){let{mappedTextures:G}=this;for(let O=0;O<G.length;O++){let Y=G[O];if(Y.texture===$.texture){let{prevArg:W}=L;W&&(W.texture._refs===1&&(Y.delete(),G[O]=W.clone(),this._mappedTextureSwitched[O]=!0),W.delete()),L.prevArg=$.clone();return}}}}}onActivate(L){if(this._textureSwitched=!0,this.texture=L.texture,this.mappedTextures){for(let $=0;$<this.mappedTextures.length;$++)this._mappedTextureSwitched[$]=!0;this.mappedTextures=L.mappedTextures}}initCanvas(){}}let F={int:"Integer",float:"Number",vec2:"Array(2)",vec3:"Array(3)",vec4:"Array(4)"};o.exports={GLKernel:C}},{"../../utils":114,"../kernel":36,"./texture/array-2-float":16,"./texture/array-2-float-2d":14,"./texture/array-2-float-3d":15,"./texture/array-3-float":19,"./texture/array-3-float-2d":17,"./texture/array-3-float-3d":18,"./texture/array-4-float":22,"./texture/array-4-float-2d":20,"./texture/array-4-float-3d":21,"./texture/float":25,"./texture/float-2d":23,"./texture/float-3d":24,"./texture/graphical":26,"./texture/memory-optimized":30,"./texture/memory-optimized-2d":28,"./texture/memory-optimized-3d":29,"./texture/unsigned":33,"./texture/unsigned-2d":31,"./texture/unsigned-3d":32}],14:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(2)"}toArray(){return u.erect2DArray2(this.renderValues(),this.output[0],this.output[1])}}o.exports={GLTextureArray2Float2D:d}},{"../../../utils":114,"./float":25}],15:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(2)"}toArray(){return u.erect3DArray2(this.renderValues(),this.output[0],this.output[1],this.output[2])}}o.exports={GLTextureArray2Float3D:d}},{"../../../utils":114,"./float":25}],16:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(2)"}toArray(){return u.erectArray2(this.renderValues(),this.output[0],this.output[1])}}o.exports={GLTextureArray2Float:d}},{"../../../utils":114,"./float":25}],17:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(3)"}toArray(){return u.erect2DArray3(this.renderValues(),this.output[0],this.output[1])}}o.exports={GLTextureArray3Float2D:d}},{"../../../utils":114,"./float":25}],18:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(3)"}toArray(){return u.erect3DArray3(this.renderValues(),this.output[0],this.output[1],this.output[2])}}o.exports={GLTextureArray3Float3D:d}},{"../../../utils":114,"./float":25}],19:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(3)"}toArray(){return u.erectArray3(this.renderValues(),this.output[0])}}o.exports={GLTextureArray3Float:d}},{"../../../utils":114,"./float":25}],20:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(4)"}toArray(){return u.erect2DArray4(this.renderValues(),this.output[0],this.output[1])}}o.exports={GLTextureArray4Float2D:d}},{"../../../utils":114,"./float":25}],21:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(4)"}toArray(){return u.erect3DArray4(this.renderValues(),this.output[0],this.output[1],this.output[2])}}o.exports={GLTextureArray4Float3D:d}},{"../../../utils":114,"./float":25}],22:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(4)"}toArray(){return u.erectArray4(this.renderValues(),this.output[0])}}o.exports={GLTextureArray4Float:d}},{"../../../utils":114,"./float":25}],23:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(1)"}toArray(){return u.erect2DFloat(this.renderValues(),this.output[0],this.output[1])}}o.exports={GLTextureFloat2D:d}},{"../../../utils":114,"./float":25}],24:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="ArrayTexture(1)"}toArray(){return u.erect3DFloat(this.renderValues(),this.output[0],this.output[1],this.output[2])}}o.exports={GLTextureFloat3D:d}},{"../../../utils":114,"./float":25}],25:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTexture:c}=i("./index");class d extends c{get textureType(){return this.context.FLOAT}constructor(r){super(r),this.type="ArrayTexture(1)"}renderRawOutput(){let r=this.context,a=this.size;r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer()),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,this.texture,0);let t=new Float32Array(a[0]*a[1]*4);return r.readPixels(0,0,a[0],a[1],r.RGBA,r.FLOAT,t),t}renderValues(){return this._deleted?null:this.renderRawOutput()}toArray(){return u.erectFloat(this.renderValues(),this.output[0])}}o.exports={GLTextureFloat:d}},{"../../../utils":114,"./index":27}],26:[function(i,o,m){let{GLTextureUnsigned:u}=i("./unsigned");class c extends u{constructor(f){super(f),this.type="ArrayTexture(4)"}toArray(){return this.renderValues()}}o.exports={GLTextureGraphical:c}},{"./unsigned":33}],27:[function(i,o,m){let{Texture:u}=i("../../../texture");class c extends u{get textureType(){throw new Error(`"textureType" not implemented on ${this.name}`)}clone(){return new this.constructor(this)}beforeMutate(){return this.texture._refs>1?(this.newTexture(),!0):!1}cloneTexture(){this.texture._refs--;let{context:r,size:a,texture:t,kernel:n}=this;n.debug&&console.warn("cloning internal texture"),r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer()),d(r,t),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0);let g=r.createTexture();d(r,g),r.texImage2D(r.TEXTURE_2D,0,this.internalFormat,a[0],a[1],0,this.textureFormat,this.textureType,null),r.copyTexSubImage2D(r.TEXTURE_2D,0,0,0,0,0,a[0],a[1]),g._refs=1,this.texture=g}newTexture(){this.texture._refs--;let r=this.context,a=this.size;this.kernel.debug&&console.warn("new internal texture");let n=r.createTexture();d(r,n),r.texImage2D(r.TEXTURE_2D,0,this.internalFormat,a[0],a[1],0,this.textureFormat,this.textureType,null),n._refs=1,this.texture=n}clear(){if(this.texture._refs){this.texture._refs--;let t=this.context,n=this.texture=t.createTexture();d(t,n);let g=this.size;n._refs=1,t.texImage2D(t.TEXTURE_2D,0,this.internalFormat,g[0],g[1],0,this.textureFormat,this.textureType,null)}let{context:r,texture:a}=this;r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer()),r.bindTexture(r.TEXTURE_2D,a),d(r,a),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,a,0),r.clearColor(0,0,0,0),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT)}delete(){this._deleted||(this._deleted=!0,!(this.texture._refs&&(this.texture._refs--,this.texture._refs))&&this.context.deleteTexture(this.texture))}framebuffer(){return this._framebuffer||(this._framebuffer=this.kernel.getRawValueFramebuffer(this.size[0],this.size[1])),this._framebuffer}}function d(f,r){f.activeTexture(f.TEXTURE15),f.bindTexture(f.TEXTURE_2D,r),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.NEAREST),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.NEAREST)}o.exports={GLTexture:c}},{"../../../texture":113}],28:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="MemoryOptimizedNumberTexture"}toArray(){return u.erectMemoryOptimized2DFloat(this.renderValues(),this.output[0],this.output[1])}}o.exports={GLTextureMemoryOptimized2D:d}},{"../../../utils":114,"./float":25}],29:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="MemoryOptimizedNumberTexture"}toArray(){return u.erectMemoryOptimized3DFloat(this.renderValues(),this.output[0],this.output[1],this.output[2])}}o.exports={GLTextureMemoryOptimized3D:d}},{"../../../utils":114,"./float":25}],30:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureFloat:c}=i("./float");class d extends c{constructor(r){super(r),this.type="MemoryOptimizedNumberTexture"}toArray(){return u.erectMemoryOptimizedFloat(this.renderValues(),this.output[0])}}o.exports={GLTextureMemoryOptimized:d}},{"../../../utils":114,"./float":25}],31:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureUnsigned:c}=i("./unsigned");class d extends c{constructor(r){super(r),this.type="NumberTexture"}toArray(){return u.erect2DPackedFloat(this.renderValues(),this.output[0],this.output[1])}}o.exports={GLTextureUnsigned2D:d}},{"../../../utils":114,"./unsigned":33}],32:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTextureUnsigned:c}=i("./unsigned");class d extends c{constructor(r){super(r),this.type="NumberTexture"}toArray(){return u.erect3DPackedFloat(this.renderValues(),this.output[0],this.output[1],this.output[2])}}o.exports={GLTextureUnsigned3D:d}},{"../../../utils":114,"./unsigned":33}],33:[function(i,o,m){let{utils:u}=i("../../../utils"),{GLTexture:c}=i("./index");class d extends c{get textureType(){return this.context.UNSIGNED_BYTE}constructor(r){super(r),this.type="NumberTexture"}renderRawOutput(){let{context:r}=this;r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer()),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,this.texture,0);let a=new Uint8Array(this.size[0]*this.size[1]*4);return r.readPixels(0,0,this.size[0],this.size[1],r.RGBA,r.UNSIGNED_BYTE,a),a}renderValues(){return this._deleted?null:new Float32Array(this.renderRawOutput().buffer)}toArray(){return u.erectPackedFloat(this.renderValues(),this.output[0])}}o.exports={GLTextureUnsigned:d}},{"../../../utils":114,"./index":27}],34:[function(i,o,m){let u=i("gl"),{WebGLKernel:c}=i("../web-gl/kernel"),{glKernelString:d}=i("../gl/kernel-string"),f=null,r=null,a=null,t=null,n=null;class g extends c{static get isSupported(){return f!==null||(this.setupFeatureChecks(),f=a!==null),f}static setupFeatureChecks(){if(r=null,t=null,typeof u=="function")try{if(a=u(2,2,{preserveDrawingBuffer:!0}),!a||!a.getExtension)return;t={STACKGL_resize_drawingbuffer:a.getExtension("STACKGL_resize_drawingbuffer"),STACKGL_destroy_context:a.getExtension("STACKGL_destroy_context"),OES_texture_float:a.getExtension("OES_texture_float"),OES_texture_float_linear:a.getExtension("OES_texture_float_linear"),OES_element_index_uint:a.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:a.getExtension("WEBGL_draw_buffers"),WEBGL_color_buffer_float:a.getExtension("WEBGL_color_buffer_float")},n=this.getFeatures()}catch(k){console.warn(k)}}static isContextMatch(k){try{return k.getParameter(k.RENDERER)==="ANGLE"}catch{return!1}}static getIsTextureFloat(){return Boolean(t.OES_texture_float)}static getIsDrawBuffers(){return Boolean(t.WEBGL_draw_buffers)}static getChannelCount(){return t.WEBGL_draw_buffers?a.getParameter(t.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL):1}static getMaxTextureSize(){return a.getParameter(a.MAX_TEXTURE_SIZE)}static get testCanvas(){return r}static get testContext(){return a}static get features(){return n}initCanvas(){return{}}initContext(){return u(2,2,{preserveDrawingBuffer:!0})}initExtensions(){this.extensions={STACKGL_resize_drawingbuffer:this.context.getExtension("STACKGL_resize_drawingbuffer"),STACKGL_destroy_context:this.context.getExtension("STACKGL_destroy_context"),OES_texture_float:this.context.getExtension("OES_texture_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear"),OES_element_index_uint:this.context.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:this.context.getExtension("WEBGL_draw_buffers")}}build(){super.build.apply(this,arguments),this.fallbackRequested||this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0],this.maxTexSize[1])}destroyExtensions(){this.extensions.STACKGL_resize_drawingbuffer=null,this.extensions.STACKGL_destroy_context=null,this.extensions.OES_texture_float=null,this.extensions.OES_texture_float_linear=null,this.extensions.OES_element_index_uint=null,this.extensions.WEBGL_draw_buffers=null}static destroyContext(k){let T=k.getExtension("STACKGL_destroy_context");T&&T.destroy&&T.destroy()}toString(){let k=`const gl = context || require(\'gl\')(1, 1);\n`,T=`    if (!context) { gl.getExtension(\'STACKGL_destroy_context\').destroy(); }\n`;return d(this.constructor,arguments,this,k,T)}setOutput(k){return super.setOutput(k),this.graphical&&this.extensions.STACKGL_resize_drawingbuffer&&this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0],this.maxTexSize[1]),this}}o.exports={HeadlessGLKernel:g}},{"../gl/kernel-string":12,"../web-gl/kernel":70,gl:2}],35:[function(i,o,m){class u{constructor(d,f){let{name:r,kernel:a,context:t,checkContext:n,onRequestContextHandle:g,onUpdateValueMismatch:v,origin:k,strictIntegers:T,type:A,tactic:E}=f;if(!r)throw new Error("name not set");if(!A)throw new Error("type not set");if(!k)throw new Error("origin not set");if(k!=="user"&&k!=="constants")throw new Error(`origin must be "user" or "constants" value is "${k}"`);if(!g)throw new Error("onRequestContextHandle is not set");this.name=r,this.origin=k,this.tactic=E,this.varName=k==="constants"?`constants.${r}`:r,this.kernel=a,this.strictIntegers=T,this.type=d.type||A,this.size=d.size||null,this.index=null,this.context=t,this.checkContext=n??!0,this.contextHandle=null,this.onRequestContextHandle=g,this.onUpdateValueMismatch=v,this.forceUploadEachRun=null}get id(){return`${this.origin}_${name}`}getSource(){throw new Error(`"getSource" not defined on ${this.constructor.name}`)}updateValue(d){throw new Error(`"updateValue" not defined on ${this.constructor.name}`)}}o.exports={KernelValue:u}},{}],36:[function(i,o,m){let{utils:u}=i("../utils"),{Input:c}=i("../input");class d{static get isSupported(){throw new Error(`"isSupported" not implemented on ${this.name}`)}static isContextMatch(a){throw new Error(`"isContextMatch" not implemented on ${this.name}`)}static getFeatures(){throw new Error(`"getFeatures" not implemented on ${this.name}`)}static destroyContext(a){throw new Error(`"destroyContext" called on ${this.name}`)}static nativeFunctionArguments(){throw new Error(`"nativeFunctionArguments" called on ${this.name}`)}static nativeFunctionReturnType(){throw new Error(`"nativeFunctionReturnType" called on ${this.name}`)}static combineKernels(){throw new Error(`"combineKernels" called on ${this.name}`)}constructor(a,t){if(typeof a!="object"){if(typeof a!="string")throw new Error("source not a string");if(!u.isFunctionString(a))throw new Error("source not a function string")}this.useLegacyEncoder=!1,this.fallbackRequested=!1,this.onRequestFallback=null,this.argumentNames=typeof a=="string"?u.getArgumentNamesFromString(a):null,this.argumentTypes=null,this.argumentSizes=null,this.argumentBitRatios=null,this.kernelArguments=null,this.kernelConstants=null,this.forceUploadKernelConstants=null,this.source=a,this.output=null,this.debug=!1,this.graphical=!1,this.loopMaxIterations=0,this.constants=null,this.constantTypes=null,this.constantBitRatios=null,this.dynamicArguments=!1,this.dynamicOutput=!1,this.canvas=null,this.context=null,this.checkContext=null,this.gpu=null,this.functions=null,this.nativeFunctions=null,this.injectedNative=null,this.subKernels=null,this.validate=!0,this.immutable=!1,this.pipeline=!1,this.precision=null,this.tactic=null,this.plugins=null,this.returnType=null,this.leadingReturnStatement=null,this.followingReturnStatement=null,this.optimizeFloatMemory=null,this.strictIntegers=!1,this.fixIntegerDivisionAccuracy=null,this.built=!1,this.signature=null}mergeSettings(a){for(let t in a)if(!(!a.hasOwnProperty(t)||!this.hasOwnProperty(t))){switch(t){case"output":if(!Array.isArray(a.output)){this.setOutput(a.output);continue}break;case"functions":this.functions=[];for(let n=0;n<a.functions.length;n++)this.addFunction(a.functions[n]);continue;case"graphical":a[t]&&!a.hasOwnProperty("precision")&&(this.precision="unsigned"),this[t]=a[t];continue;case"nativeFunctions":if(!a.nativeFunctions)continue;this.nativeFunctions=[];for(let n=0;n<a.nativeFunctions.length;n++){let g=a.nativeFunctions[n],{name:v,source:k}=g;this.addNativeFunction(v,k,g)}continue}this[t]=a[t]}this.canvas||(this.canvas=this.initCanvas()),this.context||(this.context=this.initContext()),this.plugins||(this.plugins=this.initPlugins(a))}build(){throw new Error(`"build" not defined on ${this.constructor.name}`)}run(){throw new Error(`"run" not defined on ${this.constructor.name}`)}initCanvas(){throw new Error(`"initCanvas" not defined on ${this.constructor.name}`)}initContext(){throw new Error(`"initContext" not defined on ${this.constructor.name}`)}initPlugins(a){throw new Error(`"initPlugins" not defined on ${this.constructor.name}`)}addFunction(a,t={}){if(a.name&&a.source&&a.argumentTypes&&"returnType"in a)this.functions.push(a);else if("settings"in a&&"source"in a)this.functions.push(this.functionToIGPUFunction(a.source,a.settings));else if(typeof a=="string"||typeof a=="function")this.functions.push(this.functionToIGPUFunction(a,t));else throw new Error("function not properly defined");return this}addNativeFunction(a,t,n={}){let{argumentTypes:g,argumentNames:v}=n.argumentTypes?f(n.argumentTypes):this.constructor.nativeFunctionArguments(t)||{};return this.nativeFunctions.push({name:a,source:t,settings:n,argumentTypes:g,argumentNames:v,returnType:n.returnType||this.constructor.nativeFunctionReturnType(t)}),this}setupArguments(a){if(this.kernelArguments=[],this.argumentTypes)for(let t=0;t<this.argumentTypes.length;t++)this.kernelArguments.push({type:this.argumentTypes[t]});else if(!this.argumentTypes){this.argumentTypes=[];for(let t=0;t<a.length;t++){let n=u.getVariableType(a[t],this.strictIntegers),g=n==="Integer"?"Number":n;this.argumentTypes.push(g),this.kernelArguments.push({type:g})}}this.argumentSizes=new Array(a.length),this.argumentBitRatios=new Int32Array(a.length);for(let t=0;t<a.length;t++){let n=a[t];this.argumentSizes[t]=n.constructor===c?n.size:null,this.argumentBitRatios[t]=this.getBitRatio(n)}if(this.argumentNames.length!==a.length)throw new Error("arguments are miss-aligned")}setupConstants(){this.kernelConstants=[];let a=this.constantTypes===null;if(a&&(this.constantTypes={}),this.constantBitRatios={},this.constants)for(let t in this.constants){if(a){let n=u.getVariableType(this.constants[t],this.strictIntegers);this.constantTypes[t]=n,this.kernelConstants.push({name:t,type:n})}else this.kernelConstants.push({name:t,type:this.constantTypes[t]});this.constantBitRatios[t]=this.getBitRatio(this.constants[t])}}setOptimizeFloatMemory(a){return this.optimizeFloatMemory=a,this}toKernelOutput(a){return a.hasOwnProperty("x")?a.hasOwnProperty("y")?a.hasOwnProperty("z")?[a.x,a.y,a.z]:[a.x,a.y]:[a.x]:a}setOutput(a){return this.output=this.toKernelOutput(a),this}setDebug(a){return this.debug=a,this}setGraphical(a){return this.graphical=a,this.precision="unsigned",this}setLoopMaxIterations(a){return this.loopMaxIterations=a,this}setConstants(a){return this.constants=a,this}setConstantTypes(a){return this.constantTypes=a,this}setFunctions(a){for(let t=0;t<a.length;t++)this.addFunction(a[t]);return this}setNativeFunctions(a){for(let t=0;t<a.length;t++){let n=a[t],{name:g,source:v}=n;this.addNativeFunction(g,v,n)}return this}setInjectedNative(a){return this.injectedNative=a,this}setPipeline(a){return this.pipeline=a,this}setPrecision(a){return this.precision=a,this}setDimensions(a){return u.warnDeprecated("method","setDimensions","setOutput"),this.output=a,this}setOutputToTexture(a){return u.warnDeprecated("method","setOutputToTexture","setPipeline"),this.pipeline=a,this}setImmutable(a){return this.immutable=a,this}setCanvas(a){return this.canvas=a,this}setStrictIntegers(a){return this.strictIntegers=a,this}setDynamicOutput(a){return this.dynamicOutput=a,this}setHardcodeConstants(a){return u.warnDeprecated("method","setHardcodeConstants"),this.setDynamicOutput(a),this.setDynamicArguments(a),this}setDynamicArguments(a){return this.dynamicArguments=a,this}setUseLegacyEncoder(a){return this.useLegacyEncoder=a,this}setWarnVarUsage(a){return u.warnDeprecated("method","setWarnVarUsage"),this}getCanvas(){return u.warnDeprecated("method","getCanvas"),this.canvas}getWebGl(){return u.warnDeprecated("method","getWebGl"),this.context}setContext(a){return this.context=a,this}setArgumentTypes(a){if(Array.isArray(a))this.argumentTypes=a;else{this.argumentTypes=[];for(let t in a){if(!a.hasOwnProperty(t))continue;let n=this.argumentNames.indexOf(t);if(n===-1)throw new Error(`unable to find argument ${t}`);this.argumentTypes[n]=a[t]}}return this}setTactic(a){return this.tactic=a,this}requestFallback(a){if(!this.onRequestFallback)throw new Error(`"onRequestFallback" not defined on ${this.constructor.name}`);return this.fallbackRequested=!0,this.onRequestFallback(a)}validateSettings(){throw new Error(`"validateSettings" not defined on ${this.constructor.name}`)}addSubKernel(a){if(this.subKernels===null&&(this.subKernels=[]),!a.source)throw new Error(\'subKernel missing "source" property\');if(!a.property&&isNaN(a.property))throw new Error(\'subKernel missing "property" property\');if(!a.name)throw new Error(\'subKernel missing "name" property\');return this.subKernels.push(a),this}destroy(a){throw new Error(`"destroy" called on ${this.constructor.name}`)}getBitRatio(a){if(this.precision==="single")return 4;if(Array.isArray(a[0]))return this.getBitRatio(a[0]);if(a.constructor===c)return this.getBitRatio(a.value);switch(a.constructor){case Uint8ClampedArray:case Uint8Array:case Int8Array:return 1;case Uint16Array:case Int16Array:return 2;case Float32Array:case Int32Array:default:return 4}}getPixels(a){throw new Error(`"getPixels" called on ${this.constructor.name}`)}checkOutput(){if(!this.output||!u.isArray(this.output))throw new Error("kernel.output not an array");if(this.output.length<1)throw new Error("kernel.output is empty, needs at least 1 value");for(let a=0;a<this.output.length;a++)if(isNaN(this.output[a])||this.output[a]<1)throw new Error(`${this.constructor.name}.output[${a}] incorrectly defined as \\`${this.output[a]}\\`, needs to be numeric, and greater than 0`)}prependString(a){throw new Error(`"prependString" called on ${this.constructor.name}`)}hasPrependString(a){throw new Error(`"hasPrependString" called on ${this.constructor.name}`)}toJSON(){return{settings:{output:this.output,pipeline:this.pipeline,argumentNames:this.argumentNames,argumentsTypes:this.argumentTypes,constants:this.constants,pluginNames:this.plugins?this.plugins.map(a=>a.name):null,returnType:this.returnType}}}buildSignature(a){let t=this.constructor;this.signature=t.getSignature(this,t.getArgumentTypes(this,a))}static getArgumentTypes(a,t){let n=new Array(t.length);for(let g=0;g<t.length;g++){let v=t[g],k=a.argumentTypes[g];if(v.type)n[g]=v.type;else switch(k){case"Number":case"Integer":case"Float":case"ArrayTexture(1)":n[g]=u.getVariableType(v);break;default:n[g]=k}}return n}static getSignature(a,t){throw new Error(`"getSignature" not implemented on ${this.name}`)}functionToIGPUFunction(a,t={}){if(typeof a!="string"&&typeof a!="function")throw new Error("source not a string or function");let n=typeof a=="string"?a:a.toString(),g=[];return Array.isArray(t.argumentTypes)?g=t.argumentTypes:typeof t.argumentTypes=="object"?g=u.getArgumentNamesFromString(n).map(v=>t.argumentTypes[v])||[]:g=t.argumentTypes||[],{name:u.getFunctionNameFromString(n)||null,source:n,argumentTypes:g,returnType:t.returnType||null}}onActivate(a){}}function f(r){let a=Object.keys(r),t=[];for(let n=0;n<a.length;n++){let g=a[n];t.push(r[g])}return{argumentTypes:t,argumentNames:a}}o.exports={Kernel:d}},{"../input":110,"../utils":114}],37:[function(i,o,m){let u=`__HEADER__;\n      __FLOAT_TACTIC_DECLARATION__;\n      __INT_TACTIC_DECLARATION__;\n      __SAMPLER_2D_TACTIC_DECLARATION__;\n      \n      const int LOOP_MAX = __LOOP_MAX__;\n      \n      __PLUGINS__;\n      __CONSTANTS__;\n      \n      varying vec2 vTexCoord;\n      \n      float acosh(float x) {\n        return log(x + sqrt(x * x - 1.0));\n      }\n      \n      float sinh(float x) {\n        return (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;\n      }\n      \n      float asinh(float x) {\n        return log(x + sqrt(x * x + 1.0));\n      }\n      \n      float atan2(float v1, float v2) {\n        if (v1 == 0.0 || v2 == 0.0) return 0.0;\n        return atan(v1 / v2);\n      }\n      \n      float atanh(float x) {\n        x = (x + 1.0) / (x - 1.0);\n        if (x < 0.0) {\n          return 0.5 * log(-x);\n        }\n        return 0.5 * log(x);\n      }\n      \n      float cbrt(float x) {\n        if (x >= 0.0) {\n          return pow(x, 1.0 / 3.0);\n        } else {\n          return -pow(x, 1.0 / 3.0);\n        }\n      }\n      \n      float cosh(float x) {\n        return (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; \n      }\n      \n      float expm1(float x) {\n        return pow(${Math.E}, x) - 1.0; \n      }\n      \n      float fround(highp float x) {\n        return x;\n      }\n      \n      float imul(float v1, float v2) {\n        return float(int(v1) * int(v2));\n      }\n      \n      float log10(float x) {\n        return log2(x) * (1.0 / log2(10.0));\n      }\n      \n      float log1p(float x) {\n        return log(1.0 + x);\n      }\n      \n      float _pow(float v1, float v2) {\n        if (v2 == 0.0) return 1.0;\n        return pow(v1, v2);\n      }\n      \n      float tanh(float x) {\n        float e = exp(2.0 * x);\n        return (e - 1.0) / (e + 1.0);\n      }\n      \n      float trunc(float x) {\n        if (x >= 0.0) {\n          return floor(x); \n        } else {\n          return ceil(x);\n        }\n      }\n      \n      vec4 _round(vec4 x) {\n        return floor(x + 0.5);\n      }\n      \n      float _round(float x) {\n        return floor(x + 0.5);\n      }\n      \n      const int BIT_COUNT = 32;\n      int modi(int x, int y) {\n        return x - y * (x / y);\n      }\n      \n      int bitwiseOr(int a, int b) {\n        int result = 0;\n        int n = 1;\n        \n        for (int i = 0; i < BIT_COUNT; i++) {\n          if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n            result += n;\n          }\n          a = a / 2;\n          b = b / 2;\n          n = n * 2;\n          if(!(a > 0 || b > 0)) {\n            break;\n          }\n        }\n        return result;\n      }\n      int bitwiseXOR(int a, int b) {\n        int result = 0;\n        int n = 1;\n        \n        for (int i = 0; i < BIT_COUNT; i++) {\n          if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n            result += n;\n          }\n          a = a / 2;\n          b = b / 2;\n          n = n * 2;\n          if(!(a > 0 || b > 0)) {\n            break;\n          }\n        }\n        return result;\n      }\n      int bitwiseAnd(int a, int b) {\n        int result = 0;\n        int n = 1;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n            result += n;\n          }\n          a = a / 2;\n          b = b / 2;\n          n = n * 2;\n          if(!(a > 0 && b > 0)) {\n            break;\n          }\n        }\n        return result;\n      }\n      int bitwiseNot(int a) {\n        int result = 0;\n        int n = 1;\n        \n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (modi(a, 2) == 0) {\n            result += n;    \n          }\n          a = a / 2;\n          n = n * 2;\n        }\n        return result;\n      }\n      int bitwiseZeroFillLeftShift(int n, int shift) {\n        int maxBytes = BIT_COUNT;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (maxBytes >= n) {\n            break;\n          }\n          maxBytes *= 2;\n        }\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= shift) {\n            break;\n          }\n          n *= 2;\n        }\n      \n        int result = 0;\n        int byteVal = 1;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= maxBytes) break;\n          if (modi(n, 2) > 0) { result += byteVal; }\n          n = int(n / 2);\n          byteVal *= 2;\n        }\n        return result;\n      }\n      \n      int bitwiseSignedRightShift(int num, int shifts) {\n        return int(floor(float(num) / pow(2.0, float(shifts))));\n      }\n      \n      int bitwiseZeroFillRightShift(int n, int shift) {\n        int maxBytes = BIT_COUNT;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (maxBytes >= n) {\n            break;\n          }\n          maxBytes *= 2;\n        }\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= shift) {\n            break;\n          }\n          n /= 2;\n        }\n        int result = 0;\n        int byteVal = 1;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= maxBytes) break;\n          if (modi(n, 2) > 0) { result += byteVal; }\n          n = int(n / 2);\n          byteVal *= 2;\n        }\n        return result;\n      }\n      \n      vec2 integerMod(vec2 x, float y) {\n        vec2 res = floor(mod(x, y));\n        return res * step(1.0 - floor(y), -res);\n      }\n      \n      vec3 integerMod(vec3 x, float y) {\n        vec3 res = floor(mod(x, y));\n        return res * step(1.0 - floor(y), -res);\n      }\n      \n      vec4 integerMod(vec4 x, vec4 y) {\n        vec4 res = floor(mod(x, y));\n        return res * step(1.0 - floor(y), -res);\n      }\n      \n      float integerMod(float x, float y) {\n        float res = floor(mod(x, y));\n        return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n      }\n      \n      int integerMod(int x, int y) {\n        return x - (y * int(x / y));\n      }\n      \n      __DIVIDE_WITH_INTEGER_CHECK__;\n      \n      // Here be dragons!\n      // DO NOT OPTIMIZE THIS CODE\n      // YOU WILL BREAK SOMETHING ON SOMEBODY\'S MACHINE\n      // LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\n      const vec2 MAGIC_VEC = vec2(1.0, -256.0);\n      const vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\n      const vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\n      float decode32(vec4 texel) {\n        __DECODE32_ENDIANNESS__;\n        texel *= 255.0;\n        vec2 gte128;\n        gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n        gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n        float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n        float res = exp2(_round(exponent));\n        texel.b = texel.b - 128.0 * gte128.x;\n        res = dot(texel, SCALE_FACTOR) * exp2(_round(exponent-23.0)) + res;\n        res *= gte128.y * -2.0 + 1.0;\n        return res;\n      }\n      \n      float decode16(vec4 texel, int index) {\n        int channel = integerMod(index, 2);\n        if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n        if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n        return 0.0;\n      }\n      \n      float decode8(vec4 texel, int index) {\n        int channel = integerMod(index, 4);\n        if (channel == 0) return texel.r * 255.0;\n        if (channel == 1) return texel.g * 255.0;\n        if (channel == 2) return texel.b * 255.0;\n        if (channel == 3) return texel.a * 255.0;\n        return 0.0;\n      }\n      \n      vec4 legacyEncode32(float f) {\n        float F = abs(f);\n        float sign = f < 0.0 ? 1.0 : 0.0;\n        float exponent = floor(log2(F));\n        float mantissa = (exp2(-exponent) * F);\n        // exponent += floor(log2(mantissa));\n        vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n        texel.rg = integerMod(texel.rg, 256.0);\n        texel.b = integerMod(texel.b, 128.0);\n        texel.a = exponent*0.5 + 63.5;\n        texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n        texel = floor(texel);\n        texel *= 0.003921569; // 1/255\n        __ENCODE32_ENDIANNESS__;\n        return texel;\n      }\n      \n      // https://github.com/gpujs/gpu.js/wiki/Encoder-details\n      vec4 encode32(float value) {\n        if (value == 0.0) return vec4(0, 0, 0, 0);\n      \n        float exponent;\n        float mantissa;\n        vec4  result;\n        float sgn;\n      \n        sgn = step(0.0, -value);\n        value = abs(value);\n      \n        exponent = floor(log2(value));\n      \n        mantissa = value*pow(2.0, -exponent)-1.0;\n        exponent = exponent+127.0;\n        result   = vec4(0,0,0,0);\n      \n        result.a = floor(exponent/2.0);\n        exponent = exponent - result.a*2.0;\n        result.a = result.a + 128.0*sgn;\n      \n        result.b = floor(mantissa * 128.0);\n        mantissa = mantissa - result.b / 128.0;\n        result.b = result.b + exponent*128.0;\n      \n        result.g = floor(mantissa*32768.0);\n        mantissa = mantissa - result.g/32768.0;\n      \n        result.r = floor(mantissa*8388608.0);\n        return result/255.0;\n      }\n      // Dragons end here\n      \n      int index;\n      ivec3 threadId;\n      \n      ivec3 indexTo3D(int idx, ivec3 texDim) {\n        int z = int(idx / (texDim.x * texDim.y));\n        idx -= z * int(texDim.x * texDim.y);\n        int y = int(idx / texDim.x);\n        int x = int(integerMod(idx, texDim.x));\n        return ivec3(x, y, z);\n      }\n      \n      float get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture2D(tex, st / vec2(texSize));\n        return decode32(texel);\n      }\n      \n      float get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int w = texSize.x * 2;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n        return decode16(texel, index);\n      }\n      \n      float get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int w = texSize.x * 4;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n        return decode8(texel, index);\n      }\n      \n      float getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int channel = integerMod(index, 4);\n        index = index / 4;\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture2D(tex, st / vec2(texSize));\n        if (channel == 0) return texel.r;\n        if (channel == 1) return texel.g;\n        if (channel == 2) return texel.b;\n        if (channel == 3) return texel.a;\n        return 0.0;\n      }\n      \n      vec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        return texture2D(tex, st / vec2(texSize));\n      }\n      \n      float getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n        return result[0];\n      }\n      \n      vec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n        return vec2(result[0], result[1]);\n      }\n      \n      vec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + (texDim.x * (y + (texDim.y * z)));\n        int channel = integerMod(index, 2);\n        index = index / 2;\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture2D(tex, st / vec2(texSize));\n        if (channel == 0) return vec2(texel.r, texel.g);\n        if (channel == 1) return vec2(texel.b, texel.a);\n        return vec2(0.0, 0.0);\n      }\n      \n      vec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n        return vec3(result[0], result[1], result[2]);\n      }\n      \n      vec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n        int vectorIndex = fieldIndex / 4;\n        int vectorOffset = fieldIndex - vectorIndex * 4;\n        int readY = vectorIndex / texSize.x;\n        int readX = vectorIndex - readY * texSize.x;\n        vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n        \n        if (vectorOffset == 0) {\n          return tex1.xyz;\n        } else if (vectorOffset == 1) {\n          return tex1.yzw;\n        } else {\n          readX++;\n          if (readX >= texSize.x) {\n            readX = 0;\n            readY++;\n          }\n          vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n          if (vectorOffset == 2) {\n            return vec3(tex1.z, tex1.w, tex2.x);\n          } else {\n            return vec3(tex1.w, tex2.x, tex2.y);\n          }\n        }\n      }\n      \n      vec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        return getImage2D(tex, texSize, texDim, z, y, x);\n      }\n      \n      vec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int channel = integerMod(index, 2);\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture2D(tex, st / vec2(texSize));\n        return vec4(texel.r, texel.g, texel.b, texel.a);\n      }\n      \n      vec4 actualColor;\n      void color(float r, float g, float b, float a) {\n        actualColor = vec4(r,g,b,a);\n      }\n      \n      void color(float r, float g, float b) {\n        color(r,g,b,1.0);\n      }\n      \n      void color(sampler2D image) {\n        actualColor = texture2D(image, vTexCoord);\n      }\n      \n      float modulo(float number, float divisor) {\n        if (number < 0.0) {\n          number = abs(number);\n          if (divisor < 0.0) {\n            divisor = abs(divisor);\n          }\n          return -mod(number, divisor);\n        }\n        if (divisor < 0.0) {\n          divisor = abs(divisor);\n        }\n        return mod(number, divisor);\n      }\n      \n      __INJECTED_NATIVE__;\n      __MAIN_CONSTANTS__;\n      __MAIN_ARGUMENTS__;\n      __KERNEL__;\n      \n      void main(void) {\n        index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n        __MAIN_RESULT__;\n      }`;o.exports={fragmentShader:u}},{}],38:[function(i,o,m){let{utils:u}=i("../../utils"),{FunctionNode:c}=i("../function-node");class d extends c{constructor(t,n){super(t,n),n&&n.hasOwnProperty("fixIntegerDivisionAccuracy")&&(this.fixIntegerDivisionAccuracy=n.fixIntegerDivisionAccuracy)}astConditionalExpression(t,n){if(t.type!=="ConditionalExpression")throw this.astErrorOutput("Not a conditional expression",t);let g=this.getType(t.consequent),v=this.getType(t.alternate);return g===null&&v===null?(n.push("if ("),this.astGeneric(t.test,n),n.push(") {"),this.astGeneric(t.consequent,n),n.push(";"),n.push("} else {"),this.astGeneric(t.alternate,n),n.push(";"),n.push("}"),n):(n.push("("),this.astGeneric(t.test,n),n.push("?"),this.astGeneric(t.consequent,n),n.push(":"),this.astGeneric(t.alternate,n),n.push(")"),n)}astFunction(t,n){if(this.isRootKernel)n.push("void");else{this.returnType||this.findLastReturn()&&(this.returnType=this.getType(t.body),this.returnType==="LiteralInteger"&&(this.returnType="Number"));let{returnType:g}=this;if(!g)n.push("void");else{let v=f[g];if(!v)throw new Error(`unknown type ${g}`);n.push(v)}}if(n.push(" "),n.push(this.name),n.push("("),!this.isRootKernel)for(let g=0;g<this.argumentNames.length;++g){let v=this.argumentNames[g];g>0&&n.push(", ");let k=this.argumentTypes[this.argumentNames.indexOf(v)];if(!k)throw this.astErrorOutput(`Unknown argument ${v} type`,t);k==="LiteralInteger"&&(this.argumentTypes[g]=k="Number");let T=f[k];if(!T)throw this.astErrorOutput("Unexpected expression",t);let A=u.sanitizeName(v);T==="sampler2D"||T==="sampler2DArray"?n.push(`${T} user_${A},ivec2 user_${A}Size,ivec3 user_${A}Dim`):n.push(`${T} user_${A}`)}n.push(`) {\n`);for(let g=0;g<t.body.body.length;++g)this.astGeneric(t.body.body[g],n),n.push(`\n`);return n.push(`}\n`),n}astReturnStatement(t,n){if(!t.argument)throw this.astErrorOutput("Unexpected return statement",t);this.pushState("skip-literal-correction");let g=this.getType(t.argument);this.popState("skip-literal-correction");let v=[];switch(this.returnType||(g==="LiteralInteger"||g==="Integer"?this.returnType="Number":this.returnType=g),this.returnType){case"LiteralInteger":case"Number":case"Float":switch(g){case"Integer":v.push("float("),this.astGeneric(t.argument,v),v.push(")");break;case"LiteralInteger":this.castLiteralToFloat(t.argument,v),this.getType(t)==="Integer"&&(v.unshift("float("),v.push(")"));break;default:this.astGeneric(t.argument,v)}break;case"Integer":switch(g){case"Float":case"Number":this.castValueToInteger(t.argument,v);break;case"LiteralInteger":this.castLiteralToInteger(t.argument,v);break;default:this.astGeneric(t.argument,v)}break;case"Array(4)":case"Array(3)":case"Array(2)":case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":case"Input":this.astGeneric(t.argument,v);break;default:throw this.astErrorOutput(`unhandled return type ${this.returnType}`,t)}return this.isRootKernel?(n.push(`kernelResult = ${v.join("")};`),n.push("return;")):this.isSubKernel?(n.push(`subKernelResult_${this.name} = ${v.join("")};`),n.push(`return subKernelResult_${this.name};`)):n.push(`return ${v.join("")};`),n}astLiteral(t,n){if(isNaN(t.value))throw this.astErrorOutput("Non-numeric literal not supported : "+t.value,t);let g=this.astKey(t);return Number.isInteger(t.value)?this.isState("casting-to-integer")||this.isState("building-integer")?(this.literalTypes[g]="Integer",n.push(`${t.value}`)):this.isState("casting-to-float")||this.isState("building-float")?(this.literalTypes[g]="Number",n.push(`${t.value}.0`)):(this.literalTypes[g]="Number",n.push(`${t.value}.0`)):this.isState("casting-to-integer")||this.isState("building-integer")?(this.literalTypes[g]="Integer",n.push(Math.round(t.value))):(this.literalTypes[g]="Number",n.push(`${t.value}`)),n}astBinaryExpression(t,n){if(this.checkAndUpconvertOperator(t,n))return n;if(this.fixIntegerDivisionAccuracy&&t.operator==="/"){switch(n.push("divWithIntCheck("),this.pushState("building-float"),this.getType(t.left)){case"Integer":this.castValueToFloat(t.left,n);break;case"LiteralInteger":this.castLiteralToFloat(t.left,n);break;default:this.astGeneric(t.left,n)}switch(n.push(", "),this.getType(t.right)){case"Integer":this.castValueToFloat(t.right,n);break;case"LiteralInteger":this.castLiteralToFloat(t.right,n);break;default:this.astGeneric(t.right,n)}return this.popState("building-float"),n.push(")"),n}n.push("(");let g=this.getType(t.left)||"Number",v=this.getType(t.right)||"Number";if(!g||!v)throw this.astErrorOutput("Unhandled binary expression",t);let k=g+" & "+v;switch(k){case"Integer & Integer":this.pushState("building-integer"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.astGeneric(t.right,n),this.popState("building-integer");break;case"Number & Float":case"Float & Number":case"Float & Float":case"Number & Number":this.pushState("building-float"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.astGeneric(t.right,n),this.popState("building-float");break;case"LiteralInteger & LiteralInteger":this.isState("casting-to-integer")||this.isState("building-integer")?(this.pushState("building-integer"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.astGeneric(t.right,n),this.popState("building-integer")):(this.pushState("building-float"),this.castLiteralToFloat(t.left,n),n.push(r[t.operator]||t.operator),this.castLiteralToFloat(t.right,n),this.popState("building-float"));break;case"Integer & Float":case"Integer & Number":if((t.operator===">"||t.operator==="<"&&t.right.type==="Literal")&&!Number.isInteger(t.right.value)){this.pushState("building-float"),this.castValueToFloat(t.left,n),n.push(r[t.operator]||t.operator),this.astGeneric(t.right,n),this.popState("building-float");break}if(this.pushState("building-integer"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.pushState("casting-to-integer"),t.right.type==="Literal"){let T=[];if(this.astGeneric(t.right,T),this.getType(t.right)==="Integer")n.push(T.join(""));else throw this.astErrorOutput("Unhandled binary expression with literal",t)}else n.push("int("),this.astGeneric(t.right,n),n.push(")");this.popState("casting-to-integer"),this.popState("building-integer");break;case"Integer & LiteralInteger":this.pushState("building-integer"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.castLiteralToInteger(t.right,n),this.popState("building-integer");break;case"Number & Integer":this.pushState("building-float"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.castValueToFloat(t.right,n),this.popState("building-float");break;case"Float & LiteralInteger":case"Number & LiteralInteger":this.pushState("building-float"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.castLiteralToFloat(t.right,n),this.popState("building-float");break;case"LiteralInteger & Float":case"LiteralInteger & Number":this.isState("casting-to-integer")?(this.pushState("building-integer"),this.castLiteralToInteger(t.left,n),n.push(r[t.operator]||t.operator),this.castValueToInteger(t.right,n),this.popState("building-integer")):(this.pushState("building-float"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.pushState("casting-to-float"),this.astGeneric(t.right,n),this.popState("casting-to-float"),this.popState("building-float"));break;case"LiteralInteger & Integer":this.pushState("building-integer"),this.castLiteralToInteger(t.left,n),n.push(r[t.operator]||t.operator),this.astGeneric(t.right,n),this.popState("building-integer");break;case"Boolean & Boolean":this.pushState("building-boolean"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.astGeneric(t.right,n),this.popState("building-boolean");break;case"Float & Integer":this.pushState("building-float"),this.astGeneric(t.left,n),n.push(r[t.operator]||t.operator),this.castValueToFloat(t.right,n),this.popState("building-float");break;default:throw this.astErrorOutput(`Unhandled binary expression between ${k}`,t)}return n.push(")"),n}checkAndUpconvertOperator(t,n){let g=this.checkAndUpconvertBitwiseOperators(t,n);if(g)return g;let k={"%":this.fixIntegerDivisionAccuracy?"integerCorrectionModulo":"modulo","**":"pow"}[t.operator];if(!k)return null;switch(n.push(k),n.push("("),this.getType(t.left)){case"Integer":this.castValueToFloat(t.left,n);break;case"LiteralInteger":this.castLiteralToFloat(t.left,n);break;default:this.astGeneric(t.left,n)}switch(n.push(","),this.getType(t.right)){case"Integer":this.castValueToFloat(t.right,n);break;case"LiteralInteger":this.castLiteralToFloat(t.right,n);break;default:this.astGeneric(t.right,n)}return n.push(")"),n}checkAndUpconvertBitwiseOperators(t,n){let v={"&":"bitwiseAnd","|":"bitwiseOr","^":"bitwiseXOR","<<":"bitwiseZeroFillLeftShift",">>":"bitwiseSignedRightShift",">>>":"bitwiseZeroFillRightShift"}[t.operator];if(!v)return null;switch(n.push(v),n.push("("),this.getType(t.left)){case"Number":case"Float":this.castValueToInteger(t.left,n);break;case"LiteralInteger":this.castLiteralToInteger(t.left,n);break;default:this.astGeneric(t.left,n)}switch(n.push(","),this.getType(t.right)){case"Number":case"Float":this.castValueToInteger(t.right,n);break;case"LiteralInteger":this.castLiteralToInteger(t.right,n);break;default:this.astGeneric(t.right,n)}return n.push(")"),n}checkAndUpconvertBitwiseUnary(t,n){let v={"~":"bitwiseNot"}[t.operator];if(!v)return null;switch(n.push(v),n.push("("),this.getType(t.argument)){case"Number":case"Float":this.castValueToInteger(t.argument,n);break;case"LiteralInteger":this.castLiteralToInteger(t.argument,n);break;default:this.astGeneric(t.argument,n)}return n.push(")"),n}castLiteralToInteger(t,n){return this.pushState("casting-to-integer"),this.astGeneric(t,n),this.popState("casting-to-integer"),n}castLiteralToFloat(t,n){return this.pushState("casting-to-float"),this.astGeneric(t,n),this.popState("casting-to-float"),n}castValueToInteger(t,n){return this.pushState("casting-to-integer"),n.push("int("),this.astGeneric(t,n),n.push(")"),this.popState("casting-to-integer"),n}castValueToFloat(t,n){return this.pushState("casting-to-float"),n.push("float("),this.astGeneric(t,n),n.push(")"),this.popState("casting-to-float"),n}astIdentifierExpression(t,n){if(t.type!=="Identifier")throw this.astErrorOutput("IdentifierExpression - not an Identifier",t);let g=this.getType(t),v=u.sanitizeName(t.name);return t.name==="Infinity"?n.push("3.402823466e+38"):g==="Boolean"?this.argumentNames.indexOf(v)>-1?n.push(`bool(user_${v})`):n.push(`user_${v}`):n.push(`user_${v}`),n}astForStatement(t,n){if(t.type!=="ForStatement")throw this.astErrorOutput("Invalid for statement",t);let g=[],v=[],k=[],T=[],A=null;if(t.init){let{declarations:E}=t.init;E.length>1&&(A=!1),this.astGeneric(t.init,g);for(let y=0;y<E.length;y++)E[y].init&&E[y].init.type!=="Literal"&&(A=!1)}else A=!1;if(t.test?this.astGeneric(t.test,v):A=!1,t.update?this.astGeneric(t.update,k):A=!1,t.body&&(this.pushState("loop-body"),this.astGeneric(t.body,T),this.popState("loop-body")),A===null&&(A=this.isSafe(t.init)&&this.isSafe(t.test)),A){let E=g.join(""),y=E[E.length-1]!==";";n.push(`for (${E}${y?";":""}${v.join("")};${k.join("")}){\n`),n.push(T.join("")),n.push(`}\n`)}else{let E=this.getInternalVariableName("safeI");g.length>0&&n.push(g.join(""),`\n`),n.push(`for (int ${E}=0;${E}<LOOP_MAX;${E}++){\n`),v.length>0&&n.push(`if (!${v.join("")}) break;\n`),n.push(T.join("")),n.push(`\n${k.join("")};`),n.push(`}\n`)}return n}astWhileStatement(t,n){if(t.type!=="WhileStatement")throw this.astErrorOutput("Invalid while statement",t);let g=this.getInternalVariableName("safeI");return n.push(`for (int ${g}=0;${g}<LOOP_MAX;${g}++){\n`),n.push("if (!"),this.astGeneric(t.test,n),n.push(`) break;\n`),this.astGeneric(t.body,n),n.push(`}\n`),n}astDoWhileStatement(t,n){if(t.type!=="DoWhileStatement")throw this.astErrorOutput("Invalid while statement",t);let g=this.getInternalVariableName("safeI");return n.push(`for (int ${g}=0;${g}<LOOP_MAX;${g}++){\n`),this.astGeneric(t.body,n),n.push("if (!"),this.astGeneric(t.test,n),n.push(`) break;\n`),n.push(`}\n`),n}astAssignmentExpression(t,n){if(t.operator==="%=")this.astGeneric(t.left,n),n.push("="),n.push("mod("),this.astGeneric(t.left,n),n.push(","),this.astGeneric(t.right,n),n.push(")");else if(t.operator==="**=")this.astGeneric(t.left,n),n.push("="),n.push("pow("),this.astGeneric(t.left,n),n.push(","),this.astGeneric(t.right,n),n.push(")");else{let g=this.getType(t.left),v=this.getType(t.right);return this.astGeneric(t.left,n),n.push(t.operator),g!=="Integer"&&v==="Integer"?(n.push("float("),this.astGeneric(t.right,n),n.push(")")):this.astGeneric(t.right,n),n}}astBlockStatement(t,n){if(this.isState("loop-body")){this.pushState("block-body");for(let g=0;g<t.body.length;g++)this.astGeneric(t.body[g],n);this.popState("block-body")}else{n.push(`{\n`);for(let g=0;g<t.body.length;g++)this.astGeneric(t.body[g],n);n.push(`}\n`)}return n}astVariableDeclaration(t,n){let g=t.declarations;if(!g||!g[0]||!g[0].init)throw this.astErrorOutput("Unexpected expression",t);let v=[],k=null,T=[],A=[];for(let E=0;E<g.length;E++){let y=g[E],_=y.init,w=this.getDeclaration(y.id),M=this.getType(y.init),N=M;N==="LiteralInteger"&&(w.suggestedType==="Integer"?N="Integer":N="Number");let b=f[N];if(!b)throw this.astErrorOutput(`Markup type ${N} not handled`,t);let p=[];if(M==="Integer"&&N==="Integer"){if(w.valueType="Number",E===0||k===null)p.push("float ");else if(N!==k)throw new Error("Unhandled declaration");k=N,p.push(`user_${u.sanitizeName(y.id.name)}=`),p.push("float("),this.astGeneric(_,p),p.push(")")}else w.valueType=N,E===0||k===null?p.push(`${b} `):N!==k&&(T.push(A.join(",")),A=[],p.push(`${b} `)),k=N,p.push(`user_${u.sanitizeName(y.id.name)}=`),M==="Number"&&N==="Integer"?_.left&&_.left.type==="Literal"?this.astGeneric(_,p):(p.push("int("),this.astGeneric(_,p),p.push(")")):M==="LiteralInteger"&&N==="Integer"?this.castLiteralToInteger(_,p):this.astGeneric(_,p);A.push(p.join(""))}return A.length>0&&T.push(A.join(",")),v.push(T.join(";")),n.push(v.join("")),n.push(";"),n}astIfStatement(t,n){return n.push("if ("),this.astGeneric(t.test,n),n.push(")"),t.consequent.type==="BlockStatement"?this.astGeneric(t.consequent,n):(n.push(` {\n`),this.astGeneric(t.consequent,n),n.push(`\n}\n`)),t.alternate&&(n.push("else "),t.alternate.type==="BlockStatement"||t.alternate.type==="IfStatement"?this.astGeneric(t.alternate,n):(n.push(` {\n`),this.astGeneric(t.alternate,n),n.push(`\n}\n`))),n}astSwitchStatement(t,n){if(t.type!=="SwitchStatement")throw this.astErrorOutput("Invalid switch statement",t);let{discriminant:g,cases:v}=t,k=this.getType(g),T=`switchDiscriminant${this.astKey(t,"_")}`;switch(k){case"Float":case"Number":n.push(`float ${T} = `),this.astGeneric(g,n),n.push(`;\n`);break;case"Integer":n.push(`int ${T} = `),this.astGeneric(g,n),n.push(`;\n`);break}if(v.length===1&&!v[0].test)return this.astGeneric(v[0].consequent,n),n;let A=!1,E=[],y=!1,_=!1;for(let w=0;w<v.length;w++){if(v[w].test){if(w===0||!_?(_=!0,n.push(`if (${T} == `)):A?(n.push(`${T} == `),A=!1):n.push(` else if (${T} == `),k==="Integer")switch(this.getType(v[w].test)){case"Number":case"Float":this.castValueToInteger(v[w].test,n);break;case"LiteralInteger":this.castLiteralToInteger(v[w].test,n);break}else if(k==="Float")switch(this.getType(v[w].test)){case"LiteralInteger":this.castLiteralToFloat(v[w].test,n);break;case"Integer":this.castValueToFloat(v[w].test,n);break}else throw new Error("unhanlded");if(!v[w].consequent||v[w].consequent.length===0){A=!0,n.push(" || ");continue}n.push(`) {\n`)}else if(v.length>w+1){y=!0,this.astGeneric(v[w].consequent,E);continue}else n.push(` else {\n`);this.astGeneric(v[w].consequent,n),n.push(`\n}`)}return y&&(n.push(" else {"),n.push(E.join("")),n.push("}")),n}astThisExpression(t,n){return n.push("this"),n}astMemberExpression(t,n){let{property:g,name:v,signature:k,origin:T,type:A,xProperty:E,yProperty:y,zProperty:_}=this.getMemberExpressionDetails(t);switch(k){case"value.thread.value":case"this.thread.value":if(v!=="x"&&v!=="y"&&v!=="z")throw this.astErrorOutput("Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`",t);return n.push(`threadId.${v}`),n;case"this.output.value":if(this.dynamicOutput)switch(v){case"x":this.isState("casting-to-float")?n.push("float(uOutputDim.x)"):n.push("uOutputDim.x");break;case"y":this.isState("casting-to-float")?n.push("float(uOutputDim.y)"):n.push("uOutputDim.y");break;case"z":this.isState("casting-to-float")?n.push("float(uOutputDim.z)"):n.push("uOutputDim.z");break;default:throw this.astErrorOutput("Unexpected expression",t)}else switch(v){case"x":this.isState("casting-to-integer")?n.push(this.output[0]):n.push(this.output[0],".0");break;case"y":this.isState("casting-to-integer")?n.push(this.output[1]):n.push(this.output[1],".0");break;case"z":this.isState("casting-to-integer")?n.push(this.output[2]):n.push(this.output[2],".0");break;default:throw this.astErrorOutput("Unexpected expression",t)}return n;case"value":throw this.astErrorOutput("Unexpected expression",t);case"value[]":case"value[][]":case"value[][][]":case"value[][][][]":case"value.value":if(T==="Math")return n.push(Math[v]),n;let M=u.sanitizeName(v);switch(g){case"r":return n.push(`user_${M}.r`),n;case"g":return n.push(`user_${M}.g`),n;case"b":return n.push(`user_${M}.b`),n;case"a":return n.push(`user_${M}.a`),n}break;case"this.constants.value":if(typeof E>"u")switch(A){case"Array(2)":case"Array(3)":case"Array(4)":return n.push(`constants_${u.sanitizeName(v)}`),n}case"this.constants.value[]":case"this.constants.value[][]":case"this.constants.value[][][]":case"this.constants.value[][][][]":break;case"fn()[]":return this.astCallExpression(t.object,n),n.push("["),n.push(this.memberExpressionPropertyMarkup(g)),n.push("]"),n;case"fn()[][]":return this.astCallExpression(t.object.object,n),n.push("["),n.push(this.memberExpressionPropertyMarkup(t.object.property)),n.push("]"),n.push("["),n.push(this.memberExpressionPropertyMarkup(t.property)),n.push("]"),n;case"[][]":return this.astArrayExpression(t.object,n),n.push("["),n.push(this.memberExpressionPropertyMarkup(g)),n.push("]"),n;default:throw this.astErrorOutput("Unexpected expression",t)}if(t.computed===!1)switch(A){case"Number":case"Integer":case"Float":case"Boolean":return n.push(`${T}_${u.sanitizeName(v)}`),n}let w=`${T}_${u.sanitizeName(v)}`;switch(A){case"Array(2)":case"Array(3)":case"Array(4)":this.astGeneric(t.object,n),n.push("["),n.push(this.memberExpressionPropertyMarkup(E)),n.push("]");break;case"HTMLImageArray":n.push(`getImage3D(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"ArrayTexture(1)":n.push(`getFloatFromSampler2D(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"Array1D(2)":case"Array2D(2)":case"Array3D(2)":n.push(`getMemoryOptimizedVec2(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"ArrayTexture(2)":n.push(`getVec2FromSampler2D(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"Array1D(3)":case"Array2D(3)":case"Array3D(3)":n.push(`getMemoryOptimizedVec3(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"ArrayTexture(3)":n.push(`getVec3FromSampler2D(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"Array1D(4)":case"Array2D(4)":case"Array3D(4)":n.push(`getMemoryOptimizedVec4(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"ArrayTexture(4)":case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":n.push(`getVec4FromSampler2D(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"NumberTexture":case"Array":case"Array2D":case"Array3D":case"Array4D":case"Input":case"Number":case"Float":case"Integer":if(this.precision==="single")n.push(`getMemoryOptimized32(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");else{let M=T==="user"?this.lookupFunctionArgumentBitRatio(this.name,v):this.constantBitRatios[v];switch(M){case 1:n.push(`get8(${w}, ${w}Size, ${w}Dim, `);break;case 2:n.push(`get16(${w}, ${w}Size, ${w}Dim, `);break;case 4:case 0:n.push(`get32(${w}, ${w}Size, ${w}Dim, `);break;default:throw new Error(`unhandled bit ratio of ${M}`)}this.memberExpressionXYZ(E,y,_,n),n.push(")")}break;case"MemoryOptimizedNumberTexture":n.push(`getMemoryOptimized32(${w}, ${w}Size, ${w}Dim, `),this.memberExpressionXYZ(E,y,_,n),n.push(")");break;case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":n.push(`${w}[${this.memberExpressionPropertyMarkup(y)}]`),y&&n.push(`[${this.memberExpressionPropertyMarkup(E)}]`);break;default:throw new Error(`unhandled member expression "${A}"`)}return n}astCallExpression(t,n){if(!t.callee)throw this.astErrorOutput("Unknown CallExpression",t);let g=null,v=this.isAstMathFunction(t);if(v||t.callee.object&&t.callee.object.type==="ThisExpression"?g=t.callee.property.name:t.callee.type==="SequenceExpression"&&t.callee.expressions[0].type==="Literal"&&!isNaN(t.callee.expressions[0].raw)?g=t.callee.expressions[1].property.name:g=t.callee.name,!g)throw this.astErrorOutput("Unhandled function, couldn\'t find name",t);switch(g){case"pow":g="_pow";break;case"round":g="_round";break}if(this.calledFunctions.indexOf(g)<0&&this.calledFunctions.push(g),g==="random"&&this.plugins&&this.plugins.length>0)for(let k=0;k<this.plugins.length;k++){let T=this.plugins[k];if(T.functionMatch==="Math.random()"&&T.functionReplace)return n.push(T.functionReplace),n}if(this.onFunctionCall&&this.onFunctionCall(this.name,g,t.arguments),n.push(g),n.push("("),v)for(let k=0;k<t.arguments.length;++k){let T=t.arguments[k],A=this.getType(T);switch(k>0&&n.push(", "),A){case"Integer":this.castValueToFloat(T,n);break;default:this.astGeneric(T,n);break}}else{let k=this.lookupFunctionArgumentTypes(g)||[];for(let T=0;T<t.arguments.length;++T){let A=t.arguments[T],E=k[T];T>0&&n.push(", ");let y=this.getType(A);switch(E||(this.triggerImplyArgumentType(g,T,y,this),E=y),y){case"Boolean":this.astGeneric(A,n);continue;case"Number":case"Float":if(E==="Integer"){n.push("int("),this.astGeneric(A,n),n.push(")");continue}else if(E==="Number"||E==="Float"){this.astGeneric(A,n);continue}else if(E==="LiteralInteger"){this.castLiteralToFloat(A,n);continue}break;case"Integer":if(E==="Number"||E==="Float"){n.push("float("),this.astGeneric(A,n),n.push(")");continue}else if(E==="Integer"){this.astGeneric(A,n);continue}break;case"LiteralInteger":if(E==="Integer"){this.castLiteralToInteger(A,n);continue}else if(E==="Number"||E==="Float"){this.castLiteralToFloat(A,n);continue}else if(E==="LiteralInteger"){this.astGeneric(A,n);continue}break;case"Array(2)":case"Array(3)":case"Array(4)":if(E===y){if(A.type==="Identifier")n.push(`user_${u.sanitizeName(A.name)}`);else if(A.type==="ArrayExpression"||A.type==="MemberExpression"||A.type==="CallExpression")this.astGeneric(A,n);else throw this.astErrorOutput(`Unhandled argument type ${A.type}`,t);continue}break;case"HTMLCanvas":case"HTMLImage":case"HTMLImageArray":case"HTMLVideo":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"Array":case"Input":if(E===y){if(A.type!=="Identifier")throw this.astErrorOutput(`Unhandled argument type ${A.type}`,t);this.triggerImplyArgumentBitRatio(this.name,A.name,g,T);let _=u.sanitizeName(A.name);n.push(`user_${_},user_${_}Size,user_${_}Dim`);continue}break}throw this.astErrorOutput(`Unhandled argument combination of ${y} and ${E} for argument named "${A.name}"`,t)}}return n.push(")"),n}astArrayExpression(t,n){let g=this.getType(t),v=t.elements.length;switch(g){case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":n.push(`mat${v}(`);break;default:n.push(`vec${v}(`)}for(let k=0;k<v;++k){k>0&&n.push(", ");let T=t.elements[k];this.astGeneric(T,n)}return n.push(")"),n}memberExpressionXYZ(t,n,g,v){return g?v.push(this.memberExpressionPropertyMarkup(g),", "):v.push("0, "),n?v.push(this.memberExpressionPropertyMarkup(n),", "):v.push("0, "),v.push(this.memberExpressionPropertyMarkup(t)),v}memberExpressionPropertyMarkup(t){if(!t)throw new Error("Property not set");let n=this.getType(t),g=[];switch(n){case"Number":case"Float":this.castValueToInteger(t,g);break;case"LiteralInteger":this.castLiteralToInteger(t,g);break;default:this.astGeneric(t,g)}return g.join("")}}let f={Array:"sampler2D","Array(2)":"vec2","Array(3)":"vec3","Array(4)":"vec4","Matrix(2)":"mat2","Matrix(3)":"mat3","Matrix(4)":"mat4",Array2D:"sampler2D",Array3D:"sampler2D",Boolean:"bool",Float:"float",Input:"sampler2D",Integer:"int",Number:"float",LiteralInteger:"float",NumberTexture:"sampler2D",MemoryOptimizedNumberTexture:"sampler2D","ArrayTexture(1)":"sampler2D","ArrayTexture(2)":"sampler2D","ArrayTexture(3)":"sampler2D","ArrayTexture(4)":"sampler2D",HTMLVideo:"sampler2D",HTMLCanvas:"sampler2D",HTMLImage:"sampler2D",HTMLImageArray:"sampler2DArray"},r={"===":"==","!==":"!="};o.exports={WebGLFunctionNode:d}},{"../../utils":114,"../function-node":10}],39:[function(i,o,m){let{WebGLKernelValueBoolean:u}=i("./kernel-value/boolean"),{WebGLKernelValueFloat:c}=i("./kernel-value/float"),{WebGLKernelValueInteger:d}=i("./kernel-value/integer"),{WebGLKernelValueHTMLImage:f}=i("./kernel-value/html-image"),{WebGLKernelValueDynamicHTMLImage:r}=i("./kernel-value/dynamic-html-image"),{WebGLKernelValueHTMLVideo:a}=i("./kernel-value/html-video"),{WebGLKernelValueDynamicHTMLVideo:t}=i("./kernel-value/dynamic-html-video"),{WebGLKernelValueSingleInput:n}=i("./kernel-value/single-input"),{WebGLKernelValueDynamicSingleInput:g}=i("./kernel-value/dynamic-single-input"),{WebGLKernelValueUnsignedInput:v}=i("./kernel-value/unsigned-input"),{WebGLKernelValueDynamicUnsignedInput:k}=i("./kernel-value/dynamic-unsigned-input"),{WebGLKernelValueMemoryOptimizedNumberTexture:T}=i("./kernel-value/memory-optimized-number-texture"),{WebGLKernelValueDynamicMemoryOptimizedNumberTexture:A}=i("./kernel-value/dynamic-memory-optimized-number-texture"),{WebGLKernelValueNumberTexture:E}=i("./kernel-value/number-texture"),{WebGLKernelValueDynamicNumberTexture:y}=i("./kernel-value/dynamic-number-texture"),{WebGLKernelValueSingleArray:_}=i("./kernel-value/single-array"),{WebGLKernelValueDynamicSingleArray:w}=i("./kernel-value/dynamic-single-array"),{WebGLKernelValueSingleArray1DI:M}=i("./kernel-value/single-array1d-i"),{WebGLKernelValueDynamicSingleArray1DI:N}=i("./kernel-value/dynamic-single-array1d-i"),{WebGLKernelValueSingleArray2DI:b}=i("./kernel-value/single-array2d-i"),{WebGLKernelValueDynamicSingleArray2DI:p}=i("./kernel-value/dynamic-single-array2d-i"),{WebGLKernelValueSingleArray3DI:C}=i("./kernel-value/single-array3d-i"),{WebGLKernelValueDynamicSingleArray3DI:F}=i("./kernel-value/dynamic-single-array3d-i"),{WebGLKernelValueSingleArray2:P}=i("./kernel-value/single-array2"),{WebGLKernelValueSingleArray3:L}=i("./kernel-value/single-array3"),{WebGLKernelValueSingleArray4:$}=i("./kernel-value/single-array4"),{WebGLKernelValueUnsignedArray:G}=i("./kernel-value/unsigned-array"),{WebGLKernelValueDynamicUnsignedArray:O}=i("./kernel-value/dynamic-unsigned-array"),Y={unsigned:{dynamic:{Boolean:u,Integer:d,Float:c,Array:O,"Array(2)":!1,"Array(3)":!1,"Array(4)":!1,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:k,NumberTexture:y,"ArrayTexture(1)":y,"ArrayTexture(2)":y,"ArrayTexture(3)":y,"ArrayTexture(4)":y,MemoryOptimizedNumberTexture:A,HTMLCanvas:r,HTMLImage:r,HTMLImageArray:!1,HTMLVideo:t},static:{Boolean:u,Float:c,Integer:d,Array:G,"Array(2)":!1,"Array(3)":!1,"Array(4)":!1,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:v,NumberTexture:E,"ArrayTexture(1)":E,"ArrayTexture(2)":E,"ArrayTexture(3)":E,"ArrayTexture(4)":E,MemoryOptimizedNumberTexture:T,HTMLCanvas:f,HTMLImage:f,HTMLImageArray:!1,HTMLVideo:a}},single:{dynamic:{Boolean:u,Integer:d,Float:c,Array:w,"Array(2)":P,"Array(3)":L,"Array(4)":$,"Array1D(2)":N,"Array1D(3)":N,"Array1D(4)":N,"Array2D(2)":p,"Array2D(3)":p,"Array2D(4)":p,"Array3D(2)":F,"Array3D(3)":F,"Array3D(4)":F,Input:g,NumberTexture:y,"ArrayTexture(1)":y,"ArrayTexture(2)":y,"ArrayTexture(3)":y,"ArrayTexture(4)":y,MemoryOptimizedNumberTexture:A,HTMLCanvas:r,HTMLImage:r,HTMLImageArray:!1,HTMLVideo:t},static:{Boolean:u,Float:c,Integer:d,Array:_,"Array(2)":P,"Array(3)":L,"Array(4)":$,"Array1D(2)":M,"Array1D(3)":M,"Array1D(4)":M,"Array2D(2)":b,"Array2D(3)":b,"Array2D(4)":b,"Array3D(2)":C,"Array3D(3)":C,"Array3D(4)":C,Input:n,NumberTexture:E,"ArrayTexture(1)":E,"ArrayTexture(2)":E,"ArrayTexture(3)":E,"ArrayTexture(4)":E,MemoryOptimizedNumberTexture:T,HTMLCanvas:f,HTMLImage:f,HTMLImageArray:!1,HTMLVideo:a}}};function W(K,J,Q,te){if(!K)throw new Error("type missing");if(!J)throw new Error("dynamic missing");if(!Q)throw new Error("precision missing");te.type&&(K=te.type);let H=Y[Q][J];if(H[K]===!1)return null;if(H[K]===void 0)throw new Error(`Could not find a KernelValue for ${K}`);return H[K]}o.exports={lookupKernelValueType:W,kernelValueMaps:Y}},{"./kernel-value/boolean":41,"./kernel-value/dynamic-html-image":42,"./kernel-value/dynamic-html-video":43,"./kernel-value/dynamic-memory-optimized-number-texture":44,"./kernel-value/dynamic-number-texture":45,"./kernel-value/dynamic-single-array":46,"./kernel-value/dynamic-single-array1d-i":47,"./kernel-value/dynamic-single-array2d-i":48,"./kernel-value/dynamic-single-array3d-i":49,"./kernel-value/dynamic-single-input":50,"./kernel-value/dynamic-unsigned-array":51,"./kernel-value/dynamic-unsigned-input":52,"./kernel-value/float":53,"./kernel-value/html-image":54,"./kernel-value/html-video":55,"./kernel-value/integer":57,"./kernel-value/memory-optimized-number-texture":58,"./kernel-value/number-texture":59,"./kernel-value/single-array":60,"./kernel-value/single-array1d-i":61,"./kernel-value/single-array2":62,"./kernel-value/single-array2d-i":63,"./kernel-value/single-array3":64,"./kernel-value/single-array3d-i":65,"./kernel-value/single-array4":66,"./kernel-value/single-input":67,"./kernel-value/unsigned-array":68,"./kernel-value/unsigned-input":69}],40:[function(i,o,m){let{WebGLKernelValue:u}=i("./index"),{Input:c}=i("../../../input");class d extends u{checkSize(r,a){if(!this.kernel.validate)return;let{maxTextureSize:t}=this.kernel.constructor.features;if(r>t||a>t)throw r>a?new Error(`Argument texture width of ${r} larger than maximum size of ${t} for your GPU`):r<a?new Error(`Argument texture height of ${a} larger than maximum size of ${t} for your GPU`):new Error(`Argument texture height and width of ${a} larger than maximum size of ${t} for your GPU`)}setup(){this.requestTexture(),this.setupTexture(),this.defineTexture()}requestTexture(){this.texture=this.onRequestTexture()}defineTexture(){let{context:r}=this;r.activeTexture(this.contextHandle),r.bindTexture(r.TEXTURE_2D,this.texture),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST)}setupTexture(){this.contextHandle=this.onRequestContextHandle(),this.index=this.onRequestIndex(),this.dimensionsId=this.id+"Dim",this.sizeId=this.id+"Size"}getBitRatio(r){if(Array.isArray(r[0]))return this.getBitRatio(r[0]);if(r.constructor===c)return this.getBitRatio(r.value);switch(r.constructor){case Uint8ClampedArray:case Uint8Array:case Int8Array:return 1;case Uint16Array:case Int16Array:return 2;case Float32Array:case Int32Array:default:return 4}}destroy(){this.prevArg&&this.prevArg.delete(),this.context.deleteTexture(this.texture)}}o.exports={WebGLKernelArray:d}},{"../../../input":110,"./index":56}],41:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValue:c}=i("./index");class d extends c{constructor(r,a){super(r,a),this.uploadValue=r}getSource(r){return this.origin==="constants"?`const bool ${this.id} = ${r};\n`:`uniform bool ${this.id};\n`}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(r){this.origin!=="constants"&&this.kernel.setUniform1i(this.id,this.uploadValue=r)}}o.exports={WebGLKernelValueBoolean:d}},{"../../../utils":114,"./index":56}],42:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueHTMLImage:c}=i("./html-image");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){let{width:a,height:t}=r;this.checkSize(a,t),this.dimensions=[a,t,1],this.textureSize=[a,t],this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicHTMLImage:d}},{"../../../utils":114,"./html-image":54}],43:[function(i,o,m){let{WebGLKernelValueDynamicHTMLImage:u}=i("./dynamic-html-image");class c extends u{}o.exports={WebGLKernelValueDynamicHTMLVideo:c}},{"./dynamic-html-image":42}],44:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueMemoryOptimizedNumberTexture:c}=i("./memory-optimized-number-texture");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){this.dimensions=r.dimensions,this.checkSize(r.size[0],r.size[1]),this.textureSize=r.size,this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicMemoryOptimizedNumberTexture:d}},{"../../../utils":114,"./memory-optimized-number-texture":58}],45:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueNumberTexture:c}=i("./number-texture");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){this.dimensions=r.dimensions,this.checkSize(r.size[0],r.size[1]),this.textureSize=r.size,this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicNumberTexture:d}},{"../../../utils":114,"./number-texture":59}],46:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray:c}=i("./single-array");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){this.dimensions=u.getDimensions(r,!0),this.textureSize=u.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicSingleArray:d}},{"../../../utils":114,"./single-array":60}],47:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray1DI:c}=i("./single-array1d-i");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){this.setShape(r),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicSingleArray1DI:d}},{"../../../utils":114,"./single-array1d-i":61}],48:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray2DI:c}=i("./single-array2d-i");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){this.setShape(r),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicSingleArray2DI:d}},{"../../../utils":114,"./single-array2d-i":63}],49:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray3DI:c}=i("./single-array3d-i");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){this.setShape(r),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicSingleArray3DI:d}},{"../../../utils":114,"./single-array3d-i":65}],50:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleInput:c}=i("./single-input");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){let[a,t,n]=r.size;this.dimensions=new Int32Array([a||1,t||1,n||1]),this.textureSize=u.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicSingleInput:d}},{"../../../utils":114,"./single-input":67}],51:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueUnsignedArray:c}=i("./unsigned-array");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){this.dimensions=u.getDimensions(r,!0),this.textureSize=u.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]);let a=this.getTransferArrayType(r);this.preUploadValue=new a(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicUnsignedArray:d}},{"../../../utils":114,"./unsigned-array":68}],52:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueUnsignedInput:c}=i("./unsigned-input");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(r){let[a,t,n]=r.size;this.dimensions=new Int32Array([a||1,t||1,n||1]),this.textureSize=u.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]);let g=this.getTransferArrayType(r.value);this.preUploadValue=new g(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGLKernelValueDynamicUnsignedInput:d}},{"../../../utils":114,"./unsigned-input":69}],53:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValue:c}=i("./index");class d extends c{constructor(r,a){super(r,a),this.uploadValue=r}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(r){return this.origin==="constants"?Number.isInteger(r)?`const float ${this.id} = ${r}.0;\n`:`const float ${this.id} = ${r};\n`:`uniform float ${this.id};\n`}updateValue(r){this.origin!=="constants"&&this.kernel.setUniform1f(this.id,this.uploadValue=r)}}o.exports={WebGLKernelValueFloat:d}},{"../../../utils":114,"./index":56}],54:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a);let{width:t,height:n}=r;this.checkSize(t,n),this.dimensions=[t,n,1],this.textureSize=[t,n],this.uploadValue=r}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!0),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,this.uploadValue=r),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueHTMLImage:d}},{"../../../utils":114,"./array":40}],55:[function(i,o,m){let{WebGLKernelValueHTMLImage:u}=i("./html-image");class c extends u{}o.exports={WebGLKernelValueHTMLVideo:c}},{"./html-image":54}],56:[function(i,o,m){let{utils:u}=i("../../../utils"),{KernelValue:c}=i("../../kernel-value");class d extends c{constructor(r,a){super(r,a),this.dimensionsId=null,this.sizeId=null,this.initialValueConstructor=r.constructor,this.onRequestTexture=a.onRequestTexture,this.onRequestIndex=a.onRequestIndex,this.uploadValue=null,this.textureSize=null,this.bitRatio=null,this.prevArg=null}get id(){return`${this.origin}_${u.sanitizeName(this.name)}`}setup(){}getTransferArrayType(r){if(Array.isArray(r[0]))return this.getTransferArrayType(r[0]);switch(r.constructor){case Array:case Int32Array:case Int16Array:case Int8Array:return Float32Array;case Uint8ClampedArray:case Uint8Array:case Uint16Array:case Uint32Array:case Float32Array:case Float64Array:return r.constructor}return console.warn("Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros"),r.constructor}getStringValueHandler(){throw new Error(`"getStringValueHandler" not implemented on ${this.constructor.name}`)}getVariablePrecisionString(){return this.kernel.getVariablePrecisionString(this.textureSize||void 0,this.tactic||void 0)}destroy(){}}o.exports={WebGLKernelValue:d}},{"../../../utils":114,"../../kernel-value":35}],57:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValue:c}=i("./index");class d extends c{constructor(r,a){super(r,a),this.uploadValue=r}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(r){return this.origin==="constants"?`const int ${this.id} = ${parseInt(r)};\n`:`uniform int ${this.id};\n`}updateValue(r){this.origin!=="constants"&&this.kernel.setUniform1i(this.id,this.uploadValue=r)}}o.exports={WebGLKernelValueInteger:d}},{"../../../utils":114,"./index":56}],58:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array"),d="Source and destination textures are the same.  Use immutable = true and manually cleanup kernel output texture memory with texture.delete()";class f extends c{constructor(a,t){super(a,t);let[n,g]=a.size;this.checkSize(n,g),this.dimensions=a.dimensions,this.textureSize=a.size,this.uploadValue=a.texture,this.forceUploadEachRun=!0}setup(){this.setupTexture()}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName}.texture;\n`}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(a){if(a.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(a.constructor);return}if(this.checkContext&&a.context!==this.context)throw new Error(`Value ${this.name} (${this.type}) must be from same context`);let{kernel:t,context:n}=this;if(t.pipeline)if(t.immutable)t.updateTextureArgumentRefs(this,a);else{if(t.texture.texture===a.texture)throw new Error(d);if(t.mappedTextures){let{mappedTextures:g}=t;for(let v=0;v<g.length;v++)if(g[v].texture===a.texture)throw new Error(d)}}n.activeTexture(this.contextHandle),n.bindTexture(n.TEXTURE_2D,this.uploadValue=a.texture),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueMemoryOptimizedNumberTexture:f,sameError:d}},{"../../../utils":114,"./array":40}],59:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array"),{sameError:d}=i("./memory-optimized-number-texture");class f extends c{constructor(a,t){super(a,t);let[n,g]=a.size;this.checkSize(n,g);let{size:v,dimensions:k}=a;this.bitRatio=this.getBitRatio(a),this.dimensions=k,this.textureSize=v,this.uploadValue=a.texture,this.forceUploadEachRun=!0}setup(){this.setupTexture()}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName}.texture;\n`}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(a){if(a.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(a.constructor);return}if(this.checkContext&&a.context!==this.context)throw new Error(`Value ${this.name} (${this.type}) must be from same context`);let{kernel:t,context:n}=this;if(t.pipeline)if(t.immutable)t.updateTextureArgumentRefs(this,a);else{if(t.texture.texture===a.texture)throw new Error(d);if(t.mappedTextures){let{mappedTextures:g}=t;for(let v=0;v<g.length;v++)if(g[v].texture===a.texture)throw new Error(d)}}n.activeTexture(this.contextHandle),n.bindTexture(n.TEXTURE_2D,this.uploadValue=a.texture),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueNumberTexture:f}},{"../../../utils":114,"./array":40,"./memory-optimized-number-texture":58}],60:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a),this.bitRatio=4,this.dimensions=u.getDimensions(r,!0),this.textureSize=u.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return u.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flattenTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueSingleArray:d}},{"../../../utils":114,"./array":40}],61:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a),this.bitRatio=4,this.setShape(r)}setShape(r){let a=u.getDimensions(r,!0);this.textureSize=u.getMemoryOptimizedFloatTextureSize(a,this.bitRatio),this.dimensions=new Int32Array([a[1],1,1]),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return u.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flatten2dArrayTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueSingleArray1DI:d}},{"../../../utils":114,"./array":40}],62:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValue:c}=i("./index");class d extends c{constructor(r,a){super(r,a),this.uploadValue=r}getSource(r){return this.origin==="constants"?`const vec2 ${this.id} = vec2(${r[0]},${r[1]});\n`:`uniform vec2 ${this.id};\n`}getStringValueHandler(){return this.origin==="constants"?"":`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(r){this.origin!=="constants"&&this.kernel.setUniform2fv(this.id,this.uploadValue=r)}}o.exports={WebGLKernelValueSingleArray2:d}},{"../../../utils":114,"./index":56}],63:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a),this.bitRatio=4,this.setShape(r)}setShape(r){let a=u.getDimensions(r,!0);this.textureSize=u.getMemoryOptimizedFloatTextureSize(a,this.bitRatio),this.dimensions=new Int32Array([a[1],a[2],1]),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return u.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flatten3dArrayTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueSingleArray2DI:d}},{"../../../utils":114,"./array":40}],64:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValue:c}=i("./index");class d extends c{constructor(r,a){super(r,a),this.uploadValue=r}getSource(r){return this.origin==="constants"?`const vec3 ${this.id} = vec3(${r[0]},${r[1]},${r[2]});\n`:`uniform vec3 ${this.id};\n`}getStringValueHandler(){return this.origin==="constants"?"":`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(r){this.origin!=="constants"&&this.kernel.setUniform3fv(this.id,this.uploadValue=r)}}o.exports={WebGLKernelValueSingleArray3:d}},{"../../../utils":114,"./index":56}],65:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a),this.bitRatio=4,this.setShape(r)}setShape(r){let a=u.getDimensions(r,!0);this.textureSize=u.getMemoryOptimizedFloatTextureSize(a,this.bitRatio),this.dimensions=new Int32Array([a[1],a[2],a[3]]),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return u.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flatten4dArrayTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueSingleArray3DI:d}},{"../../../utils":114,"./array":40}],66:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValue:c}=i("./index");class d extends c{constructor(r,a){super(r,a),this.uploadValue=r}getSource(r){return this.origin==="constants"?`const vec4 ${this.id} = vec4(${r[0]},${r[1]},${r[2]},${r[3]});\n`:`uniform vec4 ${this.id};\n`}getStringValueHandler(){return this.origin==="constants"?"":`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(r){this.origin!=="constants"&&this.kernel.setUniform4fv(this.id,this.uploadValue=r)}}o.exports={WebGLKernelValueSingleArray4:d}},{"../../../utils":114,"./index":56}],67:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a),this.bitRatio=4;let[t,n,g]=r.size;this.dimensions=new Int32Array([t||1,n||1,g||1]),this.textureSize=u.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return u.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}.value, uploadValue_${this.name})`])}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flattenTo(r.value,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueSingleInput:d}},{"../../../utils":114,"./array":40}],68:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a),this.bitRatio=this.getBitRatio(r),this.dimensions=u.getDimensions(r,!0),this.textureSize=u.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]),this.TranserArrayType=this.getTransferArrayType(r),this.preUploadValue=new this.TranserArrayType(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer)}getStringValueHandler(){return u.linesToString([`const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,`const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,`flattenTo(${this.varName}, preUploadValue_${this.name})`])}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flattenTo(r,this.preUploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.UNSIGNED_BYTE,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueUnsignedArray:d}},{"../../../utils":114,"./array":40}],69:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("./array");class d extends c{constructor(r,a){super(r,a),this.bitRatio=this.getBitRatio(r);let[t,n,g]=r.size;this.dimensions=new Int32Array([t||1,n||1,g||1]),this.textureSize=u.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]),this.TranserArrayType=this.getTransferArrayType(r.value),this.preUploadValue=new this.TranserArrayType(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer)}getStringValueHandler(){return u.linesToString([`const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,`const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,`flattenTo(${this.varName}.value, preUploadValue_${this.name})`])}getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(value.constructor);return}let{context:a}=this;u.flattenTo(r.value,this.preUploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.UNSIGNED_BYTE,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGLKernelValueUnsignedInput:d}},{"../../../utils":114,"./array":40}],70:[function(i,o,m){let{GLKernel:u}=i("../gl/kernel"),{FunctionBuilder:c}=i("../function-builder"),{WebGLFunctionNode:d}=i("./function-node"),{utils:f}=i("../../utils"),r=i("../../plugins/math-random-uniformly-distributed"),{fragmentShader:a}=i("./fragment-shader"),{vertexShader:t}=i("./vertex-shader"),{glKernelString:n}=i("../gl/kernel-string"),{lookupKernelValueType:g}=i("./kernel-value-maps"),v=null,k=null,T=null,A=null,E=null,y=[r],_=[],w={};class M extends u{static get isSupported(){return v!==null||(this.setupFeatureChecks(),v=this.isContextMatch(T)),v}static setupFeatureChecks(){typeof document<"u"?k=document.createElement("canvas"):typeof OffscreenCanvas<"u"&&(k=new OffscreenCanvas(0,0)),k&&(T=k.getContext("webgl")||k.getContext("experimental-webgl"),!(!T||!T.getExtension)&&(A={OES_texture_float:T.getExtension("OES_texture_float"),OES_texture_float_linear:T.getExtension("OES_texture_float_linear"),OES_element_index_uint:T.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:T.getExtension("WEBGL_draw_buffers")},E=this.getFeatures()))}static isContextMatch(b){return typeof WebGLRenderingContext<"u"?b instanceof WebGLRenderingContext:!1}static getIsTextureFloat(){return Boolean(A.OES_texture_float)}static getIsDrawBuffers(){return Boolean(A.WEBGL_draw_buffers)}static getChannelCount(){return A.WEBGL_draw_buffers?T.getParameter(A.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL):1}static getMaxTextureSize(){return T.getParameter(T.MAX_TEXTURE_SIZE)}static lookupKernelValueType(b,p,C,F){return g(b,p,C,F)}static get testCanvas(){return k}static get testContext(){return T}static get features(){return E}static get fragmentShader(){return a}static get vertexShader(){return t}constructor(b,p){super(b,p),this.program=null,this.pipeline=p.pipeline,this.endianness=f.systemEndianness(),this.extensions={},this.argumentTextureCount=0,this.constantTextureCount=0,this.fragShader=null,this.vertShader=null,this.drawBuffersMap=null,this.maxTexSize=null,this.onRequestSwitchKernel=null,this.texture=null,this.mappedTextures=null,this.mergeSettings(b.settings||p),this.threadDim=null,this.framebuffer=null,this.buffer=null,this.textureCache=[],this.programUniformLocationCache={},this.uniform1fCache={},this.uniform1iCache={},this.uniform2fCache={},this.uniform2fvCache={},this.uniform2ivCache={},this.uniform3fvCache={},this.uniform3ivCache={},this.uniform4fvCache={},this.uniform4ivCache={}}initCanvas(){if(typeof document<"u"){let b=document.createElement("canvas");return b.width=2,b.height=2,b}else if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(0,0)}initContext(){let b={alpha:!1,depth:!1,antialias:!1};return this.canvas.getContext("webgl",b)||this.canvas.getContext("experimental-webgl",b)}initPlugins(b){let p=[],{source:C}=this;if(typeof C=="string")for(let F=0;F<y.length;F++){let P=y[F];C.match(P.functionMatch)&&p.push(P)}else if(typeof C=="object"&&b.pluginNames)for(let F=0;F<y.length;F++){let P=y[F];b.pluginNames.some($=>$===P.name)&&p.push(P)}return p}initExtensions(){this.extensions={OES_texture_float:this.context.getExtension("OES_texture_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear"),OES_element_index_uint:this.context.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:this.context.getExtension("WEBGL_draw_buffers"),WEBGL_color_buffer_float:this.context.getExtension("WEBGL_color_buffer_float")}}validateSettings(b){if(!this.validate){this.texSize=f.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output);return}let{features:p}=this.constructor;if(this.optimizeFloatMemory===!0&&!p.isTextureFloat)throw new Error("Float textures are not supported");if(this.precision==="single"&&!p.isFloatRead)throw new Error("Single precision not supported");if(!this.graphical&&this.precision===null&&p.isTextureFloat&&(this.precision=p.isFloatRead?"single":"unsigned"),this.subKernels&&this.subKernels.length>0&&!this.extensions.WEBGL_draw_buffers)throw new Error("could not instantiate draw buffers extension");if(this.fixIntegerDivisionAccuracy===null?this.fixIntegerDivisionAccuracy=!p.isIntegerDivisionAccurate:this.fixIntegerDivisionAccuracy&&p.isIntegerDivisionAccurate&&(this.fixIntegerDivisionAccuracy=!1),this.checkOutput(),!this.output||this.output.length===0){if(b.length!==1)throw new Error("Auto output only supported for kernels with only one input");let C=f.getVariableType(b[0],this.strictIntegers);switch(C){case"Array":this.output=f.getDimensions(C);break;case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":this.output=b[0].output;break;default:throw new Error("Auto output not supported for input type: "+C)}}if(this.graphical){if(this.output.length!==2)throw new Error("Output must have 2 dimensions on graphical mode");this.precision==="precision"&&(this.precision="unsigned",console.warn("Cannot use graphical mode and single precision at the same time")),this.texSize=f.clone(this.output);return}else this.precision===null&&p.isTextureFloat&&(this.precision="single");this.texSize=f.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output),this.checkTextureSize()}updateMaxTexSize(){let{texSize:b,canvas:p}=this;if(this.maxTexSize===null){let C=_.indexOf(p);C===-1&&(C=_.length,_.push(p),w[C]=[b[0],b[1]]),this.maxTexSize=w[C]}this.maxTexSize[0]<b[0]&&(this.maxTexSize[0]=b[0]),this.maxTexSize[1]<b[1]&&(this.maxTexSize[1]=b[1])}setupArguments(b){this.kernelArguments=[],this.argumentTextureCount=0;let p=this.argumentTypes===null;if(p&&(this.argumentTypes=[]),this.argumentSizes=[],this.argumentBitRatios=[],b.length<this.argumentNames.length)throw new Error("not enough arguments for kernel");if(b.length>this.argumentNames.length)throw new Error("too many arguments for kernel");let{context:C}=this,F=0,P=()=>this.createTexture(),L=()=>this.constantTextureCount+F++,$=O=>{this.switchKernels({type:"argumentMismatch",needed:O})},G=()=>C.TEXTURE0+this.constantTextureCount+this.argumentTextureCount++;for(let O=0;O<b.length;O++){let Y=b[O],W=this.argumentNames[O],K;p?(K=f.getVariableType(Y,this.strictIntegers),this.argumentTypes.push(K)):K=this.argumentTypes[O];let J=this.constructor.lookupKernelValueType(K,this.dynamicArguments?"dynamic":"static",this.precision,b[O]);if(J===null)return this.requestFallback(b);let Q=new J(Y,{name:W,type:K,tactic:this.tactic,origin:"user",context:C,checkContext:this.checkContext,kernel:this,strictIntegers:this.strictIntegers,onRequestTexture:P,onRequestIndex:L,onUpdateValueMismatch:$,onRequestContextHandle:G});this.kernelArguments.push(Q),Q.setup(),this.argumentSizes.push(Q.textureSize),this.argumentBitRatios[O]=Q.bitRatio}}createTexture(){let b=this.context.createTexture();return this.textureCache.push(b),b}setupConstants(b){let{context:p}=this;this.kernelConstants=[],this.forceUploadKernelConstants=[];let C=this.constantTypes===null;C&&(this.constantTypes={}),this.constantBitRatios={};let F=0;for(let P in this.constants){let L=this.constants[P],$;C?($=f.getVariableType(L,this.strictIntegers),this.constantTypes[P]=$):$=this.constantTypes[P];let G=this.constructor.lookupKernelValueType($,"static",this.precision,L);if(G===null)return this.requestFallback(b);let O=new G(L,{name:P,type:$,tactic:this.tactic,origin:"constants",context:this.context,checkContext:this.checkContext,kernel:this,strictIntegers:this.strictIntegers,onRequestTexture:()=>this.createTexture(),onRequestIndex:()=>F++,onRequestContextHandle:()=>p.TEXTURE0+this.constantTextureCount++});this.constantBitRatios[P]=O.bitRatio,this.kernelConstants.push(O),O.setup(),O.forceUploadEachRun&&this.forceUploadKernelConstants.push(O)}}build(){if(this.built||(this.initExtensions(),this.validateSettings(arguments),this.setupConstants(arguments),this.fallbackRequested)||(this.setupArguments(arguments),this.fallbackRequested))return;this.updateMaxTexSize(),this.translateSource();let b=this.pickRenderStrategy(arguments);if(b)return b;let{texSize:p,context:C,canvas:F}=this;C.enable(C.SCISSOR_TEST),this.pipeline&&this.precision==="single"?(C.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]),F.width=this.maxTexSize[0],F.height=this.maxTexSize[1]):(C.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]),F.width=this.maxTexSize[0],F.height=this.maxTexSize[1]);let P=this.threadDim=Array.from(this.output);for(;P.length<3;)P.push(1);let L=this.getVertexShader(arguments),$=C.createShader(C.VERTEX_SHADER);C.shaderSource($,L),C.compileShader($),this.vertShader=$;let G=this.getFragmentShader(arguments),O=C.createShader(C.FRAGMENT_SHADER);if(C.shaderSource(O,G),C.compileShader(O),this.fragShader=O,this.debug&&(console.log("GLSL Shader Output:"),console.log(G)),!C.getShaderParameter($,C.COMPILE_STATUS))throw new Error("Error compiling vertex shader: "+C.getShaderInfoLog($));if(!C.getShaderParameter(O,C.COMPILE_STATUS))throw new Error("Error compiling fragment shader: "+C.getShaderInfoLog(O));let Y=this.program=C.createProgram();C.attachShader(Y,$),C.attachShader(Y,O),C.linkProgram(Y),this.framebuffer=C.createFramebuffer(),this.framebuffer.width=p[0],this.framebuffer.height=p[1],this.rawValueFramebuffers={};let W=new Float32Array([-1,-1,1,-1,-1,1,1,1]),K=new Float32Array([0,0,1,0,0,1,1,1]),J=W.byteLength,Q=this.buffer;Q?C.bindBuffer(C.ARRAY_BUFFER,Q):(Q=this.buffer=C.createBuffer(),C.bindBuffer(C.ARRAY_BUFFER,Q),C.bufferData(C.ARRAY_BUFFER,W.byteLength+K.byteLength,C.STATIC_DRAW)),C.bufferSubData(C.ARRAY_BUFFER,0,W),C.bufferSubData(C.ARRAY_BUFFER,J,K);let te=C.getAttribLocation(this.program,"aPos");C.enableVertexAttribArray(te),C.vertexAttribPointer(te,2,C.FLOAT,!1,0,0);let H=C.getAttribLocation(this.program,"aTexCoord");C.enableVertexAttribArray(H),C.vertexAttribPointer(H,2,C.FLOAT,!1,0,J),C.bindFramebuffer(C.FRAMEBUFFER,this.framebuffer);let B=0;C.useProgram(this.program);for(let he in this.constants)this.kernelConstants[B++].updateValue(this.constants[he]);this._setupOutputTexture(),this.subKernels!==null&&this.subKernels.length>0&&(this._mappedTextureSwitched={},this._setupSubOutputTextures()),this.buildSignature(arguments),this.built=!0}translateSource(){let b=c.fromKernel(this,d,{fixIntegerDivisionAccuracy:this.fixIntegerDivisionAccuracy});this.translatedSource=b.getPrototypeString("kernel"),this.setupReturnTypes(b)}setupReturnTypes(b){if(!this.graphical&&!this.returnType&&(this.returnType=b.getKernelResultType()),this.subKernels&&this.subKernels.length>0)for(let p=0;p<this.subKernels.length;p++){let C=this.subKernels[p];C.returnType||(C.returnType=b.getSubKernelResultType(p))}}run(){let{kernelArguments:b,texSize:p,forceUploadKernelConstants:C,context:F}=this;F.useProgram(this.program),F.scissor(0,0,p[0],p[1]),this.dynamicOutput&&(this.setUniform3iv("uOutputDim",new Int32Array(this.threadDim)),this.setUniform2iv("uTexSize",p)),this.setUniform2f("ratio",p[0]/this.maxTexSize[0],p[1]/this.maxTexSize[1]);for(let P=0;P<C.length;P++){let L=C[P];if(L.updateValue(this.constants[L.name]),this.switchingKernels)return}for(let P=0;P<b.length;P++)if(b[P].updateValue(arguments[P]),this.switchingKernels)return;if(this.plugins)for(let P=0;P<this.plugins.length;P++){let L=this.plugins[P];L.onBeforeRun&&L.onBeforeRun(this)}if(this.graphical){if(this.pipeline)return F.bindRenderbuffer(F.RENDERBUFFER,null),F.bindFramebuffer(F.FRAMEBUFFER,this.framebuffer),this.immutable&&this._replaceOutputTexture(),F.drawArrays(F.TRIANGLE_STRIP,0,4),this.immutable?this.texture.clone():this.texture;F.bindRenderbuffer(F.RENDERBUFFER,null),F.bindFramebuffer(F.FRAMEBUFFER,null),F.drawArrays(F.TRIANGLE_STRIP,0,4);return}F.bindFramebuffer(F.FRAMEBUFFER,this.framebuffer),this.immutable&&this._replaceOutputTexture(),this.subKernels!==null&&(this.immutable&&this._replaceSubOutputTextures(),this.drawBuffers()),F.drawArrays(F.TRIANGLE_STRIP,0,4)}drawBuffers(){this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap)}getInternalFormat(){return this.context.RGBA}getTextureFormat(){let{context:b}=this;switch(this.getInternalFormat()){case b.RGBA:return b.RGBA;default:throw new Error("Unknown internal format")}}_replaceOutputTexture(){if(this.texture.beforeMutate()||this._textureSwitched){let b=this.context;b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,this.texture.texture,0),this._textureSwitched=!1}}_setupOutputTexture(){let b=this.context,p=this.texSize;if(this.texture){b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,this.texture.texture,0);return}let C=this.createTexture();b.activeTexture(b.TEXTURE0+this.constantTextureCount+this.argumentTextureCount),b.bindTexture(b.TEXTURE_2D,C),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);let F=this.getInternalFormat();this.precision==="single"?b.texImage2D(b.TEXTURE_2D,0,F,p[0],p[1],0,b.RGBA,b.FLOAT,null):b.texImage2D(b.TEXTURE_2D,0,F,p[0],p[1],0,F,b.UNSIGNED_BYTE,null),b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,C,0),this.texture=new this.TextureConstructor({texture:C,size:p,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this})}_replaceSubOutputTextures(){let b=this.context;for(let p=0;p<this.mappedTextures.length;p++){let C=this.mappedTextures[p];(C.beforeMutate()||this._mappedTextureSwitched[p])&&(b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0+p+1,b.TEXTURE_2D,C.texture,0),this._mappedTextureSwitched[p]=!1)}}_setupSubOutputTextures(){let b=this.context;if(this.mappedTextures){for(let C=0;C<this.subKernels.length;C++)b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0+C+1,b.TEXTURE_2D,this.mappedTextures[C].texture,0);return}let p=this.texSize;this.drawBuffersMap=[b.COLOR_ATTACHMENT0],this.mappedTextures=[];for(let C=0;C<this.subKernels.length;C++){let F=this.createTexture();this.drawBuffersMap.push(b.COLOR_ATTACHMENT0+C+1),b.activeTexture(b.TEXTURE0+this.constantTextureCount+this.argumentTextureCount+C),b.bindTexture(b.TEXTURE_2D,F),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST),this.precision==="single"?b.texImage2D(b.TEXTURE_2D,0,b.RGBA,p[0],p[1],0,b.RGBA,b.FLOAT,null):b.texImage2D(b.TEXTURE_2D,0,b.RGBA,p[0],p[1],0,b.RGBA,b.UNSIGNED_BYTE,null),b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0+C+1,b.TEXTURE_2D,F,0),this.mappedTextures.push(new this.TextureConstructor({texture:F,size:p,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this}))}}setUniform1f(b,p){if(this.uniform1fCache.hasOwnProperty(b)){let F=this.uniform1fCache[b];if(p===F)return}this.uniform1fCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform1f(C,p)}setUniform1i(b,p){if(this.uniform1iCache.hasOwnProperty(b)){let F=this.uniform1iCache[b];if(p===F)return}this.uniform1iCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform1i(C,p)}setUniform2f(b,p,C){if(this.uniform2fCache.hasOwnProperty(b)){let P=this.uniform2fCache[b];if(p===P[0]&&C===P[1])return}this.uniform2fCache[b]=[p,C];let F=this.getUniformLocation(b);this.context.uniform2f(F,p,C)}setUniform2fv(b,p){if(this.uniform2fvCache.hasOwnProperty(b)){let F=this.uniform2fvCache[b];if(p[0]===F[0]&&p[1]===F[1])return}this.uniform2fvCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform2fv(C,p)}setUniform2iv(b,p){if(this.uniform2ivCache.hasOwnProperty(b)){let F=this.uniform2ivCache[b];if(p[0]===F[0]&&p[1]===F[1])return}this.uniform2ivCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform2iv(C,p)}setUniform3fv(b,p){if(this.uniform3fvCache.hasOwnProperty(b)){let F=this.uniform3fvCache[b];if(p[0]===F[0]&&p[1]===F[1]&&p[2]===F[2])return}this.uniform3fvCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform3fv(C,p)}setUniform3iv(b,p){if(this.uniform3ivCache.hasOwnProperty(b)){let F=this.uniform3ivCache[b];if(p[0]===F[0]&&p[1]===F[1]&&p[2]===F[2])return}this.uniform3ivCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform3iv(C,p)}setUniform4fv(b,p){if(this.uniform4fvCache.hasOwnProperty(b)){let F=this.uniform4fvCache[b];if(p[0]===F[0]&&p[1]===F[1]&&p[2]===F[2]&&p[3]===F[3])return}this.uniform4fvCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform4fv(C,p)}setUniform4iv(b,p){if(this.uniform4ivCache.hasOwnProperty(b)){let F=this.uniform4ivCache[b];if(p[0]===F[0]&&p[1]===F[1]&&p[2]===F[2]&&p[3]===F[3])return}this.uniform4ivCache[b]=p;let C=this.getUniformLocation(b);this.context.uniform4iv(C,p)}getUniformLocation(b){return this.programUniformLocationCache.hasOwnProperty(b)?this.programUniformLocationCache[b]:this.programUniformLocationCache[b]=this.context.getUniformLocation(this.program,b)}_getFragShaderArtifactMap(b){return{HEADER:this._getHeaderString(),LOOP_MAX:this._getLoopMaxString(),PLUGINS:this._getPluginsString(),CONSTANTS:this._getConstantsString(),DECODE32_ENDIANNESS:this._getDecode32EndiannessString(),ENCODE32_ENDIANNESS:this._getEncode32EndiannessString(),DIVIDE_WITH_INTEGER_CHECK:this._getDivideWithIntegerCheckString(),INJECTED_NATIVE:this._getInjectedNative(),MAIN_CONSTANTS:this._getMainConstantsString(),MAIN_ARGUMENTS:this._getMainArgumentsString(b),KERNEL:this.getKernelString(),MAIN_RESULT:this.getMainResultString(),FLOAT_TACTIC_DECLARATION:this.getFloatTacticDeclaration(),INT_TACTIC_DECLARATION:this.getIntTacticDeclaration(),SAMPLER_2D_TACTIC_DECLARATION:this.getSampler2DTacticDeclaration(),SAMPLER_2D_ARRAY_TACTIC_DECLARATION:this.getSampler2DArrayTacticDeclaration()}}_getVertShaderArtifactMap(b){return{FLOAT_TACTIC_DECLARATION:this.getFloatTacticDeclaration(),INT_TACTIC_DECLARATION:this.getIntTacticDeclaration(),SAMPLER_2D_TACTIC_DECLARATION:this.getSampler2DTacticDeclaration(),SAMPLER_2D_ARRAY_TACTIC_DECLARATION:this.getSampler2DArrayTacticDeclaration()}}_getHeaderString(){return this.subKernels!==null?`#extension GL_EXT_draw_buffers : require\n`:""}_getLoopMaxString(){return this.loopMaxIterations?` ${parseInt(this.loopMaxIterations)};\n`:` 1000;\n`}_getPluginsString(){return this.plugins?this.plugins.map(b=>b.source&&this.source.match(b.functionMatch)?b.source:"").join(`\n`):`\n`}_getConstantsString(){let b=[],{threadDim:p,texSize:C}=this;return this.dynamicOutput?b.push("uniform ivec3 uOutputDim","uniform ivec2 uTexSize"):b.push(`ivec3 uOutputDim = ivec3(${p[0]}, ${p[1]}, ${p[2]})`,`ivec2 uTexSize = ivec2(${C[0]}, ${C[1]})`),f.linesToString(b)}_getTextureCoordinate(){let b=this.subKernels;return b===null||b.length<1?`varying vec2 vTexCoord;\n`:`out vec2 vTexCoord;\n`}_getDecode32EndiannessString(){return this.endianness==="LE"?"":`  texel.rgba = texel.abgr;\n`}_getEncode32EndiannessString(){return this.endianness==="LE"?"":`  texel.rgba = texel.abgr;\n`}_getDivideWithIntegerCheckString(){return this.fixIntegerDivisionAccuracy?`float divWithIntCheck(float x, float y) {\n        if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n          return float(int(x) / int(y));\n        }\n        return x / y;\n      }\n      \n      float integerCorrectionModulo(float number, float divisor) {\n        if (number < 0.0) {\n          number = abs(number);\n          if (divisor < 0.0) {\n            divisor = abs(divisor);\n          }\n          return -(number - (divisor * floor(divWithIntCheck(number, divisor))));\n        }\n        if (divisor < 0.0) {\n          divisor = abs(divisor);\n        }\n        return number - (divisor * floor(divWithIntCheck(number, divisor)));\n      }`:""}_getMainArgumentsString(b){let p=[],{argumentNames:C}=this;for(let F=0;F<C.length;F++)p.push(this.kernelArguments[F].getSource(b[F]));return p.join("")}_getInjectedNative(){return this.injectedNative||""}_getMainConstantsString(){let b=[],{constants:p}=this;if(p){let C=0;for(let F in p)!this.constants.hasOwnProperty(F)||b.push(this.kernelConstants[C++].getSource(this.constants[F]))}return b.join("")}getRawValueFramebuffer(b,p){if(this.rawValueFramebuffers[b]||(this.rawValueFramebuffers[b]={}),!this.rawValueFramebuffers[b][p]){let C=this.context.createFramebuffer();C.width=b,C.height=p,this.rawValueFramebuffers[b][p]=C}return this.rawValueFramebuffers[b][p]}getKernelResultDeclaration(){switch(this.returnType){case"Array(2)":return"vec2 kernelResult";case"Array(3)":return"vec3 kernelResult";case"Array(4)":return"vec4 kernelResult";case"LiteralInteger":case"Float":case"Number":case"Integer":return"float kernelResult";default:if(this.graphical)return"float kernelResult";throw new Error(`unrecognized output type "${this.returnType}"`)}}getKernelString(){let b=[this.getKernelResultDeclaration()],{subKernels:p}=this;if(p!==null)switch(this.returnType){case"Number":case"Float":case"Integer":for(let C=0;C<p.length;C++){let F=p[C];b.push(F.returnType==="Integer"?`int subKernelResult_${F.name} = 0`:`float subKernelResult_${F.name} = 0.0`)}break;case"Array(2)":for(let C=0;C<p.length;C++)b.push(`vec2 subKernelResult_${p[C].name}`);break;case"Array(3)":for(let C=0;C<p.length;C++)b.push(`vec3 subKernelResult_${p[C].name}`);break;case"Array(4)":for(let C=0;C<p.length;C++)b.push(`vec4 subKernelResult_${p[C].name}`);break}return f.linesToString(b)+this.translatedSource}getMainResultGraphical(){return f.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = actualColor"])}getMainResultPackedPixels(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return this.getMainResultKernelPackedPixels()+this.getMainResultSubKernelPackedPixels();default:throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`)}}getMainResultKernelPackedPixels(){return f.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  gl_FragData[0] = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(kernelResult)`])}getMainResultSubKernelPackedPixels(){let b=[];if(!this.subKernels)return"";for(let p=0;p<this.subKernels.length;p++)this.subKernels[p].returnType==="Integer"?b.push(`  gl_FragData[${p+1}] = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(float(subKernelResult_${this.subKernels[p].name}))`):b.push(`  gl_FragData[${p+1}] = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(subKernelResult_${this.subKernels[p].name})`);return f.linesToString(b)}getMainResultMemoryOptimizedFloats(){let b=["  index *= 4"];switch(this.returnType){case"Number":case"Integer":case"Float":let p=["r","g","b","a"];for(let C=0;C<p.length;C++){let F=p[C];this.getMainResultKernelMemoryOptimizedFloats(b,F),this.getMainResultSubKernelMemoryOptimizedFloats(b,F),C+1<p.length&&b.push("  index += 1")}break;default:throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`)}return f.linesToString(b)}getMainResultKernelMemoryOptimizedFloats(b,p){b.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  gl_FragData[0].${p} = kernelResult`)}getMainResultSubKernelMemoryOptimizedFloats(b,p){if(!this.subKernels)return b;for(let C=0;C<this.subKernels.length;C++)this.subKernels[C].returnType==="Integer"?b.push(`  gl_FragData[${C+1}].${p} = float(subKernelResult_${this.subKernels[C].name})`):b.push(`  gl_FragData[${C+1}].${p} = subKernelResult_${this.subKernels[C].name}`)}getMainResultKernelNumberTexture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult"]}getMainResultSubKernelNumberTexture(){let b=[];if(!this.subKernels)return b;for(let p=0;p<this.subKernels.length;++p){let C=this.subKernels[p];C.returnType==="Integer"?b.push(`  gl_FragData[${p+1}][0] = float(subKernelResult_${C.name})`):b.push(`  gl_FragData[${p+1}][0] = subKernelResult_${C.name}`)}return b}getMainResultKernelArray2Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult[0]","  gl_FragData[0][1] = kernelResult[1]"]}getMainResultSubKernelArray2Texture(){let b=[];if(!this.subKernels)return b;for(let p=0;p<this.subKernels.length;++p)b.push(`  gl_FragData[${p+1}][0] = subKernelResult_${this.subKernels[p].name}[0]`,`  gl_FragData[${p+1}][1] = subKernelResult_${this.subKernels[p].name}[1]`);return b}getMainResultKernelArray3Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult[0]","  gl_FragData[0][1] = kernelResult[1]","  gl_FragData[0][2] = kernelResult[2]"]}getMainResultSubKernelArray3Texture(){let b=[];if(!this.subKernels)return b;for(let p=0;p<this.subKernels.length;++p)b.push(`  gl_FragData[${p+1}][0] = subKernelResult_${this.subKernels[p].name}[0]`,`  gl_FragData[${p+1}][1] = subKernelResult_${this.subKernels[p].name}[1]`,`  gl_FragData[${p+1}][2] = subKernelResult_${this.subKernels[p].name}[2]`);return b}getMainResultKernelArray4Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0] = kernelResult"]}getMainResultSubKernelArray4Texture(){let b=[];if(!this.subKernels)return b;switch(this.returnType){case"Number":case"Float":case"Integer":for(let p=0;p<this.subKernels.length;++p)this.subKernels[p].returnType==="Integer"?b.push(`  gl_FragData[${p+1}] = float(subKernelResult_${this.subKernels[p].name})`):b.push(`  gl_FragData[${p+1}] = subKernelResult_${this.subKernels[p].name}`);break;case"Array(2)":for(let p=0;p<this.subKernels.length;++p)b.push(`  gl_FragData[${p+1}][0] = subKernelResult_${this.subKernels[p].name}[0]`,`  gl_FragData[${p+1}][1] = subKernelResult_${this.subKernels[p].name}[1]`);break;case"Array(3)":for(let p=0;p<this.subKernels.length;++p)b.push(`  gl_FragData[${p+1}][0] = subKernelResult_${this.subKernels[p].name}[0]`,`  gl_FragData[${p+1}][1] = subKernelResult_${this.subKernels[p].name}[1]`,`  gl_FragData[${p+1}][2] = subKernelResult_${this.subKernels[p].name}[2]`);break;case"Array(4)":for(let p=0;p<this.subKernels.length;++p)b.push(`  gl_FragData[${p+1}][0] = subKernelResult_${this.subKernels[p].name}[0]`,`  gl_FragData[${p+1}][1] = subKernelResult_${this.subKernels[p].name}[1]`,`  gl_FragData[${p+1}][2] = subKernelResult_${this.subKernels[p].name}[2]`,`  gl_FragData[${p+1}][3] = subKernelResult_${this.subKernels[p].name}[3]`);break}return b}replaceArtifacts(b,p){return b.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\\n/g,(C,F)=>{if(p.hasOwnProperty(F))return p[F];throw`unhandled artifact ${F}`})}getFragmentShader(b){return this.compiledFragmentShader!==null?this.compiledFragmentShader:this.compiledFragmentShader=this.replaceArtifacts(this.constructor.fragmentShader,this._getFragShaderArtifactMap(b))}getVertexShader(b){return this.compiledVertexShader!==null?this.compiledVertexShader:this.compiledVertexShader=this.replaceArtifacts(this.constructor.vertexShader,this._getVertShaderArtifactMap(b))}toString(){let b=f.linesToString(["const gl = context"]);return n(this.constructor,arguments,this,b)}destroy(b){if(!this.context)return;this.buffer&&this.context.deleteBuffer(this.buffer),this.framebuffer&&this.context.deleteFramebuffer(this.framebuffer);for(let C in this.rawValueFramebuffers){for(let F in this.rawValueFramebuffers[C])this.context.deleteFramebuffer(this.rawValueFramebuffers[C][F]),delete this.rawValueFramebuffers[C][F];delete this.rawValueFramebuffers[C]}if(this.vertShader&&this.context.deleteShader(this.vertShader),this.fragShader&&this.context.deleteShader(this.fragShader),this.program&&this.context.deleteProgram(this.program),this.texture){this.texture.delete();let C=this.textureCache.indexOf(this.texture.texture);C>-1&&this.textureCache.splice(C,1),this.texture=null}if(this.mappedTextures&&this.mappedTextures.length){for(let C=0;C<this.mappedTextures.length;C++){let F=this.mappedTextures[C];F.delete();let P=this.textureCache.indexOf(F.texture);P>-1&&this.textureCache.splice(P,1)}this.mappedTextures=null}if(this.kernelArguments)for(let C=0;C<this.kernelArguments.length;C++)this.kernelArguments[C].destroy();if(this.kernelConstants)for(let C=0;C<this.kernelConstants.length;C++)this.kernelConstants[C].destroy();for(;this.textureCache.length>0;){let C=this.textureCache.pop();this.context.deleteTexture(C)}if(b){let C=_.indexOf(this.canvas);C>=0&&(_[C]=null,w[C]=null)}if(this.destroyExtensions(),delete this.context,delete this.canvas,!this.gpu)return;let p=this.gpu.kernels.indexOf(this);p!==-1&&this.gpu.kernels.splice(p,1)}destroyExtensions(){this.extensions.OES_texture_float=null,this.extensions.OES_texture_float_linear=null,this.extensions.OES_element_index_uint=null,this.extensions.WEBGL_draw_buffers=null}static destroyContext(b){let p=b.getExtension("WEBGL_lose_context");p&&p.loseContext()}toJSON(){let b=super.toJSON();return b.functionNodes=c.fromKernel(this,d).toJSON(),b.settings.threadDim=this.threadDim,b}}o.exports={WebGLKernel:M}},{"../../plugins/math-random-uniformly-distributed":112,"../../utils":114,"../function-builder":9,"../gl/kernel":13,"../gl/kernel-string":12,"./fragment-shader":37,"./function-node":38,"./kernel-value-maps":39,"./vertex-shader":71}],71:[function(i,o,m){let u=`__FLOAT_TACTIC_DECLARATION__;\n      __INT_TACTIC_DECLARATION__;\n      __SAMPLER_2D_TACTIC_DECLARATION__;\n      \n      attribute vec2 aPos;\n      attribute vec2 aTexCoord;\n      \n      varying vec2 vTexCoord;\n      uniform vec2 ratio;\n      \n      void main(void) {\n        gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n        vTexCoord = aTexCoord;\n      }`;o.exports={vertexShader:u}},{}],72:[function(i,o,m){let u=`#version 300 es\n      __HEADER__;\n      __FLOAT_TACTIC_DECLARATION__;\n      __INT_TACTIC_DECLARATION__;\n      __SAMPLER_2D_TACTIC_DECLARATION__;\n      __SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n      \n      const int LOOP_MAX = __LOOP_MAX__;\n      \n      __PLUGINS__;\n      __CONSTANTS__;\n      \n      in vec2 vTexCoord;\n      \n      float atan2(float v1, float v2) {\n        if (v1 == 0.0 || v2 == 0.0) return 0.0;\n        return atan(v1 / v2);\n      }\n      \n      float cbrt(float x) {\n        if (x >= 0.0) {\n          return pow(x, 1.0 / 3.0);\n        } else {\n          return -pow(x, 1.0 / 3.0);\n        }\n      }\n      \n      float expm1(float x) {\n        return pow(${Math.E}, x) - 1.0; \n      }\n      \n      float fround(highp float x) {\n        return x;\n      }\n      \n      float imul(float v1, float v2) {\n        return float(int(v1) * int(v2));\n      }\n      \n      float log10(float x) {\n        return log2(x) * (1.0 / log2(10.0));\n      }\n      \n      float log1p(float x) {\n        return log(1.0 + x);\n      }\n      \n      float _pow(float v1, float v2) {\n        if (v2 == 0.0) return 1.0;\n        return pow(v1, v2);\n      }\n      \n      float _round(float x) {\n        return floor(x + 0.5);\n      }\n      \n      \n      const int BIT_COUNT = 32;\n      int modi(int x, int y) {\n        return x - y * (x / y);\n      }\n      \n      int bitwiseOr(int a, int b) {\n        int result = 0;\n        int n = 1;\n        \n        for (int i = 0; i < BIT_COUNT; i++) {\n          if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n            result += n;\n          }\n          a = a / 2;\n          b = b / 2;\n          n = n * 2;\n          if(!(a > 0 || b > 0)) {\n            break;\n          }\n        }\n        return result;\n      }\n      int bitwiseXOR(int a, int b) {\n        int result = 0;\n        int n = 1;\n        \n        for (int i = 0; i < BIT_COUNT; i++) {\n          if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n            result += n;\n          }\n          a = a / 2;\n          b = b / 2;\n          n = n * 2;\n          if(!(a > 0 || b > 0)) {\n            break;\n          }\n        }\n        return result;\n      }\n      int bitwiseAnd(int a, int b) {\n        int result = 0;\n        int n = 1;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n            result += n;\n          }\n          a = a / 2;\n          b = b / 2;\n          n = n * 2;\n          if(!(a > 0 && b > 0)) {\n            break;\n          }\n        }\n        return result;\n      }\n      int bitwiseNot(int a) {\n        int result = 0;\n        int n = 1;\n        \n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (modi(a, 2) == 0) {\n            result += n;    \n          }\n          a = a / 2;\n          n = n * 2;\n        }\n        return result;\n      }\n      int bitwiseZeroFillLeftShift(int n, int shift) {\n        int maxBytes = BIT_COUNT;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (maxBytes >= n) {\n            break;\n          }\n          maxBytes *= 2;\n        }\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= shift) {\n            break;\n          }\n          n *= 2;\n        }\n      \n        int result = 0;\n        int byteVal = 1;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= maxBytes) break;\n          if (modi(n, 2) > 0) { result += byteVal; }\n          n = int(n / 2);\n          byteVal *= 2;\n        }\n        return result;\n      }\n      \n      int bitwiseSignedRightShift(int num, int shifts) {\n        return int(floor(float(num) / pow(2.0, float(shifts))));\n      }\n      \n      int bitwiseZeroFillRightShift(int n, int shift) {\n        int maxBytes = BIT_COUNT;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (maxBytes >= n) {\n            break;\n          }\n          maxBytes *= 2;\n        }\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= shift) {\n            break;\n          }\n          n /= 2;\n        }\n        int result = 0;\n        int byteVal = 1;\n        for (int i = 0; i < BIT_COUNT; i++) {\n          if (i >= maxBytes) break;\n          if (modi(n, 2) > 0) { result += byteVal; }\n          n = int(n / 2);\n          byteVal *= 2;\n        }\n        return result;\n      }\n      \n      vec2 integerMod(vec2 x, float y) {\n        vec2 res = floor(mod(x, y));\n        return res * step(1.0 - floor(y), -res);\n      }\n      \n      vec3 integerMod(vec3 x, float y) {\n        vec3 res = floor(mod(x, y));\n        return res * step(1.0 - floor(y), -res);\n      }\n      \n      vec4 integerMod(vec4 x, vec4 y) {\n        vec4 res = floor(mod(x, y));\n        return res * step(1.0 - floor(y), -res);\n      }\n      \n      float integerMod(float x, float y) {\n        float res = floor(mod(x, y));\n        return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n      }\n      \n      int integerMod(int x, int y) {\n        return x - (y * int(x/y));\n      }\n      \n      __DIVIDE_WITH_INTEGER_CHECK__;\n      \n      // Here be dragons!\n      // DO NOT OPTIMIZE THIS CODE\n      // YOU WILL BREAK SOMETHING ON SOMEBODY\'S MACHINE\n      // LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\n      const vec2 MAGIC_VEC = vec2(1.0, -256.0);\n      const vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\n      const vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\n      float decode32(vec4 texel) {\n        __DECODE32_ENDIANNESS__;\n        texel *= 255.0;\n        vec2 gte128;\n        gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n        gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n        float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n        float res = exp2(round(exponent));\n        texel.b = texel.b - 128.0 * gte128.x;\n        res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n        res *= gte128.y * -2.0 + 1.0;\n        return res;\n      }\n      \n      float decode16(vec4 texel, int index) {\n        int channel = integerMod(index, 2);\n        return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n      }\n      \n      float decode8(vec4 texel, int index) {\n        int channel = integerMod(index, 4);\n        return texel[channel] * 255.0;\n      }\n      \n      vec4 legacyEncode32(float f) {\n        float F = abs(f);\n        float sign = f < 0.0 ? 1.0 : 0.0;\n        float exponent = floor(log2(F));\n        float mantissa = (exp2(-exponent) * F);\n        // exponent += floor(log2(mantissa));\n        vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n        texel.rg = integerMod(texel.rg, 256.0);\n        texel.b = integerMod(texel.b, 128.0);\n        texel.a = exponent*0.5 + 63.5;\n        texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n        texel = floor(texel);\n        texel *= 0.003921569; // 1/255\n        __ENCODE32_ENDIANNESS__;\n        return texel;\n      }\n      \n      // https://github.com/gpujs/gpu.js/wiki/Encoder-details\n      vec4 encode32(float value) {\n        if (value == 0.0) return vec4(0, 0, 0, 0);\n      \n        float exponent;\n        float mantissa;\n        vec4  result;\n        float sgn;\n      \n        sgn = step(0.0, -value);\n        value = abs(value);\n      \n        exponent = floor(log2(value));\n      \n        mantissa = value*pow(2.0, -exponent)-1.0;\n        exponent = exponent+127.0;\n        result   = vec4(0,0,0,0);\n      \n        result.a = floor(exponent/2.0);\n        exponent = exponent - result.a*2.0;\n        result.a = result.a + 128.0*sgn;\n      \n        result.b = floor(mantissa * 128.0);\n        mantissa = mantissa - result.b / 128.0;\n        result.b = result.b + exponent*128.0;\n      \n        result.g = floor(mantissa*32768.0);\n        mantissa = mantissa - result.g/32768.0;\n      \n        result.r = floor(mantissa*8388608.0);\n        return result/255.0;\n      }\n      // Dragons end here\n      \n      int index;\n      ivec3 threadId;\n      \n      ivec3 indexTo3D(int idx, ivec3 texDim) {\n        int z = int(idx / (texDim.x * texDim.y));\n        idx -= z * int(texDim.x * texDim.y);\n        int y = int(idx / texDim.x);\n        int x = int(integerMod(idx, texDim.x));\n        return ivec3(x, y, z);\n      }\n      \n      float get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture(tex, st / vec2(texSize));\n        return decode32(texel);\n      }\n      \n      float get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + (texDim.x * (y + (texDim.y * z)));\n        int w = texSize.x * 2;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n        return decode16(texel, index);\n      }\n      \n      float get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + (texDim.x * (y + (texDim.y * z)));\n        int w = texSize.x * 4;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n        return decode8(texel, index);\n      }\n      \n      float getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + (texDim.x * (y + (texDim.y * z)));\n        int channel = integerMod(index, 4);\n        index = index / 4;\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        index = index / 4;\n        vec4 texel = texture(tex, st / vec2(texSize));\n        return texel[channel];\n      }\n      \n      vec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        return texture(tex, st / vec2(texSize));\n      }\n      \n      vec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        return texture(tex, vec3(st / vec2(texSize), z));\n      }\n      \n      float getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n        return result[0];\n      }\n      \n      vec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n        return vec2(result[0], result[1]);\n      }\n      \n      vec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int channel = integerMod(index, 2);\n        index = index / 2;\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture(tex, st / vec2(texSize));\n        if (channel == 0) return vec2(texel.r, texel.g);\n        if (channel == 1) return vec2(texel.b, texel.a);\n        return vec2(0.0, 0.0);\n      }\n      \n      vec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n        return vec3(result[0], result[1], result[2]);\n      }\n      \n      vec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n        int vectorIndex = fieldIndex / 4;\n        int vectorOffset = fieldIndex - vectorIndex * 4;\n        int readY = vectorIndex / texSize.x;\n        int readX = vectorIndex - readY * texSize.x;\n        vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n      \n        if (vectorOffset == 0) {\n          return tex1.xyz;\n        } else if (vectorOffset == 1) {\n          return tex1.yzw;\n        } else {\n          readX++;\n          if (readX >= texSize.x) {\n            readX = 0;\n            readY++;\n          }\n          vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n          if (vectorOffset == 2) {\n            return vec3(tex1.z, tex1.w, tex2.x);\n          } else {\n            return vec3(tex1.w, tex2.x, tex2.y);\n          }\n        }\n      }\n      \n      vec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        return getImage2D(tex, texSize, texDim, z, y, x);\n      }\n      \n      vec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n        int index = x + texDim.x * (y + texDim.y * z);\n        int channel = integerMod(index, 2);\n        int w = texSize.x;\n        vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n        vec4 texel = texture(tex, st / vec2(texSize));\n        return vec4(texel.r, texel.g, texel.b, texel.a);\n      }\n      \n      vec4 actualColor;\n      void color(float r, float g, float b, float a) {\n        actualColor = vec4(r,g,b,a);\n      }\n      \n      void color(float r, float g, float b) {\n        color(r,g,b,1.0);\n      }\n      \n      float modulo(float number, float divisor) {\n        if (number < 0.0) {\n          number = abs(number);\n          if (divisor < 0.0) {\n            divisor = abs(divisor);\n          }\n          return -mod(number, divisor);\n        }\n        if (divisor < 0.0) {\n          divisor = abs(divisor);\n        }\n        return mod(number, divisor);\n      }\n      \n      __INJECTED_NATIVE__;\n      __MAIN_CONSTANTS__;\n      __MAIN_ARGUMENTS__;\n      __KERNEL__;\n      \n      void main(void) {\n        index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n        __MAIN_RESULT__;\n      }`;o.exports={fragmentShader:u}},{}],73:[function(i,o,m){let{utils:u}=i("../../utils"),{WebGLFunctionNode:c}=i("../web-gl/function-node");class d extends c{astIdentifierExpression(r,a){if(r.type!=="Identifier")throw this.astErrorOutput("IdentifierExpression - not an Identifier",r);let t=this.getType(r),n=u.sanitizeName(r.name);return r.name==="Infinity"?a.push("intBitsToFloat(2139095039)"):t==="Boolean"?this.argumentNames.indexOf(n)>-1?a.push(`bool(user_${n})`):a.push(`user_${n}`):a.push(`user_${n}`),a}}o.exports={WebGL2FunctionNode:d}},{"../../utils":114,"../web-gl/function-node":38}],74:[function(i,o,m){let{WebGL2KernelValueBoolean:u}=i("./kernel-value/boolean"),{WebGL2KernelValueFloat:c}=i("./kernel-value/float"),{WebGL2KernelValueInteger:d}=i("./kernel-value/integer"),{WebGL2KernelValueHTMLImage:f}=i("./kernel-value/html-image"),{WebGL2KernelValueDynamicHTMLImage:r}=i("./kernel-value/dynamic-html-image"),{WebGL2KernelValueHTMLImageArray:a}=i("./kernel-value/html-image-array"),{WebGL2KernelValueDynamicHTMLImageArray:t}=i("./kernel-value/dynamic-html-image-array"),{WebGL2KernelValueHTMLVideo:n}=i("./kernel-value/html-video"),{WebGL2KernelValueDynamicHTMLVideo:g}=i("./kernel-value/dynamic-html-video"),{WebGL2KernelValueSingleInput:v}=i("./kernel-value/single-input"),{WebGL2KernelValueDynamicSingleInput:k}=i("./kernel-value/dynamic-single-input"),{WebGL2KernelValueUnsignedInput:T}=i("./kernel-value/unsigned-input"),{WebGL2KernelValueDynamicUnsignedInput:A}=i("./kernel-value/dynamic-unsigned-input"),{WebGL2KernelValueMemoryOptimizedNumberTexture:E}=i("./kernel-value/memory-optimized-number-texture"),{WebGL2KernelValueDynamicMemoryOptimizedNumberTexture:y}=i("./kernel-value/dynamic-memory-optimized-number-texture"),{WebGL2KernelValueNumberTexture:_}=i("./kernel-value/number-texture"),{WebGL2KernelValueDynamicNumberTexture:w}=i("./kernel-value/dynamic-number-texture"),{WebGL2KernelValueSingleArray:M}=i("./kernel-value/single-array"),{WebGL2KernelValueDynamicSingleArray:N}=i("./kernel-value/dynamic-single-array"),{WebGL2KernelValueSingleArray1DI:b}=i("./kernel-value/single-array1d-i"),{WebGL2KernelValueDynamicSingleArray1DI:p}=i("./kernel-value/dynamic-single-array1d-i"),{WebGL2KernelValueSingleArray2DI:C}=i("./kernel-value/single-array2d-i"),{WebGL2KernelValueDynamicSingleArray2DI:F}=i("./kernel-value/dynamic-single-array2d-i"),{WebGL2KernelValueSingleArray3DI:P}=i("./kernel-value/single-array3d-i"),{WebGL2KernelValueDynamicSingleArray3DI:L}=i("./kernel-value/dynamic-single-array3d-i"),{WebGL2KernelValueSingleArray2:$}=i("./kernel-value/single-array2"),{WebGL2KernelValueSingleArray3:G}=i("./kernel-value/single-array3"),{WebGL2KernelValueSingleArray4:O}=i("./kernel-value/single-array4"),{WebGL2KernelValueUnsignedArray:Y}=i("./kernel-value/unsigned-array"),{WebGL2KernelValueDynamicUnsignedArray:W}=i("./kernel-value/dynamic-unsigned-array"),K={unsigned:{dynamic:{Boolean:u,Integer:d,Float:c,Array:W,"Array(2)":!1,"Array(3)":!1,"Array(4)":!1,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:A,NumberTexture:w,"ArrayTexture(1)":w,"ArrayTexture(2)":w,"ArrayTexture(3)":w,"ArrayTexture(4)":w,MemoryOptimizedNumberTexture:y,HTMLCanvas:r,HTMLImage:r,HTMLImageArray:t,HTMLVideo:g},static:{Boolean:u,Float:c,Integer:d,Array:Y,"Array(2)":!1,"Array(3)":!1,"Array(4)":!1,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:T,NumberTexture:_,"ArrayTexture(1)":_,"ArrayTexture(2)":_,"ArrayTexture(3)":_,"ArrayTexture(4)":_,MemoryOptimizedNumberTexture:y,HTMLCanvas:f,HTMLImage:f,HTMLImageArray:a,HTMLVideo:n}},single:{dynamic:{Boolean:u,Integer:d,Float:c,Array:N,"Array(2)":$,"Array(3)":G,"Array(4)":O,"Array1D(2)":p,"Array1D(3)":p,"Array1D(4)":p,"Array2D(2)":F,"Array2D(3)":F,"Array2D(4)":F,"Array3D(2)":L,"Array3D(3)":L,"Array3D(4)":L,Input:k,NumberTexture:w,"ArrayTexture(1)":w,"ArrayTexture(2)":w,"ArrayTexture(3)":w,"ArrayTexture(4)":w,MemoryOptimizedNumberTexture:y,HTMLCanvas:r,HTMLImage:r,HTMLImageArray:t,HTMLVideo:g},static:{Boolean:u,Float:c,Integer:d,Array:M,"Array(2)":$,"Array(3)":G,"Array(4)":O,"Array1D(2)":b,"Array1D(3)":b,"Array1D(4)":b,"Array2D(2)":C,"Array2D(3)":C,"Array2D(4)":C,"Array3D(2)":P,"Array3D(3)":P,"Array3D(4)":P,Input:v,NumberTexture:_,"ArrayTexture(1)":_,"ArrayTexture(2)":_,"ArrayTexture(3)":_,"ArrayTexture(4)":_,MemoryOptimizedNumberTexture:E,HTMLCanvas:f,HTMLImage:f,HTMLImageArray:a,HTMLVideo:n}}};function J(Q,te,H,B){if(!Q)throw new Error("type missing");if(!te)throw new Error("dynamic missing");if(!H)throw new Error("precision missing");B.type&&(Q=B.type);let he=K[H][te];if(he[Q]===!1)return null;if(he[Q]===void 0)throw new Error(`Could not find a KernelValue for ${Q}`);return he[Q]}o.exports={kernelValueMaps:K,lookupKernelValueType:J}},{"./kernel-value/boolean":75,"./kernel-value/dynamic-html-image":77,"./kernel-value/dynamic-html-image-array":76,"./kernel-value/dynamic-html-video":78,"./kernel-value/dynamic-memory-optimized-number-texture":79,"./kernel-value/dynamic-number-texture":80,"./kernel-value/dynamic-single-array":81,"./kernel-value/dynamic-single-array1d-i":82,"./kernel-value/dynamic-single-array2d-i":83,"./kernel-value/dynamic-single-array3d-i":84,"./kernel-value/dynamic-single-input":85,"./kernel-value/dynamic-unsigned-array":86,"./kernel-value/dynamic-unsigned-input":87,"./kernel-value/float":88,"./kernel-value/html-image":90,"./kernel-value/html-image-array":89,"./kernel-value/html-video":91,"./kernel-value/integer":92,"./kernel-value/memory-optimized-number-texture":93,"./kernel-value/number-texture":94,"./kernel-value/single-array":95,"./kernel-value/single-array1d-i":96,"./kernel-value/single-array2":97,"./kernel-value/single-array2d-i":98,"./kernel-value/single-array3":99,"./kernel-value/single-array3d-i":100,"./kernel-value/single-array4":101,"./kernel-value/single-input":102,"./kernel-value/unsigned-array":103,"./kernel-value/unsigned-input":104}],75:[function(i,o,m){let{WebGLKernelValueBoolean:u}=i("../../web-gl/kernel-value/boolean");class c extends u{}o.exports={WebGL2KernelValueBoolean:c}},{"../../web-gl/kernel-value/boolean":41}],76:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueHTMLImageArray:c}=i("./html-image-array");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2DArray ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}updateValue(r){let{width:a,height:t}=r[0];this.checkSize(a,t),this.dimensions=[a,t,r.length],this.textureSize=[a,t],this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGL2KernelValueDynamicHTMLImageArray:d}},{"../../../utils":114,"./html-image-array":89}],77:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueDynamicHTMLImage:c}=i("../../web-gl/kernel-value/dynamic-html-image");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}}o.exports={WebGL2KernelValueDynamicHTMLImage:d}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-html-image":42}],78:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueDynamicHTMLImage:c}=i("./dynamic-html-image");class d extends c{}o.exports={WebGL2KernelValueDynamicHTMLVideo:d}},{"../../../utils":114,"./dynamic-html-image":77}],79:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueDynamicMemoryOptimizedNumberTexture:c}=i("../../web-gl/kernel-value/dynamic-memory-optimized-number-texture");class d extends c{getSource(){return u.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}}o.exports={WebGL2KernelValueDynamicMemoryOptimizedNumberTexture:d}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-memory-optimized-number-texture":44}],80:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueDynamicNumberTexture:c}=i("../../web-gl/kernel-value/dynamic-number-texture");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}}o.exports={WebGL2KernelValueDynamicNumberTexture:d}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-number-texture":45}],81:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueSingleArray:c}=i("../../web-gl2/kernel-value/single-array");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}updateValue(r){this.dimensions=u.getDimensions(r,!0),this.textureSize=u.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGL2KernelValueDynamicSingleArray:d}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array":95}],82:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueSingleArray1DI:c}=i("../../web-gl2/kernel-value/single-array1d-i");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}updateValue(r){this.setShape(r),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGL2KernelValueDynamicSingleArray1DI:d}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array1d-i":96}],83:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueSingleArray2DI:c}=i("../../web-gl2/kernel-value/single-array2d-i");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}updateValue(r){this.setShape(r),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGL2KernelValueDynamicSingleArray2DI:d}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array2d-i":98}],84:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueSingleArray3DI:c}=i("../../web-gl2/kernel-value/single-array3d-i");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}updateValue(r){this.setShape(r),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGL2KernelValueDynamicSingleArray3DI:d}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array3d-i":100}],85:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueSingleInput:c}=i("../../web-gl2/kernel-value/single-input");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}updateValue(r){let[a,t,n]=r.size;this.dimensions=new Int32Array([a||1,t||1,n||1]),this.textureSize=u.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(r)}}o.exports={WebGL2KernelValueDynamicSingleInput:d}},{"../../../utils":114,"../../web-gl2/kernel-value/single-input":102}],86:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueDynamicUnsignedArray:c}=i("../../web-gl/kernel-value/dynamic-unsigned-array");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}}o.exports={WebGL2KernelValueDynamicUnsignedArray:d}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-unsigned-array":51}],87:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueDynamicUnsignedInput:c}=i("../../web-gl/kernel-value/dynamic-unsigned-input");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`uniform ${r} ivec2 ${this.sizeId}`,`uniform ${r} ivec3 ${this.dimensionsId}`])}}o.exports={WebGL2KernelValueDynamicUnsignedInput:d}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-unsigned-input":52}],88:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueFloat:c}=i("../../web-gl/kernel-value/float");class d extends c{}o.exports={WebGL2KernelValueFloat:d}},{"../../../utils":114,"../../web-gl/kernel-value/float":53}],89:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelArray:c}=i("../../web-gl/kernel-value/array");class d extends c{constructor(r,a){super(r,a),this.checkSize(r[0].width,r[0].height),this.dimensions=[r[0].width,r[0].height,r.length],this.textureSize=[r[0].width,r[0].height]}defineTexture(){let{context:r}=this;r.activeTexture(this.contextHandle),r.bindTexture(r.TEXTURE_2D_ARRAY,this.texture),r.texParameteri(r.TEXTURE_2D_ARRAY,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D_ARRAY,r.TEXTURE_MIN_FILTER,r.NEAREST)}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2DArray ${this.id}`,`${r} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${r} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){let{context:a}=this;a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D_ARRAY,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!0),a.texImage3D(a.TEXTURE_2D_ARRAY,0,a.RGBA,r[0].width,r[0].height,r.length,0,a.RGBA,a.UNSIGNED_BYTE,null);for(let t=0;t<r.length;t++)a.texSubImage3D(a.TEXTURE_2D_ARRAY,0,0,0,t,r[t].width,r[t].height,1,a.RGBA,a.UNSIGNED_BYTE,this.uploadValue=r[t]);this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGL2KernelValueHTMLImageArray:d}},{"../../../utils":114,"../../web-gl/kernel-value/array":40}],90:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueHTMLImage:c}=i("../../web-gl/kernel-value/html-image");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`${r} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${r} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}}o.exports={WebGL2KernelValueHTMLImage:d}},{"../../../utils":114,"../../web-gl/kernel-value/html-image":54}],91:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGL2KernelValueHTMLImage:c}=i("./html-image");class d extends c{}o.exports={WebGL2KernelValueHTMLVideo:d}},{"../../../utils":114,"./html-image":90}],92:[function(i,o,m){let{WebGLKernelValueInteger:u}=i("../../web-gl/kernel-value/integer");class c extends u{getSource(f){let r=this.getVariablePrecisionString();return this.origin==="constants"?`const ${r} int ${this.id} = ${parseInt(f)};\n`:`uniform ${r} int ${this.id};\n`}updateValue(f){this.origin!=="constants"&&this.kernel.setUniform1i(this.id,this.uploadValue=f)}}o.exports={WebGL2KernelValueInteger:c}},{"../../web-gl/kernel-value/integer":57}],93:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueMemoryOptimizedNumberTexture:c}=i("../../web-gl/kernel-value/memory-optimized-number-texture");class d extends c{getSource(){let{id:r,sizeId:a,textureSize:t,dimensionsId:n,dimensions:g}=this,v=this.getVariablePrecisionString();return u.linesToString([`uniform sampler2D ${r}`,`${v} ivec2 ${a} = ivec2(${t[0]}, ${t[1]})`,`${v} ivec3 ${n} = ivec3(${g[0]}, ${g[1]}, ${g[2]})`])}}o.exports={WebGL2KernelValueMemoryOptimizedNumberTexture:d}},{"../../../utils":114,"../../web-gl/kernel-value/memory-optimized-number-texture":58}],94:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueNumberTexture:c}=i("../../web-gl/kernel-value/number-texture");class d extends c{getSource(){let{id:r,sizeId:a,textureSize:t,dimensionsId:n,dimensions:g}=this,v=this.getVariablePrecisionString();return u.linesToString([`uniform ${v} sampler2D ${r}`,`${v} ivec2 ${a} = ivec2(${t[0]}, ${t[1]})`,`${v} ivec3 ${n} = ivec3(${g[0]}, ${g[1]}, ${g[2]})`])}}o.exports={WebGL2KernelValueNumberTexture:d}},{"../../../utils":114,"../../web-gl/kernel-value/number-texture":59}],95:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray:c}=i("../../web-gl/kernel-value/single-array");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`${r} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${r} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flattenTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA32F,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGL2KernelValueSingleArray:d}},{"../../../utils":114,"../../web-gl/kernel-value/single-array":60}],96:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray1DI:c}=i("../../web-gl/kernel-value/single-array1d-i");class d extends c{updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flattenTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA32F,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGL2KernelValueSingleArray1DI:d}},{"../../../utils":114,"../../web-gl/kernel-value/single-array1d-i":61}],97:[function(i,o,m){let{WebGLKernelValueSingleArray2:u}=i("../../web-gl/kernel-value/single-array2");class c extends u{}o.exports={WebGL2KernelValueSingleArray2:c}},{"../../web-gl/kernel-value/single-array2":62}],98:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray2DI:c}=i("../../web-gl/kernel-value/single-array2d-i");class d extends c{updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flattenTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA32F,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGL2KernelValueSingleArray2DI:d}},{"../../../utils":114,"../../web-gl/kernel-value/single-array2d-i":63}],99:[function(i,o,m){let{WebGLKernelValueSingleArray3:u}=i("../../web-gl/kernel-value/single-array3");class c extends u{}o.exports={WebGL2KernelValueSingleArray3:c}},{"../../web-gl/kernel-value/single-array3":64}],100:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleArray3DI:c}=i("../../web-gl/kernel-value/single-array3d-i");class d extends c{updateValue(r){if(r.constructor!==this.initialValueConstructor){this.onUpdateValueMismatch(r.constructor);return}let{context:a}=this;u.flattenTo(r,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA32F,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGL2KernelValueSingleArray3DI:d}},{"../../../utils":114,"../../web-gl/kernel-value/single-array3d-i":65}],101:[function(i,o,m){let{WebGLKernelValueSingleArray4:u}=i("../../web-gl/kernel-value/single-array4");class c extends u{}o.exports={WebGL2KernelValueSingleArray4:c}},{"../../web-gl/kernel-value/single-array4":66}],102:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueSingleInput:c}=i("../../web-gl/kernel-value/single-input");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`${r} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${r} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(r){let{context:a}=this;u.flattenTo(r.value,this.uploadValue),a.activeTexture(this.contextHandle),a.bindTexture(a.TEXTURE_2D,this.texture),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,!1),a.texImage2D(a.TEXTURE_2D,0,a.RGBA32F,this.textureSize[0],this.textureSize[1],0,a.RGBA,a.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}o.exports={WebGL2KernelValueSingleInput:d}},{"../../../utils":114,"../../web-gl/kernel-value/single-input":67}],103:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueUnsignedArray:c}=i("../../web-gl/kernel-value/unsigned-array");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`${r} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${r} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}}o.exports={WebGL2KernelValueUnsignedArray:d}},{"../../../utils":114,"../../web-gl/kernel-value/unsigned-array":68}],104:[function(i,o,m){let{utils:u}=i("../../../utils"),{WebGLKernelValueUnsignedInput:c}=i("../../web-gl/kernel-value/unsigned-input");class d extends c{getSource(){let r=this.getVariablePrecisionString();return u.linesToString([`uniform ${r} sampler2D ${this.id}`,`${r} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${r} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}}o.exports={WebGL2KernelValueUnsignedInput:d}},{"../../../utils":114,"../../web-gl/kernel-value/unsigned-input":69}],105:[function(i,o,m){let{WebGLKernel:u}=i("../web-gl/kernel"),{WebGL2FunctionNode:c}=i("./function-node"),{FunctionBuilder:d}=i("../function-builder"),{utils:f}=i("../../utils"),{fragmentShader:r}=i("./fragment-shader"),{vertexShader:a}=i("./vertex-shader"),{lookupKernelValueType:t}=i("./kernel-value-maps"),n=null,g=null,v=null,k=null,T=null;class A extends u{static get isSupported(){return n!==null||(this.setupFeatureChecks(),n=this.isContextMatch(v)),n}static setupFeatureChecks(){typeof document<"u"?g=document.createElement("canvas"):typeof OffscreenCanvas<"u"&&(g=new OffscreenCanvas(0,0)),g&&(v=g.getContext("webgl2"),!(!v||!v.getExtension)&&(k={EXT_color_buffer_float:v.getExtension("EXT_color_buffer_float"),OES_texture_float_linear:v.getExtension("OES_texture_float_linear")},T=this.getFeatures()))}static isContextMatch(y){return typeof WebGL2RenderingContext<"u"?y instanceof WebGL2RenderingContext:!1}static getFeatures(){let y=this.testContext;return Object.freeze({isFloatRead:this.getIsFloatRead(),isIntegerDivisionAccurate:this.getIsIntegerDivisionAccurate(),isSpeedTacticSupported:this.getIsSpeedTacticSupported(),kernelMap:!0,isTextureFloat:!0,isDrawBuffers:!0,channelCount:this.getChannelCount(),maxTextureSize:this.getMaxTextureSize(),lowIntPrecision:y.getShaderPrecisionFormat(y.FRAGMENT_SHADER,y.LOW_INT),lowFloatPrecision:y.getShaderPrecisionFormat(y.FRAGMENT_SHADER,y.LOW_FLOAT),mediumIntPrecision:y.getShaderPrecisionFormat(y.FRAGMENT_SHADER,y.MEDIUM_INT),mediumFloatPrecision:y.getShaderPrecisionFormat(y.FRAGMENT_SHADER,y.MEDIUM_FLOAT),highIntPrecision:y.getShaderPrecisionFormat(y.FRAGMENT_SHADER,y.HIGH_INT),highFloatPrecision:y.getShaderPrecisionFormat(y.FRAGMENT_SHADER,y.HIGH_FLOAT)})}static getIsTextureFloat(){return!0}static getChannelCount(){return v.getParameter(v.MAX_DRAW_BUFFERS)}static getMaxTextureSize(){return v.getParameter(v.MAX_TEXTURE_SIZE)}static lookupKernelValueType(y,_,w,M){return t(y,_,w,M)}static get testCanvas(){return g}static get testContext(){return v}static get features(){return T}static get fragmentShader(){return r}static get vertexShader(){return a}initContext(){let y={alpha:!1,depth:!1,antialias:!1};return this.canvas.getContext("webgl2",y)}initExtensions(){this.extensions={EXT_color_buffer_float:this.context.getExtension("EXT_color_buffer_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear")}}validateSettings(y){if(!this.validate){this.texSize=f.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output);return}let{features:_}=this.constructor;if(this.precision==="single"&&!_.isFloatRead)throw new Error("Float texture outputs are not supported");if(!this.graphical&&this.precision===null&&(this.precision=_.isFloatRead?"single":"unsigned"),this.fixIntegerDivisionAccuracy===null?this.fixIntegerDivisionAccuracy=!_.isIntegerDivisionAccurate:this.fixIntegerDivisionAccuracy&&_.isIntegerDivisionAccurate&&(this.fixIntegerDivisionAccuracy=!1),this.checkOutput(),!this.output||this.output.length===0){if(y.length!==1)throw new Error("Auto output only supported for kernels with only one input");let w=f.getVariableType(y[0],this.strictIntegers);switch(w){case"Array":this.output=f.getDimensions(w);break;case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":this.output=y[0].output;break;default:throw new Error("Auto output not supported for input type: "+w)}}if(this.graphical){if(this.output.length!==2)throw new Error("Output must have 2 dimensions on graphical mode");this.precision==="single"&&(console.warn("Cannot use graphical mode and single precision at the same time"),this.precision="unsigned"),this.texSize=f.clone(this.output);return}else!this.graphical&&this.precision===null&&_.isTextureFloat&&(this.precision="single");this.texSize=f.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output),this.checkTextureSize()}translateSource(){let y=d.fromKernel(this,c,{fixIntegerDivisionAccuracy:this.fixIntegerDivisionAccuracy});this.translatedSource=y.getPrototypeString("kernel"),this.setupReturnTypes(y)}drawBuffers(){this.context.drawBuffers(this.drawBuffersMap)}getTextureFormat(){let{context:y}=this;switch(this.getInternalFormat()){case y.R32F:return y.RED;case y.RG32F:return y.RG;case y.RGBA32F:return y.RGBA;case y.RGBA:return y.RGBA;default:throw new Error("Unknown internal format")}}getInternalFormat(){let{context:y}=this;if(this.precision==="single"){if(this.pipeline)switch(this.returnType){case"Number":case"Float":case"Integer":return this.optimizeFloatMemory?y.RGBA32F:y.R32F;case"Array(2)":return y.RG32F;case"Array(3)":case"Array(4)":return y.RGBA32F;default:throw new Error("Unhandled return type")}return y.RGBA32F}return y.RGBA}_setupOutputTexture(){let y=this.context;if(this.texture){y.framebufferTexture2D(y.FRAMEBUFFER,y.COLOR_ATTACHMENT0,y.TEXTURE_2D,this.texture.texture,0);return}y.bindFramebuffer(y.FRAMEBUFFER,this.framebuffer);let _=y.createTexture(),w=this.texSize;y.activeTexture(y.TEXTURE0+this.constantTextureCount+this.argumentTextureCount),y.bindTexture(y.TEXTURE_2D,_),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_WRAP_S,y.REPEAT),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_WRAP_T,y.REPEAT),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_MIN_FILTER,y.NEAREST),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_MAG_FILTER,y.NEAREST);let M=this.getInternalFormat();this.precision==="single"?y.texStorage2D(y.TEXTURE_2D,1,M,w[0],w[1]):y.texImage2D(y.TEXTURE_2D,0,M,w[0],w[1],0,M,y.UNSIGNED_BYTE,null),y.framebufferTexture2D(y.FRAMEBUFFER,y.COLOR_ATTACHMENT0,y.TEXTURE_2D,_,0),this.texture=new this.TextureConstructor({texture:_,size:w,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this})}_setupSubOutputTextures(){let y=this.context;if(this.mappedTextures){for(let w=0;w<this.subKernels.length;w++)y.framebufferTexture2D(y.FRAMEBUFFER,y.COLOR_ATTACHMENT0+w+1,y.TEXTURE_2D,this.mappedTextures[w].texture,0);return}let _=this.texSize;this.drawBuffersMap=[y.COLOR_ATTACHMENT0],this.mappedTextures=[];for(let w=0;w<this.subKernels.length;w++){let M=this.createTexture();this.drawBuffersMap.push(y.COLOR_ATTACHMENT0+w+1),y.activeTexture(y.TEXTURE0+this.constantTextureCount+this.argumentTextureCount+w),y.bindTexture(y.TEXTURE_2D,M),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_WRAP_S,y.CLAMP_TO_EDGE),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_WRAP_T,y.CLAMP_TO_EDGE),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_MIN_FILTER,y.NEAREST),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_MAG_FILTER,y.NEAREST);let N=this.getInternalFormat();this.precision==="single"?y.texStorage2D(y.TEXTURE_2D,1,N,_[0],_[1]):y.texImage2D(y.TEXTURE_2D,0,y.RGBA,_[0],_[1],0,y.RGBA,y.UNSIGNED_BYTE,null),y.framebufferTexture2D(y.FRAMEBUFFER,y.COLOR_ATTACHMENT0+w+1,y.TEXTURE_2D,M,0),this.mappedTextures.push(new this.TextureConstructor({texture:M,size:_,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this}))}}_getHeaderString(){return""}_getTextureCoordinate(){let y=this.subKernels,_=this.getVariablePrecisionString(this.texSize,this.tactic);return y===null||y.length<1?`in ${_} vec2 vTexCoord;\n`:`out ${_} vec2 vTexCoord;\n`}_getMainArgumentsString(y){let _=[],w=this.argumentNames;for(let M=0;M<w.length;M++)_.push(this.kernelArguments[M].getSource(y[M]));return _.join("")}getKernelString(){let y=[this.getKernelResultDeclaration()],_=this.subKernels;if(_!==null)switch(y.push("layout(location = 0) out vec4 data0"),this.returnType){case"Number":case"Float":case"Integer":for(let w=0;w<_.length;w++){let M=_[w];y.push(M.returnType==="Integer"?`int subKernelResult_${M.name} = 0`:`float subKernelResult_${M.name} = 0.0`,`layout(location = ${w+1}) out vec4 data${w+1}`)}break;case"Array(2)":for(let w=0;w<_.length;w++)y.push(`vec2 subKernelResult_${_[w].name}`,`layout(location = ${w+1}) out vec4 data${w+1}`);break;case"Array(3)":for(let w=0;w<_.length;w++)y.push(`vec3 subKernelResult_${_[w].name}`,`layout(location = ${w+1}) out vec4 data${w+1}`);break;case"Array(4)":for(let w=0;w<_.length;w++)y.push(`vec4 subKernelResult_${_[w].name}`,`layout(location = ${w+1}) out vec4 data${w+1}`);break}else y.push("out vec4 data0");return f.linesToString(y)+this.translatedSource}getMainResultGraphical(){return f.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = actualColor"])}getMainResultPackedPixels(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return this.getMainResultKernelPackedPixels()+this.getMainResultSubKernelPackedPixels();default:throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`)}}getMainResultKernelPackedPixels(){return f.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  data0 = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(kernelResult)`])}getMainResultSubKernelPackedPixels(){let y=[];if(!this.subKernels)return"";for(let _=0;_<this.subKernels.length;_++)this.subKernels[_].returnType==="Integer"?y.push(`  data${_+1} = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(float(subKernelResult_${this.subKernels[_].name}))`):y.push(`  data${_+1} = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(subKernelResult_${this.subKernels[_].name})`);return f.linesToString(y)}getMainResultKernelMemoryOptimizedFloats(y,_){y.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  data0.${_} = kernelResult`)}getMainResultSubKernelMemoryOptimizedFloats(y,_){if(!this.subKernels)return y;for(let w=0;w<this.subKernels.length;w++){let M=this.subKernels[w];M.returnType==="Integer"?y.push(`  data${w+1}.${_} = float(subKernelResult_${M.name})`):y.push(`  data${w+1}.${_} = subKernelResult_${M.name}`)}}getMainResultKernelNumberTexture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult"]}getMainResultSubKernelNumberTexture(){let y=[];if(!this.subKernels)return y;for(let _=0;_<this.subKernels.length;++_){let w=this.subKernels[_];w.returnType==="Integer"?y.push(`  data${_+1}[0] = float(subKernelResult_${w.name})`):y.push(`  data${_+1}[0] = subKernelResult_${w.name}`)}return y}getMainResultKernelArray2Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult[0]","  data0[1] = kernelResult[1]"]}getMainResultSubKernelArray2Texture(){let y=[];if(!this.subKernels)return y;for(let _=0;_<this.subKernels.length;++_){let w=this.subKernels[_];y.push(`  data${_+1}[0] = subKernelResult_${w.name}[0]`,`  data${_+1}[1] = subKernelResult_${w.name}[1]`)}return y}getMainResultKernelArray3Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult[0]","  data0[1] = kernelResult[1]","  data0[2] = kernelResult[2]"]}getMainResultSubKernelArray3Texture(){let y=[];if(!this.subKernels)return y;for(let _=0;_<this.subKernels.length;++_){let w=this.subKernels[_];y.push(`  data${_+1}[0] = subKernelResult_${w.name}[0]`,`  data${_+1}[1] = subKernelResult_${w.name}[1]`,`  data${_+1}[2] = subKernelResult_${w.name}[2]`)}return y}getMainResultKernelArray4Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = kernelResult"]}getMainResultSubKernelArray4Texture(){let y=[];if(!this.subKernels)return y;for(let _=0;_<this.subKernels.length;++_)y.push(`  data${_+1} = subKernelResult_${this.subKernels[_].name}`);return y}destroyExtensions(){this.extensions.EXT_color_buffer_float=null,this.extensions.OES_texture_float_linear=null}toJSON(){let y=super.toJSON();return y.functionNodes=d.fromKernel(this,c).toJSON(),y.settings.threadDim=this.threadDim,y}}o.exports={WebGL2Kernel:A}},{"../../utils":114,"../function-builder":9,"../web-gl/kernel":70,"./fragment-shader":72,"./function-node":73,"./kernel-value-maps":74,"./vertex-shader":106}],106:[function(i,o,m){let u=`#version 300 es\n      __FLOAT_TACTIC_DECLARATION__;\n      __INT_TACTIC_DECLARATION__;\n      __SAMPLER_2D_TACTIC_DECLARATION__;\n      \n      in vec2 aPos;\n      in vec2 aTexCoord;\n      \n      out vec2 vTexCoord;\n      uniform vec2 ratio;\n      \n      void main(void) {\n        gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n        vTexCoord = aTexCoord;\n      }`;o.exports={vertexShader:u}},{}],107:[function(i,o,m){let u=i("./index"),c=u.GPU;for(let f in u)!u.hasOwnProperty(f)||f!=="GPU"&&(c[f]=u[f]);typeof window<"u"&&d(window),typeof self<"u"&&d(self);function d(f){f.GPU||Object.defineProperty(f,"GPU",{get(){return c}})}o.exports=u},{"./index":109}],108:[function(i,o,m){let{gpuMock:u}=i("gpu-mock.js"),{utils:c}=i("./utils"),{Kernel:d}=i("./backend/kernel"),{CPUKernel:f}=i("./backend/cpu/kernel"),{HeadlessGLKernel:r}=i("./backend/headless-gl/kernel"),{WebGL2Kernel:a}=i("./backend/web-gl2/kernel"),{WebGLKernel:t}=i("./backend/web-gl/kernel"),{kernelRunShortcut:n}=i("./kernel-run-shortcut"),g=[r,a,t],v=["gpu","cpu"],k={headlessgl:r,webgl2:a,webgl:t},T=!0;class A{static disableValidation(){T=!1}static enableValidation(){T=!0}static get isGPUSupported(){return g.some(_=>_.isSupported)}static get isKernelMapSupported(){return g.some(_=>_.isSupported&&_.features.kernelMap)}static get isOffscreenCanvasSupported(){return typeof Worker<"u"&&typeof OffscreenCanvas<"u"||typeof importScripts<"u"}static get isWebGLSupported(){return t.isSupported}static get isWebGL2Supported(){return a.isSupported}static get isHeadlessGLSupported(){return r.isSupported}static get isCanvasSupported(){return typeof HTMLCanvasElement<"u"}static get isGPUHTMLImageArraySupported(){return a.isSupported}static get isSinglePrecisionSupported(){return g.some(_=>_.isSupported&&_.features.isFloatRead&&_.features.isTextureFloat)}constructor(_){if(_=_||{},this.canvas=_.canvas||null,this.context=_.context||null,this.mode=_.mode,this.Kernel=null,this.kernels=[],this.functions=[],this.nativeFunctions=[],this.injectedNative=null,this.mode!=="dev"){if(this.chooseKernel(),_.functions)for(let w=0;w<_.functions.length;w++)this.addFunction(_.functions[w]);if(_.nativeFunctions)for(let w in _.nativeFunctions){if(!_.nativeFunctions.hasOwnProperty(w))continue;let M=_.nativeFunctions[w],{name:N,source:b}=M;this.addNativeFunction(N,b,M)}}}chooseKernel(){if(this.Kernel)return;let _=null;if(this.context){for(let w=0;w<g.length;w++){let M=g[w];if(M.isContextMatch(this.context)){if(!M.isSupported)throw new Error(`Kernel type ${M.name} not supported`);_=M;break}}if(_===null)throw new Error("unknown Context")}else if(this.mode){if(this.mode in k)(!T||k[this.mode].isSupported)&&(_=k[this.mode]);else if(this.mode==="gpu"){for(let w=0;w<g.length;w++)if(g[w].isSupported){_=g[w];break}}else this.mode==="cpu"&&(_=f);if(!_)throw new Error(`A requested mode of "${this.mode}" and is not supported`)}else{for(let w=0;w<g.length;w++)if(g[w].isSupported){_=g[w];break}_||(_=f)}this.mode||(this.mode=_.mode),this.Kernel=_}createKernel(_,w){if(typeof _>"u")throw new Error("Missing source parameter");if(typeof _!="object"&&!c.isFunction(_)&&typeof _!="string")throw new Error("source parameter not a function");let M=this.kernels;if(this.mode==="dev"){let $=u(_,E(w));return M.push($),$}_=typeof _=="function"?_.toString():_;let N={},b=E(w)||{};w&&typeof w.argumentTypes=="object"&&(b.argumentTypes=Object.keys(w.argumentTypes).map($=>w.argumentTypes[$]));function p($){console.warn("Falling back to CPU");let G=new f(_,{argumentTypes:L.argumentTypes,constantTypes:L.constantTypes,graphical:L.graphical,loopMaxIterations:L.loopMaxIterations,constants:L.constants,dynamicOutput:L.dynamicOutput,dynamicArgument:L.dynamicArguments,output:L.output,precision:L.precision,pipeline:L.pipeline,immutable:L.immutable,optimizeFloatMemory:L.optimizeFloatMemory,fixIntegerDivisionAccuracy:L.fixIntegerDivisionAccuracy,functions:L.functions,nativeFunctions:L.nativeFunctions,injectedNative:L.injectedNative,subKernels:L.subKernels,strictIntegers:L.strictIntegers,debug:L.debug});G.build.apply(G,$);let O=G.run.apply(G,$);return L.replaceKernel(G),O}function C($,G,O){O.debug&&console.warn("Switching kernels");let Y=null;if(O.signature&&!N[O.signature]&&(N[O.signature]=O),O.dynamicOutput)for(let H=$.length-1;H>=0;H--){let B=$[H];B.type==="outputPrecisionMismatch"&&(Y=B.needed)}let W=O.constructor,K=W.getArgumentTypes(O,G),J=W.getSignature(O,K),Q=N[J];if(Q)return Q.onActivate(O),Q;let te=N[J]=new W(_,{argumentTypes:K,constantTypes:O.constantTypes,graphical:O.graphical,loopMaxIterations:O.loopMaxIterations,constants:O.constants,dynamicOutput:O.dynamicOutput,dynamicArgument:O.dynamicArguments,context:O.context,canvas:O.canvas,output:Y||O.output,precision:O.precision,pipeline:O.pipeline,immutable:O.immutable,optimizeFloatMemory:O.optimizeFloatMemory,fixIntegerDivisionAccuracy:O.fixIntegerDivisionAccuracy,functions:O.functions,nativeFunctions:O.nativeFunctions,injectedNative:O.injectedNative,subKernels:O.subKernels,strictIntegers:O.strictIntegers,debug:O.debug,gpu:O.gpu,validate:T,returnType:O.returnType,tactic:O.tactic,onRequestFallback:p,onRequestSwitchKernel:C,texture:O.texture,mappedTextures:O.mappedTextures,drawBuffersMap:O.drawBuffersMap});return te.build.apply(te,G),L.replaceKernel(te),M.push(te),te}let F=Object.assign({context:this.context,canvas:this.canvas,functions:this.functions,nativeFunctions:this.nativeFunctions,injectedNative:this.injectedNative,gpu:this,validate:T,onRequestFallback:p,onRequestSwitchKernel:C},b),P=new this.Kernel(_,F),L=n(P);return this.canvas||(this.canvas=P.canvas),this.context||(this.context=P.context),M.push(P),L}createKernelMap(){let _,w,M=typeof arguments[arguments.length-2];if(M==="function"||M==="string"?(_=arguments[arguments.length-2],w=arguments[arguments.length-1]):_=arguments[arguments.length-1],this.mode!=="dev"&&(!this.Kernel.isSupported||!this.Kernel.features.kernelMap)&&this.mode&&v.indexOf(this.mode)<0)throw new Error(`kernelMap not supported on ${this.Kernel.name}`);let N=E(w);if(w&&typeof w.argumentTypes=="object"&&(N.argumentTypes=Object.keys(w.argumentTypes).map(b=>w.argumentTypes[b])),Array.isArray(arguments[0])){N.subKernels=[];let b=arguments[0];for(let p=0;p<b.length;p++){let C=b[p].toString(),F=c.getFunctionNameFromString(C);N.subKernels.push({name:F,source:C,property:p})}}else{N.subKernels=[];let b=arguments[0];for(let p in b){if(!b.hasOwnProperty(p))continue;let C=b[p].toString(),F=c.getFunctionNameFromString(C);N.subKernels.push({name:F||p,source:C,property:p})}}return this.createKernel(_,N)}combineKernels(){let _=arguments[0],w=arguments[arguments.length-1];if(_.kernel.constructor.mode==="cpu")return w;let M=arguments[0].canvas,N=arguments[0].context,b=arguments.length-1;for(let p=0;p<b;p++)arguments[p].setCanvas(M).setContext(N).setPipeline(!0);return function(){let p=w.apply(this,arguments);return p.toArray?p.toArray():p}}setFunctions(_){return this.functions=_,this}setNativeFunctions(_){return this.nativeFunctions=_,this}addFunction(_,w){return this.functions.push({source:_,settings:w}),this}addNativeFunction(_,w,M){if(this.kernels.length>0)throw new Error(\'Cannot call "addNativeFunction" after "createKernels" has been called.\');return this.nativeFunctions.push(Object.assign({name:_,source:w},M)),this}injectNative(_){return this.injectedNative=_,this}destroy(){return new Promise((_,w)=>{this.kernels||_(),setTimeout(()=>{try{for(let N=0;N<this.kernels.length;N++)this.kernels[N].destroy(!0);let M=this.kernels[0];M&&(M.kernel&&(M=M.kernel),M.constructor.destroyContext&&M.constructor.destroyContext(this.context))}catch(M){w(M)}_()},0)})}}function E(y){if(!y)return{};let _=Object.assign({},y);return y.hasOwnProperty("floatOutput")&&(c.warnDeprecated("setting","floatOutput","precision"),_.precision=y.floatOutput?"single":"unsigned"),y.hasOwnProperty("outputToTexture")&&(c.warnDeprecated("setting","outputToTexture","pipeline"),_.pipeline=Boolean(y.outputToTexture)),y.hasOwnProperty("outputImmutable")&&(c.warnDeprecated("setting","outputImmutable","immutable"),_.immutable=Boolean(y.outputImmutable)),y.hasOwnProperty("floatTextures")&&(c.warnDeprecated("setting","floatTextures","optimizeFloatMemory"),_.optimizeFloatMemory=Boolean(y.floatTextures)),_}o.exports={GPU:A,kernelOrder:g,kernelTypes:v}},{"./backend/cpu/kernel":8,"./backend/headless-gl/kernel":34,"./backend/kernel":36,"./backend/web-gl/kernel":70,"./backend/web-gl2/kernel":105,"./kernel-run-shortcut":111,"./utils":114,"gpu-mock.js":4}],109:[function(i,o,m){let{GPU:u}=i("./gpu"),{alias:c}=i("./alias"),{utils:d}=i("./utils"),{Input:f,input:r}=i("./input"),{Texture:a}=i("./texture"),{FunctionBuilder:t}=i("./backend/function-builder"),{FunctionNode:n}=i("./backend/function-node"),{CPUFunctionNode:g}=i("./backend/cpu/function-node"),{CPUKernel:v}=i("./backend/cpu/kernel"),{HeadlessGLKernel:k}=i("./backend/headless-gl/kernel"),{WebGLFunctionNode:T}=i("./backend/web-gl/function-node"),{WebGLKernel:A}=i("./backend/web-gl/kernel"),{kernelValueMaps:E}=i("./backend/web-gl/kernel-value-maps"),{WebGL2FunctionNode:y}=i("./backend/web-gl2/function-node"),{WebGL2Kernel:_}=i("./backend/web-gl2/kernel"),{kernelValueMaps:w}=i("./backend/web-gl2/kernel-value-maps"),{GLKernel:M}=i("./backend/gl/kernel"),{Kernel:N}=i("./backend/kernel"),{FunctionTracer:b}=i("./backend/function-tracer"),p=i("./plugins/math-random-uniformly-distributed");o.exports={alias:c,CPUFunctionNode:g,CPUKernel:v,GPU:u,FunctionBuilder:t,FunctionNode:n,HeadlessGLKernel:k,Input:f,input:r,Texture:a,utils:d,WebGL2FunctionNode:y,WebGL2Kernel:_,webGL2KernelValueMaps:w,WebGLFunctionNode:T,WebGLKernel:A,webGLKernelValueMaps:E,GLKernel:M,Kernel:N,FunctionTracer:b,plugins:{mathRandom:p}}},{"./alias":5,"./backend/cpu/function-node":6,"./backend/cpu/kernel":8,"./backend/function-builder":9,"./backend/function-node":10,"./backend/function-tracer":11,"./backend/gl/kernel":13,"./backend/headless-gl/kernel":34,"./backend/kernel":36,"./backend/web-gl/function-node":38,"./backend/web-gl/kernel":70,"./backend/web-gl/kernel-value-maps":39,"./backend/web-gl2/function-node":73,"./backend/web-gl2/kernel":105,"./backend/web-gl2/kernel-value-maps":74,"./gpu":108,"./input":110,"./plugins/math-random-uniformly-distributed":112,"./texture":113,"./utils":114}],110:[function(i,o,m){class u{constructor(f,r){this.value=f,Array.isArray(r)?this.size=r:(this.size=new Int32Array(3),r.z?this.size=new Int32Array([r.x,r.y,r.z]):r.y?this.size=new Int32Array([r.x,r.y]):this.size=new Int32Array([r.x]));let[a,t,n]=this.size;if(n){if(this.value.length!==a*t*n)throw new Error(`Input size ${this.value.length} does not match ${a} * ${t} * ${n} = ${t*a*n}`)}else if(t){if(this.value.length!==a*t)throw new Error(`Input size ${this.value.length} does not match ${a} * ${t} = ${t*a}`)}else if(this.value.length!==a)throw new Error(`Input size ${this.value.length} does not match ${a}`)}toArray(){let{utils:f}=i("./utils"),[r,a,t]=this.size;return t?f.erectMemoryOptimized3DFloat(this.value.subarray?this.value:new Float32Array(this.value),r,a,t):a?f.erectMemoryOptimized2DFloat(this.value.subarray?this.value:new Float32Array(this.value),r,a):this.value}}function c(d,f){return new u(d,f)}o.exports={Input:u,input:c}},{"./utils":114}],111:[function(i,o,m){let{utils:u}=i("./utils");function c(f){let r=function(){return f.build.apply(f,arguments),r=function(){let t=f.run.apply(f,arguments);if(f.switchingKernels){let n=f.resetSwitchingKernels(),g=f.onRequestSwitchKernel(n,arguments,f);a.kernel=f=g,t=g.run.apply(g,arguments)}return f.renderKernels?f.renderKernels():f.renderOutput?f.renderOutput():t},r.apply(f,arguments)},a=function(){return r.apply(f,arguments)};return a.exec=function(){return new Promise((t,n)=>{try{t(r.apply(this,arguments))}catch(g){n(g)}})},a.replaceKernel=function(t){f=t,d(f,a)},d(f,a),a}function d(f,r){if(r.kernel){r.kernel=f;return}let a=u.allPropertiesOf(f);for(let t=0;t<a.length;t++){let n=a[t];n[0]==="_"&&n[1]==="_"||(typeof f[n]=="function"?n.substring(0,3)==="add"||n.substring(0,3)==="set"?r[n]=function(){return r.kernel[n].apply(r.kernel,arguments),r}:r[n]=function(){return r.kernel[n].apply(r.kernel,arguments)}:(r.__defineGetter__(n,()=>r.kernel[n]),r.__defineSetter__(n,g=>{r.kernel[n]=g})))}r.kernel=f}o.exports={kernelRunShortcut:c}},{"./utils":114}],112:[function(i,o,m){let t={name:"math-random-uniformly-distributed",onBeforeRun:n=>{n.setUniform1f("randomSeed1",Math.random()),n.setUniform1f("randomSeed2",Math.random())},functionMatch:"Math.random()",functionReplace:"nrand(vTexCoord)",functionReturnType:"Number",source:`// https://www.shadertoy.com/view/4t2SDh\n      //note: uniformly distributed, normalized rand, [0,1]\n      highp float randomSeedShift = 1.0;\n      highp float slide = 1.0;\n      uniform highp float randomSeed1;\n      uniform highp float randomSeed2;\n      \n      highp float nrand(highp vec2 n) {\n        highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n        randomSeedShift = result;\n        if (randomSeedShift > 0.5) {\n          slide += 0.00009; \n        } else {\n          slide += 0.0009;\n        }\n        return result;\n      }`};o.exports=t},{}],113:[function(i,o,m){class u{constructor(d){let{texture:f,size:r,dimensions:a,output:t,context:n,type:g="NumberTexture",kernel:v,internalFormat:k,textureFormat:T}=d;if(!t)throw new Error(\'settings property "output" required.\');if(!n)throw new Error(\'settings property "context" required.\');if(!f)throw new Error(\'settings property "texture" required.\');if(!v)throw new Error(\'settings property "kernel" required.\');this.texture=f,f._refs?f._refs++:f._refs=1,this.size=r,this.dimensions=a,this.output=t,this.context=n,this.kernel=v,this.type=g,this._deleted=!1,this.internalFormat=k,this.textureFormat=T}toArray(){throw new Error(`Not implemented on ${this.constructor.name}`)}clone(){throw new Error(`Not implemented on ${this.constructor.name}`)}delete(){throw new Error(`Not implemented on ${this.constructor.name}`)}clear(){throw new Error(`Not implemented on ${this.constructor.name}`)}}o.exports={Texture:u}},{}],114:[function(i,o,m){let u=i("acorn"),{Input:c}=i("./input"),{Texture:d}=i("./texture"),f=/function ([^(]*)/,r=/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg,a=/([^\\s,]+)/g,t={systemEndianness(){return k},getSystemEndianness(){let T=new ArrayBuffer(4),A=new Uint32Array(T),E=new Uint8Array(T);if(A[0]=3735928559,E[0]===239)return"LE";if(E[0]===222)return"BE";throw new Error("unknown endianness")},isFunction(T){return typeof T=="function"},isFunctionString(T){return typeof T=="string"?T.slice(0,8).toLowerCase()==="function":!1},getFunctionNameFromString(T){let A=f.exec(T);return!A||A.length===0?null:A[1].trim()},getFunctionBodyFromString(T){return T.substring(T.indexOf("{")+1,T.lastIndexOf("}"))},getArgumentNamesFromString(T){let A=T.replace(r,""),E=A.slice(A.indexOf("(")+1,A.indexOf(")")).match(a);return E===null&&(E=[]),E},clone(T){if(T===null||typeof T!="object"||T.hasOwnProperty("isActiveClone"))return T;let A=T.constructor();for(let E in T)Object.prototype.hasOwnProperty.call(T,E)&&(T.isActiveClone=null,A[E]=t.clone(T[E]),delete T.isActiveClone);return A},isArray(T){return!isNaN(T.length)},getVariableType(T,A){if(t.isArray(T))return T.length>0&&T[0].nodeName==="IMG"?"HTMLImageArray":"Array";switch(T.constructor){case Boolean:return"Boolean";case Number:return A&&Number.isInteger(T)?"Integer":"Float";case d:return T.type;case c:return"Input"}switch(T.nodeName){case"IMG":return"HTMLImage";case"CANVAS":return"HTMLImage";case"VIDEO":return"HTMLVideo"}return T.hasOwnProperty("type")?T.type:"Unknown"},getKernelTextureSize(T,A){let[E,y,_]=A,w=(E||1)*(y||1)*(_||1);return T.optimizeFloatMemory&&T.precision==="single"&&(E=w=Math.ceil(w/4)),y>1&&E*y===w?new Int32Array([E,y]):t.closestSquareDimensions(w)},closestSquareDimensions(T){let A=Math.sqrt(T),E=Math.ceil(A),y=Math.floor(A);for(;E*y<T;)E--,y=Math.ceil(T/E);return new Int32Array([y,Math.ceil(T/y)])},getMemoryOptimizedFloatTextureSize(T,A){let y=t.roundTo((T[0]||1)*(T[1]||1)*(T[2]||1)*(T[3]||1),4)/A;return t.closestSquareDimensions(y)},getMemoryOptimizedPackedTextureSize(T,A){let[E,y,_]=T,M=t.roundTo((E||1)*(y||1)*(_||1),4)/(4/A);return t.closestSquareDimensions(M)},roundTo(T,A){return Math.floor((T+A-1)/A)*A},getDimensions(T,A){let E;if(t.isArray(T)){let y=[],_=T;for(;t.isArray(_);)y.push(_.length),_=_[0];E=y.reverse()}else if(T instanceof d)E=T.output;else if(T instanceof c)E=T.size;else throw new Error(`Unknown dimensions of ${T}`);if(A)for(E=Array.from(E);E.length<3;)E.push(1);return new Int32Array(E)},flatten2dArrayTo(T,A){let E=0;for(let y=0;y<T.length;y++)A.set(T[y],E),E+=T[y].length},flatten3dArrayTo(T,A){let E=0;for(let y=0;y<T.length;y++)for(let _=0;_<T[y].length;_++)A.set(T[y][_],E),E+=T[y][_].length},flatten4dArrayTo(T,A){let E=0;for(let y=0;y<T.length;y++)for(let _=0;_<T[y].length;_++)for(let w=0;w<T[y][_].length;w++)A.set(T[y][_][w],E),E+=T[y][_][w].length},flattenTo(T,A){t.isArray(T[0])?t.isArray(T[0][0])?t.isArray(T[0][0][0])?t.flatten4dArrayTo(T,A):t.flatten3dArrayTo(T,A):t.flatten2dArrayTo(T,A):A.set(T)},splitArray(T,A){let E=[];for(let y=0;y<T.length;y+=A)E.push(new T.constructor(T.buffer,y*4+T.byteOffset,A));return E},getAstString(T,A){let E=Array.isArray(T)?T:T.split(/\\r?\\n/g),y=A.loc.start,_=A.loc.end,w=[];if(y.line===_.line)w.push(E[y.line-1].substring(y.column,_.column));else{w.push(E[y.line-1].slice(y.column));for(let M=y.line;M<_.line;M++)w.push(E[M]);w.push(E[_.line-1].slice(0,_.column))}return w.join(`\n`)},allPropertiesOf(T){let A=[];do A.push.apply(A,Object.getOwnPropertyNames(T));while(T=Object.getPrototypeOf(T));return A},linesToString(T){return T.length>0?T.join(`;\n`)+`;\n`:`\n`},warnDeprecated(T,A,E){console.warn(E?`You are using a deprecated ${T} "${A}". It has been replaced with "${E}". Fixing, but please upgrade as it will soon be removed.`:`You are using a deprecated ${T} "${A}". It has been removed. Fixing, but please upgrade as it will soon be removed.`)},flipPixels:(T,A,E)=>{let y=E/2|0,_=A*4,w=new Uint8ClampedArray(A*4),M=T.slice(0);for(let N=0;N<y;++N){let b=N*_,p=(E-N-1)*_;w.set(M.subarray(b,b+_)),M.copyWithin(b,p,p+_),M.set(w,p)}return M},erectPackedFloat:(T,A)=>T.subarray(0,A),erect2DPackedFloat:(T,A,E)=>{let y=new Array(E);for(let _=0;_<E;_++){let w=_*A,M=w+A;y[_]=T.subarray(w,M)}return y},erect3DPackedFloat:(T,A,E,y)=>{let _=new Array(y);for(let w=0;w<y;w++){let M=new Array(E);for(let N=0;N<E;N++){let b=w*E*A+N*A,p=b+A;M[N]=T.subarray(b,p)}_[w]=M}return _},erectMemoryOptimizedFloat:(T,A)=>T.subarray(0,A),erectMemoryOptimized2DFloat:(T,A,E)=>{let y=new Array(E);for(let _=0;_<E;_++){let w=_*A;y[_]=T.subarray(w,w+A)}return y},erectMemoryOptimized3DFloat:(T,A,E,y)=>{let _=new Array(y);for(let w=0;w<y;w++){let M=new Array(E);for(let N=0;N<E;N++){let b=w*E*A+N*A;M[N]=T.subarray(b,b+A)}_[w]=M}return _},erectFloat:(T,A)=>{let E=new Float32Array(A),y=0;for(let _=0;_<A;_++)E[_]=T[y],y+=4;return E},erect2DFloat:(T,A,E)=>{let y=new Array(E),_=0;for(let w=0;w<E;w++){let M=new Float32Array(A);for(let N=0;N<A;N++)M[N]=T[_],_+=4;y[w]=M}return y},erect3DFloat:(T,A,E,y)=>{let _=new Array(y),w=0;for(let M=0;M<y;M++){let N=new Array(E);for(let b=0;b<E;b++){let p=new Float32Array(A);for(let C=0;C<A;C++)p[C]=T[w],w+=4;N[b]=p}_[M]=N}return _},erectArray2:(T,A)=>{let E=new Array(A),y=A*4,_=0;for(let w=0;w<y;w+=4)E[_++]=T.subarray(w,w+2);return E},erect2DArray2:(T,A,E)=>{let y=new Array(E),_=A*4;for(let w=0;w<E;w++){let M=new Array(A),N=w*_,b=0;for(let p=0;p<_;p+=4)M[b++]=T.subarray(p+N,p+N+2);y[w]=M}return y},erect3DArray2:(T,A,E,y)=>{let _=A*4,w=new Array(y);for(let M=0;M<y;M++){let N=new Array(E);for(let b=0;b<E;b++){let p=new Array(A),C=M*_*E+b*_,F=0;for(let P=0;P<_;P+=4)p[F++]=T.subarray(P+C,P+C+2);N[b]=p}w[M]=N}return w},erectArray3:(T,A)=>{let E=new Array(A),y=A*4,_=0;for(let w=0;w<y;w+=4)E[_++]=T.subarray(w,w+3);return E},erect2DArray3:(T,A,E)=>{let y=A*4,_=new Array(E);for(let w=0;w<E;w++){let M=new Array(A),N=w*y,b=0;for(let p=0;p<y;p+=4)M[b++]=T.subarray(p+N,p+N+3);_[w]=M}return _},erect3DArray3:(T,A,E,y)=>{let _=A*4,w=new Array(y);for(let M=0;M<y;M++){let N=new Array(E);for(let b=0;b<E;b++){let p=new Array(A),C=M*_*E+b*_,F=0;for(let P=0;P<_;P+=4)p[F++]=T.subarray(P+C,P+C+3);N[b]=p}w[M]=N}return w},erectArray4:(T,A)=>{let E=new Array(T),y=A*4,_=0;for(let w=0;w<y;w+=4)E[_++]=T.subarray(w,w+4);return E},erect2DArray4:(T,A,E)=>{let y=A*4,_=new Array(E);for(let w=0;w<E;w++){let M=new Array(A),N=w*y,b=0;for(let p=0;p<y;p+=4)M[b++]=T.subarray(p+N,p+N+4);_[w]=M}return _},erect3DArray4:(T,A,E,y)=>{let _=A*4,w=new Array(y);for(let M=0;M<y;M++){let N=new Array(E);for(let b=0;b<E;b++){let p=new Array(A),C=M*_*E+b*_,F=0;for(let P=0;P<_;P+=4)p[F++]=T.subarray(P+C,P+C+4);N[b]=p}w[M]=N}return w},flattenFunctionToString:(T,A)=>{let{findDependency:E,thisLookup:y,doNotDefine:_}=A,w=A.flattened;w||(w=A.flattened={});let M=u.parse(T),N=[],b=0;function p(F){if(Array.isArray(F)){let P=[];for(let L=0;L<F.length;L++)P.push(p(F[L]));return P.join("")}switch(F.type){case"Program":return p(F.body)+(F.body[0].type==="VariableDeclaration"?";":"");case"FunctionDeclaration":return`function ${F.id.name}(${F.params.map(p).join(", ")}) ${p(F.body)}`;case"BlockStatement":{let L=[];b+=2;for(let $=0;$<F.body.length;$++){let G=p(F.body[$]);G&&L.push(" ".repeat(b)+G,`;\n`)}return b-=2,`{\n${L.join("")}}`}case"VariableDeclaration":let P=t.normalizeDeclarations(F).map(p).filter(L=>L!==null);return P.length<1?"":`${F.kind} ${P.join(",")}`;case"VariableDeclarator":return F.init.object&&F.init.object.type==="ThisExpression"?y(F.init.property.name,!0)?`${F.id.name} = ${p(F.init)}`:null:`${F.id.name} = ${p(F.init)}`;case"CallExpression":{if(F.callee.property.name==="subarray")return`${p(F.callee.object)}.${p(F.callee.property)}(${F.arguments.map(L=>p(L)).join(", ")})`;if(F.callee.object.name==="gl"||F.callee.object.name==="context")return`${p(F.callee.object)}.${p(F.callee.property)}(${F.arguments.map(L=>p(L)).join(", ")})`;if(F.callee.object.type==="ThisExpression")return N.push(E("this",F.callee.property.name)),`${F.callee.property.name}(${F.arguments.map(L=>p(L)).join(", ")})`;if(F.callee.object.name){let L=E(F.callee.object.name,F.callee.property.name);return L===null?`${F.callee.object.name}.${F.callee.property.name}(${F.arguments.map($=>p($)).join(", ")})`:(N.push(L),`${F.callee.property.name}(${F.arguments.map($=>p($)).join(", ")})`)}else{if(F.callee.object.type==="MemberExpression")return`${p(F.callee.object)}.${F.callee.property.name}(${F.arguments.map(L=>p(L)).join(", ")})`;throw new Error("unknown ast.callee")}}case"ReturnStatement":return`return ${p(F.argument)}`;case"BinaryExpression":return`(${p(F.left)}${F.operator}${p(F.right)})`;case"UnaryExpression":return F.prefix?`${F.operator} ${p(F.argument)}`:`${p(F.argument)} ${F.operator}`;case"ExpressionStatement":return`${p(F.expression)}`;case"SequenceExpression":return`(${p(F.expressions)})`;case"ArrowFunctionExpression":return`(${F.params.map(p).join(", ")}) => ${p(F.body)}`;case"Literal":return F.raw;case"Identifier":return F.name;case"MemberExpression":return F.object.type==="ThisExpression"?y(F.property.name):F.computed?`${p(F.object)}[${p(F.property)}]`:p(F.object)+"."+p(F.property);case"ThisExpression":return"this";case"NewExpression":return`new ${p(F.callee)}(${F.arguments.map(L=>p(L)).join(", ")})`;case"ForStatement":return`for (${p(F.init)};${p(F.test)};${p(F.update)}) ${p(F.body)}`;case"AssignmentExpression":return`${p(F.left)}${F.operator}${p(F.right)}`;case"UpdateExpression":return`${p(F.argument)}${F.operator}`;case"IfStatement":return`if (${p(F.test)}) ${p(F.consequent)}`;case"ThrowStatement":return`throw ${p(F.argument)}`;case"ObjectPattern":return F.properties.map(p).join(", ");case"ArrayPattern":return F.elements.map(p).join(", ");case"DebuggerStatement":return"debugger;";case"ConditionalExpression":return`${p(F.test)}?${p(F.consequent)}:${p(F.alternate)}`;case"Property":if(F.kind==="init")return p(F.key)}throw new Error(`unhandled ast.type of ${F.type}`)}let C=p(M);if(N.length>0){let F=[];for(let P=0;P<N.length;P++){let L=N[P];w[L]||(w[L]=!0),L&&F.push(t.flattenFunctionToString(L,A)+`\n`)}return F.join("")+C}return C},normalizeDeclarations:T=>{if(T.type!=="VariableDeclaration")throw new Error(\'Ast is not of type "VariableDeclaration"\');let A=[];for(let E=0;E<T.declarations.length;E++){let y=T.declarations[E];if(y.id&&y.id.type==="ObjectPattern"&&y.id.properties){let{properties:_}=y.id;for(let w=0;w<_.length;w++){let M=_[w];if(M.value.type==="ObjectPattern"&&M.value.properties)for(let N=0;N<M.value.properties.length;N++){let b=M.value.properties[N];if(b.type==="Property")A.push({type:"VariableDeclarator",id:{type:"Identifier",name:b.key.name},init:{type:"MemberExpression",object:{type:"MemberExpression",object:y.init,property:{type:"Identifier",name:M.key.name},computed:!1},property:{type:"Identifier",name:b.key.name},computed:!1}});else throw new Error("unexpected state")}else if(M.value.type==="Identifier")A.push({type:"VariableDeclarator",id:{type:"Identifier",name:M.value&&M.value.name?M.value.name:M.key.name},init:{type:"MemberExpression",object:y.init,property:{type:"Identifier",name:M.key.name},computed:!1}});else throw new Error("unexpected state")}}else if(y.id&&y.id.type==="ArrayPattern"&&y.id.elements){let{elements:_}=y.id;for(let w=0;w<_.length;w++){let M=_[w];if(M.type==="Identifier")A.push({type:"VariableDeclarator",id:{type:"Identifier",name:M.name},init:{type:"MemberExpression",object:y.init,property:{type:"Literal",value:w,raw:w.toString(),start:M.start,end:M.end},computed:!0}});else throw new Error("unexpected state")}}else A.push(y)}return A},splitHTMLImageToRGB:(T,A)=>{let E=T.createKernel(function(N){return N[this.thread.y][this.thread.x].r*255},{output:[A.width,A.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),y=T.createKernel(function(N){return N[this.thread.y][this.thread.x].g*255},{output:[A.width,A.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),_=T.createKernel(function(N){return N[this.thread.y][this.thread.x].b*255},{output:[A.width,A.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),w=T.createKernel(function(N){return N[this.thread.y][this.thread.x].a*255},{output:[A.width,A.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),M=[E(A),y(A),_(A),w(A)];return M.rKernel=E,M.gKernel=y,M.bKernel=_,M.aKernel=w,M.gpu=T,M},splitRGBAToCanvases:(T,A,E,y)=>{let _=T.createKernel(function(b){let p=b[this.thread.y][this.thread.x];this.color(p.r/255,0,0,255)},{output:[E,y],graphical:!0,argumentTypes:{v:"Array2D(4)"}});_(A);let w=T.createKernel(function(b){let p=b[this.thread.y][this.thread.x];this.color(0,p.g/255,0,255)},{output:[E,y],graphical:!0,argumentTypes:{v:"Array2D(4)"}});w(A);let M=T.createKernel(function(b){let p=b[this.thread.y][this.thread.x];this.color(0,0,p.b/255,255)},{output:[E,y],graphical:!0,argumentTypes:{v:"Array2D(4)"}});M(A);let N=T.createKernel(function(b){let p=b[this.thread.y][this.thread.x];this.color(255,255,255,p.a/255)},{output:[E,y],graphical:!0,argumentTypes:{v:"Array2D(4)"}});return N(A),[_.canvas,w.canvas,M.canvas,N.canvas]},getMinifySafeName:T=>{try{let A=u.parse(`const value = ${T.toString()}`),{init:E}=A.body[0].declarations[0];return E.body.name||E.body.body[0].argument.name}catch{throw new Error("Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }")}},sanitizeName:function(T){return n.test(T)&&(T=T.replace(n,"S_S")),g.test(T)?T=T.replace(g,"U_U"):v.test(T)&&(T=T.replace(v,"u_u")),T}},n=/\\$/,g=/__/,v=/_/,k=t.getSystemEndianness();o.exports={utils:t}},{"./input":110,"./texture":113,acorn:1}]},{},[107])(107)})});var ct=class{constructor(s=!1,l=!1){this.debug=s,this.listeners=[],this.synchronous=l,this.syncInterval="FRAMERATE",this.syncAnim=void 0,l===!0&&this.startSync()}addListener(s=null,l,i=void 0,o=void 0,m=void 0,u=this.debug,c=!0){if(l===void 0){console.error("You must assign an object");return}var d=s;d==null&&(d=Math.floor(Math.random()*1e5)),this.synchronous===!0&&(c=!1);var f={key:d,listener:new pt(l,i,o,m,u,c)};this.listeners.push(f)}getListener(s){return this.listeners.find((i,o)=>{if(i.key===s)return!0})}hasKey(s){var l=!1;return this.listeners.forEach((i,o)=>{if(i.key===s)return l=!0,!0}),l}getKeyIndices(s){var l=[];return this.listeners.find((i,o)=>{i.key===s&&l.push(o)}),l}onchange(s=null,l=null){if(s==null)this.listeners.forEach((o,m)=>{o.listener.onchange=l});else var i=this.listeners.find((o,m)=>{o.name===s&&(o.listener.onchange=l)})}addFunc=(s=null,l=null,i=!0)=>{var o=null;if(l!==null)if(s==null)this.listeners.forEach((u,c)=>{o=u.listener.addFunc(l),u.listener.running==!1&&i==!0&&u.listener.start()});else var m=this.listeners.find((u,c)=>{u.key===s&&(o=u.listener.addFunc(l),u.listener.running==!1&&i==!0&&u.listener.start())});return o};getFuncs=(s=void 0)=>{if(s){var l=this.listeners.find((i,o)=>{if(i.key===s)return!0});return l.onchangeFuncs}else return};removeFuncs=(s=null,l=null,i=!1)=>{if(s==null)this.listeners.forEach((m,u)=>{m.listener.removeFuncs(l)});else var o=this.listeners.find((m,u)=>{m.key===s&&(m.listener.removeFuncs(l),(m.listener.onchangeFuncs.length===0||i===!0)&&m.listener.stop())})};stop(s=null){if(this.synchronous&&this.stopSync(),s==null)this.listeners.forEach((i,o)=>{i.listener.stop()});else var l=this.listeners.find((i,o)=>{i.name===s&&i.listener.stop()})}start(s=null){if(this.synchronous&&this.stopSync(),s==null)this.listeners.forEach((i,o)=>{i.listener.start()});else var l=this.listeners.find((i,o)=>{i.name===s&&i.listener.start()})}startSync(){if(this.synchronous===!1){this.synchronous=!0,this.stop();let s=()=>{this.synchronous===!0&&(this.listeners.forEach(l=>{l.listener.check()}),this.syncInterval==="FRAMERATE"?this.syncAnim=requestAnimationFrame(s):typeof this.syncInterval=="number"&&setTimeout(s,this.syncInterval))};s()}}stopSync(){this.synchronous=!1,this.syncAnim&&cancelAnimationFrame(this.syncAnim)}remove(s=null){if(s==null)this.listeners.forEach(o=>{o.listener.stop()}),this.listeners.splice(0,this.listeners.length);else{var l=[],i=this.listeners.forEach((o,m)=>{o.key===s&&l.push(m)});l.reverse().forEach(o=>{this.listeners[o].listener.stop(),this.listeners.splice(o,1)})}}},pt=class{constructor(s,l="__ANY__",i=this.onchange,o="FRAMERATE",m=!1,u=!0){this.debug=m,this.onchange=i,this.onchangeFuncs=[],this.object=s,this.propName=l,this.propOld=void 0,this.setListenerRef(l),this.running=u,this.funcs=0,this.interval,o<10?(this.interval=10,console.log("Min recommended interval set: 10ms")):this.interval=o,u===!0&&(typeof window>"u"?setTimeout(()=>{this.check()},60):this.checker=requestAnimationFrame(this.check))}onchange=s=>{console.log(this.propName," changed from: ",this.propOld," to: ",this.object[this.propName])};addFunc=(s=null)=>{let l=0;return s!==null&&(this.onchangeFuncs.push({idx:this.funcs,onchange:s}),l=this.funcs,this.funcs++),l};removeFuncs(s=null){let l=0;s===null?this.onchangeFuncs=[]:this.onchangeFuncs.find((i,o)=>{if(i.idx===s)return l=o,!0})!==void 0&&this.onchangeFuncs.splice(l,1)}onchangeMulti=s=>{[...this.onchangeFuncs].forEach((i,o)=>{this.debug===!0&&console.log(i.onchange),i.onchange(s)})};setListenerRef=s=>{s==="__ANY__"||s===null||s===void 0?this.propOld=JSON.stringifyFast(this.object):Array.isArray(this.object[s])?this.propOld=JSON.stringifyFast(this.object[s].slice(this.object[s].length-20)):typeof this.object[s]=="object"?this.propOld=JSON.stringifyFast(this.object[s]):typeof this.object[s]=="function"?this.propOld=this.object[s].toString():this.propOld=this.object[s],this.debug===!0&&console.log("propname",s,", new assignment: ",this.propOld)};check=()=>{let s=!1;if(this.propName==="__ANY__"||this.propName===null||this.propName===void 0)this.propOld!==JSON.stringifyFast(this.object)&&(this.debug===!0&&console.log("onchange: ",this.onchange),this.onchange(this.object),this.onchangeFuncs.length>0&&this.onchangeMulti(this.object),this.setListenerRef(this.propName),s=!0);else if(Array.isArray(this.object[this.propName]))this.propOld!==JSON.stringifyFast(this.object[this.propName].slice(this.object[this.propName].length-20))&&(this.debug===!0&&console.log("onchange: ",this.onchange),this.onchange(this.object[this.propName]),this.onchangeFuncs.length>0&&this.onchangeMulti(this.object[this.propName]),this.setListenerRef(this.propName),s=!0);else if(typeof this.object[this.propName]=="object"){let l=JSON.stringifyFast(this.object[this.propName]);this.propOld!==l&&(this.debug===!0&&console.log("onchange: ",this.onchange),this.onchange(this.object[this.propName]),this.onchangeFuncs.length>0&&this.onchangeMulti(this.object[this.propName]),this.setListenerRef(this.propName),s=!0)}else typeof this.object[this.propName]=="function"?this.propOld!==this.object[this.propName].toString()&&(this.debug===!0&&console.log("onchange: ",this.onchange),this.onchange(this.object[this.propName].toString()),this.onchangeFuncs.length>0&&this.onchangeMulti(this.object[this.propName].toString()),this.setListenerRef(this.propName),s=!0):this.object[this.propName]!==this.propOld&&(this.debug===!0&&console.log("onchange: ",this.onchange),this.onchange(this.object[this.propName]),this.onchangeFuncs.length>0&&this.onchangeMulti(this.object[this.propName]),this.setListenerRef(this.propName),s=!0);return this.running===!0&&(this.debug===!0&&console.log("checking",this.object,this.propName),this.interval==="FRAMERATE"?typeof window>"u"?setTimeout(()=>{this.check()},16):this.checker=requestAnimationFrame(this.check):setTimeout(()=>{this.check()},this.interval)),s};start(){this.running=!0,typeof window>"u"?setTimeout(()=>{this.check()},16):this.checker=requestAnimationFrame(this.check)}stop(){this.running=!1,cancelAnimationFrame(this.checker)}};JSON.stringifyFast===void 0&&(JSON.stringifyFast=function(){let D=new Map,s=[],l=["this"];function i(){D.clear(),s.length=0,l.length=1}function o(u,c){var d=s.length-1;if(s[d]){var f=s[d];if(typeof f=="object")if(f[u]===c||d===0)l.push(u),s.push(c.pushed);else for(;d-->=0;){if(f=s[d],typeof f=="object"&&f[u]===c){d+=2,s.length=d,l.length=d,--d,s[d]=c,l[d]=u;break}d--}}}function m(u,c){let d;if(c!=null)if(typeof c=="object"){let f=c.constructor.name;u&&f==="Object"&&o(u,c);let r=D.get(c);if(r)return"[Circular Reference]"+r;if(D.set(c,l.join(".")),f==="Array")c.length>20?d=c.slice(c.length-20):d=c;else if(f.includes("Set"))d=Array.from(c);else if(f!=="Object"&&f!=="Number"&&f!=="String"&&f!=="Boolean")d="instanceof_"+f;else if(f==="Object"){let a={};for(let t in c)if(c[t]==null)a[t]=c[t];else if(Array.isArray(c[t]))c[t].length>20?a[t]=c[t].slice(c[t].length-20):a[t]=c[t];else if(c[t].constructor.name==="Object"){a[t]={};for(let n in c[t])if(Array.isArray(c[t][n]))c[t][n].length>20?a[t][n]=c[t][n].slice(c[t][n].length-20):a[t][n]=c[t][n];else if(c[t][n]!=null){let g=c[t][n].constructor.name;g.includes("Set")?a[t][n]=Array.from(c[t][n]):g!=="Number"&&g!=="String"&&g!=="Boolean"?a[t][n]="instanceof_"+g:a[t][n]=c[t][n]}else a[t][n]=c[t][n]}else{let n=c[t].constructor.name;n.includes("Set")?a[t]=Array.from(c[t]):n!=="Number"&&n!=="String"&&n!=="Boolean"?a[t]="instanceof_"+n:a[t]=c[t]}d=a}else d=c}else d=c;return d}return function(c,d){s.push(c);let f=JSON.stringify(c,m,d);return i(),f}}());JSON.stringifyWithCircularRefs===void 0&&(JSON.stringifyWithCircularRefs=function(){let D=new Map,s=[],l=["this"];function i(){D.clear(),s.length=0,l.length=1}function o(u,c){var d=s.length-1,f=s[d];if(f[u]===c||d===0)l.push(u),s.push(c);else for(;d-->=0;)if(f=s[d],f[u]===c){d+=2,s.length=d,l.length=d,--d,s[d]=c,l[d]=u;break}}function m(u,c){if(c!=null&&typeof c=="object"){u&&o(u,c);let d=D.get(c);if(d)return"[Circular Reference]"+d;D.set(c,l.join("."))}return c}return function(c,d){try{return s.push(c),JSON.stringify(c,m,d)}finally{i()}}}());var Pt=ct;var Qe=class{constructor(s={},l="FRAMERATE",i=!0){this.data=s,this.interval=l,this.pushToState={},this.pushRecord={pushed:[]},this.pushCallbacks={},this.triggers={},this.prev={},this.listener=new Pt,this.defaultStartListenerEventLoop=i}subscribe(s,l,i=this.defaultStartListenerEventLoop){if(s&&s!=="state")if(this.data[s]===void 0)this.addToState(s,null,l,i);else return this.addSecondaryKeyResponse(s,l,void 0,i);else return this.addSecondaryKeyResponse(s,l,void 0,i)}subscribeOnce(s=void 0,l=i=>{}){let i,o=m=>{l(m),this.unsubscribe(s,i)};i=this.subscribe(s,o)}unsubscribe(s,l=null){l!==null?this.removeSecondaryKeyResponse(s,l,!0):console.error("Specify a subcription function index")}unsubscribeAll(s){this.unsubscribeAllSequential(s),this.unsubscribeAllTriggers(s),this.clearAllKeyResponses(s),this.data[s]&&delete this.data[s],this.listener.hasKey("pushToState")&&this.setSequentialState({stateRemoved:s})}setInterval(s="FRAMERATE"){this.interval=s,this.listener.listeners.forEach((l,i)=>{l.interval=this.interval})}updateState(s,l){this.data[s]==null?this.addToState(s,l):this.data[s]=l}setupSynchronousUpdates=()=>{if(!this.listener.hasKey("pushToState")){let s=()=>{if(Object.keys(this.pushToState).length>0){Object.assign(this.data,this.pushToState);for(let l of Object.getOwnPropertyNames(this.pushToState))delete this.pushToState[l]}};this.listener.addListener("pushToState",this.pushToState,"__ANY__",s,this.interval),this.addToState("pushRecord",this.pushRecord,l=>{let i=l.pushed.length;for(let o=0;o<i;o++){let m=l.pushed[o];this.pushCallbacks.state&&this.pushCallbacks.state.forEach(u=>{u.onchange(m)});for(let u in m)this.pushCallbacks[u]&&this.pushCallbacks[u].forEach(c=>{typeof c=="object"&&c.onchange(m[u])})}this.pushRecord.pushed.splice(0,i)})}};addToState(s,l,i=null,o=this.defaultStartListenerEventLoop,m=!1){if(!this.listener.hasKey("pushToState")&&this.defaultStartListenerEventLoop&&this.setupSynchronousUpdates(),this.data[s]=l,this.setSequentialState({stateAdded:s}),i!==null)return this.addSecondaryKeyResponse(s,i,m,o)}get(s){return this.data[s]}getState(){return JSON.parse(JSON.stringifyFast(this.data))}setState(s={},l=!1){if(!this.listener.hasKey("pushToState")&&this.defaultStartListenerEventLoop&&(this.setupSynchronousUpdates(),this.pushRecord.pushed.push(JSON.parse(JSON.stringifyWithCircularRefs(s)))),s.stateUpdateTimeStamp=Date.now(),l){for(let i in s)if(i in this.pushToState){if(Array.isArray(this.pushToState[i])&&Array.isArray(s[i]))s[i]=this.pushToState[i].push(...s[i]);else if(typeof this.pushToState[i]=="object"&&typeof s[i]=="object"){for(let o in s[i])if(this.pushToState[i][o]){if(Array.isArray(this.pushToState[i][o])&&Array.isArray(s[i][o]))s[i][o]=this.pushToState[i][o].push(...s[i][o]);else if(typeof this.pushToState[i][o]=="object"&&typeof s[i][o]=="object"){for(let m in s[i][o])if(this.pushToState[i][o][m])Array.isArray(this.pushToState[i][o][m])&&Array.isArray(s[i][o][m])&&(s[i][o][m]=this.pushToState[i][o][m].push(...s[i][o][m]));else if(typeof this.pushToState[i][o][m]=="object"&&typeof s[i][o][m]=="object")for(let u in s[i][o][m])this.pushToState[i][o][m][u]&&Array.isArray(this.pushToState[i][o][m][u])&&Array.isArray(s[i][o][m][u])&&(s[i][o][m][u]=this.pushToState[i][o][m][u].push(...s[i][o][m][u]))}}}}}if(Object.assign(this.pushToState,s),Object.keys(this.triggers).length>0){this.triggers.state&&this.triggers.state.forEach(i=>{i.onchange(this.data)});for(let i of Object.getOwnPropertyNames(this.triggers))i in this.pushToState&&(this.data[i]=this.pushToState[i],delete this.pushToState[i],this.triggers[i].forEach(o=>{o.onchange(this.data[i])}))}return this.pushToState}subscribeTrigger(s=void 0,l=i=>{}){if(s){this.triggers[s]||(this.triggers[s]=[]);let i=this.triggers[s].length;return this.triggers[s].push({idx:i,onchange:l}),this.triggers[s].length-1}else return}subscribeTriggerOnce(s=void 0,l=i=>{}){let i,o=m=>{l(m),this.unsubscribeTrigger(s,i)};i=this.subscribeTrigger(s,o)}unsubscribeTrigger(s=void 0,l=0){let i,o=this.triggers[s];o&&o.find(u=>{if(u.idx===l)return!0})&&o.splice(i,1)}unsubscribeAllTriggers(s){s&&this.triggers[s]&&delete this.triggers[s]}setSequentialState(s={}){this.listener.hasKey("pushToState")||this.setupSynchronousUpdates(),s.stateUpdateTimeStamp=Date.now(),this.pushRecord.pushed.push(JSON.parse(JSON.stringify(s)))}subscribeSequential(s=void 0,l=void 0){if(s)if(this.data[s]===void 0&&s!=="state"&&this.addToState(s,null,void 0),this.pushCallbacks[s]||(this.pushCallbacks[s]=[]),l){let i=this.pushCallbacks[s].length;return this.pushCallbacks[s].push({idx:i,onchange:l}),this.pushCallbacks[s].length-1}else return;else return}subscribeSequentialOnce(s=void 0,l=i=>{}){let i,o=m=>{l(m),this.unsubscribeSequential(s,i)};i=this.subscribeSequential(s,o)}unsubscribeSequential(s=void 0,l=0){s&&this.pushCallbacks[s]&&this.pushCallbacks[s].find((i,o)=>{if(i.idx===l)return this.pushCallbacks[s].splice(o,1),!0})}unsubscribeAllSequential(s){s&&this.pushCallbacks[s]&&this.pushCallbacks[s]&&delete this.pushCallbacks[s]}setPrimaryKeyResponse(s=null,l=null,i=!1,o=this.defaultStartListenerEventLoop){if(l!==null)if(this.listener.hasKey(s))this.listener.onchange(s,l);else if(s!=null&&s!=="state")this.listener.addListener(s,this.data,s,l,this.data.stateUpdateInterval,i,o);else{if(!this.listener.hasKey("state")){let m=()=>{this.prev=Object.assign({},this.data)};this.listener.addListener("state",this.data,"__ANY__",m,this.interval)}return this.listener.addFunc("state",l)}}addSecondaryKeyResponse=(s=null,l=null,i=!1,o=this.defaultStartListenerEventLoop)=>{if(l!=null){if(this.listener.hasKey(s))return this.listener.addFunc(s,l);if(s!=null&&s!=="state")return this.listener.addListener(s,this.data,s,()=>{},this.data.stateUpdateInterval,i,o),this.listener.addFunc(s,l);if(!this.listener.hasKey("state")){let m=()=>{this.prev=Object.assign({},this.data)};this.listener.addListener("state",this.data,"__ANY__",m,this.interval)}return this.listener.addFunc("state",l)}};removeSecondaryKeyResponse(s=null,l=null,i=!0){s!==null?this.listener.hasKey(s)?this.listener.removeFuncs(s,l,i):console.error("key does not exist"):console.error("provide key")}clearAllKeyResponses(s=null){s===null?this.listener.remove(null):this.listener.hasKey(s)&&this.listener.remove(s)}getKeySubCallbacks(s){return this.listener.getFuncs(s)}removeState=this.unsubscribeAll;runSynchronousListeners(){this.defaultStartListenerEventLoop=!1,this.listener.startSync()}stop(s=null){this.listener.stop(s)}};JSON.stringifyFast===void 0&&(JSON.stringifyFast=function(){let D=new Map,s=[],l=["this"];function i(){D.clear(),s.length=0,l.length=1}function o(u,c){var d=s.length-1;if(s[d]){var f=s[d];if(typeof f=="object")if(f[u]===c||d===0)l.push(u),s.push(c.pushed);else for(;d-->=0;){if(f=s[d],typeof f=="object"&&f[u]===c){d+=2,s.length=d,l.length=d,--d,s[d]=c,l[d]=u;break}d++}}}function m(u,c){let d;if(c!=null)if(typeof c=="object"){let f=c.constructor.name;u&&f==="Object"&&o(u,c);let r=D.get(c);if(r)return"[Circular Reference]"+r;if(D.set(c,l.join(".")),f==="Array")c.length>20?d=c.slice(c.length-20):d=c;else if(f.includes("Set"))d=Array.from(c);else if(f!=="Object"&&f!=="Number"&&f!=="String"&&f!=="Boolean")d="instanceof_"+f;else if(f==="Object"){let a={};for(let t in c)if(c[t]==null)a[t]=c[t];else if(Array.isArray(c[t]))c[t].length>20?a[t]=c[t].slice(c[t].length-20):a[t]=c[t];else if(c[t].constructor.name==="Object"){a[t]={};for(let n in c[t])if(Array.isArray(c[t][n]))c[t][n].length>20?a[t][n]=c[t][n].slice(c[t][n].length-20):a[t][n]=c[t][n];else if(c[t][n]!=null){let g=c[t][n].constructor.name;g.includes("Set")?a[t][n]=Array.from(c[t][n]):g!=="Number"&&g!=="String"&&g!=="Boolean"?a[t][n]="instanceof_"+g:a[t][n]=c[t][n]}else a[t][n]=c[t][n]}else{let n=c[t].constructor.name;n.includes("Set")?a[t]=Array.from(c[t]):n!=="Number"&&n!=="String"&&n!=="Boolean"?a[t]="instanceof_"+n:a[t]=c[t]}d=a}else d=c}else d=c;return d}return function(c,d){s.push(c);let f=JSON.stringify(c,m,d);return i(),f}}());JSON.stringifyWithCircularRefs===void 0&&(JSON.stringifyWithCircularRefs=function(){let D=new Map,s=[],l=["this"];function i(){D.clear(),s.length=0,l.length=1}function o(u,c){var d=s.length-1,f=s[d];if(typeof f=="object")if(f[u]===c||d===0)l.push(u),s.push(c.pushed);else for(;d-->=0;){if(f=s[d],typeof f=="object"&&f[u]===c){d+=2,s.length=d,l.length=d,--d,s[d]=c,l[d]=u;break}d--}}function m(u,c){if(c!=null&&typeof c=="object"){u&&o(u,c);let d=D.get(c);if(d)return"[Circular Reference]"+d;D.set(c,l.join("."))}return c}return function(c,d){try{return s.push(c),JSON.stringify(c,m,d)}finally{i()}}}());var qe=class{constructor(s=void 0){this.state=new Qe({},void 0,!1),this.manager=s,s!==void 0&&(s.responses.find(i=>{if(i.name==="eventmanager")return!0})||s.addCallback("eventmanager",this.callback))}subEvent(s,l=i=>{console.log(s,i)}){return this.state.subscribeTrigger(s,l)}unsubEvent(s,l){return this.state.unsubscribeTrigger(s,l)}async addEvent(s,l=void 0,i=void 0,o=void 0){if(this.state.setState({[s]:void 0}),this.manager!==void 0&&(o!==void 0||i!==void 0))return l!==void 0?await this.manager.post({origin:o,foo:"addevent",input:[s,i]},l):(this.manager.workers.forEach(m=>{this.manager.post({origin:o,foo:"addevent",input:[s,i]},m.id)}),!0)}removeEmitter(s){this.state.unsubscribeAllTriggers(s)}emit=(s,l,i=void 0,o=void 0,m=void 0)=>{let u={eventName:s,output:l};!l||!s||(this.manager!==void 0?i!==void 0?this.manager.post(u,i,o):this.manager.workers.forEach(c=>{this.manager.post(u,c.id,o)}):typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&(m?m.postMessage(u,void 0,o):globalThis.postMessage(u,void 0,o)),this.state.setState({[s]:l}))};callback=s=>{typeof s=="object"&&s.eventName!==void 0&&s.output!==void 0&&this.state.setState({[s.eventName]:s.output})};export=()=>this};var et=async D=>await import(D);function hn(D){return D.toString().replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")}function cn(D){let s=D.toString();return s.slice(0,s.indexOf("{")+1)}function pn(head,body){let newFunc=eval(head+body+"}");return newFunc}function fn(D){let s=new RegExp("(|[a-zA-Z]w*|([a-zA-Z]w*(,s*[a-zA-Z]w*)*))s*=>"),l=typeof D=="string"?D.substring(0,10).includes("function"):!1,i=typeof D=="string"?s.test(D):!1;return!!(l||i)}function Ee(method){let getFunctionBody=D=>D.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4"),getFunctionHead=D=>{let s=D.indexOf(")");return D.slice(0,D.indexOf("{",s)+1)},newFuncHead=getFunctionHead(method),newFuncBody=getFunctionBody(method),newFunc;if(newFuncHead.includes("function ")){let D=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(D,newFuncBody)}else if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let D=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(D,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else newFunc=eval(newFuncHead+newFuncBody+"}");return newFunc}var Ae=class{constructor(){}static genSineWave(s=20,l=1,i=1,o=512,m=0,u=1){for(var c=[],d=[],f=1/o,r=0;r<i;r+=f){var a=Math.sin(2*Math.PI*s*r)*l;a+=Math.sin(2*Math.PI*m*r)*u,c.push(a),d.push(r)}return[d,c]}static getSineAmplitude(s=20,l=1,i=0,o=0){return Math.sin(this.TWO_PI*s*i+o)*l}static mean(s){var l=s.reduce((i,o)=>o+=i);return l/s.length}static mode(s){return s.sort((l,i)=>s.filter(o=>o===l).length-s.filter(o=>o===i).length).pop()}static std(s,l=void 0){let i=l;l||(i=this.mean(s));let o=0;for(let m=0;m<s.length;m++){let u=s[m]-i;o+=u*u}return Math.sqrt(o/s.length)}static relError(s=[],l=[],i=!0){if(s.length!==l.length)throw new Error("Input arrays of same length!");let o=s.length,m=new Array(s.length);for(let u=0;u<o;u++){let c=(s[u]-l[u])/s[u];i&&(c=Math.abs(c)),m[u]=c}return m}static informationEntropy(s=[]){let l=s.length,i=new Array(l);for(let o=0;o<l;o++){let m=s[o]*Math.log(s[o]);isNaN(m)&&(m=0),i[o]=m}return i}static zscore(s){let l=this.mean(s),i=this.std(s,l),o=new Array().length(s.length);for(let m=0;m<s.length;m++)o[m]=(s[m]-l)/i;return o}static variance(s){var l=this.mean(s);return s.reduce((i,o)=>i+(o-l)**2,0)/s.length}static dot(s,l){for(var i=0,o=0;o<s.length;o++)i+=s[o]*l[o];return i}static cross3D(s,l){return[s[1]*l[2]-s[2]*l[1],s[2]*l[0]-s[0]*l[2],s[0]*l[1]-s[1]*l[0]]}static magnitude(s){var l=0;return s.forEach(i=>{l+=i*i}),Math.sqrt(l)}static distance(s,l){var i=0;return s.forEach((o,m)=>{i+=(l[m]-o)*(l[m]-o)}),Math.sqrt(i)}static midpoint(s=[1,2,3],l=[3,4,5]){return s.map((i,o)=>(i+l[o])*.5)}static normalize(s){var l=0;l=this.magnitude(s);var i=new Array(s.length);return s.forEach((o,m)=>{i[m]=o*l}),i}static normalizeSeries(s=[],l=!0){let i=Math.max(...s),o=Math.min(...s);return l==!1&&(i=Math.max(i,Math.abs(o)),o=0),i-o===0&&(o=0,i===0&&(i=1e-13)),s.map(m=>(m-o)/(i-o))}static quadraticFormula(s,l,i){let o=Math.sqrt(l*l-4*s*i);if(!isNaN(o))return["complex","complex"];let m=1/(2*s);if(o===0)return[l*m];let u=-l;return[(u+o)*m,(u-o)*m]}static newtonsMethod(s=u=>Math.pow(u,5)+u*u-u-.2,l=0,i=1,o=.01,m=10){let u=[];for(let c=0;c<m;c++){let d=Math.random()*(i-l),f=s(d),r=s(d+o),a=(r-f)/o,t=d+o;for(;Math.abs(a)>o;){let v=-f/T,k=t+v;f=r,r=s(k);let T=(r-f)/(k-t)}let n,g=u.find((v,k)=>{if(Math.abs(xn1-v)<o)return n=k,!0});g?u[n]=(xn1+g)*.5:u.push(xn1)}return u}static makeVec(s,l){var i=[];return s.forEach((o,m)=>{i.push(l[m]-o)}),i}static forBufferedMat(s=new Array(100).fill(1),l=[10,10],i=(o,m,u,c)=>o+u+c){let o=[],m=0,u=(d=0,f=d+1)=>{let r=new Array(s.length);for(let a=0;a<l[d];a++)o[d]=a,l[f]?u(f):(r[m]=i(s[m],m,...o),m++);return r},c=(d,f=d+1)=>{let r=new Array(s.length);for(let a=0;a<l[d];a++)if(o[d]=a,l[f])u(f);else for(let t=0;t<l.length;t++)r[m]=i[t](s[m],m,...o),m++;return r};if(typeof i=="function")return u();if(Array.isArray(i))return c()}static mapBufferedMat(s=new Array(100).fill(1),l=[10,10],i=(o,m,u,c)=>(console.log(`value:${o}, idx:${m}, x:${u},y:${c}`),o+u+c)){let o=new Array(l.length).fill(0),m=(d,f=0)=>{if(d[f]>=l[f]){if(d[f]=0,f++,f===l.length)return;m(d,f)}else d[f]++},u=new Array(s.length),c=0;if(typeof i=="function")for(;c<s.length;)u[c]=i(s[c],c,...o),c+=l.length,m(o);else if(Array.isArray(i))for(;c<s.length;)i.forEach(d=>{d(s[c],c,...o),c++,m(o)});return u}static combinations(s=["a","b","c"],l=3){var i=[];return l<=0?i.push([]):Ae.combinations(s,l-1).forEach(function(o){s.forEach(function(m){i.push([m].concat(o))})}),i}static generateCoordinateSpace(s=[10,10,10],l=[-10,-10,-10],i=[1,1,1],o=void 0){for(let d=0;d<s.length;d++)if(l[d]>s[d]){let f=s[d];s[d]=l[d],l[d]=f}let m=[],u=[...s],c=u.length-1;for(m.push([...u]);u[0]>=l[0];){let d=r=>{if(u[r]<=l[r]){if(r===0||(u[r]=s[r],r--,r<0))return;typeof i[r]=="function"?u[r]-=i[r](u[r]):u[r]-=i[r],d(r)}},f=c;typeof i[f]=="function"?u[f]-=i[f](u[f]):u[f]-=i[f],m.push([...u]),d(f),o&&(m[m.length-1]=o(m[m.length-1]))}return m}static calcVectorField(s=[[0,0],[0,1],[1,0],[1,1]],l=(i,o)=>[i*10,o*10]){return s.map(i=>l(...i))}static transpose(s){return s[0].map((l,i)=>s.map(o=>o[i]))}static matmul(s,l){for(var i=s.length,o=s[0].length,m=l.length,u=l[0].length,c=new Array(i),d=0;d<i;++d){c[d]=new Array(u);for(var f=0;f<u;++f){c[d][f]=0;for(var r=0;r<o;++r)c[d][f]+=s[d][r]*l[r][f]}}return c}static matscale(s,l){let i=[];for(var o=0;o<s.length;o++){i[o]=[];for(let m=0;m<s[0].length;m++)i[o][m]=s[o][m]*l}return i}static matadd(s,l){let i=[];for(let m=0;m<s.length;m++){i[m]=[];for(var o=0;o<s[0].length;o++)i[m][o]=s[m][o]+l[m][o]}return i}static matsub(s,l){let i=[];for(let m=0;m<s.length;m++){i[m]=[];for(var o=0;o<s[0].length;o++)i[m][o]=s[m][o]-l[m][o]}return i}static histogram(s=[],l=1,i=void 0){let o=[...s];o.sort(function(f,r){return f-r});let m=Math.min(...o);if(typeof i=="number"){let f=Math.max(...o);l=Math.abs((f-m)/(i-1))}let u=m,c=[],d=[];for(let f=0;f<o.length;f++){let r=l*u;if(o[f]>m+r){u++,r+=l;let t=m+r+r*.5;c.push(t),d.push(0)}d[d.length-1]++}return[c,d]}static normalDistribution(s=[],l=!0,i=1e-4){let o=this.mean(s),m=this.variance(s),u=s.length,c=[],d=1/(this.TWO_PI*m),f=1/m,r=0;for(let a=0;a<u;a++){let t=Math.exp(-.5*Math.pow((s[a]-o)*f,2))*d;t<i&&(t=0),c.push(t),r+=t}if(l){let a=1/r;c=c.map(t=>t*a)}return c}static expectedValue(s=[],l=this.normalDistribution(s)){return s.reduce((i,o,m)=>i+o*l[m])}static originMoment(s=[],l=this.normalDistribution(s),i=1){return s.reduce((o,m,u)=>o+Math.pow(m,i)*l[u])}static centralMoment(s=[],l=this.normalDistribution(s),i=1){let o=this.mean(s);return s.reduce((m,u,c)=>m+Math.pow(u-o,i)*l[c]/s.length)}static linearDiscriminantAnalysis(s=[],l=[]){let i=this.mean(s),o=this.mean(l),m=this.cov1d(s,l),u=this.normalDistribution(s),c=[];for(let d=0;d<s.length;d++)c.push(x[d]*m*o-.5*i*m*o+Math.log10(u[d]));return c}static conv1D(s=[],l=[1/3,1/3,1/3],i=Math.floor(l.length*.5)){let o=[],m=1/l.length;if(i>0){let d=new Array(i).fill(0);s=[...d,...s,...d]}let u=Math.floor(l.length*.5),c=s.length-l.length+u;for(let d=u;d<c;d++){let f=0;for(let r=0;r<l.length;r++)f+=s[d-u]*l[r];o.push(f*m)}return o}static conv2D(s=[[],[],[]],l=[[],[],[]],i=0){let o=new Array(s.length-Math.ceil(l.length*.5)).fill([]),m,u=Ae.transpose(u);if(i>0){let k=new Array(i).fill(0);m=Ae.transpose(s);for(let T=0;T<m.length;T++)m[T]=[...k,...m[T],...k];s=Ae.transpose(m);for(let T=0;T<s.length;T++)s[T]=[...k,...s[T],...k]}let c=Math.floor(l[0].length*.5),d=Math.floor(u[0].length*.5),f=s[0].length-l[0].length+c,r=m[0].length-u[0].length+d,a=1/(l[0].length*u[0].length),t=f*r,n=c,g,v=d;for(;n<t;){let k=0;g=n%s[0].length,g===0&&v++;for(let T=0;T<l[0].length;T++){for(let A=0;A<u[0].length;T++)k+=s[v-d+A][g-c+T]*l[A][T];o[v].push(k*a)}n++}return o}static cov2d(s){var l=this.transpose(s),i=[],o=[],m=[];s.forEach((v,k)=>{o.push(this.mean(v))}),l.forEach((v,k)=>{m.push(this.mean(v))}),s.forEach((v,k)=>{i.push([]);for(var T=0;T<v.length;T++)i[k].push((s[k][T]-o[k])*(s[k][T]-m[T])/(v.length-1))});for(var u=this.transpose(i),c=i.length,d=i[0].length,f=u.length,r=u[0].length,a=new Array(c),t=0;t<c;++t){a[t]=new Array(r);for(var n=0;n<r;++n){a[t][n]=0;for(var g=0;g<d;++g)a[t][n]+=i[t][g]*u[g][n]/(s[0].length-1)}}return a}static cov1d(s=[],l=[]){return this.cov2d([s,l])}static cov3d(s=[],l=[],i=[]){return[[this.cov1d(s,s),this.cov1d(s,l),this.cov1d(s,i)],[this.cov1d(l,s),this.cov1d(l,l),this.cov1d(l,i)],[this.cov1d(i,s),this.cov1d(i,l),this.cov1d(i,i)]]}static covNd(s=[]){let l=[];s.forEach((i,o)=>{l.push([]),s.forEach((m,u)=>{l[o].push(this.cov1d(i,m))})})}static eigens2x2(s=[[1,2],[3,4]]){let l=s[0][0]*s[1][1]-s[0][1]*s[1][0],i=(s[0][0]+s[1][1])*.5,o=Math.sqrt(i*i-l),m=i+o,u=i-o;return[m,u]}static eigenvectors2x2(s=[[1,2],[3,4]],l=[1,2]){let i=[-s[0][1],s[0][0]-l[0]];i[0]===0&&i[1]===0&&(i[0]=s[1][1]-l[0],i[1]=-s[1][0]);let o=[-s[0][1],s[0][0]-l[1]];return o[0]===0&&o[1]===0&&(o[0]=s[1][1]-l[1],o[1]=-s[1][0]),[i,o]}static fastpca2d(s,l){let i=this.cov1d(s,l),o=this.eigens2x2(i);o[1]>o[0]&&o.reverse();let m=this.eigenvectors2x2(i,o);return console.log(o,m),[o,m]}static crosscorrelation(s,l){var i=[...l,...Array(l.length).fill(0)],o=this.mean(s),m=this.mean(l),u=s.reduce((t,n)=>t+=Math.pow(n-o,2));u=Math.sqrt(u);var c=l.reduce((t,n)=>t+=Math.pow(n-o,2));c=Math.sqrt(c);for(var d=1/(u*c),f=new Array(s.length).fill(0),r=0;r<s.length;r++){var a=s.reduce((t,n,g)=>t+=(n-o)*(i[r+g]-m));f[r]=a*d}return f}static autocorrelation(s){var l=[...s,...Array(s.length).fill(0)],i=this.mean(s),o=s.reduce((f,r)=>f+=Math.pow(r-i,2));o=Math.sqrt(o);for(var m=1/(o*o),u=new Array(s.length).fill(0),c=0;c<s.length;c++){var d=s.reduce((f,r,a)=>f+=(r-i)*(l[c+a]-i));u[c]=d*m}return u}static autocorrelation2dNormalized(s){let l=[];for(let i=0;i<s.length;i++){l.push([]);for(let o=0;o<s[i].length;o++){let m=0,u=0;for(let c=0;c<s.length;c++)for(let d=0;d<s[c].length;d++)m+=s[i][o]*s[s.length-1-c][s[i].length-1-d],u+=s[i][o]*s[s.length-1][s[i].length-1];l[i][o]=m/u-1}}return l}static crosscorrelation2d(s,l){let i=[];for(let o=0;o<s.length;o++){i.push([]);for(let m=0;m<s[o].length;m++){let u=0;for(let c=0;c<l.length;c++)for(let d=0;d<l[c].length;d++)u+=s[o][m]*l[l.length-1-c][l[o].length-1-d];i[o][m]=u}}return i}static crosscorrelation2dNormalized(s,l){let i=[];for(let o=0;o<s.length;o++){i.push([]);for(let m=0;m<s[o].length;m++){let u=0,c=0;for(let d=0;d<l.length;d++)for(let f=0;f<l[d].length;f++)u+=s[o][m]*l[mat2d.length-1-d][l[o].length-1-f],c+=s[o][m]*l[l.length-1][l[o].length-1];i[o][m]=u/c-1}}return i}static correlograms(s=[[],[]]){var l=[];return s.forEach((i,o)=>{s.forEach((m,u)=>{u>=o&&l.push(Ae.crosscorrelation(i,m))})}),l}static dft(s=[]){for(var l=6.283185307179586,i=[],o=[],m=[],u=0;u<s.length;u++){i.push(0),o.push(0);for(var c=0;c<s.length;c++){var d=l*u*c/s.length;i[u]=i[u]+s[c]*Math.cos(d),o[u]=o[u]-s[c]*Math.sin(d)}m.push(Math.sqrt(i[u]*i[u]+o[u]*o[u]))}function f(t){return[...t.slice(Math.ceil(t.length*.5),t.length),...t.slice(0,Math.ceil(t.length*.5))]}m=f(m);let r=m.length*.5,a=m.map((t,n)=>n-r);return{real:i,imag:o,freqs:a,mags:m}}static sma(s=[],l){for(var i=[],o=0;o<s.length;o++)if(o==0)i.push(s[0]);else if(o<l){var m=s.slice(0,o+1);i.push(m.reduce((u,c)=>c+=u)/(o+1))}else{var m=s.slice(o-l,o);i.push(m.reduce((c,d)=>d+=c)/l)}return i}static sum(s=[]){if(s.length>0){var l=s.reduce((i,o)=>o+=i);return l}else return 0}static reduceArrByFactor(s,l=2){return s.filter((o,m)=>m%l===0)}static makeArr(s,l,i){for(var o=[],m=(l-s)/(i-1),u=0;u<i;u++)o.push(s+m*u);return o}static autoscale(s,l=1,i=0,o=!1){if(s?.length===0)return s;let m=Math.max(...s),u=Math.min(...s),c=1/l,d;if(o){let f=Math.max(Math.abs(u),Math.abs(m));return d=c/f,s.map(r=>r*d+(c*(i+1)*2-1-c))}else return d=c/(m-u),s.map(f=>2*((f-u)*d-1/(2*l))+(c*(i+1)*2-1-c))}static absmax(s){return Math.max(Math.abs(Math.min(...s)),Math.max(...s))}static downsample(s,l,i=1){if(s.length>l){let o=new Array(l),m=s.length/l,u=s.length-1,c=0,d=0;for(let f=m;f<s.length;f+=m){let r=Math.round(f);r>u&&(r=u);for(let a=c;a<r;a++)o[d]+=s[a];o[d]/=(r-c)*i,d++,c=r}return o}else return s}static interpolateArray(s,l,i=1){var o=function(t,n,g){return(t+(n-t)*g)*i},m=new Array,u=new Number((s.length-1)/(l-1));m[0]=s[0];for(var c=1;c<l-1;c++){var d=c*u,f=new Number(Math.floor(d)).toFixed(),r=new Number(Math.ceil(d)).toFixed(),a=d-f;m[c]=o(s[f],s[r],a)}return m[l-1]=s[s.length-1],m}static isExtrema(s,l="peak"){let i=[...s];if(i.length%2===0&&i.pop(),s.length>1){let o=!0;for(let m=0;m<i.length;m++){let u=i[m];if(l==="peak"){if(m<Math.floor(i.length*.5)&&u>=i[Math.floor(i.length*.5)]){o=!1;break}else if(m>Math.floor(i.length*.5)&&u>=i[Math.floor(i.length*.5)]){o=!1;break}}else if(l==="valley"){if(m<Math.floor(i.length*.5)&&u<=i[Math.floor(i.length*.5)]){o=!1;break}else if(m>Math.floor(i.length*.5)&&u<=i[Math.floor(i.length*.5)]){o=!1;break}}else if(m<Math.floor(i.length*.5)&&u<=i[Math.floor(i.length*.5)]){o=!1;break}else if(m>Math.floor(i.length*.5)&&u<=i[Math.floor(i.length*.5)]){o=!1;break}}if(l!=="peak"&&l!=="valley"&&o===!1){o=!0;for(let m=0;m<i.length;m++){let u=i[m];if(m<Math.floor(i.length*.5)&&u>=i[Math.floor(i.length*.5)]){o=!1;break}else if(m>Math.floor(i.length*.5)&&u>=i[Math.floor(i.length*.5)]){o=!1;break}}}return o}else return}static isCriticalPoint(s,l="peak"){let i=[...s];if(i.length%2===0&&i.pop(),s.length>1){let o=!0;for(let m=0;m<i.length;m++){let u=i[m];if(l==="peak"){if(m<i.length*.5&&u<=0){o=!1;break}else if(m>i.length*.5&&u>0){o=!1;break}}else if(l==="valley"){if(m<i.length*.5&&u>=0){o=!1;break}else if(m>i.length*.5&&u<0){o=!1;break}}else if(m<i.length*.5&&u>=0){o=!1;break}else if(m>i.length*.5&&u<0){o=!1;break}}if(l!=="peak"&&l!=="valley"&&o===!1){o=!0;for(let m=0;m<i.length;m++){let u=i[m];if(m<i.length*.5&&u<=0){o=!1;break}else if(m>i.length*.5&&u>0){o=!1;break}}}return o}else return}static getPeakThreshold(s,l,i){let o,m=s.filter((u,c)=>{if(l.indexOf(c)>-1)return!0});return i===0?o=this.mean(m):o=(i+this.mean(m))*.5,o}static column(s,l){let i=new Array(s.length).fill(0).map(()=>new Array(1).fill(0));for(let o=0;o<s.length;o++)i[o][0]=s[o][l];return i}static flatten_vector(s){let l=[];for(let i=0;i<s.length;i++)l[i]=s[i][0];return l}static squared_difference(s,l){let i=0;for(let o=0;o<s.length;o++)i=i+Math.pow(s[o]-l[o],2);return i}static shift_deflate(s,l,i){let o=Math.sqrt(this.matmul(this.transpose(i),i)),m=this.matscale(i,1/o),u=this.matscale(this.matmul(m,this.transpose(m)),l);return this.matsub(s,u)}static eigenvalue_of_vector(s,l){return ev=this.matmul(this.matmul(this.transpose(l),s),l),ev}static power_iteration(s,l=1e-5,i=1e3){let o=s.length,m=new Array(o).fill(0).map(()=>new Array(1).fill(Math.sqrt(o))),u=this.eigenvalue_of_vector(s,m),c=1,d=0;for(;c>l&&d<i;){let f=JSON.parse(JSON.stringify(u)),r=this.matmul(s,m);m=this.normalize(r),u=this.eigenvalue_of_vector(s,m),c=Math.abs(u-f),d++}return[u,m]}static eigens(s,l=1e-4,i=1e3){let o=[],m=[];for(let u=0;u<s.length;u++){let c=this.power_iteration(s,l,i),d=c[0],f=c[1];o[u]=d,m[u]=this.flatten_vector(f),s=this.shift_deflate(s,d,f)}return[o,m]}static pca(s,l=1e-5){let i=s.length,o=new Array(i),m=new Array(i),u=this.transpose(s);o[0]=this.column(s,0);let c=1,d=0;for(;espilon>l;){d++,m[0]=this.matmul(u,o[0]);let r=this.matmul(this.transpose(o[0]),o[0]);m[0]=this.matscale(m[0],1/r);let a=Math.sqrt(this.matmul(this.transpose(m[0]),m[0]));m[0]=this.matscale(m[0],1/a);let t=this.matmul(s,m[0]),n=this.matmul(this.transpose(m[0]),m[0]);t=this.matscale(t,1/n),c=this.squared_difference(o[0],t),o[0]=JSON.parse(JSON.stringify(t))}return this.matmul(this.transpose(o[0]),o[0])}static p300(s=[],l=[],i=[],o=256){let m=Math.floor(o/10),u=this.sma(l,m),c=this.peakDetect(u,"peak",m),d=this.mean(u),f=this.std(u,d),r=0,a=[];return c.length>0&&s.forEach((t,n)=>{for(;i[c[r]]<t+200&&(r++,!!c[r]););let g=0,v=[];for(;i[c[r+g]]<t+600&&(v.push(r+g),g++,!!c[r+g]););if(v.length>1){let k=[];v.forEach(E=>{k.push(u[c[E]])});let T=Math.max(...k),A=v[k.indexOf(T)];a.push({event_timestamp:t,event_index:n,peak_timestamp:i[[c[A]]],signal_index:[c[A]],signal_amplitude:l[[c[A]]],zscore:(u[c[A]]-d)/f})}else v.length===1&&a.push({event_timestamp:t,event_index:n,peak_timestamp:i[c[v[0]]],signal_index:c[v[0]],signal_amplitude:l[[c[v[0]]]],zscore:(u[c[v[0]]]-d)/f})}),a}},q=Ae;oe(q,"TWO_PI",Math.PI*2),oe(q,"C",299792458),oe(q,"G",66743e-15),oe(q,"h",662607015e-42),oe(q,"R",8314.32),oe(q,"Ra",287),oe(q,"H",69.3),oe(q,"kbar",1054571817e-43),oe(q,"kB",1380649e-29),oe(q,"ke",89875517923e-1),oe(q,"me",91093837015e-41),oe(q,"mp",167262192369e-38),oe(q,"mn",167492749804e-38),oe(q,"P0",101325),oe(q,"T0",288.15),oe(q,"p0",1.225),oe(q,"Na",60220978e16),oe(q,"y",1.405),oe(q,"M0",28.96643),oe(q,"g0",9.80665),oe(q,"Re",6378100),oe(q,"B",1458e-9),oe(q,"S",110.4),oe(q,"Sigma",365e-12),oe(q,"imgkernels",{edgeDetection:[[-1,-1,-1],[-1,8,-1],[-1,-1,-1]],boxBlur:[[1/9,1/9,1/9],[1/9,1/9,1/9],[1/9,1/9,1/9]],sobelLeft:[[1,0,-1],[2,0,-2],[1,0,-1]],sobelRight:[[-1,0,1],[-2,0,2],[-1,0,1]],sobelTop:[[1,2,1],[0,0,0],[-1,-2,-1]],sobelBottom:[[-1,2,1],[0,0,0],[1,2,1]],identity:[[0,0,0],[0,1,0],[0,0,0]],gaussian3x3:[[1,2,1],[2,4,2],[1,2,1]],guassian7x7:[[0,0,0,5,0,0,0],[0,5,18,32,18,5,0],[0,18,64,100,64,18,0],[5,32,100,100,100,32,5],[0,18,64,100,64,18,0],[0,5,18,32,18,5,0],[0,0,0,5,0,0,0]],emboss:[[-2,-1,0],[-1,1,1],[0,1,2]],sharpen:[[0,-1,0],[-1,5,-1],[0,-1,0]]}),oe(q,"integral",(s=o=>o,l=[],i=.01)=>{let o=0;for(let m=l[0];m<l[1];m+=i)o+=s(m)*i;return o}),oe(q,"dintegral",(s=(m,u)=>m+u,l=[[],[]],i=.01,o=i)=>{let m=0;for(let u=l[0][0]+i;u<l[0][1];u+=i)for(let c=l[1][0]+o;c<l[1][1];c+=o)m+=s(u,c)*i*o;return m}),oe(q,"tintegral",(s=(u,c,d)=>u+c+d,l=[[],[],[]],i=.01,o=i,m=i)=>{let u=0;for(let c=l[0][0]+i;c<l[0][1];c+=i)for(let d=l[1][0]+o;d<l[1][1];d+=o)for(let f=l[2][0]+m;f<l[2][1];f+=m)u+=s(c,d,f)*i*o*m;return u}),oe(q,"pintegral",(s=o=>o,l=[],i=.01)=>{let o=0,m,u;for(let c=l[0];c<l[1];c+=i)m=u,u=s(c),m&&(o+=Ae.distance([0,m],[i,u]));return o}),oe(q,"meshgrid",Ae.generateCoordinateSpace),oe(q,"autocorrelation2d",s=>{let l=[];for(let i=0;i<s.length;i++){l.push([]);for(let o=0;o<s[i].length;o++){let m=0;for(let u=0;u<s.length;u++)for(let c=0;c<s[u].length;c++)m+=s[i][o]*s[s.length-1-u][s[i].length-1-c];l[i][o]=m}}return l}),oe(q,"upsample",Ae.interpolateArray),oe(q,"peakDetect",(s,l="peak",i=49)=>{let o=Math.floor(i*.5),m=[];for(let u=0;u<s.length-i;u++)Ae.isExtrema(s.slice(u,u+i),l)&&m.push(u+o-1);return m});Object.assign(Math,q);var Pe=class{constructor(s){this.callbackManager=s,s.Math2=q,this.callbacks=[{case:"xcor",callback:(l,i,o)=>q.crosscorrelation(...i)},{case:"autocor",callback:(l,i,o)=>q.autocorrelation(i)},{case:"cov1d",callback:(l,i,o)=>q.cov1d(...i)},{case:"cov2d",callback:(l,i,o)=>q.cov2d(i)},{case:"sma",callback:(l,i,o)=>q.sma(...i)}],this.addCallbacks()}addCallbacks(s=this.callbacks){s.forEach(l=>{this.callbackManager.addCallback(l.case,l.callback),l.aliases&&l.aliases.forEach(i=>{this.callbackManager.addCallback(i,l.callback)})})}};var vn=_i(Gt());function wi(D,s){return D+s}function Ei(D,s){return D-s}function Ai(D,s){return D*s}function ki(D,s){return D/s}function Ii(D,s,l,i){return[D+l,s+i]}function Di(D,s,l,i){return[D-l,s-i]}function Ci(D,s,l,i){return[D*l-s*i,D*i+s*l]}function Fi(D,s){let l=Math.exp(D);return[l*Math.cos(s),l*Math.sin(s)]}function be(D,s){return Math.sqrt(D*D+s*s)}function Ri(D){return 0-D}function Mi(D){let s=Math.sqrt(D);for(var l=3;l<=s;){if(D%l===0)return l;l+=2}}function dt(D,s){for(var l=0,i=0;i<s;i++)l+=D[i];return l/s}function mt(D,s,l){for(var i=0,o=0;o<l;o++)i+=(D[o]-s)*(D[o]-s);return Math.sqrt(i)}function Li(D,s,l){for(var i=0,o=0,m=0;m<l;m++)o=D[m]-s,i+=o*o;return i/l}function $i(D,s,l){for(var i=0,o=0,m=0;m<l;m++)o=D[m]-s,i+=o*o;return Math.sqrt(i/l)}function gt(D,s,l,i,o,m,u,c){for(var d=0,f=0;f<u;f++){var r=f+c,a=0;r<u&&(a=i[r]),d+=(D[f]-s)*(a-o)}return d/(l*m)}function Vi(D,s,l){for(var i=0,o=0;o<s;o++)i+=Math.exp(D[o]);return Math.exp(D[l])/i}function Ne(D,s,l){for(var i=0,o=0,m=1/s,u=6.28318530718*l*m,c=0;c<s;c++){var d=u*c;i=i+D[c]*Math.cos(d),o=o-D[c]*Math.sin(d)}return[i*m,o*m]}function xt(D,s,l,i){for(var o=0,m=0,u=1/s,c=6.28318530718*l*u,d=0;d<s;d++){var f=c*d;o=o+D[d+(s-1)*i]*Math.cos(f),m=m-D[d+(s-1)*i]*Math.sin(f)}return[o*u,m*u]}function Ke(D,s,l,i){var o=0,m=0,u=1/s,c=6.28318530718*l*u,d=1,f=0,r=i*.25;if(l<=r)for(;l<=r;)r=r*.5,d+=1;for(var a=0;a<s;a+=d){var t=a;t>s&&(t=s);var n=c*t;o=o+D[t]*Math.cos(n),m=m-D[t]*Math.sin(n),f+=1}return[o/f,m/f]}function Wt(D,s,l,i,o){var m=0,u=0,c=1/s,d=6.28318530718*l*c,f=1,r=0,a=o*.25;if(l<=a)for(;l<=a;)a=a*.5,f+=1;for(var t=0;t<s;t+=f){var n=t;n>s&&(n=s);var g=d*n;m=m+D[n+(s-1)*i]*Math.cos(g),u=u-D[n+(s-1)*i]*Math.sin(g),r+=1}return[m/r,u/r]}function tt(D,s,l){for(var i=0,o=0,m=1/s,u=6.28318530718*l*m,c=0;c<s;c++){var d=u*c;i=i+D[c]*Math.cos(d),o=D[c]*Math.sin(d)-o}return[i*m,o*m]}function jt(D,s,l,i){for(var o=0,m=0,u=1/s,c=6.28318530718*l*u,d=0;d<s;d++){var f=c*d;o=o+D[d+(s-1)*i]*Math.cos(f),m=D[d+(s-1)*i]*Math.sin(f)-m}return[o*u,m*u]}function it(D,s,l,i){var o=0,m=0,u=1/s,c=6.28318530718*l*u,d=1,f=0,r=i*.25;if(l<=r)for(;l<=r;)r=r*.5,d+=1;for(var a=0;a<s;a+=d){var t=a;t>s&&(t=s);var n=c*t;o=o+D[t]*Math.cos(n),m=D[t]*Math.sin(n)-m,f+=1}return[o/f,m/f]}function Ht(D,s,l,i,o){var m=0,u=0,c=1/s,d=6.28318530718*l*c,f=1,r=0,a=o*.25;if(l<=a)for(;l<=a;)a=a*.5,f+=1;for(var t=0;t<s;t+=f){var n=t;n>s&&(n=s);var g=d*n;m=m+D[n+(s-1)*i]*Math.cos(g),u=D[n+(s-1)*i]*Math.sin(g)-u,r+=1}return[m/r,u/r]}function Ni(D,s){var l=Math.floor(this.thread.x/s)*2,i=this.thread.x-Math.floor(this.thread.x/s)*s,o=dt(D[l],s),m=dt(D[l+1],s),u=mt(D[l],o,s),c=mt(D[l+1],m,s),d=gt(D[l],o,u,D[l+1],m,c,s,i);return d}function Oi(D,s,l,i){var o=Math.floor(this.thread.x/s)*2,m=this.thread.x-Math.floor(this.thread.x/s)*s,u=l[o],c=l[o+1],d=i[o],f=i[o+1],r=gt(D[o],u,d,D[o+1],c,f,s,m);return r}function zi(D,s,l){var i=Ne(D,s,this.thread.x);return be(i[0],i[1])*l}function Pi(D,s,l){var i=tt(D,s,this.thread.x);return be(i[0],i[1])*l}function Ut(D,s,l,i){var o=Ke(D,s,this.thread.x,i);return be(o[0],o[1])*l}function Bt(D,s,l,i){var o=it(D,s,this.thread.x,i);return be(o[0],o[1])*l}function Ki(D,s){var l=this.output.x,i=Ne(D[this.thread.y],l,this.thread.x);return be(i[0],i[1])*s}function Gi(D,s,l){var i=[0,0];if(this.thread.x<=s)i=Ne(D,s,this.thread.x);else{var o=Math.floor(this.thread.x/s);i=xt(D,s,this.thread.x-o*s,o)}return be(i[0],i[1])*l}function Ui(D,s,l,i){var o=[0,0];if(this.thread.x<=s)o=Ke(D,s,this.thread.x,i);else{var m=Math.floor(this.thread.x/s);o=Wt(D,s,this.thread.x-m*s,m,i)}return be(o[0],o[1])*l}function Bi(D,s,l,i,o){var m=[0,0],u=this.thread.x/s*(i-l)+l;return m=Ne(D,s,u),be(m[0],m[1])*o}function Wi(D,s,l,i,o){var m=[0,0],u=this.thread.x/s*(i-l)+l;return m=Ke(D,s,u),be(m[0],m[1])*o}function ji(D,s,l,i,o){var m=[0,0],u=this.thread.x/s*(i-l)+l;return m=tt(D,s,u),be(m[0],m[1])*o}function Hi(D,s,l,i,o){var m=[0,0],u=this.thread.x/s*(i-l)+l;return m=it(D,s,u),be(m[0],m[1])*o}function Xi(D,s,l,i,o){var m=[0,0];if(this.thread.x<s){var u=this.thread.x/s*(i-l)+l;m=Ne(D,s,u)}else{var c=Math.floor(this.thread.x/s),u=(this.thread.x-c*s)/s*(i-l)+l;m=xt(D,s,u-c*s,c)}return be(m[0],m[1])*o}function Yi(D,s,l,i,o){var m=[0,0];if(this.thread.x<s){var u=this.thread.x/s*(i-l)+l;m=Ke(D,s,u,s)}else{var c=Math.floor(this.thread.x/s),u=(this.thread.x-c*s)/s*(i-l)+l;m=Wt(D,s,u-c*s,c,s)}return be(m[0],m[1])*o}function Ji(D,s,l,i,o){var m=[0,0];if(this.thread.x<s){var u=this.thread.x/s*(i-l)+l;m=tt(D,s,u)}else{var c=Math.floor(this.thread.x/s),u=(this.thread.x-c*s)/s*(i-l)+l;m=jt(D,s,u-c*s,c)}return be(m[0]*2,m[1]*2)*o}function Zi(D,s,l,i,o){var m=[0,0];if(this.thread.x<s){var u=this.thread.x/s*(i-l)+l;m=it(D,s,u)}else{var c=Math.floor(this.thread.x/s),u=(this.thread.x-c*s)/s*(i-l)+l;m=Ht(D,s,u-c*s,c)}return be(m[0]*2,m[1]*2)*o}function Qi(D,s,l,i){for(var o=l*Math.floor(this.thread.x/s),m=D[o][this.thread.x],u=0;u<l;u++)m*=D[u][this.thread.x];return m*i}function qi(D,s,l,i,o){let m=(Math.sqrt(o)-1)/2,u=2*m+1,c=0,d=0,f=0,r=-m,a=0;for(;r<=m;){if(this.thread.x+r<0||this.thread.x+r>=s){r++;continue}let t=-m;for(;t<=m;){if(this.thread.y+t<0||this.thread.y+t>=l){t++;continue}a=(t+m)*u+r+m;let n=i[a],g=D[this.thread.y+r][this.thread.x+t];c+=g.r*n,d+=g.g*n,f+=g.b*n,t++}r++}this.color(c,d,f)}function en(D,s,l,i,o,m){let u=0,c=0,d=0;for(var f=0;f<m;f++){let r=o[f],a=(Math.sqrt(r)-1)/2,t=2*a+1,n=-a,g=0;for(;n<=a;){if(this.thread.x+n<0||this.thread.x+n>=s){n++;continue}let v=-a;for(;v<=a;){if(this.thread.y+v<0||this.thread.y+v>=l){v++;continue}g=(v+a)*t+n+a;let k=i[f][g],T=D[this.thread.y+n][this.thread.x+v];u+=T.r*k,c+=T.g*k,d+=T.b*k,v++}n++}}this.color(u,c,d)}function tn(D){return D[this.thread.y][this.thread.x]}var ye={correlogramsKern:Ni,correlogramsPCKern:Oi,dftKern:zi,idftKern:Pi,fftKern:Ut,ifftKern:Bt,dft_windowedKern:Bi,idft_windowedKern:ji,fft_windowedKern:Wi,ifft_windowedKern:Hi,listdft2DKern:Ki,listdft1DKern:Gi,listfft1DKern:Ui,listfft1D_windowedKern:Yi,listdft1D_windowedKern:Xi,listidft1D_windowedKern:Ji,listifft1D_windowedKern:Zi,bulkArrayMulKern:Qi,fftKern:Ut,ifftKern:Bt,multiImgConv2DKern:en,ImgConv2DKern:qi,transpose2DKern:tn},Xt=[wi,Ei,Ai,ki,Ii,Di,Ci,Fi,be,Ri,Mi,dt,mt,Li,$i,gt,Vi,Ne,xt,tt,jt,Ke,it,Ht];function ge(D,s,l={setDynamicOutput:!0,setDynamicArguments:!0,setPipeline:!0,setImmutable:!0,setGraphical:!1}){let i=D.createKernel(s);return l.setDynamicOutput&&i.setDynamicOutput(!0),l.output&&i.setOutput(l.output),l.setDynamicArguments&&i.setDynamicArguments(!0),l.setPipeline&&i.setPipeline(!0),l.setImmutable&&i.setImmutable(!0),l.setGraphical&&i.setGraphical(!0),i}function nn(D,s,l={output:[300,300],setDynamicArguments:!0,setDynamicOutput:!0,setPipeline:!1,setImmutable:!0,setGraphical:!0},i){let o=ge(D,s,l),m=o.canvas;return typeof i=="string"?document.getElementById(toAppend).appendChild(m):i?toAppend.appendChild(m):document.body.appendChild(m),o}var nt=class{constructor(s=new GPU){this.gpu=s,this.kernels=new Map,this.kernel,this.PI=3.141592653589793,this.SQRT1_2=.7071067811865476,this.addFunctions(),this.imgkernels={edgeDetection:[-1,-1,-1,-1,8,-1,-1,-1,-1],boxBlur:[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],sobelLeft:[1,0,-1,2,0,-2,1,0,-1],sobelRight:[-1,0,1,-2,0,2,-1,0,1],sobelTop:[1,2,1,0,0,0,-1,-2,-1],sobelBottom:[-1,2,1,0,0,0,1,2,1],identity:[0,0,0,0,1,0,0,0,0],gaussian3x3:[1,2,1,2,4,2,1,2,1],guassian7x7:[0,0,0,5,0,0,0,0,5,18,32,18,5,0,0,18,64,100,64,18,0,5,32,100,100,100,32,5,0,18,64,100,64,18,0,0,5,18,32,18,5,0,0,0,0,5,0,0,0],emboss:[-2,-1,0,-1,1,1,0,1,2],sharpen:[0,-1,0,-1,5,-1,0,-1,0]}}addFunction(s=function(){}){this.gpu.addFunction(s)}addKernel(s="",l=function(){},i){return this.kernels.get(s)?(console.error("Kernel already exists"),!1):(this.kernels.set(s,ge(this.gpu,l,i)),!0)}addCanvasKernel(s,l,i,o){if(this.kernels.get(s))return console.error("Kernel already exists"),!1;{let u=nn(this.gpu,l,i,o);return this.kernels.set(s,u),u}}combineKernels(s,l=[],i=function(){}){if(this.kernels.get(s))return console.error("Kernel already exists"),!1;{l.forEach((u,c)=>{if(typeof u=="string"){let d=this.kernels.get(u);if(d)l[c]=d;else return!1}else typeof u=="function"&&(this.kernels.get(u.name)||this.addKernel(u.name,u))});let m=this.gpu.combineKernels(...l,i);return this.kernels.set(s,m),m}}callKernel(s="",l=[]){let i,o=this.kernels.get(s);return o?(i=o(...l),i):(console.error("Kernel not found"),!1)}callCanvasKernel(s="",l=[],i=[]){let o,m=this.kernels.get(s);return m?(i.length===2&&m.setOutput(i),o=m(...l),o):(console.error("Kernel not found"),!1)}hasKernel(s=""){return!!this.kernels.get(s)}addFunctions(){Xt.forEach(o=>this.gpu.addFunction(o)),this.correlograms=ge(this.gpu,ye.correlogramsKern),this.correlogramsPC=ge(this.gpu,ye.correlogramsPCKern),this.dft=ge(this.gpu,ye.dftKern),this.idft=ge(this.gpu,ye.idftKern),this.dft_windowed=ge(this.gpu,ye.dft_windowedKern),this.idft_windowed=ge(this.gpu,ye.idft_windowedKern),this.fft=ge(this.gpu,ye.fftKern),this.ifft=ge(this.gpu,ye.ifftKern),this.fft_windowed=ge(this.gpu,ye.fft_windowedKern),this.ifft_windowed=ge(this.gpu,ye.ifft_windowedKern),this.listdft2D=ge(this.gpu,ye.listdft2DKern),this.listdft1D=ge(this.gpu,ye.listdft1DKern),this.listdft1D_windowed=ge(this.gpu,ye.listdft1D_windowedKern),this.listfft1D=ge(this.gpu,ye.listfft1DKern),this.listfft1D_windowed=ge(this.gpu,ye.listfft1D_windowedKern),this.listidft1D_windowed=ge(this.gpu,ye.listidft1D_windowedKern),this.listifft1D_windowed=ge(this.gpu,ye.listifft1D_windowedKern),this.bulkArrayMul=ge(this.gpu,ye.bulkArrayMulKern),[{name:"correlograms",krnl:this.correlograms},{name:"correlogramsPC",krnl:this.correlogramsPC},{name:"dft",krnl:this.dft},{name:"idft",krnl:this.idft},{name:"dft_windowed",krnl:this.idft_windowed},{name:"fft",krnl:this.fft},{name:"ifft",krnl:this.ifft},{name:"fft_windowed",krnl:this.fft_windowed},{name:"ifft_windowed",krnl:this.ifft_windowed},{name:"listdft2D",krnl:this.listdft2D},{name:"listdft1D",krnl:this.listdft1D},{name:"listdft1D_windowed",krnl:this.listdft1D_windowed},{name:"listfft1D",krnl:this.listfft1D},{name:"listfft1D_windowed",krnl:this.listfft1D_windowed},{name:"listidft1D_windowed",krnl:this.listidft1D_windowed},{name:"listifft1D_windowed",krnl:this.listifft1D_windowed},{name:"bulkArrayMul",krnl:this.bulkArrayMul}].forEach(o=>{this.kernels.set(o.name,o)});let l=(o,m,u,c,d)=>{var f=this.fft_windowed(o,m,u,c,d,0),r=this.ifft_windowed(f,m,u,c,d);return r},i=(o,m,u,c,d)=>{var f=this.listdft1D_windowed(o,m,u,c,d,new Array(Math.ceil(o/m)).fill(0)),r=this.listifft1D_windowed(f,m,u,c,d);return r};this.gpuCoherence=(o,m,u,c,d)=>{var f=this.correlograms(o),r=this.listfft1D_windowed(f,m,u,c,d,new Array(Math.ceil(o/m)).fill(0)),a=this.bulkArrayMul(r,m,5,1);return a}}gpuXCors(s,l=!1,i=!1){var o;if(l===!0){var m=[],u=[];s.forEach((g,v)=>{m.push(g.reduce((k,T)=>T+=k)/g.length),u.push(Math.sqrt(m[v].reduce((k,T)=>k+=Math.pow(T-mean1,2))))});for(var c=[],d=[],f=[],r=0;r<s.length;r++)for(var a=r;a<s.length;a++)f.push(...s[r],...s[a]),c.push(m[r],m[a]),d.push(u[r],u[a]);this.correlogramsPC.setOutput([f.length]),this.correlogramsPC.setLoopMaxIterations(s[0].length*2),o=this.correlogramsPC(f,s[0].length,c,d)}else{for(var f=[],r=0;r<s.length;r++)for(var a=r;a<s.length;a++)f.push(...s[r],...s[a]);this.correlograms.setOutput([f.length]),this.correlograms.setLoopMaxIterations(s[0].length*2),o=this.correlograms(f,s[0].length)}if(i===!0)return o;var t=o.toArray();o.delete();for(var n=[],r=0;r<s.length;r++)n.push(t.splice(0,s[0].length));return n}gpuDFT(s,l,i=1,o=!1){var m=s.length,u=m/l;this.dft.setOutput([s.length]),this.dft.setLoopMaxIterations(m);var c=this.dft(s,m,i),d=null;if(o===!1){var f=this.makeFrequencyDistribution(m,u),r=c.toArray();return c.delete(),[f,this.orderMagnitudes(r)]}else{var a=c;return c.delete(),a}}MultiChannelDFT(s,l,i=1,o=!1){var m=[];s.forEach(n=>{m.push(...n)});var u=s[0].length,c=u/l;this.listdft1D.setOutput([m.length]),this.listdft1D.setLoopMaxIterations(u);var d=this.listdft1D(m,u,i);if(o===!1){var f=[],r=this.makeFrequencyDistribution(u,c);m=d.toArray();for(var a=0;a<m.length;a+=u)f.push(this.orderMagnitudes([...m.slice(a,a+u)]));return d.delete(),[r,f]}else{var t=d;return d.delete(),t}}MultiChannelDFT_Bandpass(s=[],l,i,o,m=1,u=!1){var c=[];s.forEach(n=>{c.push(...n)});var d=o*2,f=s[0].length,r=f/l;this.listdft1D_windowed.setOutput([c.length]),this.listdft1D_windowed.setLoopMaxIterations(f);var a=this.listdft1D_windowed(c,r,i,d,m);if(u===!0)return a;c=a.toArray(),a.delete();var t=this.bandPassWindow(i,o,r);return[t,this.orderBPMagnitudes(c,l,r,f)]}gpuFFT(s,l,i=1,c,m=!1){var u=s.length,c=u/l;this.fft.setOutput([s.length]),this.fft.setLoopMaxIterations(u);var d=this.fft(s,u,i,c),f=null;if(m===!1){var r=this.makeFrequencyDistribution(u,c),a=d.toArray();return d.delete(),[r,this.orderMagnitudes(a)]}else{var t=d;return d.delete(),t}}MultiChannelFFT(s,l,i=1,o=!1){var m=[];s.forEach(n=>{m.push(...n)});var u=s[0].length,c=u/l;this.listfft1D.setOutput([m.length]),this.listfft1D.setLoopMaxIterations(u);var d=this.listfft1D(m,u,i,c);if(o===!1){var f=[],r=this.makeFrequencyDistribution(u,c);m=d.toArray();for(var a=0;a<m.length;a+=u)f.push(this.orderMagnitudes([...m.slice(a,a+u)]));return d.delete(),[r,f]}else{var t=d;return d.delete(),t}}MultiChannelFFT_Bandpass(s=[],l,i,o,m=1,u=!1){var c=[];s.forEach(n=>{c.push(...n)});var d=o*2,f=s[0].length,r=f/l;this.listfft1D_windowed.setOutput([c.length]),this.listfft1D_windowed.setLoopMaxIterations(f);var a=this.listfft1D_windowed(c,r,i,d,m);if(u===!0)return a;c=a.toArray(),a.delete();var t=this.bandPassWindow(i,o,r);return[t,this.orderBPMagnitudes(c,l,r,f)]}orderMagnitudes(s){return[...s.slice(Math.ceil(s.length*.5),s.length),...s.slice(0,Math.ceil(s.length*.5))]}makeFrequencyDistribution(s,l){for(var i=s,o=l/i,m=[],u=-i/2;u<i/2;u++){var c=u*o;m.push(c)}return m}orderBPMagnitudes(s,l,i,o){for(var m=[],u=0;u<s.length;u+=o)m.push([...s.slice(u,Math.ceil(o*.5+u))]);var c=[],d=1/i;return l>1?(m.forEach((f,r)=>{c.push([]);for(var a=1/Math.max(...f),t=0;t<f.length;t++)if(t==0)c[r]=f.slice(t,Math.floor(i)),t=Math.floor(i);else{var n=t-Math.floor(Math.floor(t*d)*i)-1;c[r][n]=c[r][n]*f[t-1]*a}c[r]=[...c[r].slice(0,Math.ceil(c[r].length*.5))]}),c):m}bandPassWindow(s,l,i,o=!0){var m=l*2;let u=(m-s)/i;var c=[];if(o===!0)for(var d=0;d<Math.ceil(.5*i);d+=u)c.push(s+(m-s)*d/i);else for(var d=-Math.ceil(.5*i);d<Math.ceil(.5*i);d+=u)c.push(s+(m-s)*d/i);return c}};var Ge=class{constructor(s){try{this.gpu=new nt}catch{return}this.callbackManager=s,s.gpu=this.gpu,this.callbacks=[{case:"addgpufunc",callback:(l,i,o)=>l.gpu.addFunction(Ee(i[0]))},{case:"addkernel",callback:(l,i,o)=>l.gpu.addKernel(i[0],Ee(i[1]))},{case:"callkernel",callback:(l,i,o)=>l.gpu.callKernel(i[0],i.slice(1))},{case:"dft",callback:(l,i,o)=>(i[2]==null&&(i[2]=1),l.gpu.gpuDFT(...i))},{case:"multidft",callback:(l,i,o)=>(i[2]==null&&(i[2]=1),l.gpu.MultiChannelDFT(...i))},{case:"multidftbandpass",callback:(l,i,o)=>(i[4]==null&&(i[4]=1),l.gpu.MultiChannelDFT_Bandpass(...i))},{case:"fft",callback:(l,i,o)=>(i[2]==null&&(i[2]=1),l.gpu.gpuFFT(...i))},{case:"multifft",callback:(l,i,o)=>(i[2]==null&&(i[2]=1),l.gpu.MultiChannelFFT(...i))},{case:"multifftbandpass",callback:(l,i,o)=>(i[4]==null&&(i[4]=1),l.gpu.MultiChannelFFT_Bandpass(...i))},{case:"gpucoh",callback:(l,i,o)=>l.gpu.gpuCoherence(...i)},{case:"coherence",callback:(l,i,o)=>{let m=q.correlograms(i[0]),u=[...i[0],...m];var c,d=1;c=l.gpu.MultiChannelDFT_Bandpass(u,i[1],i[2],i[3],d);let f=c[1].splice(i[0].length,u.length-i[0].length),r=[],a=i[0].length;var t=0,n=0;f.forEach((v,k)=>{if(n+t===a){var T=f.splice(k,1);t++,f.splice(t,0,...T),n=0}n++});var g=[];return t=0,n=1,f.forEach((v,k)=>{var T=new Array(v.length).fill(0);k<a?(v.forEach((A,E)=>{T[E]=A}),g.push(T)):(v.forEach((A,E)=>{T[E]=A*A/(g[t][E]*g[t+n][E]),T[E]>1&&(T[E]=1)}),n++,n+t===a&&(t++,n=1),r.push(T))}),[c[0],c[1],r]}}],this.addCallbacks()}addCallbacks(s=this.callbacks){s.forEach(l=>{this.callbackManager.addCallback(l.case,l.callback),l.aliases&&l.aliases.forEach(i=>{this.callbackManager.addCallback(i,l.callback)})})}};function Yt(){}var yt=class{addEventListener(s,l){this._listeners===void 0&&(this._listeners={});let i=this._listeners;i[s]===void 0&&(i[s]=[]),i[s].indexOf(l)===-1&&i[s].push(l)}hasEventListener(s,l){if(this._listeners===void 0)return!1;let i=this._listeners;return i[s]!==void 0&&i[s].indexOf(l)!==-1}removeEventListener(s,l){if(this._listeners===void 0)return;let o=this._listeners[s];if(o!==void 0){let m=o.indexOf(l);m!==-1&&o.splice(m,1)}}dispatchEvent(s){if(this._listeners===void 0)return;let i=this._listeners[s.type];if(i!==void 0){s.target=this;let o=i.slice(0);for(let m=0,u=o.length;m<u;m++)o[m].call(this,s);s.target=null}}},bt=class extends yt{constructor(){super(),this.style={}}get clientWidth(){return this.width}get clientHeight(){return this.height}setPointerCapture(){}releasePointerCapture(){}getBoundingClientRect(){return{left:this.left,top:this.top,width:this.width,height:this.height,right:this.left+this.width,bottom:this.top+this.height}}handleEvent(s){if(s.type==="size"){this.left=s.left,this.top=s.top,this.width=s.width,this.height=s.height;return}s.preventDefault=Yt,s.stopPropagation=Yt,this.dispatchEvent(s)}focus(){}},st=class{constructor(){this.id="proxy"+Math.floor(Math.random()*1e4),this.targets={},this.handleEvent=this.handleEvent.bind(this)}makeProxy(s){let{id:l}=s,i=new bt;this.targets[l]=i}getProxy(s){return this.targets[s]}handleEvent(s){this.targets[s.id].handleEvent(s.data)}};var Ue=class{constructor(s){this.callbackManager=s,s.canvas=new OffscreenCanvas(512,512),s.ANIMATION=void 0,s.ANIMATIONFUNC=void 0,s.ANIMATING=!1,s.ANIMFRAMETIME=performance.now(),s.threeUtil=void 0,s.PROXYMANAGER=new st;try{}catch{self.document={}}this.callbacks=[{case:"resizecanvas",callback:(l,i,o)=>(l.canvas.width=i[0],l.canvas.height=i[1],!0)},{case:"proxyHandler",callback:(l,i,o)=>{if(i.type==="makeProxy"){l.PROXYMANAGER.makeProxy(i);let m=l.PROXYMANAGER.getProxy(i.id);m.ownerDocument=m,l[i.id]=m}else if(i.type==="event")l.PROXYMANAGER.handleEvent(i);else return!1;return!0}},{case:"initThree",callback:async(l,i,o)=>{if(l.ANIMATING&&(l.ANIMATING=!1,cancelAnimationFrame(l.ANIMATION)),!l.threeUtil){let m=await et("./lib/workerRenderer/workerThreeUtils.js");l.threeUtil=new m.threeUtil(l.canvas,l,l.PROXYMANAGER.getProxy(i[0])),l.THREE=l.threeUtil.THREE}return typeof i[1]=="object"&&await l.runCallback("setValues",i[1]),i[2]&&(l.threeUtil.setup=Ee(i[2])),i[3]&&(l.threeUtil.draw=Ee(i[3])),i[4]&&(l.threeUtil.clear=Ee(i[4])),l.threeUtil.clear(l,i,o),l.threeUtil.setup(l,i,o),!0}},{case:"startThree",callback:async(l,i,o)=>{if(l.ANIMATING&&(l.ANIMATING=!1,cancelAnimationFrame(l.ANIMATION)),!l.threeUtil){let m=await et("./lib/workerRenderer/workerThreeUtils.js");l.threeUtil=new m.threeUtil(l.canvas,l,l.PROXYMANAGER.getProxy(i[0]))}return l.threeUtil&&(l.threeUtil.clear(l,i,o),l.threeUtil.setup(l,i,o)),!0}},{case:"clearThree",callback:(l,i,o)=>(l.threeUtil&&l.threeUtil.clear(l,i,o),!0)},{case:"setAnimation",callback:(l,i,o)=>(l.animationFunc=Ee(i[0]),!0)},{case:"startAnimation",callback:(l,i,o)=>{let m=()=>{if(l.ANIMATING){l.animationFunc(l,i,o),l.ANIMFRAMETIME=performance.now()-l.ANIMFRAMETIME;let u=l.checkEvents("render",o),c={foo:"render",output:l.ANIMFRAMETIME,origin:o};l.ANIMFRAMETIME=performance.now(),u?l.EVENTS.emit("render",c):postMessage(c),requestAnimationFrame(m)}};return this.ANIMATING?(l.ANIMATING=!1,cancelAnimationFrame(l.ANIMATION),setTimeout(()=>{l.ANIMATING=!0,l.ANIMATION=requestAnimationFrame(m)},300)):(l.ANIMATING=!0,console.log("begin animation"),l.ANIMATION=requestAnimationFrame(m)),!0}},{case:"stopAnimation",callback:(l,i,o)=>l.ANIMATING?(l.ANIMATING=!1,cancelAnimationFrame(l.ANIMATION),!0):!1},{case:"render",callback:(l,i,o)=>{l.animationFunc(l,i,o);let m=performance.now()-l.ANIMFRAMETIME;return tselfhis.ANIMFRAMETIME=performance.now(),m}}],this.addCallbacks()}addCallbacks(s=this.callbacks){s.forEach(l=>{this.callbackManager.addCallback(l.case,l.callback),l.aliases&&l.aliases.forEach(i=>{this.callbackManager.addCallback(i,l.callback)})})}};var rt=class{canvas;ctx;context;constructor(options={cpu:!0,gpu:!0,renderer:!0}){if(this.EVENTS=new qe,this.EVENTSETTINGS=[],this.ID=Math.floor(Math.random()*1e3),this.defaultFunctions=[{case:"ping",callback:(D,s,l)=>"pong"},{case:"list",callback:(D,s,l)=>{let i=[];return this.callbacks.forEach((o,m)=>{i.push(m)}),i}},{case:"addfunc",callback:(D,s,l)=>{if(!s[0]||!s[1])return!1;let i=Ee(s[1]);if(s[2]===!0){let o=async(m,u,c)=>{try{return await i(m,u,c)}catch(d){console.error(d)}};D.callbacks.set(s[0],o)}else D.callbacks.set(s[0],i);return!0}},{case:"removefunc",callback:(D,s,l)=>{if(s[0])return this.removeCallback(s[0])}},{case:"setValues",callback:(D,s,l)=>typeof s=="object"?(Object.keys(s).forEach(i=>{D[i]=s[i],D.threeUtil&&(D.threeUtil[i]=s[i])}),!0):!1},{case:"appendValues",callback:(D,s,l)=>typeof s=="object"?(Object.keys(s).forEach(i=>{D[i]&&Array.isArray(s[i])?D[i].push(s[i]):D[i]=s[i]}),!0):!1},{case:"setValuesFromArrayBuffers",callback:(D,s,l)=>typeof s=="object"?(Object.keys(s).forEach(i=>{s[i].__proto__.__proto__.constructor.name==="TypedArray"?D[i]=Array.from(s[i]):D[i]=s[i]}),!0):!1},{case:"appendValuesFromArrayBuffers",callback:(D,s,l)=>typeof s=="object"?(Object.keys(s).forEach(i=>{!D[i]&&s[i].__proto__.__proto__.constructor.name==="TypedArray"?D[i]=Array.from(s[i]):D[i]?s[i].__proto__.__proto__.constructor.name==="TypedArray"?D[i].push(Array.from(s[i])):Array.isArray(s[i])?D[i].push(s[i]):D[i]=s[i]:D[i]=s[i]}),!0):!1},{case:"transferClassObject",callback:(self,args,origin)=>typeof args=="object"?(Object.keys(args).forEach(key=>{if(typeof args[key]=="string"){let obj=args[key];args[key].indexOf("class")===0&&(obj=eval("("+args[key]+")")),self[key]=obj,self.threeUtil&&(self.threeUtil[key]=obj)}}),!0):!1},{case:"addport",callback:(D,s,l)=>{let i=s[1];i.onmessage=onmessage,this[s[0]]=i}},{case:"addevent",callback:(D,s,l)=>{if(D.EVENTSETTINGS.push({eventName:s[0],case:s[1],port:s[2],origin:l}),s[2]){let i=s[2];i.onmessage=onmessage,this[s[0]+"port"]=i}return!0}},{case:"subevent",callback:(D,s,l)=>{if(typeof s[0]!="string")return!1;let i=Ee(s[1]),o=this.checkEvents(s[0]);return D.EVENTS.subEvent(s[0],m=>{i(D,m,l,o?.port,o?.eventName)})}},{case:"unsubevent",callback:(D,s,l)=>D.EVENTS.unsubEvent(s[0],s[1])}],this.callbacks=new Map,this.defaultFunctions.forEach(D=>{D.case&&this.callbacks.set(D.case,D.callback),D.aliases&&D.aliases.forEach(s=>this.callbacks.set(s,D.callback))}),options.cpu)try{Pe&&(this.workerCPU=new Pe(this))}catch(D){console.error(D)}if(options.gpu)try{Ge&&(this.workerGPU=new Ge(this))}catch(D){console.error(D)}if(options.renderer)try{Ue&&(this.workerRenderer=new Ue(this))}catch(D){console.error(D)}}addCallback=(D,s=(l,i,o)=>{})=>!D||!s?!1:(this.callbacks.set(D,s),!0);removeCallback=D=>this.callbacks.get(D)?(this.callbacks.delete(D),!0):!1;runCallback=async(D,s=[],l)=>{let i,o=this.callbacks.get(D);return o&&(i=await o(this,s,l)),i};checkEvents=(D,s)=>this.EVENTSETTINGS.find(i=>i.origin&&s&&i.case&&D?i.origin===s&&i.case===D:i.case&&D?i.case===D:i.origin&&s?i.origin===s:!1);checkCallbacks=async D=>{let s;if(!D.data)return s;let l;return D.data.case?l=this.callbacks.get(D.data.case):D.data.foo?l=this.callbacks.get(D.data.foo):D.data.command?l=this.callbacks.get(D.data.command):D.data.cmd&&(l=this.callbacks.get(D.data.cmd)),l&&(D.data.input?s=await l(this,D.data.input,D.data.origin):D.data.args?s=await l(this,D.data.args,D.data.origin):s=await l(this,void 0,D.data.origin)),s}};self.onmessage=async D=>{let s;D.data.output?s=D.data.output:s=D.data;let l,i;if(D.data?.eventName)manager.EVENTS.callback(D.data);else if(typeof s=="object"){s.canvas!==void 0&&(manager.canvas=s.canvas),s.context!==void 0&&(manager.ctx=manager.canvas.getContext(s.context),manager.context=manager.ctx);let o=manager.checkEvents(s.foo,s.origin);i=await manager.checkCallbacks(D),counter++;let m;if(i){if(i.__proto__?.__proto__?.constructor.name==="TypedArray")m=[i.buffer];else if(i.constructor?.name==="Object")for(let u in i)i[u].__proto__?.__proto__?.constructor.name==="TypedArray"&&(m?m.push(i[u].buffer):m=i[u].buffer)}l={output:i,foo:s.foo,origin:s.origin,callbackId:s.callbackId,counter},o?manager.EVENTS.emit(o.eventName,l,void 0,m,o.port):typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&self.postMessage(l,m)}return l};typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&(self.manager=new rt,self.id=`worker_${Math.floor(Math.random()*1e10)}`,self.counter=0,self.manager.EVENTS.emit("newWorker",id));var zn=self;})();\n/**\n * gpu.js\n * http://gpu.rocks/\n *\n * GPU Accelerated JavaScript\n *\n * @version 2.11.0\n * @date Tue Jan 05 2021 15:55:59 GMT-0500 (Eastern Standard Time)\n *\n * @license MIT\n * The MIT License\n *\n * Copyright (c) 2021 gpu.js Team\n */\n')], { type: "text/javascript" }));
  var A = D;
  var v = class {
    constructor(e = false, t = false) {
      this.debug = e, this.listeners = [], this.synchronous = t, this.syncInterval = "FRAMERATE", this.syncAnim = void 0, t === true && this.startSync();
    }
    addListener(e = null, t, r2 = void 0, n = void 0, a = void 0, o = this.debug, i2 = true) {
      if (t === void 0) {
        console.error("You must assign an object");
        return;
      }
      var s = e;
      s == null && (s = Math.floor(Math.random() * 1e5)), this.synchronous === true && (i2 = false);
      var l = { key: s, listener: new S(t, r2, n, a, o, i2) };
      this.listeners.push(l);
    }
    getListener(e) {
      return this.listeners.find((r2, n) => {
        if (r2.key === e)
          return true;
      });
    }
    hasKey(e) {
      var t = false;
      return this.listeners.forEach((r2, n) => {
        if (r2.key === e)
          return t = true, true;
      }), t;
    }
    getKeyIndices(e) {
      var t = [];
      return this.listeners.find((r2, n) => {
        r2.key === e && t.push(n);
      }), t;
    }
    onchange(e = null, t = null) {
      if (e == null)
        this.listeners.forEach((n, a) => {
          n.listener.onchange = t;
        });
      else
        var r2 = this.listeners.find((n, a) => {
          n.name === e && (n.listener.onchange = t);
        });
    }
    addFunc = (e = null, t = null, r2 = true) => {
      var n = null;
      if (t !== null)
        if (e == null)
          this.listeners.forEach((o, i2) => {
            n = o.listener.addFunc(t), o.listener.running == false && r2 == true && o.listener.start();
          });
        else
          var a = this.listeners.find((o, i2) => {
            o.key === e && (n = o.listener.addFunc(t), o.listener.running == false && r2 == true && o.listener.start());
          });
      return n;
    };
    getFuncs = (e = void 0) => {
      if (e) {
        var t = this.listeners.find((r2, n) => {
          if (r2.key === e)
            return true;
        });
        return t.onchangeFuncs;
      } else
        return;
    };
    removeFuncs = (e = null, t = null, r2 = false) => {
      if (e == null)
        this.listeners.forEach((a, o) => {
          a.listener.removeFuncs(t);
        });
      else
        var n = this.listeners.find((a, o) => {
          a.key === e && (a.listener.removeFuncs(t), (a.listener.onchangeFuncs.length === 0 || r2 === true) && a.listener.stop());
        });
    };
    stop(e = null) {
      if (this.synchronous && this.stopSync(), e == null)
        this.listeners.forEach((r2, n) => {
          r2.listener.stop();
        });
      else
        var t = this.listeners.find((r2, n) => {
          r2.name === e && r2.listener.stop();
        });
    }
    start(e = null) {
      if (this.synchronous && this.stopSync(), e == null)
        this.listeners.forEach((r2, n) => {
          r2.listener.start();
        });
      else
        var t = this.listeners.find((r2, n) => {
          r2.name === e && r2.listener.start();
        });
    }
    startSync() {
      if (this.synchronous === false) {
        this.synchronous = true, this.stop();
        let e = () => {
          this.synchronous === true && (this.listeners.forEach((t) => {
            t.listener.check();
          }), this.syncInterval === "FRAMERATE" ? this.syncAnim = requestAnimationFrame(e) : typeof this.syncInterval == "number" && setTimeout(e, this.syncInterval));
        };
        e();
      }
    }
    stopSync() {
      this.synchronous = false, this.syncAnim && cancelAnimationFrame(this.syncAnim);
    }
    remove(e = null) {
      if (e == null)
        this.listeners.forEach((n) => {
          n.listener.stop();
        }), this.listeners.splice(0, this.listeners.length);
      else {
        var t = [], r2 = this.listeners.forEach((n, a) => {
          n.key === e && t.push(a);
        });
        t.reverse().forEach((n) => {
          this.listeners[n].listener.stop(), this.listeners.splice(n, 1);
        });
      }
    }
  };
  var S = class {
    constructor(e, t = "__ANY__", r2 = this.onchange, n = "FRAMERATE", a = false, o = true) {
      this.debug = a, this.onchange = r2, this.onchangeFuncs = [], this.object = e, this.propName = t, this.propOld = void 0, this.setListenerRef(t), this.running = o, this.funcs = 0, this.interval, n < 10 ? (this.interval = 10, console.log("Min recommended interval set: 10ms")) : this.interval = n, o === true && (typeof window > "u" ? setTimeout(() => {
        this.check();
      }, 60) : this.checker = requestAnimationFrame(this.check));
    }
    onchange = (e) => {
      console.log(this.propName, " changed from: ", this.propOld, " to: ", this.object[this.propName]);
    };
    addFunc = (e = null) => {
      let t = 0;
      return e !== null && (this.onchangeFuncs.push({ idx: this.funcs, onchange: e }), t = this.funcs, this.funcs++), t;
    };
    removeFuncs(e = null) {
      let t = 0;
      e === null ? this.onchangeFuncs = [] : this.onchangeFuncs.find((r2, n) => {
        if (r2.idx === e)
          return t = n, true;
      }) !== void 0 && this.onchangeFuncs.splice(t, 1);
    }
    onchangeMulti = (e) => {
      [...this.onchangeFuncs].forEach((r2, n) => {
        this.debug === true && console.log(r2.onchange), r2.onchange(e);
      });
    };
    setListenerRef = (e) => {
      e === "__ANY__" || e === null || e === void 0 ? this.propOld = JSON.stringifyFast(this.object) : Array.isArray(this.object[e]) ? this.propOld = JSON.stringifyFast(this.object[e].slice(this.object[e].length - 20)) : typeof this.object[e] == "object" ? this.propOld = JSON.stringifyFast(this.object[e]) : typeof this.object[e] == "function" ? this.propOld = this.object[e].toString() : this.propOld = this.object[e], this.debug === true && console.log("propname", e, ", new assignment: ", this.propOld);
    };
    check = () => {
      let e = false;
      if (this.propName === "__ANY__" || this.propName === null || this.propName === void 0)
        this.propOld !== JSON.stringifyFast(this.object) && (this.debug === true && console.log("onchange: ", this.onchange), this.onchange(this.object), this.onchangeFuncs.length > 0 && this.onchangeMulti(this.object), this.setListenerRef(this.propName), e = true);
      else if (Array.isArray(this.object[this.propName]))
        this.propOld !== JSON.stringifyFast(this.object[this.propName].slice(this.object[this.propName].length - 20)) && (this.debug === true && console.log("onchange: ", this.onchange), this.onchange(this.object[this.propName]), this.onchangeFuncs.length > 0 && this.onchangeMulti(this.object[this.propName]), this.setListenerRef(this.propName), e = true);
      else if (typeof this.object[this.propName] == "object") {
        let t = JSON.stringifyFast(this.object[this.propName]);
        this.propOld !== t && (this.debug === true && console.log("onchange: ", this.onchange), this.onchange(this.object[this.propName]), this.onchangeFuncs.length > 0 && this.onchangeMulti(this.object[this.propName]), this.setListenerRef(this.propName), e = true);
      } else
        typeof this.object[this.propName] == "function" ? this.propOld !== this.object[this.propName].toString() && (this.debug === true && console.log("onchange: ", this.onchange), this.onchange(this.object[this.propName].toString()), this.onchangeFuncs.length > 0 && this.onchangeMulti(this.object[this.propName].toString()), this.setListenerRef(this.propName), e = true) : this.object[this.propName] !== this.propOld && (this.debug === true && console.log("onchange: ", this.onchange), this.onchange(this.object[this.propName]), this.onchangeFuncs.length > 0 && this.onchangeMulti(this.object[this.propName]), this.setListenerRef(this.propName), e = true);
      return this.running === true && (this.debug === true && console.log("checking", this.object, this.propName), this.interval === "FRAMERATE" ? typeof window > "u" ? setTimeout(() => {
        this.check();
      }, 16) : this.checker = requestAnimationFrame(this.check) : setTimeout(() => {
        this.check();
      }, this.interval)), e;
    };
    start() {
      this.running = true, typeof window > "u" ? setTimeout(() => {
        this.check();
      }, 16) : this.checker = requestAnimationFrame(this.check);
    }
    stop() {
      this.running = false, cancelAnimationFrame(this.checker);
    }
  };
  JSON.stringifyFast === void 0 && (JSON.stringifyFast = /* @__PURE__ */ function() {
    let c = /* @__PURE__ */ new Map(), e = [], t = ["this"];
    function r2() {
      c.clear(), e.length = 0, t.length = 1;
    }
    function n(o, i2) {
      var s = e.length - 1;
      if (e[s]) {
        var l = e[s];
        if (typeof l == "object")
          if (l[o] === i2 || s === 0)
            t.push(o), e.push(i2.pushed);
          else
            for (; s-- >= 0; ) {
              if (l = e[s], typeof l == "object" && l[o] === i2) {
                s += 2, e.length = s, t.length = s, --s, e[s] = i2, t[s] = o;
                break;
              }
              s--;
            }
      }
    }
    function a(o, i2) {
      let s;
      if (i2 != null)
        if (typeof i2 == "object") {
          let l = i2.constructor.name;
          o && l === "Object" && n(o, i2);
          let f = c.get(i2);
          if (f)
            return "[Circular Reference]" + f;
          if (c.set(i2, t.join(".")), l === "Array")
            i2.length > 20 ? s = i2.slice(i2.length - 20) : s = i2;
          else if (l.includes("Set"))
            s = Array.from(i2);
          else if (l !== "Object" && l !== "Number" && l !== "String" && l !== "Boolean")
            s = "instanceof_" + l;
          else if (l === "Object") {
            let p = {};
            for (let u in i2)
              if (i2[u] == null)
                p[u] = i2[u];
              else if (Array.isArray(i2[u]))
                i2[u].length > 20 ? p[u] = i2[u].slice(i2[u].length - 20) : p[u] = i2[u];
              else if (i2[u].constructor.name === "Object") {
                p[u] = {};
                for (let h in i2[u])
                  if (Array.isArray(i2[u][h]))
                    i2[u][h].length > 20 ? p[u][h] = i2[u][h].slice(i2[u][h].length - 20) : p[u][h] = i2[u][h];
                  else if (i2[u][h] != null) {
                    let d = i2[u][h].constructor.name;
                    d.includes("Set") ? p[u][h] = Array.from(i2[u][h]) : d !== "Number" && d !== "String" && d !== "Boolean" ? p[u][h] = "instanceof_" + d : p[u][h] = i2[u][h];
                  } else
                    p[u][h] = i2[u][h];
              } else {
                let h = i2[u].constructor.name;
                h.includes("Set") ? p[u] = Array.from(i2[u]) : h !== "Number" && h !== "String" && h !== "Boolean" ? p[u] = "instanceof_" + h : p[u] = i2[u];
              }
            s = p;
          } else
            s = i2;
        } else
          s = i2;
      return s;
    }
    return function(i2, s) {
      e.push(i2);
      let l = JSON.stringify(i2, a, s);
      return r2(), l;
    };
  }());
  JSON.stringifyWithCircularRefs === void 0 && (JSON.stringifyWithCircularRefs = /* @__PURE__ */ function() {
    let c = /* @__PURE__ */ new Map(), e = [], t = ["this"];
    function r2() {
      c.clear(), e.length = 0, t.length = 1;
    }
    function n(o, i2) {
      var s = e.length - 1, l = e[s];
      if (l[o] === i2 || s === 0)
        t.push(o), e.push(i2);
      else
        for (; s-- >= 0; )
          if (l = e[s], l[o] === i2) {
            s += 2, e.length = s, t.length = s, --s, e[s] = i2, t[s] = o;
            break;
          }
    }
    function a(o, i2) {
      if (i2 != null && typeof i2 == "object") {
        o && n(o, i2);
        let s = c.get(i2);
        if (s)
          return "[Circular Reference]" + s;
        c.set(i2, t.join("."));
      }
      return i2;
    }
    return function(i2, s) {
      try {
        return e.push(i2), JSON.stringify(i2, a, s);
      } finally {
        r2();
      }
    };
  }());
  var w = v;
  var x2 = class {
    constructor(e = {}, t = "FRAMERATE", r2 = true) {
      this.data = e, this.interval = t, this.pushToState = {}, this.pushRecord = { pushed: [] }, this.pushCallbacks = {}, this.triggers = {}, this.prev = {}, this.listener = new w(), this.defaultStartListenerEventLoop = r2;
    }
    subscribe(e, t, r2 = this.defaultStartListenerEventLoop) {
      if (e && e !== "state")
        if (this.data[e] === void 0)
          this.addToState(e, null, t, r2);
        else
          return this.addSecondaryKeyResponse(e, t, void 0, r2);
      else
        return this.addSecondaryKeyResponse(e, t, void 0, r2);
    }
    subscribeOnce(e = void 0, t = (r2) => {
    }) {
      let r2, n = (a) => {
        t(a), this.unsubscribe(e, r2);
      };
      r2 = this.subscribe(e, n);
    }
    unsubscribe(e, t = null) {
      t !== null ? this.removeSecondaryKeyResponse(e, t, true) : console.error("Specify a subcription function index");
    }
    unsubscribeAll(e) {
      this.unsubscribeAllSequential(e), this.unsubscribeAllTriggers(e), this.clearAllKeyResponses(e), this.data[e] && delete this.data[e], this.listener.hasKey("pushToState") && this.setSequentialState({ stateRemoved: e });
    }
    setInterval(e = "FRAMERATE") {
      this.interval = e, this.listener.listeners.forEach((t, r2) => {
        t.interval = this.interval;
      });
    }
    updateState(e, t) {
      this.data[e] == null ? this.addToState(e, t) : this.data[e] = t;
    }
    setupSynchronousUpdates = () => {
      if (!this.listener.hasKey("pushToState")) {
        let e = () => {
          if (Object.keys(this.pushToState).length > 0) {
            Object.assign(this.data, this.pushToState);
            for (let t of Object.getOwnPropertyNames(this.pushToState))
              delete this.pushToState[t];
          }
        };
        this.listener.addListener("pushToState", this.pushToState, "__ANY__", e, this.interval), this.addToState("pushRecord", this.pushRecord, (t) => {
          let r2 = t.pushed.length;
          for (let n = 0; n < r2; n++) {
            let a = t.pushed[n];
            this.pushCallbacks.state && this.pushCallbacks.state.forEach((o) => {
              o.onchange(a);
            });
            for (let o in a)
              this.pushCallbacks[o] && this.pushCallbacks[o].forEach((i2) => {
                typeof i2 == "object" && i2.onchange(a[o]);
              });
          }
          this.pushRecord.pushed.splice(0, r2);
        });
      }
    };
    addToState(e, t, r2 = null, n = this.defaultStartListenerEventLoop, a = false) {
      if (!this.listener.hasKey("pushToState") && this.defaultStartListenerEventLoop && this.setupSynchronousUpdates(), this.data[e] = t, this.setSequentialState({ stateAdded: e }), r2 !== null)
        return this.addSecondaryKeyResponse(e, r2, a, n);
    }
    get(e) {
      return this.data[e];
    }
    getState() {
      return JSON.parse(JSON.stringifyFast(this.data));
    }
    setState(e = {}, t = false) {
      if (!this.listener.hasKey("pushToState") && this.defaultStartListenerEventLoop && (this.setupSynchronousUpdates(), this.pushRecord.pushed.push(JSON.parse(JSON.stringifyWithCircularRefs(e)))), e.stateUpdateTimeStamp = Date.now(), t) {
        for (let r2 in e)
          if (r2 in this.pushToState) {
            if (Array.isArray(this.pushToState[r2]) && Array.isArray(e[r2]))
              e[r2] = this.pushToState[r2].push(...e[r2]);
            else if (typeof this.pushToState[r2] == "object" && typeof e[r2] == "object") {
              for (let n in e[r2])
                if (this.pushToState[r2][n]) {
                  if (Array.isArray(this.pushToState[r2][n]) && Array.isArray(e[r2][n]))
                    e[r2][n] = this.pushToState[r2][n].push(...e[r2][n]);
                  else if (typeof this.pushToState[r2][n] == "object" && typeof e[r2][n] == "object") {
                    for (let a in e[r2][n])
                      if (this.pushToState[r2][n][a])
                        Array.isArray(this.pushToState[r2][n][a]) && Array.isArray(e[r2][n][a]) && (e[r2][n][a] = this.pushToState[r2][n][a].push(...e[r2][n][a]));
                      else if (typeof this.pushToState[r2][n][a] == "object" && typeof e[r2][n][a] == "object")
                        for (let o in e[r2][n][a])
                          this.pushToState[r2][n][a][o] && Array.isArray(this.pushToState[r2][n][a][o]) && Array.isArray(e[r2][n][a][o]) && (e[r2][n][a][o] = this.pushToState[r2][n][a][o].push(...e[r2][n][a][o]));
                  }
                }
            }
          }
      }
      if (Object.assign(this.pushToState, e), Object.keys(this.triggers).length > 0) {
        this.triggers.state && this.triggers.state.forEach((r2) => {
          r2.onchange(this.data);
        });
        for (let r2 of Object.getOwnPropertyNames(this.triggers))
          r2 in this.pushToState && (this.data[r2] = this.pushToState[r2], delete this.pushToState[r2], this.triggers[r2].forEach((n) => {
            n.onchange(this.data[r2]);
          }));
      }
      return this.pushToState;
    }
    subscribeTrigger(e = void 0, t = (r2) => {
    }) {
      if (e) {
        this.triggers[e] || (this.triggers[e] = []);
        let r2 = this.triggers[e].length;
        return this.triggers[e].push({ idx: r2, onchange: t }), this.triggers[e].length - 1;
      } else
        return;
    }
    subscribeTriggerOnce(e = void 0, t = (r2) => {
    }) {
      let r2, n = (a) => {
        t(a), this.unsubscribeTrigger(e, r2);
      };
      r2 = this.subscribeTrigger(e, n);
    }
    unsubscribeTrigger(e = void 0, t = 0) {
      let r2, n = this.triggers[e];
      n && n.find((o) => {
        if (o.idx === t)
          return true;
      }) && n.splice(r2, 1);
    }
    unsubscribeAllTriggers(e) {
      e && this.triggers[e] && delete this.triggers[e];
    }
    setSequentialState(e = {}) {
      this.listener.hasKey("pushToState") || this.setupSynchronousUpdates(), e.stateUpdateTimeStamp = Date.now(), this.pushRecord.pushed.push(JSON.parse(JSON.stringify(e)));
    }
    subscribeSequential(e = void 0, t = void 0) {
      if (e)
        if (this.data[e] === void 0 && e !== "state" && this.addToState(e, null, void 0), this.pushCallbacks[e] || (this.pushCallbacks[e] = []), t) {
          let r2 = this.pushCallbacks[e].length;
          return this.pushCallbacks[e].push({ idx: r2, onchange: t }), this.pushCallbacks[e].length - 1;
        } else
          return;
      else
        return;
    }
    subscribeSequentialOnce(e = void 0, t = (r2) => {
    }) {
      let r2, n = (a) => {
        t(a), this.unsubscribeSequential(e, r2);
      };
      r2 = this.subscribeSequential(e, n);
    }
    unsubscribeSequential(e = void 0, t = 0) {
      e && this.pushCallbacks[e] && this.pushCallbacks[e].find((r2, n) => {
        if (r2.idx === t)
          return this.pushCallbacks[e].splice(n, 1), true;
      });
    }
    unsubscribeAllSequential(e) {
      e && this.pushCallbacks[e] && this.pushCallbacks[e] && delete this.pushCallbacks[e];
    }
    setPrimaryKeyResponse(e = null, t = null, r2 = false, n = this.defaultStartListenerEventLoop) {
      if (t !== null)
        if (this.listener.hasKey(e))
          this.listener.onchange(e, t);
        else if (e != null && e !== "state")
          this.listener.addListener(e, this.data, e, t, this.data.stateUpdateInterval, r2, n);
        else {
          if (!this.listener.hasKey("state")) {
            let a = () => {
              this.prev = Object.assign({}, this.data);
            };
            this.listener.addListener("state", this.data, "__ANY__", a, this.interval);
          }
          return this.listener.addFunc("state", t);
        }
    }
    addSecondaryKeyResponse = (e = null, t = null, r2 = false, n = this.defaultStartListenerEventLoop) => {
      if (t != null) {
        if (this.listener.hasKey(e))
          return this.listener.addFunc(e, t);
        if (e != null && e !== "state")
          return this.listener.addListener(e, this.data, e, () => {
          }, this.data.stateUpdateInterval, r2, n), this.listener.addFunc(e, t);
        if (!this.listener.hasKey("state")) {
          let a = () => {
            this.prev = Object.assign({}, this.data);
          };
          this.listener.addListener("state", this.data, "__ANY__", a, this.interval);
        }
        return this.listener.addFunc("state", t);
      }
    };
    removeSecondaryKeyResponse(e = null, t = null, r2 = true) {
      e !== null ? this.listener.hasKey(e) ? this.listener.removeFuncs(e, t, r2) : console.error("key does not exist") : console.error("provide key");
    }
    clearAllKeyResponses(e = null) {
      e === null ? this.listener.remove(null) : this.listener.hasKey(e) && this.listener.remove(e);
    }
    getKeySubCallbacks(e) {
      return this.listener.getFuncs(e);
    }
    removeState = this.unsubscribeAll;
    runSynchronousListeners() {
      this.defaultStartListenerEventLoop = false, this.listener.startSync();
    }
    stop(e = null) {
      this.listener.stop(e);
    }
  };
  JSON.stringifyFast === void 0 && (JSON.stringifyFast = /* @__PURE__ */ function() {
    let c = /* @__PURE__ */ new Map(), e = [], t = ["this"];
    function r2() {
      c.clear(), e.length = 0, t.length = 1;
    }
    function n(o, i2) {
      var s = e.length - 1;
      if (e[s]) {
        var l = e[s];
        if (typeof l == "object")
          if (l[o] === i2 || s === 0)
            t.push(o), e.push(i2.pushed);
          else
            for (; s-- >= 0; ) {
              if (l = e[s], typeof l == "object" && l[o] === i2) {
                s += 2, e.length = s, t.length = s, --s, e[s] = i2, t[s] = o;
                break;
              }
              s++;
            }
      }
    }
    function a(o, i2) {
      let s;
      if (i2 != null)
        if (typeof i2 == "object") {
          let l = i2.constructor.name;
          o && l === "Object" && n(o, i2);
          let f = c.get(i2);
          if (f)
            return "[Circular Reference]" + f;
          if (c.set(i2, t.join(".")), l === "Array")
            i2.length > 20 ? s = i2.slice(i2.length - 20) : s = i2;
          else if (l.includes("Set"))
            s = Array.from(i2);
          else if (l !== "Object" && l !== "Number" && l !== "String" && l !== "Boolean")
            s = "instanceof_" + l;
          else if (l === "Object") {
            let p = {};
            for (let u in i2)
              if (i2[u] == null)
                p[u] = i2[u];
              else if (Array.isArray(i2[u]))
                i2[u].length > 20 ? p[u] = i2[u].slice(i2[u].length - 20) : p[u] = i2[u];
              else if (i2[u].constructor.name === "Object") {
                p[u] = {};
                for (let h in i2[u])
                  if (Array.isArray(i2[u][h]))
                    i2[u][h].length > 20 ? p[u][h] = i2[u][h].slice(i2[u][h].length - 20) : p[u][h] = i2[u][h];
                  else if (i2[u][h] != null) {
                    let d = i2[u][h].constructor.name;
                    d.includes("Set") ? p[u][h] = Array.from(i2[u][h]) : d !== "Number" && d !== "String" && d !== "Boolean" ? p[u][h] = "instanceof_" + d : p[u][h] = i2[u][h];
                  } else
                    p[u][h] = i2[u][h];
              } else {
                let h = i2[u].constructor.name;
                h.includes("Set") ? p[u] = Array.from(i2[u]) : h !== "Number" && h !== "String" && h !== "Boolean" ? p[u] = "instanceof_" + h : p[u] = i2[u];
              }
            s = p;
          } else
            s = i2;
        } else
          s = i2;
      return s;
    }
    return function(i2, s) {
      e.push(i2);
      let l = JSON.stringify(i2, a, s);
      return r2(), l;
    };
  }());
  JSON.stringifyWithCircularRefs === void 0 && (JSON.stringifyWithCircularRefs = /* @__PURE__ */ function() {
    let c = /* @__PURE__ */ new Map(), e = [], t = ["this"];
    function r2() {
      c.clear(), e.length = 0, t.length = 1;
    }
    function n(o, i2) {
      var s = e.length - 1, l = e[s];
      if (typeof l == "object")
        if (l[o] === i2 || s === 0)
          t.push(o), e.push(i2.pushed);
        else
          for (; s-- >= 0; ) {
            if (l = e[s], typeof l == "object" && l[o] === i2) {
              s += 2, e.length = s, t.length = s, --s, e[s] = i2, t[s] = o;
              break;
            }
            s--;
          }
    }
    function a(o, i2) {
      if (i2 != null && typeof i2 == "object") {
        o && n(o, i2);
        let s = c.get(i2);
        if (s)
          return "[Circular Reference]" + s;
        c.set(i2, t.join("."));
      }
      return i2;
    }
    return function(i2, s) {
      try {
        return e.push(i2), JSON.stringify(i2, a, s);
      } finally {
        r2();
      }
    };
  }());
  var b2 = class {
    constructor(e = void 0) {
      this.state = new x2({}, void 0, false), this.manager = e, e !== void 0 && (e.responses.find((r2) => {
        if (r2.name === "eventmanager")
          return true;
      }) || e.addCallback("eventmanager", this.callback));
    }
    subEvent(e, t = (r2) => {
      console.log(e, r2);
    }) {
      return this.state.subscribeTrigger(e, t);
    }
    unsubEvent(e, t) {
      return this.state.unsubscribeTrigger(e, t);
    }
    async addEvent(e, t = void 0, r2 = void 0, n = void 0) {
      if (this.state.setState({ [e]: void 0 }), this.manager !== void 0 && (n !== void 0 || r2 !== void 0))
        return t !== void 0 ? await this.manager.post({ origin: n, foo: "addevent", input: [e, r2] }, t) : (this.manager.workers.forEach((a) => {
          this.manager.post({ origin: n, foo: "addevent", input: [e, r2] }, a.id);
        }), true);
    }
    removeEmitter(e) {
      this.state.unsubscribeAllTriggers(e);
    }
    emit = (e, t, r2 = void 0, n = void 0, a = void 0) => {
      let o = { eventName: e, output: t };
      !t || !e || (this.manager !== void 0 ? r2 !== void 0 ? this.manager.post(o, r2, n) : this.manager.workers.forEach((i2) => {
        this.manager.post(o, i2.id, n);
      }) : typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope && (a ? a.postMessage(o, void 0, n) : globalThis.postMessage(o, void 0, n)), this.state.setState({ [e]: t }));
    };
    callback = (e) => {
      typeof e == "object" && e.eventName !== void 0 && e.output !== void 0 && this.state.setState({ [e.eventName]: e.output });
    };
    export = () => this;
  };
  var T = class {
    constructor(e, t, r2 = void 0, n = void 0, a = void 0, o = void 0, i2 = `canvas_${Math.round(Math.random() * 1e5)}`, s = void 0) {
      if (!t)
        throw new Error("Input a canvas element or Id");
      if (this.origin = i2, this.workerId = o, this.manager = e, !e)
        return false;
      typeof t == "string" && (t = document.getElementById(t)), this.canvas = t, this.context = r2, this.offscreen, this.workerId || this.initWorker(), typeof a == "object" && this.manager.postToWorker({ foo: "setValues", args: a, origin: this.origin }, this.workerId, s), t && this.setCanvas(t), r2 && this.setContext(r2), n && this.setAnimation(n);
    }
    setContext(e = this.context) {
      this.context = e, this.manager.postToWorker({ context: e, origin: this.origin }, this.workerId);
    }
    setCanvas(e = this.canvas) {
      this.canvas = e, this.offscreen = e.transferControlToOffscreen(), this.manager.postToWorker({ canvas: this.offscreen, origin: this.origin, foo: null }, this.workerId, [this.offscreen]);
    }
    setValues(e = void 0, t = void 0) {
      typeof setValues == "object" && this.manager.postToWorker({ foo: "setValues", input: e, origin: this.origin }, this.workerId, t);
    }
    setAnimation(e) {
      let t = e;
      if (typeof e == "function")
        t = e.toString();
      else if (typeof e != "string")
        return false;
      this.manager.postToWorker({ origin: this.origin, foo: "setAnimation", input: [t] }, this.workerId);
    }
    addSetup(e) {
      let t = e;
      typeof e == "function" && (t = e.toString()), this.manager.postToWorker({ origin: this.origin, foo: "addFunc", input: ["setupAnim", t] }, this.workerId);
    }
    setThreeAnimation(e, t) {
      this.manager.postToWorker({ origin: this.origin, foo: "initThree", input: [e.toString(), t.toString()] });
    }
    startThreeAnimation() {
      this.manager.postToWorker({ origin: this.origin, foo: "startThree", input: [] }, this.workerId);
    }
    clearThreeAnimation() {
      this.manager.postToWorker({ origin: this.origin, foo: "clearThree", input: [] }, this.workerId);
    }
    setValues(e = {}, t = []) {
      typeof e == "object" && this.manager.postToWorker({ origin: this.origin, foo: "setValues", input: e }, this.workerId, t);
    }
    startAnimation() {
      this.manager.postToWorker({ origin: this.origin, foo: "startAnimation", input: [] }, this.workerId);
    }
    stopAnimation() {
      this.manager.postToWorker({ origin: this.origin, foo: "stopAnimation", input: [] }, this.workerId);
    }
    setCanvasSize(e = this.canvas.width, t = this.canvas.height) {
      this.manager.postToWorker({ origin: this.origin, foo: "resizecanvas", input: [e, t] }, this.workerId);
    }
    initWorker() {
      !this.workerId && this.manager && (this.workerId = this.manager.addWorker(), this.manager.workerResponses.push(this.workeronmessage)), this.setCanvas(), this.setContext();
    }
    init(e) {
      this.workerId || this.initWorker(), this.setCanvas(), this.setContext(), e && this.setAnimation(e);
    }
    deinit() {
      this.manager.terminate(this.workerId);
    }
    workeronmessage = (e) => {
      e.origin === this.origin && console.log("Result: ", e);
    };
    test(e = "testcanvas") {
      let t = document.getElementById(e);
      t || (t = document.createElement("canvas"), t.id = e, document.body.insertAdjacentElement("beforeend", t)), this.canvas = t, this.context = "2d", this.init(), this.setValues({ x: 1, y: 2, z: 3 });
      function r2(n, a, o) {
        n.x || (n.x = 1, n.y = 2, n.z = 3), n.ctx.font = "10px serif", n.ctx.fillText(`${n.x} + ${n.y} + ${n.z} = ${n.x + n.y + n.z}`, 10, 50), n.x++, n.z += 2;
      }
      this.setAnimation(r2), setTimeout(() => {
        this.stopAnimation();
      }, 1e4);
    }
  };
  var m = class {
    url;
    responses = [];
    workers = [];
    threads = 0;
    threadrot = 0;
    events;
    subEvent;
    unsubEvent;
    addEvent;
    toResolve = {};
    ProxyElement = y;
    initProxyElement = k;
    ThreadedCanvas = T;
    constructor(e = 1, t) {
      this.url = t, this.responses = [], this.workers = [], this.threads = e, this.threadrot = 0, this.EVENTS = new b2(this), this.subEvent = (n, a = (o) => {
      }) => {
        this.EVENTS.subEvent(n, a);
      }, this.unsubEvent = (n, a) => {
        this.EVENTS.unsubEvent(n, a);
      }, this.addEvent = async (n, a, o, i2) => await this.EVENTS.addEvent(n, a, o, i2);
      let r2 = 0;
      for (console.log("worker", A); r2 < e; )
        this.addWorker(), r2++;
    }
    getWorker(e) {
      return e ? this.workers.find((t) => {
        if (t.id === e)
          return true;
      }).worker : this.workers[0].worker;
    }
    addWorker = (e = this.url, t = "module") => {
      let r2;
      try {
        if (e == null)
          r2 = new Worker(A);
        else if (t === "blob")
          try {
            let n = "worker" + Math.floor(Math.random() * 1e10), a = new Blob([this.url], { type: "text/javascript" });
            r2 = new Worker(URL.createObjectURL(a)), console.log("Blob worker created!");
          } catch (n) {
            console.error(n);
          }
        else
          e instanceof URL || (e = new URL(e, import_meta.url)), r2 = new Worker(e, { name: "worker_" + this.workers.length, type: t });
      } catch (n) {
        try {
          console.log("Error creating worker (WARNING: Single Threaded). ERROR:", n);
        } catch (a) {
          console.error("DummyWorker Error: ", a);
        }
      } finally {
        if (r2) {
          let n = "worker_" + Math.floor(Math.random() * 1e10);
          return this.workers.push({ worker: r2, id: n }), r2.onmessage = (a) => {
            var o = a.data;
            let i2 = this.toResolve[a.data.callbackId];
            i2 && (i2(o.output), delete this.toResolve[a.data.callbackId]), this.responses.forEach((s, l) => {
              typeof s == "object" ? s.callback(o) : typeof s == "function" && s(o);
            });
          }, r2.onerror = (a) => {
            console.error(a);
          }, console.log("magic threads: ", this.workers.length), n;
        } else
          return;
      }
    };
    addCallback(e = "", t = (r2) => {
    }) {
      e.length > 0 && !this.responses.find((r2) => {
        if (typeof r2 == "object" && r2.name === e)
          return true;
      }) && this.responses.push({ name: e, callback: t });
    }
    removeCallback(e = "") {
      if (e.length > 0) {
        let t;
        this.responses.find((r2, n) => {
          if (typeof r2 == "object" && r2.name === e)
            return t = n, true;
        }) && t && this.responses.splice(t, 1);
      } else
        typeof e == "number" && this.responses.splice(e, 1);
    }
    async addFunction(e, t, r2, n, a = (o) => {
    }) {
      if (e && t) {
        typeof t == "function" && (t = t.toString());
        let o = { foo: "addfunc", args: [e, t], origin: n };
        return r2 ? await this.post(o, r2, a) : (this.workers.forEach((i2) => {
          this.post(o, i2.id, a);
        }), true);
      }
    }
    addWorkerFunction = this.addFunction;
    async run(e, t, r2, n, a, o = (i2) => {
    }) {
      if (e) {
        if (e === "transferClassObject" && typeof t == "object" && !Array.isArray(t))
          for (let s in t)
            typeof t[s] == "object" && !Array.isArray(t[s]) && (t[s] = t[s].toString());
        let i2 = { foo: e, args: t, origin: n };
        return await this.post(i2, r2, a, o);
      }
    }
    runWorkerFunction = this.run;
    runFunction = this.run;
    async setValues(e = {}, t, r2, n) {
      if (t)
        return await this.run("setValues", e, t, r2, n);
      this.workers.forEach((a) => {
        this.run("setValues", e, a.id, r2, n);
      });
    }
    establishMessageChannel(e, t, r2, n, a, o) {
      let i2 = new MessageChannel(), s = i2.port1, l = i2.port2;
      this.run("addevent", [e, a, s], t, o, [s]), this.run("addevent", [e, e, l], r2, o, [l]), typeof n == "function" && this.run("subevent", [e, n.toString()], r2, o);
    }
    post = (e, t, r2, n = (a) => {
    }) => new Promise((a) => {
      typeof e != "object" && (e = { input: e }), Array.isArray(e.input) && (e.input = e.input.map((i2) => typeof i2 == "function" ? i2.toString() : i2));
      let o = (i2) => {
        n && n(i2), a(i2);
      };
      if (e.callbackId = Math.floor(1e6 * Math.random()), this.toResolve[e.callbackId] = o, t == null) {
        let i2 = this.workers?.[this.threadrot]?.worker;
        i2 && (i2.postMessage(e, r2), this.threads > 1 && (this.threadrot++, this.threadrot >= this.threads && (this.threadrot = 0)));
      } else
        this.workers.find((i2) => {
          if (i2.id === t)
            return i2.worker.postMessage(e, r2), true;
        });
    });
    postToWorker = this.post;
    terminate(e) {
      if (!e)
        this.workers.forEach((t) => t.worker.terminate());
      else {
        let t;
        return this.workers.find((n, a) => {
          if (n.id === e)
            return t = a, n.worker.terminate(), true;
        }) && t ? (this.workers.splice(t, 1), true) : false;
      }
    }
    close = this.terminate;
  };
  var y = class {
    constructor(e, t, r2, n, a) {
      this.id = "proxy" + Math.floor(Math.random() * 1e4), this.eventHandlers = n, this.origin = t, this.workerId = r2, this.manager = a instanceof m ? a : new m();
      let o = (s) => {
        this.manager.runWorkerFunction("proxyHandler", { type: "event", id: this.id, data: s }, this.workerId, this.origin);
      };
      this.manager.runWorkerFunction("proxyHandler", { type: "makeProxy", id: this.id }, this.workerId, this.origin);
      for (let [s, l] of Object.entries(this.eventHandlers))
        e.addEventListener(s, function(f) {
          l(f, o);
        });
      let i2 = () => {
        let s = e.getBoundingClientRect();
        o({ type: "size", left: s.left, top: s.top, width: e.clientWidth, height: e.clientHeight });
      };
      i2(), window.addEventListener("resize", i2);
    }
  };
  var g2 = _(["ctrlKey", "metaKey", "shiftKey", "button", "pointerType", "clientX", "clientY", "pageX", "pageY"]);
  var F = _(["deltaX", "deltaY"]);
  var I = _(["ctrlKey", "metaKey", "shiftKey", "keyCode"]);
  function C(c, e) {
    c.preventDefault(), F(c, e);
  }
  function R(c) {
    c.preventDefault();
  }
  function M(c, e, t) {
    for (let r2 of e)
      t[r2] = c[r2];
  }
  function _(c) {
    return function(t, r2) {
      let n = { type: t.type };
      M(t, c, n), r2(n);
    };
  }
  function E(c, e) {
    let t = [], r2 = { type: c.type, touches: t };
    for (let n = 0; n < c.touches.length; ++n) {
      let a = c.touches[n];
      t.push({ pageX: a.pageX, pageY: a.pageY });
    }
    e(r2);
  }
  var L = { "37": true, "38": true, "39": true, "40": true };
  function N(c, e) {
    let { keyCode: t } = c;
    L[t] && (c.preventDefault(), I(c, e));
  }
  function k(c, e, t) {
    let r2 = { contextmenu: R, mousedown: g2, mousemove: g2, mouseup: g2, pointerdown: g2, pointermove: g2, pointerup: g2, touchstart: E, touchmove: E, touchend: E, wheel: C, keydown: N };
    return new y(c, t, e, r2, this);
  }

  // src/components/spectrometer/spectrometer.node.js
  var component2 = require_spectrometer_node();
  var Spectrometer = class extends NodeDiv {
    bitmap;
    //raw image data
    bitslice;
    //slice of bitmap in picked area
    canvas;
    //draw a capture area 
    ctx;
    offscreen;
    offscreenctx;
    capture;
    capturectx;
    capturegraph;
    capturegraphctx;
    graphVideoSnip = false;
    img;
    //img tag
    video;
    //video tag
    imgselect;
    //select options
    captures = {};
    loaded = {};
    //loaded images and videos
    imgfiles = {
      "Test Image": "demo_app/src/assets/spectrum_full.png",
      "Spectrum 1": "demo_app/src/assets/spectrum1.png",
      "Spectrum 2": "demo_app/src/assets/spectrum2.jpg",
      "Shrimp": "demo_app/src/assets/shrimp.jpg",
      "Chicken Fat": "demo_app/src/assets/chickenfat.png",
      "Chicken Breast": "demo_app/src/assets/chickenbreast.png",
      "Brown Beer Bottle": "demo_app/src/assets/brownbeerbottle.png"
    };
    comparing = {
      sample1: void 0,
      sample2: void 0,
      baseline: void 0,
      s2_s1: void 0,
      a1: void 0,
      a2: void 0,
      a2_a1: void 0
    };
    //images being compared and their current settings
    labels = {};
    //set the template string or function (which can input props to return a modified string)
    template = component2;
    props = {
      workers: new m(3),
      //3 workers + main thread = 4 threads (e.g. if your processor can handle a minimum of 4 threads (8 is typical for a 4-core processor which is common nowadays))
      picking: 0,
      picked: { x0: void 0, x1: void 0, y0: void 0, y1: void 0 },
      imgpicked: { x0: void 0, x1: void 0, y0: void 0, y1: void 0 },
      running: false,
      //running capture loop?
      mode: "img",
      animation: (input, node, origin, cmd) => {
      },
      operator: (input, node, origin, cmd) => {
        if (cmd === "animate") {
        } else {
          if (typeof input === "object") {
          } else if (typeof input === "number") {
          } else if (typeof input === "string") {
          } else {
          }
        }
      },
      forward: true,
      //pass output to child nodes
      backward: false,
      //pass output to parent node
      children: void 0,
      //child node(s), can be tags of other nodes, properties objects like this, or graphnodes, or null
      parent: void 0,
      //parent graph node
      delay: false,
      //ms delay to fire the node
      repeat: false,
      // set repeat as an integer to repeat the input n times
      recursive: false,
      //or set recursive with an integer to pass the output back in as the next input n times
      animate: false,
      //true or false
      loop: void 0,
      //milliseconds or false
      tag: void 0,
      //generated if not specified, or use to get another node by tag instead of generating a new one
      input: void 0,
      // can set on the attribute etc
      graph: void 0,
      //parent AcyclicGraph instance, can set manually or via enclosing acyclic-graph div
      node: void 0
      //GraphNode instance, can set manually or as a string to grab a node by tag (or use tag)
    };
    //can specify properties of the element which can be subscribed to for changes.
    //DOMElement custom callbacks:
    oncreate = (props) => {
      this.props.workers.addFunction("averageImage", this.averageImage);
      this.props.workers.addFunction("autocorrelateImage", this.autocorrelateImage);
      this.canvas = this.querySelector("#picker");
      this.pickerDiv = this.querySelector("#pickerDiv");
      this.captureDiv = this.querySelector("#captureDiv");
      this.imgmenu = this.querySelector("#imgmenu");
      this.camsrc = this.querySelector("#camsrc");
      this.videomenu = this.querySelector("#videomenu");
      this.urlmenu = this.querySelector("#urlmenu");
      this.imgselect = this.querySelector("#imgselect");
      this.select = this.querySelector("#imgselect");
      this.capture = this.querySelector("#capture");
      this.capturectx = this.capture.getContext("2d");
      this.capturegraph = this.querySelector("#capturegraph");
      this.capturegraphctx = this.capturegraph.getContext("2d");
      this.labelcanvas = this.querySelector("#compareall");
      this.labelcanvasctx = this.labelcanvas.getContext("2d");
      this.menu = this.querySelector("#menu");
      this.toggleMenu = this.querySelector("#toggleMenu");
      this.x0inp = this.querySelector("#x0");
      this.x1inp = this.querySelector("#x1");
      this.y0inp = this.querySelector("#y0");
      this.y1inp = this.querySelector("#y1");
      this.setupxyinp();
      this.labelInp = this.querySelector("#labelinput");
      this.labelBtn = this.querySelector("#setlabel");
      this.labelMenu = this.querySelector("#labels");
      this.labelBtn.onclick = () => {
        let label = this.labelInp.value;
        this.addLabel(label);
      };
      this.addLabel("Baseline");
      this.addLabel("S1");
      this.addLabel("S2");
      for (const key in this.imgfiles) {
        let template = `<option value="${this.imgfiles[key]}">${key}</option>`;
        this.imgselect.insertAdjacentHTML("beforeend", template);
      }
      this.imgselect.options[0].selected = true;
      this.imgselect.oninput = this.useImage;
      this.querySelector("#useurl").onclick = () => {
        if (this.urlmenu.style.display == "none") {
          this.urlmenu.style.display = "";
          this.imgmenu.style.display = "";
        } else {
          this.urlmenu.style.display = "none";
          this.imgmenu.style.display = "none";
        }
      };
      this.querySelector("#help").onclick = () => {
        let instructionDiv = this.querySelector("#instructions");
        if (instructionDiv.style.display == "none")
          instructionDiv.style.display = "";
        else
          instructionDiv.style.display = "none";
      };
      this.querySelector("#showgraph").onclick = () => {
        this.graphVideoSnip = !this.graphVideoSnip;
      };
      this.img = this.querySelector("img");
      this.img.addEventListener("load", (ev2) => {
        this.props.mode = "img";
        this.imgmenu.style.display = "";
        this.videomenu.style.display = "none";
        this.urlmenu.style.display = "";
        this.querySelector("#sourcedeets").innerHTML = `Source Resolution: ${this.img.naturalWidth}x${this.img.naturalHeight}`;
        this.onresize();
      });
      this.video = this.querySelector("video");
      this.video.addEventListener("canplay", (ev2) => {
        this.props.mode = "video";
        this.videomenu.style.display = "";
        this.imgmenu.style.display = "none";
        this.urlmenu.style.display = "none";
        this.querySelector("#sourcedeets").innerHTML = `Source Resolution: ${this.video.videoWidth}x${this.video.videoHeight}`;
        this.onresize();
      });
      this.toggleMenu.onclick = () => {
        if (this.menu.style.display === "none") {
          this.menu.style.display = "";
        } else {
          this.menu.style.display = "none";
        }
      };
      this.querySelector("#fileinput").onchange = this.handleFileInput;
      this.querySelector("#snip").onclick = (ev2) => {
        if (this.props.picked.y1 && this.props.picked.x1) {
          this.canvasCapture(ev2);
        }
      };
      const recordButton = () => {
        if (this.props.mode === "video" && this.props.picked.y1 && this.props.picked.x1) {
          this.props.running = true;
          let mediaRecorder = recordCanvas(this.capture);
          this.querySelector("#record").innerHTML = "\u{1F7E5}";
          this.querySelector("#record").onclick = () => {
            this.props.running = false;
            mediaRecorder.stop();
            this.querySelector("#record").innerHTML = "\u{1F534}";
            this.querySelector("#record").onclick = recordButton;
          };
          mediaRecorder.start();
        }
      };
      this.querySelector("#record").onclick = recordButton;
      this.select.onchange = (ev2) => {
      };
      this.querySelector("#webcam").onclick = this.useWebcam;
      this.querySelector("#image").onclick = this.useImage;
      this.querySelector("#seturl").onclick = () => {
        if (this.querySelector("#urlselect").value == img) {
          this.inputImgUrl();
        } else {
          this.inputVideoSrc();
        }
      };
      this.querySelector("#fileinput").onclick = this.loadFile;
      props.canvas = this.canvas;
      if (props.context)
        props.context = this.canvas.getContext(props.context);
      else
        props.context = this.canvas.getContext("2d");
      this.context = props.context;
      this.ctx = this.context;
      props.ctx = this.context;
      this.offscreen = new OffscreenCanvas(this.canvas.width, this.canvas.height);
      this.offscreenctx = this.offscreen.getContext("2d");
      this.canvas.onclick = this.canvasClicked;
      initFS(
        ["processed"]
      ).then(this.getSavedData);
      setTimeout(() => {
        if (props.animate)
          props.node.runAnimation();
      }, 10);
      try {
        this.useImage();
      } catch (er) {
        console.error(er);
      }
      this.img.width = 0;
      setTimeout(() => {
        this.onresize();
      }, 50);
      navigator.mediaDevices.enumerateDevices().then((deviceInfos) => {
        for (var i2 = 0; i2 !== deviceInfos.length; ++i2) {
          var deviceInfo = deviceInfos[i2];
          var option = document.createElement("option");
          option.value = deviceInfo.deviceId;
          if (deviceInfo.kind === "videoinput") {
            option.text = deviceInfo.label || "Camera " + (videoSelect.options.length + 1);
            this.camsrc.insertAdjacentElement("beforeend", option);
          }
        }
        this.camsrc.onchange = this.useWebcam;
      });
    };
    //after rendering
    onresize = (props) => {
      let imageRatio;
      const desiredWidth = this.pickerDiv.clientWidth;
      if (this.props.mode === "img") {
        imageRatio = this.img.naturalHeight / this.img.naturalWidth;
        this.correctForRatio(this.img, desiredWidth, this.pickerDiv.clientHeight, imageRatio);
      } else if (this.props.mode === "video") {
        imageRatio = this.video.videoHeight / this.video.videoWidth;
        this.correctForRatio(this.video, desiredWidth, this.pickerDiv.clientHeight, imageRatio);
      }
      if (this.canvas) {
        if (this.props.mode === "img" && this.img?.naturalWidth > 0) {
          this.correctForRatio(this.canvas, desiredWidth, this.pickerDiv.clientHeight, imageRatio);
        } else if (this.props.mode === "video" && this.video && this.video?.videoWidth > 0) {
          this.correctForRatio(this.canvas, desiredWidth, this.pickerDiv.clientHeight, imageRatio);
        } else {
          this.canvas.width = this.canvas.parentNode.clientWidth;
          this.canvas.height = this.canvas.parentNode.clientHeight;
          this.canvas.style.width = this.canvas.parentNode.clientWidth;
          this.canvas.style.height = this.canvas.parentNode.clientHeight;
        }
      }
    };
    //on window resize
    //onchanged=(props)=>{} //on props changed
    //ondelete=(props)=>{} //on element deleted. Can remove with this.delete() which runs cleanup functions
    averageImage = (self2, args, origin) => {
      if (args[3])
        self2.averaged = args[3];
      if (args[1] !== self2.image?.width || args[2] !== self2.image?.height || !self2.averaged) {
        let arr = Array.from(args[0]);
        self2.image = {
          arr,
          r: [[]],
          g: [[]],
          b: [[]],
          s: [[]],
          width: args[1],
          height: args[2]
        };
        self2.averaged = 1;
        let x3 = 0;
        let y2 = 0;
        let bmp = self2.image;
        arr.forEach((v2, i2) => {
          if (i2 % 4 == 0 || i2 == 0)
            bmp.r[y2].push(v2);
          else if ((i2 - 1) % 4 == 0 || i2 == 1)
            bmp.g[y2].push(v2);
          else if ((i2 - 2) % 4 == 0 || i2 == 2)
            bmp.b[y2].push(v2);
          else if ((i2 - 3) % 4 == 0 || i2 == 3) {
            bmp.s[y2].push(v2);
            x3++;
            if (x3 == args[1]) {
              x3 = 0;
              y2++;
              if (y2 !== args[2]) {
                bmp.r.push([]);
                bmp.g.push([]);
                bmp.b.push([]);
                bmp.s.push([]);
              }
            }
          }
        });
        return args[0];
      } else {
        let arr = Array.from(args[0]);
        let avgd = self2.image.arr;
        let _avg = 1 / (self2.averaged + 1);
        for (let i2 = 0; i2 < arr.length; i2 += 4) {
          let ri = i2;
          let gi = i2 + 1;
          let bi = i2 + 2;
          avgd[ri] = (avgd[ri] * self2.averaged + arr[ri]) * _avg;
          arr[ri] = avgd[ri];
          avgd[gi] = (avgd[gi] * self2.averaged + arr[gi]) * _avg;
          arr[gi] = avgd[gi];
          avgd[bi] = (avgd[bi] * self2.averaged + arr[bi]) * _avg;
          arr[bi] = avgd[bi];
        }
        self2.averaged++;
        return Uint8ClampedArray.from(arr);
      }
    };
    autocorrelateImage = (self2, args, origin) => {
      let arr = Array.from(args[0]);
      let bmp = {
        r: [[]],
        g: [[]],
        b: [[]],
        s: [[]]
      };
      let x3 = 0;
      let y2 = 0;
      arr.forEach((v2, i2) => {
        if (i2 % 4 == 0 || i2 == 0)
          bmp.r[y2].push(v2);
        else if ((i2 - 1) % 4 == 0 || i2 == 1)
          bmp.g[y2].push(v2);
        else if ((i2 - 2) % 4 == 0 || i2 == 2)
          bmp.b[y2].push(v2);
        else if ((i2 - 3) % 4 == 0 || i2 == 3) {
          bmp.s[y2].push(v2);
          x3++;
          if (x3 == args[1]) {
            x3 = 0;
            y2++;
            if (y2 !== args[2]) {
              bmp.r.push([]);
              bmp.g.push([]);
              bmp.b.push([]);
              bmp.s.push([]);
            }
          }
        }
      });
      let res = {
        r: void 0,
        g: void 0,
        b: void 0,
        s: void 0
      };
      res.r = self2.Math2.autocorrelation2d(bmp.r);
      res.g = self2.Math2.autocorrelation2d(bmp.g);
      res.b = self2.Math2.autocorrelation2d(bmp.b);
      res.s = bmp.s;
      let resultsconcat = { r: [], g: [], b: [], s: [] };
      res.r.forEach((a) => resultsconcat.r.push(...a));
      res.g.forEach((a) => resultsconcat.g.push(...a));
      res.b.forEach((a) => resultsconcat.b.push(...a));
      resultsconcat.r = self2.Math2.normalizeSeries(resultsconcat.r, true).map((v2) => v2 * 255);
      resultsconcat.g = self2.Math2.normalizeSeries(resultsconcat.g, true).map((v2) => v2 * 255);
      resultsconcat.b = self2.Math2.normalizeSeries(resultsconcat.b, true).map((v2) => v2 * 255);
      let reconstructed = [];
      resultsconcat.r.forEach((v2, i2) => {
        reconstructed.push(v2, resultsconcat.g[i2], resultsconcat.b[i2], 255);
      });
      return Uint8ClampedArray.from(reconstructed);
    };
    addLabel = (label) => {
      if (label) {
        if (!this.labels[label]) {
          let wId = this.props.workers.addWorker();
          this.props.workers.addFunction("averageImage", this.averageImage, wId);
          this.labelMenu.insertAdjacentHTML("beforeend", `<button id='${label}btn'>${label}</button>`);
          document.getElementById(label + "btn").onclick = (ev2) => {
            let imgd = this.capturectx.getImageData(0, 0, this.capture.width, this.capture.height);
            let mapped = mapBitmapXIntensities(imgd);
            this.props.workers.run(
              "averageImage",
              [mapped.bitmap.data, mapped.width, mapped.height],
              wId
            ).then((averaged) => {
              let imgdata = new ImageData(averaged, mapped.width, mapped.height);
              let offscreen = new OffscreenCanvas(mapped.width, mapped.height);
              let offscreenctx = offscreen.getContext("2d");
              offscreenctx.putImageData(imgdata, 0, 0);
              if (!document.getElementById(label + "div")) {
                this.createBitmapCanvasWithMenu(
                  offscreen,
                  this.querySelector("#capturelist"),
                  "100%",
                  void 0,
                  label
                );
              } else {
                let c = this.labels[label].canvas;
                c.width = this.labels[label].mapped.width;
                c.height = this.labels[label].mapped.height;
                let ctx = this.labels[label].context;
                ctx.drawImage(offscreen, 0, 0);
                let graph = this.labels[label].graph;
                graph.width = graph.clientWidth;
                graph.height = graph.clientHeight;
                let bmp = ctx.getImageData(0, 0, c.width, c.height);
                let mapped2 = mapBitmapXIntensities(bmp);
                graphXIntensities(this.labels[label].graphcontext, mapped2.xrgbintensities, mapped2.xintmax);
                this.labels[label].mapped = mapped2;
                this.labels[label].timestamp = Date.now();
              }
              let cc = this.labelcanvas;
              this.labelcanvasctx.clearRect(0, 0, cc.width, cc.height);
              document.getElementById("labelcolors").innerHTML = "";
              for (const prop in this.labels) {
                let xscalar = this.labelcanvas.width / this.labels[prop].mapped.xrgbintensities.length;
                let xintmax = this.labels[prop].mapped.xintmax;
                let xintmin = Math.min(...this.labels[prop].mapped.xrgbintensities.map((y2) => y2.i));
                if (!xintmax) {
                  xintmax = Math.max(...this.labels[prop].mapped.xrgbintensities.map((y2) => y2.i));
                }
                if (xintmin > 0)
                  xintmin = 0;
                if (this.labels[prop].mapped) {
                  let color = `rgb(${100 + Math.random() * 155},${100 + Math.random() * 155},${100 + Math.random() * 155})`;
                  document.getElementById("labelcolors").innerHTML += ` <span style='color:${color};'>${prop}</span>`;
                  this.labelcanvasctx.strokeStyle = color;
                  this.labelcanvasctx.lineWidth = 2;
                  this.labelcanvasctx.beginPath();
                  this.labelcanvasctx.moveTo(0, this.labelcanvas.height * (1 - (this.labels[prop].mapped.xrgbintensities[0].i - xintmin) / (xintmax - xintmin)));
                  for (let i2 = 1; i2 < this.labels[prop].mapped.xrgbintensities.length; i2++) {
                    this.labelcanvasctx.lineTo(i2 * xscalar, this.labelcanvas.height * (1 - (this.labels[prop].mapped.xrgbintensities[i2].i - xintmin) / (xintmax - xintmin)));
                  }
                  this.labelcanvasctx.stroke();
                  console.log(this.labels[prop].mapped.xrgbintensities);
                }
              }
            });
          };
        }
      }
    };
    setupxyinp = () => {
      this.x0inp.onchange = (ev2) => {
        this.props.imgpicked.x0 = ev2.target.value;
        if (this.props.imgpicked.x1) {
          if (this.props.imgpicked.x1 < this.props.imgpicked.x0) {
            let temp = this.props.imgpicked.x1;
            this.props.imgpicked.x1 = this.props.imgpicked.x0;
            this.props.imgpicked.x0 = temp;
          }
        }
        if (this.props.imgpicked.y0 >= 0) {
          let picked = imgToOverlayPicker(this.img, this.canvas, this.props.imgpicked.x0, this.props.imgpicked.y0);
          this.props.picked.x0 = picked.x;
          this.props.picked.y0 = picked.y;
          this.setX0Y0();
          if (this.props.picked.x0 !== void 0 && this.props.picked.y0 !== void 0) {
            this.props.running = false;
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.strokeStyle = "orange";
            this.ctx.rect(
              this.props.picked.x0,
              this.props.picked.y0,
              Math.abs(this.props.picked.x1 - this.props.picked.x0),
              Math.abs(this.props.picked.y1 - this.props.picked.y0)
            );
            this.ctx.stroke();
            this.drawCapture();
          }
        }
      };
      this.x1inp.onchange = (ev2) => {
        this.props.imgpicked.x1 = ev2.target.value;
        if (this.props.imgpicked.x0) {
          if (this.props.imgpicked.x1 < this.props.imgpicked.x0) {
            let temp = this.props.imgpicked.x1;
            this.props.imgpicked.x1 = this.props.imgpicked.x0;
            this.props.imgpicked.x0 = temp;
          }
        }
        if (this.props.imgpicked.y1 >= 0) {
          let picked = imgToOverlayPicker(this.img, this.canvas, this.props.imgpicked.x1, this.props.imgpicked.y1);
          this.props.picked.x1 = picked.x;
          this.props.picked.y1 = picked.y;
          this.setX1Y1();
          if (this.props.picked.x0 !== void 0 && this.props.picked.y0 !== void 0) {
            this.props.running = false;
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.strokeStyle = "orange";
            this.ctx.rect(
              this.props.picked.x0,
              this.props.picked.y0,
              Math.abs(this.props.picked.x1 - this.props.picked.x0),
              Math.abs(this.props.picked.y1 - this.props.picked.y0)
            );
            this.ctx.stroke();
            this.drawCapture();
          }
        }
      };
      this.y0inp.onchange = (ev2) => {
        this.props.imgpicked.y0 = ev2.target.value;
        if (this.props.imgpicked.y1) {
          if (this.props.imgpicked.y1 < this.props.imgpicked.y0) {
            let temp = this.props.imgpicked.y1;
            this.props.imgpicked.y1 = this.props.imgpicked.y0;
            this.props.imgpicked.y0 = temp;
          }
        }
        if (this.props.imgpicked.x0 >= 0) {
          let picked = imgToOverlayPicker(this.img, this.canvas, this.props.imgpicked.x0, this.props.imgpicked.y0);
          this.props.picked.x0 = picked.x;
          this.props.picked.y0 = picked.y;
          this.setX0Y0();
          if (this.props.picked.x0 !== void 0 && this.props.picked.y0 !== void 0) {
            this.props.running = false;
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.strokeStyle = "orange";
            this.ctx.rect(
              this.props.picked.x0,
              this.props.picked.y0,
              Math.abs(this.props.picked.x1 - this.props.picked.x0),
              Math.abs(this.props.picked.y1 - this.props.picked.y0)
            );
            this.ctx.stroke();
            this.drawCapture();
          }
        }
      };
      this.y1inp.onchange = (ev2) => {
        this.props.imgpicked.y1 = ev2.target.value;
        if (this.props.imgpicked.y0) {
          if (this.props.imgpicked.y1 < this.props.imgpicked.y0) {
            let temp = this.props.imgpicked.y1;
            this.props.imgpicked.y1 = this.props.imgpicked.y0;
            this.props.imgpicked.y0 = temp;
          }
        }
        if (this.props.imgpicked.x1 >= 0) {
          let picked = imgToOverlayPicker(this.img, this.canvas, this.props.imgpicked.x1, this.props.imgpicked.y1);
          this.props.picked.x1 = picked.x;
          this.props.picked.y1 = picked.y;
          this.setX1Y1();
          if (this.props.picked.x0 !== void 0 && this.props.picked.y0 !== void 0) {
            this.props.running = false;
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.strokeStyle = "orange";
            this.ctx.rect(
              this.props.picked.x0,
              this.props.picked.y0,
              Math.abs(this.props.picked.x1 - this.props.picked.x0),
              Math.abs(this.props.picked.y1 - this.props.picked.y0)
            );
            this.ctx.stroke();
            this.drawCapture();
          }
        }
      };
    };
    useWebcam = () => {
      this.props.running = false;
      this.img.style.display = "none";
      if (this.video.src) {
        this.graphVideoSnip = false;
        this.capturegraphctx.clearRect(0, 0, this.capturegraph.width, this.capturegraph.height);
        this.video.pause();
        this.video.src = "";
      }
      this.video.style.display = "";
      if (navigator.getUserMedia) {
        let vidOptions = {};
        if (this.camsrc.value)
          vidOptions.deviceId = this.camsrc.value;
        else
          vidOptions.optional = [
            { minWidth: 320 },
            { minWidth: 640 },
            { minWidth: 1024 },
            { minWidth: 1280 },
            { minWidth: 1920 },
            { minWidth: 2560 }
          ];
        navigator.getUserMedia(
          {
            audio: false,
            video: vidOptions
          },
          (stream) => {
            this.video.srcObject = stream;
            this.video.play();
            this.props.mode = "video";
            this.capturegraph.width = this.video.videoWidth;
            this.capturegraph.height = this.video.videoHeight;
          },
          console.error
        );
      }
    };
    useImage = () => {
      this.props.running = false;
      if (this.video.src) {
        this.graphVideoSnip = false;
        this.capturegraphctx.clearRect(0, 0, this.capturegraph.width, this.capturegraph.height);
        this.video.pause();
        this.video.src = "";
        this.video.style.display = "none";
      }
      this.img.src = this.select.options[this.select.selectedIndex].value;
      this.img.style.display = "";
      this.props.mode = "img";
      this.capturegraph.width = this.img.naturalWidth;
      this.capturegraph.height = this.img.naturalHeight;
      this.onresize();
    };
    inputImgUrl() {
      this.props.running = false;
      let input = this.querySelector("#urlinput").value;
      if (input) {
        if (this.video.src) {
          this.graphVideoSnip = false;
          this.capturegraphctx.clearRect(0, 0, this.capturegraph.width, this.capturegraph.height);
          this.video.pause();
          this.video.src = "";
          this.video.style.display = "none";
        }
        this.img.src = input;
        this.img.style.display = "";
        this.props.mode = "img";
        this.capturegraph.width = this.img.naturalWidth;
        this.capturegraph.height = this.img.naturalHeight;
        this.onresize();
      }
    }
    //should combine inputs and just read the file type
    inputVideoSrc() {
      this.props.running = false;
      this.img.style.display = "none";
      this.video.style.display = "";
      let input = this.querySelector("#urlinput").value;
      if (input) {
        if (this.video.src) {
          this.graphVideoSnip = false;
          this.capturegraphctx.clearRect(0, 0, this.capturegraph.width, this.capturegraph.height);
          this.video.pause();
          this.video.src = "";
        }
        this.video.src = input;
        this.video.play();
        this.capturegraph.width = this.video.videoWidth;
        this.capturegraph.height = this.video.videoHeight;
        this.props.mode = "video";
        this.onresize();
      }
    }
    loadFile = () => {
      var input = document.createElement("input");
      input.accept = ".mp4,.png,.bmp,.jpg";
      input.type = "file";
      input.onchange = (e) => {
        let file = e.target.files[0];
        let dataurl = URL.createObjectURL(file);
        this.loaded[input.value] = dataurl;
        if (this.video.src) {
          this.graphVideoSnip = false;
          this.capturegraphctx.clearRect(0, 0, this.capturegraph.width, this.capturegraph.height);
          this.video.pause();
          ;
          this.video.src = "";
          this.video.style.display = "none";
        }
        if (input.value.endsWith(".mp4")) {
          this.props.mode = "video";
          this.video.src = dataurl;
          this.video.play();
        } else {
          this.props.mode = "img";
          if (input.value.endsWith(".bmp")) {
            var reader = new FileReader();
            reader.onload = (e2) => {
              var buffer = e2.target.result;
              var bitmap = getBMP(buffer);
              let pngconverted = convertBMPToPNG(bitmap);
              this.img.src = pngconverted;
            };
            reader.readAsArrayBuffer(file);
          } else
            this.img.src = dataurl;
        }
      };
      input.click();
    };
    drawCircle(centerX, centerY, radius, fill = "green", strokewidth = 5, strokestyle = "#003300", ctx = this.ctx) {
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
      ctx.fillStyle = fill;
      ctx.fill();
      ctx.lineWidth = strokewidth;
      ctx.strokeStyle = strokestyle;
      ctx.closePath();
      ctx.stroke();
    }
    drawLine(from = { x: 0, y: 0 }, to = { x: 1, y: 1 }, strokewidth = 5, strokestyle = "#003300", ctx = this.ctx) {
      ctx.beginPath();
      ctx.lineWidth = strokewidth;
      ctx.strokeStyle = strokestyle;
      ctx.moveTo(from.x, from.y);
      ctx.lineTo(to.x, to.y);
      ctx.stroke();
    }
    drawPicked = (picking = 0) => {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      if (picking === 0 && this.props.picked.x0 !== void 0 && this.props.picked.y0 !== void 0) {
        this.drawCircle(this.props.picked.x0, this.props.picked.y0, 2.5, "orange", 1, "orange");
      } else if (picking === 1 && this.props.picked.x0 !== void 0 && this.props.picked.x1 !== void 0 && this.props.picked.y0 !== void 0 && this.props.picked.y1 !== void 0) {
        this.ctx.lineWidth = 3;
        this.ctx.beginPath();
        this.ctx.strokeStyle = "orange";
        this.ctx.rect(
          this.props.picked.x0,
          this.props.picked.y0,
          Math.abs(this.props.picked.x1 - this.props.picked.x0),
          Math.abs(this.props.picked.y1 - this.props.picked.y0)
        );
        this.ctx.stroke();
      }
    };
    setX0Y0 = () => {
      let imgpicked;
      if (this.props.mode === "img")
        imgpicked = overlayToImgPicker(this.img, this.canvas, this.props.picked.x0, this.props.picked.y0);
      else if (this.props.mode === "video")
        imgpicked = overlayToImgPicker(this.video, this.canvas, this.props.picked.x0, this.props.picked.y0);
      this.props.imgpicked.x0 = imgpicked.x;
      this.props.imgpicked.y0 = imgpicked.y;
      this.props.imgpicked.x1 = void 0;
      this.props.imgpicked.y1 = void 0;
      this.x0inp.value = imgpicked.x;
      this.y0inp.value = imgpicked.y;
    };
    setX1Y1 = () => {
      let imgpicked;
      if (this.props.mode === "img")
        imgpicked = overlayToImgPicker(this.img, this.canvas, this.props.picked.x1, this.props.picked.y1);
      else if (this.props.mode === "video")
        imgpicked = overlayToImgPicker(this.video, this.canvas, this.props.picked.x1, this.props.picked.y1);
      this.props.imgpicked.x1 = imgpicked.x;
      this.props.imgpicked.y1 = imgpicked.y;
      if (this.props.picked.x1 < this.props.picked.x0) {
        let temp = this.props.picked.x1;
        this.props.picked.x1 = this.props.picked.x0;
        this.props.picked.x0 = temp;
        temp = this.props.imgpicked.x1;
        this.props.imgpicked.x1 = this.props.imgpicked.x0;
        this.props.imgpicked.x0 = temp;
      }
      if (this.props.picked.y1 < this.props.picked.y0) {
        let temp = this.props.picked.y1;
        this.props.picked.y1 = this.props.picked.y0;
        this.props.picked.y0 = temp;
        temp = this.props.imgpicked.y1;
        this.props.imgpicked.y1 = this.props.imgpicked.y0;
        this.props.imgpicked.y0 = temp;
      }
      this.x1inp.value = this.props.imgpicked.x1;
      this.y1inp.value = this.props.imgpicked.y1;
    };
    drawCapture = () => {
      this.props.running = false;
      this.querySelector("#capturedeets").innerHTML = `Snip Resolution (actual): ${Math.round(Math.abs(this.props.imgpicked.x1 - this.props.imgpicked.x0))}x${Math.round(Math.abs(this.props.imgpicked.y1 - this.props.imgpicked.y0))}`;
      this.capture.width = this.captureDiv.clientWidth;
      this.capture.height = this.captureDiv.clientHeight;
      if (this.props.mode === "video") {
        this.continuousCapture(this.video);
      } else {
        drawImage(
          this.capturectx,
          this.img,
          this.props.imgpicked.x0,
          this.props.imgpicked.y0,
          Math.abs(this.props.imgpicked.x1 - this.props.imgpicked.x0),
          Math.abs(this.props.imgpicked.y1 - this.props.imgpicked.y0),
          0,
          0,
          this.capture.width,
          this.capture.height
        );
      }
    };
    canvasClicked = (ev2) => {
      this.props.running = false;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      if (this.props.picking === 0) {
        if (ev2) {
          if (ev2.pageX)
            this.props.picked.x0 = ev2.pageX - this.canvas.offsetLeft;
        }
        if (ev2) {
          if (ev2.pageY)
            this.props.picked.y0 = ev2.pageY - this.canvas.offsetTop;
        }
        this.props.picked.x1 = void 0;
        this.props.picked.y1 = void 0;
        this.setX0Y0();
        this.drawPicked(this.props.picking);
        this.props.picking = 1;
      } else if (this.props.picked.x0 !== void 0 && this.props.picked.y0 !== void 0) {
        if (ev2) {
          if (ev2.pageX)
            this.props.picked.x1 = ev2.pageX - this.canvas.offsetLeft;
        }
        if (ev2) {
          if (ev2.pageY)
            this.props.picked.y1 = ev2.pageY - this.canvas.offsetTop;
        }
        this.setX1Y1();
        if (this.props.picked.x1 !== void 0 && this.props.picked.y1 !== void 0) {
          this.drawPicked(this.props.picking);
          this.drawCapture();
        }
        this.props.picking = 0;
      }
    };
    //continuously draw the section of the video we're capturing.
    async continuousCapture(img2) {
      if (this.props.imgpicked.x1 && this.props.imgpicked.x0 && this.props.imgpicked.y1 && this.props.imgpicked.y0) {
        this.capturectx.drawImage(
          img2,
          this.props.imgpicked.x0,
          //srcrc
          this.props.imgpicked.y0,
          Math.abs(this.props.imgpicked.x1 - this.props.imgpicked.x0),
          Math.abs(this.props.imgpicked.y1 - this.props.imgpicked.y0),
          0,
          0,
          this.capture.width,
          this.capture.height
          //dest
        );
        if (this.graphVideoSnip) {
          let imgdata = this.capturectx.getImageData(0, 0, this.capture.width, this.capture.height);
          let mapped = mapBitmapXIntensities(imgdata);
          graphXIntensities(
            this.capturectx,
            //this.capturegraphctx
            mapped.xrgbintensities,
            mapped.xintmax
          );
        }
        setTimeout(() => {
          requestAnimationFrame(async () => {
            this.continuousCapture(img2);
          });
        }, 33.3333);
      }
    }
    processCapture = (img2) => {
      let capture = this.createBitmapCanvasWithMenu(
        img2,
        this.querySelector("#capturelist"),
        "100%"
      );
      if (capture.timestamp) {
        this.captures[capture.timestamp] = capture;
      }
    };
    //pull the bitmap into canvas;
    canvasCapture(ev2) {
      if (this.props.mode === "img") {
        if (!this.img.src)
          return;
        createImageBitmap(
          this.img,
          this.props.imgpicked.x0,
          this.props.imgpicked.y0,
          Math.abs(this.props.imgpicked.x1 - this.props.imgpicked.x0),
          Math.abs(this.props.imgpicked.y1 - this.props.imgpicked.y0)
        ).then(this.processCapture);
      } else if (this.props.mode === "video") {
        if (!this.video.src)
          return;
        createImageBitmap(
          this.video,
          this.props.imgpicked.x0,
          this.props.imgpicked.y0,
          Math.abs(this.props.imgpicked.x1 - this.props.imgpicked.x0),
          Math.abs(this.props.imgpicked.y1 - this.props.imgpicked.y0)
        ).then(this.processCapture);
      }
    }
    correctForRatio = (el, desiredWidth, maxHeight, ratio) => {
      if (desiredWidth * ratio > maxHeight) {
        el.height = maxHeight;
        el.width = el.height / ratio;
      } else {
        el.width = desiredWidth;
        el.height = el.width * ratio;
      }
    };
    async createBitmapCanvasWithMenu(img2, parentNode, w2 = "320px", h = "180px", id = "") {
      let captureheight = "30%";
      let graphheight = "54%";
      if (!h.includes("%")) {
        let ext = `${h[h.length - 2]}${h[h.length - 1]}`;
        h = h.substring(0, h.length - 2);
        captureheight = 0.3 * parseFloat(h) + ext;
        graphheight = 0.54 * parseFloat(h) + ext;
      }
      let template = `
        <div id='${id}div' style='width:${w2}; max-height:${h}; border: 1px solid gold; border-radius:3px; padding:2px;'>
            <span style='height:6%;'>
                <input id='${id}title' type='text' value='${id}' placeholder='Name/Tag' style='padding:4px; font-size:8px; width:15%;'>
                <button id='setsample2' title='Compare as Sample 2' style='font-size:8px; float:right;'>S2</button>
                <button id='setsample1' title='Compare as Sample 1' style='font-size:8px; float:right;'>S1</button>
                <button id='setbaseline' title='Compare as Baseline' style='font-size:8px; float:right;'>B</button>
                <button id='savepng' title='Save PNG?' style='font-size:8px;'>\u{1F5BC}\uFE0F(png)</button>
                <button id='savecsv' title='Save CSV?' style='font-size:8px;'>\u{1F4C4}(csv)</button>
                <button id='savebmp' title='Save BMP?' style='font-size:8px;'>\u{1F5BC}\uFE0F(bmp)</button>
                <button id='backup' title='Backup (cache)?' style='font-size:8px;'>\u{1F4CB}
                </button><button  title='Close?' id='X' style='font-size:8px; float:right;'>\u274C</button>
                <button id='toggledisplay' title='Toggle display?' style='font-size:8px; float:right;'>\u{1F453}</button>
            </span><br>
            <canvas id='${id}capturecanvas' style='width:100%; max-height:${captureheight};'></canvas>
            <canvas id='${id}graphcanvas' style='width:100%; height:${graphheight}; background-color:black;'></canvas>
        </div><br>`;
      if (typeof parentNode === "string") {
        parentNode = document.getElementById(parentNode);
      }
      if (parentNode) {
        parentNode.insertAdjacentHTML("afterbegin", template);
        let canvas2 = document.querySelector("#" + id + "capturecanvas");
        canvas2.width = img2.width;
        canvas2.height = img2.height;
        let ctx = canvas2.getContext("2d");
        ctx.drawImage(img2, 0, 0);
        let input = document.querySelector("#" + id + "title");
        let graph = document.querySelector("#" + id + "graphcanvas");
        graph.width = graph.clientWidth;
        graph.height = graph.clientHeight;
        let gctx = graph.getContext("2d");
        let bmp = ctx.getImageData(0, 0, canvas2.width, canvas2.height);
        let mapped = mapBitmapXIntensities(bmp);
        graphXIntensities(gctx, mapped.xrgbintensities, mapped.xintmax);
        let capture = {
          node: canvas2.parentNode,
          parentNode,
          width: img2.width,
          height: img2.height,
          canvas: canvas2,
          context: ctx,
          graph,
          graphcontext: gctx,
          input,
          timestamp: Date.now(),
          mapped
        };
        if (id)
          this.labels[id] = capture;
        parentNode.querySelector("#setsample1").onclick = () => {
          this.addBitmapComparison(
            mapped,
            input.value,
            1,
            canvas2
          );
        };
        parentNode.querySelector("#setsample2").onclick = () => {
          this.addBitmapComparison(
            mapped,
            input.value,
            2,
            canvas2
          );
        };
        parentNode.querySelector("#setbaseline").onclick = () => {
          this.addBitmapComparison(
            mapped,
            input.value,
            3,
            canvas2
          );
        };
        parentNode.querySelector("#toggledisplay").onclick = () => {
          if (canvas2.style.display == "" && graph.style.display == "") {
            canvas2.style.display = "none";
          } else if (canvas2.style.display == "none") {
            canvas2.style.display = "";
            graph.style.display = "none";
          } else if (graph.style.display == "none") {
            graph.style.display = "";
          }
        };
        parentNode.querySelector("#backup").onclick = () => {
          backupData(capture.mapped, input.value + "_" + (/* @__PURE__ */ new Date()).toISOString());
        };
        parentNode.querySelector("#savepng").onclick = () => {
          let tmp = new OffscreenCanvas(capture.mapped.bitmap.width, capture.mapped.bitmap.height);
          tmp.getContext("2d").drawImage(img2, 0, 0);
          let reader = new FileReader();
          reader.addEventListener("load", function() {
            var hiddenElement = document.createElement("a");
            hiddenElement.href = reader.result;
            hiddenElement.target = "_blank";
            if (input.value !== "") {
              hiddenElement.download = input.value + "_" + (/* @__PURE__ */ new Date()).toISOString() + ".png";
            } else {
              hiddenElement.download = (/* @__PURE__ */ new Date()).toISOString() + ".png";
            }
            hiddenElement.click();
          }, false);
          tmp.convertToBlob({ type: "image/png" }).then((blob) => {
            reader.readAsDataURL(blob);
          });
        };
        parentNode.querySelector("#savebmp").onclick = () => {
          let dataurl = CanvasToBMP.ImageDatatoDataURL(
            reconstructImageData(
              capture.mapped.bitarr,
              capture.mapped.width,
              capture.mapped.height
            )
          );
          var hiddenElement = document.createElement("a");
          hiddenElement.href = dataurl;
          hiddenElement.target = "_blank";
          if (input.value !== "") {
            hiddenElement.download = input.value + "_" + (/* @__PURE__ */ new Date()).toISOString() + ".bmp";
          } else {
            hiddenElement.download = (/* @__PURE__ */ new Date()).toISOString() + ".bmp";
          }
          hiddenElement.click();
        };
        parentNode.querySelector("#savecsv").onclick = () => {
          dumpSpectrogramsToCSV(capture.mapped.xrgbintensities, input.value);
        };
        parentNode.querySelector("#X").onclick = () => {
          canvas2.parentNode.parentNode.removeChild(canvas2.parentNode);
        };
        return capture;
      }
      return void 0;
    }
    //pass results from mapBitmapXIntensities/graphXIntensities
    //spaghetti-in-progress
    async addBitmapComparison(mapped, title = (/* @__PURE__ */ new Date()).toISOString(), sample = 1, underlayimg = void 0) {
      if (sample !== 1 && sample !== 2 && sample !== 3)
        return;
      let canvas2;
      if (!title)
        title = (/* @__PURE__ */ new Date()).toISOString();
      let onsample = () => {
        if (sample === 1 || sample === 2) {
          if (this.comparing.sample1 && this.comparing.sample2) {
            let s2_s1 = this.querySelector("#s2-s1");
            s2_s1.height = s2_s1.clientHeight;
            s2_s1.width = s2_s1.clientWidth;
            this.comparing.s2_s1 = this.comparing.sample2.xrgbintensities.map((yrgbi, i2) => {
              if (!this.comparing.sample1.xrgbintensities[i2])
                return yrgbi;
              return {
                r: yrgbi.r - this.comparing.sample1.xrgbintensities[i2].r,
                g: yrgbi.g - this.comparing.sample1.xrgbintensities[i2].g,
                b: yrgbi.b - this.comparing.sample1.xrgbintensities[i2].b,
                i: yrgbi.i - this.comparing.sample1.xrgbintensities[i2].i
              };
            });
            this.querySelector("#s2-s1csv").onclick = () => {
              dumpSpectrogramsToCSV(this.comparing.s2_s1, "Difference_Sample1_vs_" + title);
            };
            graphXIntensities(s2_s1.getContext("2d"), this.comparing.s2_s1);
          }
        }
        if (sample === 1 || sample === 3) {
          if (this.comparing.sample1 && this.comparing.baseline) {
            let a1 = this.querySelector("#b-s1");
            a1.height = a1.clientHeight;
            a1.width = a1.clientWidth;
            this.comparing.a1 = this.comparing.baseline.xrgbintensities.map((yrgbi, i2) => {
              if (!this.comparing.sample1.xrgbintensities[i2])
                return yrgbi;
              return {
                r: yrgbi.r - this.comparing.sample1.xrgbintensities[i2].r,
                g: yrgbi.g - this.comparing.sample1.xrgbintensities[i2].g,
                b: yrgbi.b - this.comparing.sample1.xrgbintensities[i2].b,
                i: yrgbi.i - this.comparing.sample1.xrgbintensities[i2].i
              };
            });
            this.querySelector("#a1csv").onclick = () => {
              dumpSpectrogramsToCSV(this.comparing.a1, "BaselineCorrected_" + title);
            };
            graphXIntensities(a1.getContext("2d"), this.comparing.a1);
          }
        }
        if (sample === 2 || sample === 3) {
          if (this.comparing.sample2 && this.comparing.baseline) {
            let a2 = this.querySelector("#b-s2");
            a2.height = a2.clientHeight;
            a2.width = a2.clientWidth;
            this.comparing.a2 = this.comparing.baseline.xrgbintensities.map((yrgbi, i2) => {
              if (!this.comparing.sample2.xrgbintensities[i2])
                return yrgbi;
              return {
                r: yrgbi.r - this.comparing.sample2.xrgbintensities[i2].r,
                g: yrgbi.g - this.comparing.sample2.xrgbintensities[i2].g,
                b: yrgbi.b - this.comparing.sample2.xrgbintensities[i2].b,
                i: yrgbi.i - this.comparing.sample2.xrgbintensities[i2].i
              };
            });
            this.querySelector("#a2csv").onclick = () => {
              dumpSpectrogramsToCSV(this.comparing.a2, "BaselineCorrected_" + title);
            };
            graphXIntensities(a2.getContext("2d"), this.comparing.a2);
          }
        }
        if (this.comparing.sample1 && this.comparing.sample2 && this.comparing.baseline) {
          let d2_d1 = this.querySelector("#d2-d1");
          d2_d1.height = d2_d1.clientHeight;
          d2_d1.width = d2_d1.clientWidth;
          this.comparing.d2_d1 = this.comparing.a2.map((yrgbi, i2) => {
            if (!this.comparing.a1[i2])
              return yrgbi;
            return {
              r: yrgbi.r - this.comparing.a1[i2].r,
              g: yrgbi.g - this.comparing.a1[i2].g,
              b: yrgbi.b - this.comparing.a1[i2].b,
              i: yrgbi.i - this.comparing.a1[i2].i
            };
          });
          this.querySelector("#d2-d1csv").onclick = () => {
            dumpSpectrogramsToCSV(this.comparing.d2_d1, "D2minusD1_" + title);
          };
          graphXIntensities(d2_d1.getContext("2d"), this.comparing.d2_d1);
        }
      };
      if (sample === 1) {
        canvas2 = this.querySelector("#sample1");
        canvas2.width = mapped.width;
        canvas2.height = mapped.height;
        this.comparing.sample1 = mapped;
        this.querySelector("#sample1csv").onclick = () => {
          dumpSpectrogramsToCSV(mapped.xrgbintensities, "Sample1_" + title);
        };
        onsample();
      } else if (sample === 2) {
        canvas2 = this.querySelector("#sample2");
        canvas2.width = mapped.width;
        canvas2.height = mapped.height;
        this.comparing.sample2 = mapped;
        this.querySelector("#sample2csv").onclick = () => {
          dumpSpectrogramsToCSV(mapped.xrgbintensities, "Sample2_" + title);
        };
        onsample();
      } else if (sample === 3) {
        canvas2 = this.querySelector("#baseline");
        canvas2.width = mapped.width;
        canvas2.height = mapped.height;
        this.comparing.baseline = mapped;
        this.querySelector("#baselinecsv").onclick = () => {
          dumpSpectrogramsToCSV(mapped.xrgbintensities, "Baseline_" + title);
        };
        onsample();
      }
      canvas2.height = canvas2.clientHeight;
      canvas2.width = canvas2.clientWidth;
      let ctx = canvas2.getContext("2d");
      if (underlayimg)
        drawImage(ctx, underlayimg);
      graphXIntensities(
        ctx,
        mapped.xrgbintensities,
        mapped.xintmax
      );
      return canvas2;
    }
    getSavedData = () => {
      let parentNode = this.querySelector("#savedlist");
      getFilenames(void 0, "processed").then(
        (dir) => {
          dir.forEach((name) => {
            this.addSavedDataTile(parentNode, name);
          });
        }
      );
    };
    addSavedDataTile(parentNode, filename) {
      parentNode.insertAdjacentHTML("afterbegin", `
            <div id='${filename}' style='border:1px solid white; border-radius:3px; color: white;'>
                <div>${filename}</div>
                <button id='reconstruct'>R</button>
                <button id='delete'>X</button>
            </div>
        `);
      parentNode.querySelector("#reconstruct").onclick = () => {
        readFileAsText(filename, "processed").then((text) => {
          let reconstructed = JSON.parse(text);
        });
      };
      parentNode.querySelector("#delete").onclick = () => {
        deleteFile(
          filename,
          "processed",
          () => {
            parentNode.removeChild(parentNode.querySelector("#" + filename));
          }
        );
      };
    }
  };
  Spectrometer.addElement("spectrometer-node");

  // src/app.js
  var elm = document.createElement("spectrometer-node");
  document.body.appendChild(elm);
})();
/*! canvas-to-bmp version 1.0 ALPHA https://stackoverflow.com/questions/29652307/canvas-unable-to-generate-bmp-image-dataurl-in-chrome
    (c) 2015 Ken "Epistemex" Fyrstenberg, modified by Josh Brewster 2022
    MIT License (this header required)
*/
/*! Bundled license information:

browserfs/dist/browserfs.js:
  (*!
  * The buffer module from node.js, for the browser.
  *
  * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
  * @license  MIT
  *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/
